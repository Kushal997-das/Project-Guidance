"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Databases = exports.getDefaultSettings = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const pouchdb_1 = __importDefault(require("pouchdb"));
const Base = __importStar(require("./base"));
const config_1 = __importDefault(require("@truffle/config"));
const getDefaultSettings = () => ({
    directory: path_1.default.join(config_1.default.getTruffleDataDirectory(), ".db")
});
exports.getDefaultSettings = getDefaultSettings;
class Databases extends Base.Databases {
    setup(settings) {
        // ensure db files reside in a path that ends with indexeddb
        // whether specified in config, or using default
        this.directory = path_1.default.join(settings.directory, "indexeddb");
        fs_extra_1.default.ensureDirSync(this.directory);
    }
    createDatabase(resource) {
        const savePath = path_1.default.resolve(this.directory, resource);
        return new pouchdb_1.default(savePath); // uses IndexedDB
    }
}
exports.Databases = Databases;
//# sourceMappingURL=indexeddb.js.map