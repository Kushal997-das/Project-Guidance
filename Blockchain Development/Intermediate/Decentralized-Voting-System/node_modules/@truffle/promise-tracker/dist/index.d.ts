export declare function tracked<T extends Object>(target: T, key: string | Symbol, descriptor: PropertyDescriptor): {
    value: (...args: any[]) => any;
    configurable?: boolean | undefined;
    enumerable?: boolean | undefined;
    writable?: boolean | undefined;
    get?(): any;
    set?(v: any): void;
};
export interface WaitForOutstandingPromiseOptions<T> {
    catchHandler?: (err?: any) => void;
    target?: T;
}
export declare function waitForOutstandingPromises<T extends Object>(options?: WaitForOutstandingPromiseOptions<T>): Promise<void>;
export interface GetOutstandingPromiseOptions<T> {
    target?: T;
}
export declare function getOutstandingPromises<T extends Object>(options: GetOutstandingPromiseOptions<T>): Promise<any>[];
