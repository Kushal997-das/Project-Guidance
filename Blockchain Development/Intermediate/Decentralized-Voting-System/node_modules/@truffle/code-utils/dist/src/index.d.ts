import { OpcodeTable } from "./opcodes";
export type { OpcodeTable };
import type { Instruction, DisassemblyOptions } from "./types";
export type { Instruction, DisassemblyOptions };
/**
 * parseCode - return a list of instructions given a 0x-prefixed code string.
 *
 * The optional second options argument allows two options; both are ways of
 * attempting to limit the disassembly to only the code section rather than the
 * data section.  If maxInstructionCount is used, the disassembly will be limited
 * to the specified number of instructions (one may pass in here the number of
 * instructions in the corresponding source map).
 *
 * If attemptStripMetadata is used, we will attempt to strip the metadata at the
 * end of the code.  This is not reliable, and should be avoided if better
 * alternatives are available.  It may be particularly unreliable when dealing with
 * constructors that have had arguments attached to the end!
 *
 * These options can be combined, although I'm not sure why you'd want to.
 *
 * @param  {String} hexString Hex string representing the code
 * @return Array               Array of instructions
 */
export declare function parseCode(hexString: string, { maxInstructionCount, attemptStripMetadata }?: DisassemblyOptions): Instruction[];
