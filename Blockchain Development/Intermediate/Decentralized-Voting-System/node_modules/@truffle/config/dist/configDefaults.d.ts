import TruffleConfig from "./";
export declare const getInitialConfig: ({ truffleDirectory, workingDirectory, network }: {
    truffleDirectory?: string | undefined;
    workingDirectory?: string | undefined;
    network?: string | undefined;
}) => {
    truffle_directory: string;
    working_directory: string;
    network: string | undefined;
    networks: {
        dashboard: {
            network_id: string;
            networkCheckTimeout: number;
            url: string;
            skipDryRun: boolean;
        };
    };
    verboseRpc: boolean;
    solidityLog: {
        displayPrefix: string;
        preventConsoleLogMigration: boolean;
    };
    debugGlobal: string;
    gas: null;
    gasPrice: null;
    maxFeePerGas: null;
    maxPriorityFeePerGas: null;
    type: undefined;
    from: null;
    confirmations: number;
    timeoutBlocks: number;
    production: boolean;
    skipDryRun: boolean;
    build: null;
    resolver: null;
    artifactor: null;
    quiet: boolean;
    dashboard: {
        host: string;
        port: number;
        autoOpen: boolean;
        verbose: boolean;
    };
    ens: {
        enabled: boolean;
        registryAddress: undefined;
    };
    mocha: {
        bail: boolean;
        grep: null;
    };
    compilers: {
        solc: {
            settings: {
                optimizer: {
                    enabled: boolean;
                    runs: number;
                };
                remappings: never[];
            };
        };
        vyper: {
            settings: {};
        };
    };
    console: {
        require: null;
    };
    logger: Console;
};
export declare const configProps: ({ configObject }: {
    configObject: TruffleConfig;
}) => {
    truffle_directory(): void;
    working_directory(): void;
    network(): void;
    networks(): void;
    verboseRpc(): void;
    solidityLog(): void;
    build(): void;
    resolver(): void;
    artifactor(): void;
    dashboard(): void;
    logger(): void;
    compilers(): void;
    ens(): void;
    console(): void;
    mocha(): void;
    quiet(): void;
    debugGlobal(): void;
    build_directory: {
        default: () => string;
        transform: (value: string) => string;
    };
    contracts_directory: {
        default: () => string;
        transform: (value: string) => string;
    };
    contracts_build_directory: {
        default: () => string;
        transform: (value: string) => string;
    };
    migrations_directory: {
        default: () => string;
        transform: (value: string) => string;
    };
    migrations_file_extension_regexp(): RegExp;
    test_directory: {
        default: () => string;
        transform: (value: string) => string;
    };
    test_file_extension_regexp(): RegExp;
    example_project_directory: {
        default: () => string;
        transform: (value: string) => string;
    };
    network_id: {
        get(): any;
        set(): never;
    };
    network_config: {
        get(): any;
        set(): never;
    };
    from: {
        get(): any;
        set(): never;
    };
    gas: {
        get(): any;
        set(): never;
    };
    gasPrice: {
        get(): any;
        set(): never;
    };
    maxFeePerGas: {
        get(): any;
        set(): never;
    };
    maxPriorityFeePerGas: {
        get(): any;
        set(): never;
    };
    type: {
        get(): any;
        set(): never;
    };
    provider: {
        get(): any;
        set(): never;
    };
    confirmations: {
        get(): any;
        set(): never;
    };
    production: {
        get(): any;
        set(): never;
    };
    timeoutBlocks: {
        get(): any;
        set(): never;
    };
    ensRegistry: {
        get(): {
            address: any;
        };
        set(): never;
    };
};
