import { SpinnerOptions, StopAllStatus, Color } from "@trufflesuite/spinnies";
export declare class Spinner {
    name: string;
    constructor(name: string, options: Partial<SpinnerOptions>);
    constructor(name: string, text: string);
    /**
     * Stops all spinners
     * @param status the terminal state of the spinners that have been stopped (one of "stopped", "succeed", or "fail").
     */
    static stopAll(status?: StopAllStatus): void;
    /**
     * @returns false if all spinners have succeeded, failed or have been stopped
     */
    static hasActiveSpinners(): boolean;
    /**
     * Removes this spinner from display. After this method is called, other modifications to this spinner object have no effect.
     */
    remove(): void;
    /**
     * Stops the spinner without a failed or succeeded status
     */
    stop(text?: string): void;
    stop(options?: Partial<SpinnerOptions>): void;
    /**
     * Stops the spinner and sets its status to succeeded.
     */
    succeed(text?: string): void;
    succeed(options?: Partial<SpinnerOptions>): void;
    /**
     * Stops the spinner and sets its status to fail.
     */
    fail(text?: string): void;
    fail(options?: Partial<SpinnerOptions>): void;
    /**
     * Stops the spinner and sets its status to warn.
     */
    warn(text?: string): void;
    warn(options?: Partial<SpinnerOptions>): void;
    /**
     * @returns string the spinner prefix used on success
     */
    static get succeedPrefix(): string;
    /**
     * Updates the spinner success decoration. Updates apply to all spinning
     * spinners, and do not apply to spinners that have already stopped.
     */
    static set succeedPrefix(value: string);
    /**
     * @returns string the spinner prefix used on failure
     */
    static get failPrefix(): string;
    /**
     * Updates the spinner fail decoration. Updates apply to all spinning
     * spinners, and do not apply to spinners that have already stopped.
     */
    static set failPrefix(value: string);
    /**
     * @returns string the text currently displayed by this spinner, without the
     * spinner decoration
     */
    get text(): string | undefined;
    /**
     * Updates the text displayed by this spinner
     */
    set text(value: string | undefined);
    /**
     * @returns the indent level of this spinner, expressed as a number of spaces
     */
    get indent(): number | undefined;
    /**
     * Sets the indent level of this spinner, expressed as a number of spaces
     */
    set indent(value: number | undefined);
    /**
     * @returns string the `chalk` color of this spinner's text
     */
    get textColor(): Color | undefined;
    /**
     * updates the `chalk` color of this spinner's text
     */
    set textColor(value: Color | undefined);
    /**
     * @returns string the `chalk` color of this spinner decoration
     */
    get prefixColor(): Color | undefined;
    /**
     * updates the `chalk` color of this spinner's decoration
     */
    set prefixColor(value: Color | undefined);
    /**
     * @returns string the prefix used when this spinner is stopped
     */
    get stoppedPrefix(): string | undefined;
    /**
     * updates the prefix used when this spinner is stopped
     */
    set stoppedPrefix(value: string | undefined);
    /**
     * @returns string the prefix used on success
     */
    get succeedPrefix(): string;
    /**
     * updates the prefix used on success
     */
    set succeedPrefix(value: string);
    /**
     * @returns string the prefix used on failure
     */
    get failPrefix(): string;
    /**
     * updates the prefix used on failure
     */
    set failPrefix(value: string);
    /**
     * @returns string the prefix used on warn
     */
    get warnPrefix(): string;
    /**
     * updates the prefix used on warn
     */
    set warnPrefix(value: string);
    /**
     * @returns boolean `true` when the spinner is active and spinning, otherwise
     * `false`
     */
    get isSpinning(): boolean;
    private _mutateOptions;
}
