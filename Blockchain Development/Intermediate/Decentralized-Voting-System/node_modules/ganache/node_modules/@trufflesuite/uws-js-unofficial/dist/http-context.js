"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpContext = void 0;
const http_1 = __importDefault(require("http"));
const ws_1 = __importDefault(require("ws"));
const http_router_1 = require("./http-router");
const websocket_1 = require("./websocket");
const UWS_DEFAULT_MAX_PAYLOAD_LENGTH = 16 * 1024;
class HttpContext {
    constructor() {
        this.sockets = new Set();
        this.router = new http_router_1.HttpRouter();
        this.closed = false;
        this.http = null;
        this.wsServer = null;
        this.wsBehaviors = new Map();
    }
    onHttp(method, pattern, handler, upgrade = false) {
        // Todo: This is ugly, fix
        let methods;
        if (method === "*") {
            methods = this.router.methods;
        }
        else {
            methods = [method];
        }
        this.router.add(methods, pattern.toString(), (r) => {
            const user = r.getUserData();
            if (user === null) {
                throw new Error("Could not retrieve user data; this should not happen.");
            }
            user.httpRequest.setYield(false);
            user.httpRequest.setParameters(r.getParameters());
            /* Middleware? Automatically respond to expectations */
            const expect = user.httpRequest.getHeader("expect");
            if (expect != null && expect == "100-continue") {
                user.httpResponse.writeContinue();
            }
            handler(user.httpResponse, user.httpRequest);
            /* If any handler yielded, the router will keep looking for a suitable handler. */
            if (user.httpRequest.getYield()) {
                return false;
            }
            return true;
        }, method === "*"
            ? this.router.LOW_PRIORITY
            : upgrade
                ? this.router.HIGH_PRIORITY
                : this.router.MEDIUM_PRIORITY);
    }
    address() {
        // ganache doesn't support listening on a pipe or Unix domain socket,
        // so `this.http.address()` can never return a string.
        return this.http ? this.http.address() : null;
    }
    onWs(pattern, behavior) {
        // We only need to create the WebSocket Server once, but we shouldn't
        // create it if the user never calls `TemplatedApp.ws(...)`
        if (!this.wsServer) {
            const maxPayloadLength = behavior && "maxPayloadLength" in behavior
                ? behavior.maxPayloadLength
                : UWS_DEFAULT_MAX_PAYLOAD_LENGTH;
            this.wsServer = new ws_1.default.Server({
                // `noServer: true` is necessary for us to be able to call `handleUpgrade`
                // called in `TemplatedApp.upgradeHandler`
                noServer: true,
                maxPayload: maxPayloadLength,
            });
        }
        this.wsBehaviors.set(pattern, behavior);
    }
    handleRequest(req, res) {
        this.router.setUserData(req, res);
        if (!req.method ||
            !req.url ||
            !this.router.route(req.method.toLowerCase(), req.url)) {
            res.destroy();
            return null;
        }
    }
    handleHttpUpgrade(request, socket, head) {
        const pathname = request.url;
        if (this.wsServer !== null) {
            const patterns = this.wsBehaviors.keys();
            for (const pattern of patterns) {
                if (pathname === pattern) {
                    const behavior = this.wsBehaviors.get(pattern);
                    if (typeof behavior.upgrade === "function") {
                        // TODO: custom upgrade handler functionality isn't required
                        // yet in Ganache, so this isn't implemented currently
                        throw new Error("not implemented");
                    }
                    else {
                        this.wsServer.handleUpgrade(request, socket, head, (internalWs) => {
                            const ws = new websocket_1.WebSocket(internalWs);
                            ws.initialize(behavior);
                            this.wsServer.emit("connection", internalWs, request);
                        });
                    }
                    break;
                }
            }
        }
        else {
            socket.end("HTTP/1.1 400 Unexpected server response\n\n");
        }
    }
    listen(host, port, callback) {
        const server = (this.http = http_1.default.createServer(this.handleRequest.bind(this)));
        server.on("connection", (socket) => {
            server.once("close", () => {
                this.sockets.delete(socket);
            });
        });
        server.on("upgrade", this.handleHttpUpgrade.bind(this));
        const handleError = (err) => {
            if (err.syscall === "listen") {
                server.removeListener("error", handleError);
                callback(false);
            }
            else
                throw err;
        };
        server.on("error", handleError);
        server.on("listening", () => server.removeListener("error", handleError));
        const options = { port, exclusive: true };
        if (host) {
            options.host = host.toString();
        }
        server.listen(options, () => {
            this.closed = false;
            callback(this);
        });
    }
    close(cb) {
        this.closed = true;
        for (const socket of this.sockets) {
            socket.destroy();
            this.sockets.delete(socket);
        }
        if (this.wsServer) {
            this.wsServer.close();
        }
        if (this.http) {
            this.http.close(() => {
                this.http = null;
                if (cb) {
                    cb();
                }
            });
        }
        else {
            if (cb) {
                cb();
            }
        }
    }
}
exports.HttpContext = HttpContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1jb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZhbGxiYWNrL2h0dHAtY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxnREFBNkQ7QUFHN0QsNENBQW1DO0FBRW5DLCtDQUEyQztBQUUzQywyQ0FBd0M7QUFFeEMsTUFBTSw4QkFBOEIsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBRWpELE1BQWEsV0FBVztJQU90QjtRQW9JUSxZQUFPLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQW5JbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHdCQUFVLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxFQUE0QyxDQUFDO0lBQ3pFLENBQUM7SUFFTSxNQUFNLENBQ1gsTUFBb0IsRUFDcEIsT0FBeUIsRUFDekIsT0FBb0IsRUFDcEIsVUFBbUIsS0FBSztRQUV4QiwwQkFBMEI7UUFDMUIsSUFBSSxPQUEwQixDQUFDO1FBQy9CLElBQUksTUFBTSxLQUFLLEdBQUcsRUFBRTtZQUNsQixPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDL0I7YUFBTTtZQUNMLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3BCO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQ2IsT0FBTyxFQUNQLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFDbEIsQ0FBQyxDQUFhLEVBQUUsRUFBRTtZQUNoQixNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFN0IsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUNqQixNQUFN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