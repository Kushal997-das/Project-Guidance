"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocket = void 0;
const TOO_BIG_MESSAGE = Buffer.from("Received too big message", "utf8");
/**
 * Converts a buffer to an `ArrayBuffer`.
 *
 * @param buf The buffer to convert
 * @return Converted buffer
 * @public
 */
function toArrayBuffer(buf) {
    if (buf.byteLength === buf.buffer.byteLength) {
        return buf.buffer;
    }
    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
}
class WebSocket {
    constructor(internalWs) {
        this._fragBinState = false;
        this.internalWs = internalWs;
        // `nodebuffer` is already the default, but I just wanted to be explicit
        // here because when `nodebuffer` is the binaryType the `message` event's
        // data type is guaranteed to be a `Buffer`. We don't need to check for
        // different types of data.
        // I mention all this because if `arraybuffer` or `fragment` is used for the
        // binaryType the `"message"` event's `data` may end up being
        // `ArrayBuffer | Buffer`, or `Buffer[] | Buffer`, respectively.
        internalWs.binaryType = "nodebuffer";
    }
    initialize(behavior) {
        this.internalWs.removeAllListeners();
        if (typeof behavior.open === "function") {
            behavior.open(this);
        }
        this.internalWs.on("error", (error) => {
            // if max payload size is exceed we want to match uWS error handling.
            // It propagates the error with code `1006` and message "Received too big
            // message".
            if (error.message === "Max payload size exceeded") {
                this.internalWs._closeCode = 1006;
                this.internalWs._closeMessage = TOO_BIG_MESSAGE;
            }
            else {
                throw error;
            }
        });
        this.internalWs.on("message", (message, isBinary) => {
            if (typeof behavior.message === "function") {
                behavior.message(this, toArrayBuffer(message), isBinary);
            }
        });
        // TODO: there is no "drain" event for `ws`
        // this currently isn't used by ganache so moving along
        this.internalWs.on("close", (code, reason) => {
            if (typeof behavior.close === "function") {
                const buf = reason ? toArrayBuffer(reason) : new ArrayBuffer(0);
                behavior.close(this, code, buf);
            }
            this.internalWs.removeAllListeners(); // may be redundant
        });
        this.internalWs.on("ping", (data) => {
            if (typeof behavior.ping === "function") {
                behavior.ping(this, data);
            }
        });
        this.internalWs.on("pong", (data) => {
            if (typeof behavior.pong === "function") {
                behavior.pong(this, data);
            }
        });
    }
    send(message, isBinary, compress) {
        this.internalWs.send(message, {
            binary: isBinary,
            compress,
        });
        return 1;
    }
    sendFirstFragment(message, isBinary, compress = false) {
        this._fragBinState = isBinary;
        this.internalWs.send(message, { fin: false, binary: isBinary, compress });
        return true;
    }
    sendFragment(message, compress = false) {
        this.internalWs.send(message, {
            fin: false,
            binary: this._fragBinState,
            compress,
        });
        return true;
    }
    sendLastFragment(message, compress = false) {
        this.internalWs.send(message, {
            fin: true,
            binary: this._fragBinState,
            compress,
        });
        return true;
    }
    getBufferedAmount() {
        return this.internalWs.bufferedAmount;
    }
    end(code, shortMessage) {
        this.internalWs.close(code, shortMessage.toString());
        return this;
    }
    close() {
        this.internalWs.terminate();
        this.internalWs.removeAllListeners(); // may be redundant
        return this;
    }
    ping(message) {
        this.internalWs.ping(message);
        return 1;
    }
    // TODO this isn't currently necessary
    // so we're not implementing it yet
    subscribe(topic) {
        return false;
    }
    // TODO this isn't currently necessary
    // so we're not implementing it yet
    isSubscribed() {
        return false;
    }
    // TODO this isn't currently necessary
    // so we're not implementing it yet
    getTopics() {
        return [];
    }
    // TODO this isn't currently necessary
    // so we're not implementing it yet
    unsubscribe(topic) {
        return false;
    }
    // TODO this isn't currently necessary
    // so we're not implementing it yet
    unsubscribeAll() {
        return;
    }
    // TODO this isn't currently necessary
    // so we're not implementing it yet
    publish(topic, message, isBinary, compress) {
        return false;
    }
    cork(cb) {
        cb();
        return this;
    }
    getUserData() {
        throw new Error("Not implemented");
    }
    // TODO this isn't currently necessary
    // so we're not implementing it yet
    getRemoteAddress() {
        return new ArrayBuffer(0);
    }
    getRemoteAddressAsText() {
        const url = this.internalWs.url;
        const buf = new ArrayBuffer(url.length);
        const bufView = new Uint8Array(buf);
        for (let i = 0; i < url.length; i++) {
            bufView[i] = url.charCodeAt(i);
        }
        return buf;
    }
}
exports.WebSocket = WebSocket;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZhbGxiYWNrL3dlYnNvY2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQSxNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBRXhFOzs7Ozs7R0FNRztBQUNILFNBQVMsYUFBYSxDQUFDLEdBQVc7SUFDaEMsSUFBSSxHQUFHLENBQUMsVUFBVSxLQUFLLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1FBQzVDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQztLQUNuQjtJQUVELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMzRSxDQUFDO0FBRUQsTUFBYSxTQUFTO0lBR3BCLFlBQVksVUFBNkI7UUFzRWpDLGtCQUFhLEdBQVksS0FBSyxDQUFDO1FBckVyQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3Qix3RUFBd0U7UUFDeEUseUVBQXlFO1FBQ3pFLHVFQUF1RTtRQUN2RSwyQkFBMkI7UUFDM0IsNEVBQTRFO1FBQzVFLDZEQUE2RDtRQUM3RCxnRUFBZ0U7UUFDaEUsVUFBVSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUM7SUFDdkMsQ0FBQztJQUVELFVBQVUsQ0FBQyxRQUFxQztRQUM5QyxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFFckMsSUFBSSxPQUFPLFFBQVEsQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUFFO1lBQ3ZDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckI7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZ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