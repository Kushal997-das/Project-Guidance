{
  "name": "@microsoft/api-extractor-model",
  "version": "7.16.0",
  "description": "A helper library for loading and saving the .api.json files created by API Extractor",
  "repository": {
    "type": "git",
    "url": "https://github.com/microsoft/rushstack.git",
    "directory": "apps/api-extractor-model"
  },
  "homepage": "https://api-extractor.com",
  "main": "lib/index.js",
  "typings": "dist/rollup.d.ts",
  "license": "MIT",
  "dependencies": {
    "@microsoft/tsdoc": "0.13.2",
    "@microsoft/tsdoc-config": "~0.15.2",
    "@rushstack/node-core-library": "3.45.1"
  },
  "devDependencies": {
    "@rushstack/eslint-config": "2.5.2",
    "@rushstack/heft": "0.44.2",
    "@rushstack/heft-node-rig": "1.7.1",
    "@types/heft-jest": "1.0.1",
    "@types/node": "12.20.24"
  },
  "scripts": {
    "build": "heft build --clean",
    "_phase:build": "heft build --clean",
    "_phase:test": "heft test --no-build"
  },
  "readme": "# @microsoft/api-extractor-model\n\nUse this library to read and write *.api.json files as defined by the [API Extractor](https://api-extractor.com/) tool.\nThese files are used to generate a documentation website for your TypeScript package.  The files store the\nAPI signatures and doc comments that were extracted from your package.\n\nAPI documentation for this package: https://rushstack.io/pages/api/api-extractor-model/\n\n## Example Usage\n\nThe following code sample shows how to load `example.api.json`, which would be generated by API Extractor\nwhen it analyzes a hypothetical NPM package called `example`:\n\n```ts\nimport { ApiModel, ApiPackage } from '@microsoft/api-extractor-model';\n\nconst apiModel: ApiModel = new ApiModel();\nconst apiPackage: ApiPackage = apiModel.loadPackage('example.api.json');\n\nfor (const member of apiPackage.members) {\n  console.log(member.displayName);\n}\n```\n\nThe `ApiModel` is acts as a container for various packages that are loaded and operated on as a group.\nFor example, a documentation tool may need to resolve `@link` references across different packages.\nIn this case we would load the various packages into the `ApiModel`, and then use\nthe `ApiModel.resolveDeclarationReference()` to resolve the `@link` targets.\n\nThe data structure forms a tree of various classes that start with the `Api` prefix.  The nesting hierarchy\nmight look like this:\n\n```\n- ApiModel\n  - ApiPackage\n    - ApiEntryPoint\n      - ApiClass\n        - ApiMethod\n        - ApiProperty\n      - ApiEnum\n        - ApiEnumMember\n      - ApiInterface\n        - ApiMethodSignature\n        - ApiPropertySignature\n      - ApiNamespace\n        - (ApiClass, ApiEnum, ApiInterface, ...)\n```\n\nYou can use the `ApiItem.members` property to traverse this tree.\n\nNote that the non-abstract classes (e.g. `ApiClass`, `ApiEnum`, `ApiInterface`, etc.) use\nTypeScript \"mixin\" functions (e.g. `ApiDeclaredItem`, `ApiItemContainerMixin`, etc.) to add various\nfeatures that cannot be represented as a normal inheritance chain (since TypeScript does not allow a child class\nto extend more than one base class).  The \"mixin\" is a TypeScript merged declaration with three components:\nthe function that generates a subclass, an interface that describes the members of the subclass, and\na namespace containing static members of the class.\n\n> For a complete project that uses these APIs to generate an API reference web site,\n> see the [@microsoft/api-documenter](https://www.npmjs.com/package/@microsoft/api-documenter) source code.\n\n## Links\n\n- [CHANGELOG.md](\n  https://github.com/microsoft/rushstack/blob/master/apps/api-extractor-model/CHANGELOG.md) - Find\n  out what's new in the latest version\n- [API Reference](https://rushstack.io/pages/api/api-extractor-model/)\n\nAPI Extractor is part of the [Rush Stack](https://rushstack.io/) family of projects.\n"
}