{"version":3,"file":"ApiPropertyItem.js","sourceRoot":"","sources":["../../src/items/ApiPropertyItem.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,8DAA0G;AAC1G,qEAA8F;AAC9F,yDAA4E;AAE5E,iEAAwF;AAkBxF;;;;GAIG;AACH,MAAa,eAAgB,SAAQ,IAAA,2BAAY,EAAC,IAAA,uCAAkB,EAAC,IAAA,mCAAgB,EAAC,iCAAe,CAAC,CAAC,CAAC;IAMtG,YAAmB,OAAgC;QACjD,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;IAC/E,CAAC;IAED,gBAAgB;IACT,MAAM,CAAC,iBAAiB,CAC7B,OAAyC,EACzC,OAA4B,EAC5B,UAAgC;QAEhC,KAAK,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;QAEtD,OAAO,CAAC,sBAAsB,GAAG,UAAU,CAAC,sBAAsB,CAAC;IACrE,CAAC;IAED;;;;;;;;;OASG;IACH,IAAW,eAAe;QACxB,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC;SAC3D;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,gBAAgB;IACT,aAAa,CAAC,UAAyC;QAC5D,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAEhC,UAAU,CAAC,sBAAsB,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC;IAC1E,CAAC;CACF;AA9CD,0CA8CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { Excerpt, IExcerptTokenRange } from '../mixins/Excerpt';\nimport { IApiDeclaredItemOptions, ApiDeclaredItem, IApiDeclaredItemJson } from '../items/ApiDeclaredItem';\nimport { ApiReleaseTagMixin, IApiReleaseTagMixinOptions } from '../mixins/ApiReleaseTagMixin';\nimport { IApiNameMixinOptions, ApiNameMixin } from '../mixins/ApiNameMixin';\nimport { DeserializerContext } from '../model/DeserializerContext';\nimport { ApiOptionalMixin, IApiOptionalMixinOptions } from '../mixins/ApiOptionalMixin';\n\n/**\n * Constructor options for {@link ApiPropertyItem}.\n * @public\n */\nexport interface IApiPropertyItemOptions\n  extends IApiNameMixinOptions,\n    IApiReleaseTagMixinOptions,\n    IApiOptionalMixinOptions,\n    IApiDeclaredItemOptions {\n  propertyTypeTokenRange: IExcerptTokenRange;\n}\n\nexport interface IApiPropertyItemJson extends IApiDeclaredItemJson {\n  propertyTypeTokenRange: IExcerptTokenRange;\n}\n\n/**\n * The abstract base class for {@link ApiProperty} and {@link ApiPropertySignature}.\n *\n * @public\n */\nexport class ApiPropertyItem extends ApiNameMixin(ApiReleaseTagMixin(ApiOptionalMixin(ApiDeclaredItem))) {\n  /**\n   * An {@link Excerpt} that describes the type of the property.\n   */\n  public readonly propertyTypeExcerpt: Excerpt;\n\n  public constructor(options: IApiPropertyItemOptions) {\n    super(options);\n\n    this.propertyTypeExcerpt = this.buildExcerpt(options.propertyTypeTokenRange);\n  }\n\n  /** @override */\n  public static onDeserializeInto(\n    options: Partial<IApiPropertyItemOptions>,\n    context: DeserializerContext,\n    jsonObject: IApiPropertyItemJson\n  ): void {\n    super.onDeserializeInto(options, context, jsonObject);\n\n    options.propertyTypeTokenRange = jsonObject.propertyTypeTokenRange;\n  }\n\n  /**\n   * Returns true if this property should be documented as an event.\n   *\n   * @remarks\n   * The `@eventProperty` TSDoc modifier can be added to readonly properties to indicate that they return an\n   * event object that event handlers can be attached to.  The event-handling API is implementation-defined, but\n   * typically the return type would be a class with members such as `addHandler()` and `removeHandler()`.\n   * The documentation should display such properties under an \"Events\" heading instead of the\n   * usual \"Properties\" heading.\n   */\n  public get isEventProperty(): boolean {\n    if (this.tsdocComment) {\n      return this.tsdocComment.modifierTagSet.isEventProperty();\n    }\n    return false;\n  }\n\n  /** @override */\n  public serializeInto(jsonObject: Partial<IApiPropertyItemJson>): void {\n    super.serializeInto(jsonObject);\n\n    jsonObject.propertyTypeTokenRange = this.propertyTypeExcerpt.tokenRange;\n  }\n}\n"]}