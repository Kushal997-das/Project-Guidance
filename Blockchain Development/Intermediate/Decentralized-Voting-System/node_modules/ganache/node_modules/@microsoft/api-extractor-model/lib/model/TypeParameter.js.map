{"version":3,"file":"TypeParameter.js","sourceRoot":"","sources":["../../src/model/TypeParameter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAI3D,kEAA+D;AAe/D;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAa,aAAa;IAoCxB,YAAmB,OAA8B;QAC/C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACnD,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;QACrD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,IAAW,mBAAmB;QAC5B,IAAI,IAAI,CAAC,OAAO,YAAY,qCAAiB,EAAE;YAC7C,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;gBAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC1E;SACF;IACH,CAAC;CACF;AArDD,sCAqDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as tsdoc from '@microsoft/tsdoc';\n\nimport { ApiDocumentedItem } from '../items/ApiDocumentedItem';\nimport { Excerpt } from '../mixins/Excerpt';\nimport { ApiTypeParameterListMixin } from '../mixins/ApiTypeParameterListMixin';\n\n/**\n * Constructor options for {@link TypeParameter}.\n * @public\n */\nexport interface ITypeParameterOptions {\n  name: string;\n  constraintExcerpt: Excerpt;\n  defaultTypeExcerpt: Excerpt;\n  parent: ApiTypeParameterListMixin;\n}\n\n/**\n * Represents a named type parameter for a generic declaration.\n *\n * @remarks\n *\n * `TypeParameter` represents a TypeScript declaration such as `T` in this example:\n *\n * ```ts\n * interface IIdentifier {\n *     getCode(): string;\n * }\n *\n * class BarCode implements IIdentifier {\n *     private _value: number;\n *     public getCode(): string { return this._value.toString(); }\n * }\n *\n * class Book<TIdentifier extends IIdentifier = BarCode> {\n *     public identifier: TIdentifier;\n * }\n * ```\n *\n * `TypeParameter` objects belong to the {@link (ApiTypeParameterListMixin:interface).typeParameters} collection.\n *\n * @public\n */\nexport class TypeParameter {\n  /**\n   * An {@link Excerpt} that describes the base constraint of the type parameter.\n   *\n   * @remarks\n   * In the example below, the `constraintExcerpt` would correspond to the `IIdentifier` subexpression:\n   *\n   * ```ts\n   * class Book<TIdentifier extends IIdentifier = BarCode> {\n   *     public identifier: TIdentifier;\n   * }\n   * ```\n   */\n  public readonly constraintExcerpt: Excerpt;\n\n  /**\n   * An {@link Excerpt} that describes the default type of the type parameter.\n   *\n   * @remarks\n   * In the example below, the `defaultTypeExcerpt` would correspond to the `BarCode` subexpression:\n   *\n   * ```ts\n   * class Book<TIdentifier extends IIdentifier = BarCode> {\n   *     public identifier: TIdentifier;\n   * }\n   * ```\n   */\n  public readonly defaultTypeExcerpt: Excerpt;\n\n  /**\n   * The parameter name.\n   */\n  public name: string;\n\n  private _parent: ApiTypeParameterListMixin;\n\n  public constructor(options: ITypeParameterOptions) {\n    this.name = options.name;\n    this.constraintExcerpt = options.constraintExcerpt;\n    this.defaultTypeExcerpt = options.defaultTypeExcerpt;\n    this._parent = options.parent;\n  }\n\n  /**\n   * Returns the `@typeParam` documentation for this parameter, if present.\n   */\n  public get tsdocTypeParamBlock(): tsdoc.DocParamBlock | undefined {\n    if (this._parent instanceof ApiDocumentedItem) {\n      if (this._parent.tsdocComment) {\n        return this._parent.tsdocComment.typeParams.tryGetBlockByName(this.name);\n      }\n    }\n  }\n}\n"]}