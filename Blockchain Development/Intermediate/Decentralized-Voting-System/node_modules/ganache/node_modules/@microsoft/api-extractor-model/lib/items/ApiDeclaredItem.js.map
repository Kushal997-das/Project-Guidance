{"version":3,"file":"ApiDeclaredItem.js","sourceRoot":"","sources":["../../src/items/ApiDeclaredItem.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.s\n\nimport { DeclarationReference } from '@microsoft/tsdoc/lib-commonjs/beta/DeclarationReference';\nimport { ApiDocumentedItem, IApiDocumentedItemJson, IApiDocumentedItemOptions } from './ApiDocumentedItem';\nimport { Excerpt, ExcerptToken, IExcerptTokenRange, IExcerptToken } from '../mixins/Excerpt';\nimport { DeserializerContext } from '../model/DeserializerContext';\n\n/**\n * Constructor options for {@link ApiDeclaredItem}.\n * @public\n */\nexport interface IApiDeclaredItemOptions extends IApiDocumentedItemOptions {\n  excerptTokens: IExcerptToken[];\n}\n\nexport interface IApiDeclaredItemJson extends IApiDocumentedItemJson {\n  excerptTokens: IExcerptToken[];\n}\n\n/**\n * The base class for API items that have an associated source code excerpt containing a TypeScript declaration.\n *\n * @remarks\n *\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\n * API declarations.\n *\n * Most `ApiItem` subclasses have declarations and thus extend `ApiDeclaredItem`.  Counterexamples include\n * `ApiModel` and `ApiPackage`, which do not have any corresponding TypeScript source code.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class ApiDeclaredItem extends ApiDocumentedItem {\n  private _excerptTokens: ExcerptToken[];\n  private _excerpt: Excerpt;\n\n  public constructor(options: IApiDeclaredItemOptions) {\n    super(options);\n\n    this._excerptTokens = options.excerptTokens.map((token) => {\n      const canonicalReference: DeclarationReference | undefined =\n        token.canonicalReference === undefined\n          ? undefined\n          : DeclarationReference.parse(token.canonicalReference);\n      return new ExcerptToken(token.kind, token.text, canonicalReference);\n    });\n    this._excerpt = new Excerpt(this.excerptTokens, { startIndex: 0, endIndex: this.excerptTokens.length });\n  }\n\n  /** @override */\n  public static onDeserializeInto(\n    options: Partial<IApiDeclaredItemOptions>,\n    context: DeserializerContext,\n    jsonObject: IApiDeclaredItemJson\n  ): void {\n    super.onDeserializeInto(options, context, jsonObject);\n\n    options.excerptTokens = jsonObject.excerptTokens;\n  }\n\n  /**\n   * The source code excerpt where the API item is declared.\n   */\n  public get excerpt(): Excerpt {\n    return this._excerpt;\n  }\n\n  /**\n   * The individual source code tokens that comprise the main excerpt.\n   */\n  public get excerptTokens(): ReadonlyArray<ExcerptToken> {\n    return this._excerptTokens;\n  }\n\n  /**\n   * If the API item has certain important modifier tags such as `@sealed`, `@virtual`, or `@override`,\n   * this prepends them as a doc comment above the excerpt.\n   */\n  public getExcerptWithModifiers(): string {\n    const excerpt: string = this.excerpt.text;\n    const modifierTags: string[] = [];\n\n    if (excerpt.length > 0) {\n      if (this instanceof ApiDocumentedItem) {\n        if (this.tsdocComment) {\n          if (this.tsdocComment.modifierTagSet.isSealed()) {\n            modifierTags.push('@sealed');\n          }\n          if (this.tsdocComment.modifierTagSet.isVirtual()) {\n            modifierTags.push('@virtual');\n          }\n          if (this.tsdocComment.modifierTagSet.isOverride()) {\n            modifierTags.push('@override');\n          }\n        }\n        if (modifierTags.length > 0) {\n          return '/** ' + modifierTags.join(' ') + ' */\\n' + excerpt;\n        }\n      }\n    }\n\n    return excerpt;\n  }\n\n  /** @override */\n  public serializeInto(jsonObject: Partial<IApiDeclaredItemJson>): void {\n    super.serializeInto(jsonObject);\n    jsonObject.excerptTokens = this.excerptTokens.map((x) => {\n      const excerptToken: IExcerptToken = { kind: x.kind, text: x.text };\n      if (x.canonicalReference !== undefined) {\n        excerptToken.canonicalReference = x.canonicalReference.toString();\n      }\n      return excerptToken;\n    });\n  }\n\n  /**\n   * Constructs a new {@link Excerpt} corresponding to the provided token range.\n   */\n  public buildExcerpt(tokenRange: IExcerptTokenRange): Excerpt {\n    return new Excerpt(this.excerptTokens, tokenRange);\n  }\n}\n"]}