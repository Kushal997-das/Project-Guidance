{"version":3,"file":"CollectorEntity.js","sourceRoot":"","sources":["../../src/collector/CollectorEntity.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as ts from 'typescript';\n\nimport { AstSymbol } from '../analyzer/AstSymbol';\nimport { Collector } from './Collector';\nimport { Sort } from '@rushstack/node-core-library';\nimport { AstEntity } from '../analyzer/AstEntity';\nimport { AstNamespaceImport } from '../analyzer/AstNamespaceImport';\n\n/**\n * This is a data structure used by the Collector to track an AstEntity that may be emitted in the *.d.ts file.\n *\n * @remarks\n * The additional contextual state beyond AstSymbol is:\n * - Whether it's an export of this entry point or not\n * - The nameForEmit, which may get renamed by DtsRollupGenerator._makeUniqueNames()\n * - The export name (or names, if the same symbol is exported multiple times)\n */\nexport class CollectorEntity {\n  /**\n   * The AstEntity that this entry represents.\n   */\n  public readonly astEntity: AstEntity;\n\n  private _exportNames: Set<string> = new Set();\n  private _exportNamesSorted: boolean = false;\n  private _singleExportName: string | undefined = undefined;\n\n  private _nameForEmit: string | undefined = undefined;\n\n  private _sortKey: string | undefined = undefined;\n\n  private _astNamespaceImports: Set<AstNamespaceImport> = new Set();\n\n  public constructor(astEntity: AstEntity) {\n    this.astEntity = astEntity;\n  }\n\n  /**\n   * The declaration name that will be emitted in a .d.ts rollup.  For non-exported declarations,\n   * Collector._makeUniqueNames() may need to rename the declaration to avoid conflicts with other declarations\n   * in that module.\n   */\n  public get nameForEmit(): string | undefined {\n    return this._nameForEmit;\n  }\n\n  public set nameForEmit(value: string | undefined) {\n    this._nameForEmit = value;\n    this._sortKey = undefined; // invalidate the cached value\n  }\n\n  /**\n   * If this symbol is exported from the entry point, the list of export names.\n   *\n   * @remarks\n   * Note that a given symbol may be exported more than once:\n   * ```\n   * class X { }\n   * export { X }\n   * export { X as Y }\n   * ```\n   */\n  public get exportNames(): ReadonlySet<string> {\n    if (!this._exportNamesSorted) {\n      Sort.sortSet(this._exportNames);\n      this._exportNamesSorted = true;\n    }\n    return this._exportNames;\n  }\n\n  /**\n   * If exportNames contains only one string, then singleExportName is that string.\n   * In all other cases, it is undefined.\n   */\n  public get singleExportName(): string | undefined {\n    return this._singleExportName;\n  }\n\n  /**\n   * This is true if exportNames contains only one string, and the declaration can be exported using the inline syntax\n   * such as \"export class X { }\" instead of \"export { X }\".\n   */\n  public get shouldInlineExport(): boolean {\n    // We don't inline an AstImport\n    if (this.astEntity instanceof AstSymbol) {\n      // We don't inline a symbol with more than one exported name\n      if (this._singleExportName !== undefined && this._singleExportName !== ts.InternalSymbolName.Default) {\n        // We can't inline a symbol whose emitted name is different from the export name\n        if (this._nameForEmit === undefined || this._nameForEmit === this._singleExportName) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if this symbol is an export for the entry point being analyzed.\n   */\n  public get exported(): boolean {\n    return this.exportNames.size > 0;\n  }\n\n  /**\n   * Indicates that it is possible for a consumer of the API to access this declaration, either by importing\n   * it directly, or via some other alias such as a member of a namespace.  If a collector entity is not consumable,\n   * then API Extractor will report a ExtractorMessageId.ForgottenExport warning.\n   *\n   * @remarks\n   * Generally speaking, an API item is consumable if:\n   *\n   * - The collector encounters it while crawling the entry point, and it is a root symbol\n   *   (i.e. there is a corresponding a CollectorEntity)\n   *\n   * - AND it is exported by the entry point\n   *\n   * However a special case occurs with `AstNamespaceImport` which produces a rollup like this:\n   *\n   * ```ts\n   * declare interface IForgottenExport { }\n   *\n   * declare function member(): IForgottenExport;\n   *\n   * declare namespace ns {\n   *   export {\n   *     member\n   *   }\n   * }\n   * export { ns }\n   * ```\n   *\n   * In this example, `IForgottenExport` is not consumable.  Whereas `member()` is consumable as `ns.member()`\n   * even though `member()` itself is not exported.\n   */\n  public get consumable(): boolean {\n    return this.exported || this._astNamespaceImports.size > 0;\n  }\n\n  /**\n   * Associates this entity with a `AstNamespaceImport`.\n   */\n  public addAstNamespaceImports(astNamespaceImport: AstNamespaceImport): void {\n    this._astNamespaceImports.add(astNamespaceImport);\n  }\n\n  /**\n   * Adds a new exportName to the exportNames set.\n   */\n  public addExportName(exportName: string): void {\n    if (!this._exportNames.has(exportName)) {\n      this._exportNamesSorted = false;\n      this._exportNames.add(exportName);\n\n      if (this._exportNames.size === 1) {\n        this._singleExportName = exportName;\n      } else {\n        this._singleExportName = undefined;\n      }\n    }\n  }\n\n  /**\n   * A sorting key used by DtsRollupGenerator._makeUniqueNames()\n   */\n  public getSortKey(): string {\n    if (!this._sortKey) {\n      this._sortKey = Collector.getSortKeyIgnoringUnderscore(this.nameForEmit || this.astEntity.localName);\n    }\n    return this._sortKey;\n  }\n}\n"]}