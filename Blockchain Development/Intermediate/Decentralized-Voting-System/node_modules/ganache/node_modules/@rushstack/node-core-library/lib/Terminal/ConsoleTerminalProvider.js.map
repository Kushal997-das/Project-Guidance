{"version":3,"file":"ConsoleTerminalProvider.js","sourceRoot":"","sources":["../../src/Terminal/ConsoleTerminalProvider.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,2BAAyB;AACzB,sCAAuD;AAEvD,2DAAkF;AAqBlF;;;;;GAKG;AACH,MAAa,uBAAuB;IAWlC,YAAmB,UAAoD,EAAE;QAVzE;;WAEG;QACI,mBAAc,GAAY,KAAK,CAAC;QAEvC;;WAEG;QACI,iBAAY,GAAY,KAAK,CAAC;QAGnC,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC;QAC/C,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC;IAC7C,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,IAAY,EAAE,QAAkC;QAC3D,QAAQ,QAAQ,EAAE;YAChB,KAAK,4CAAwB,CAAC,OAAO,CAAC;YACtC,KAAK,4CAAwB,CAAC,KAAK,CAAC,CAAC;gBACnC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC3B,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,OAAO,CAAC,CAAC;gBACrC,IAAI,IAAI,CAAC,cAAc,EAAE;oBACvB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBAC5B;gBACD,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,KAAK,CAAC,CAAC;gBACnC,IAAI,IAAI,CAAC,YAAY,EAAE;oBACrB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBAC5B;gBACD,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,GAAG,CAAC;YAClC,OAAO,CAAC,CAAC;gBACP,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC3B,MAAM;aACP;SACF;IACH,CAAC;IAED;;OAEG;IACH,IAAW,YAAY;QACrB,OAAO,QAAG,CAAC;IACb,CAAC;IAED;;OAEG;IACH,IAAW,aAAa;QACtB,OAAO,cAAa,CAAC;IACvB,CAAC;CACF;AA9DD,0DA8DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { EOL } from 'os';\nimport { enabled as supportsColor } from 'colors/safe';\n\nimport { ITerminalProvider, TerminalProviderSeverity } from './ITerminalProvider';\n\n/**\n * Options to be provided to a {@link ConsoleTerminalProvider}\n *\n * @beta\n */\nexport interface IConsoleTerminalProviderOptions {\n  /**\n   * If true, print verbose logging messages.\n   */\n  verboseEnabled: boolean;\n\n  /**\n   * If true, print debug logging messages. Note that \"verbose\" and \"debug\" are considered\n   * separate message filters; if you want debug to imply verbose, it is up to your\n   * application code to enforce that.\n   */\n  debugEnabled: boolean;\n}\n\n/**\n * Terminal provider that prints to STDOUT (for log- and verbose-level messages) and\n * STDERR (for warning- and error-level messsages).\n *\n * @beta\n */\nexport class ConsoleTerminalProvider implements ITerminalProvider {\n  /**\n   * If true, verbose-level messages should be written to the console.\n   */\n  public verboseEnabled: boolean = false;\n\n  /**\n   * If true, debug-level messages should be written to the console.\n   */\n  public debugEnabled: boolean = false;\n\n  public constructor(options: Partial<IConsoleTerminalProviderOptions> = {}) {\n    this.verboseEnabled = !!options.verboseEnabled;\n    this.debugEnabled = !!options.debugEnabled;\n  }\n\n  /**\n   * {@inheritDoc ITerminalProvider.write}\n   */\n  public write(data: string, severity: TerminalProviderSeverity): void {\n    switch (severity) {\n      case TerminalProviderSeverity.warning:\n      case TerminalProviderSeverity.error: {\n        process.stderr.write(data);\n        break;\n      }\n\n      case TerminalProviderSeverity.verbose: {\n        if (this.verboseEnabled) {\n          process.stdout.write(data);\n        }\n        break;\n      }\n\n      case TerminalProviderSeverity.debug: {\n        if (this.debugEnabled) {\n          process.stdout.write(data);\n        }\n        break;\n      }\n\n      case TerminalProviderSeverity.log:\n      default: {\n        process.stdout.write(data);\n        break;\n      }\n    }\n  }\n\n  /**\n   * {@inheritDoc ITerminalProvider.eolCharacter}\n   */\n  public get eolCharacter(): string {\n    return EOL;\n  }\n\n  /**\n   * {@inheritDoc ITerminalProvider.supportsColor}\n   */\n  public get supportsColor(): boolean {\n    return supportsColor;\n  }\n}\n"]}