{"version":3,"file":"ITerminalProvider.js","sourceRoot":"","sources":["../../src/Terminal/ITerminalProvider.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D;;;;;;;;;;;;;;;;;GAiBG;AACH,IAAY,wBAMX;AAND,WAAY,wBAAwB;IAClC,qEAAG,CAAA;IACH,6EAAO,CAAA;IACP,yEAAK,CAAA;IACL,6EAAO,CAAA;IACP,yEAAK,CAAA;AACP,CAAC,EANW,wBAAwB,GAAxB,gCAAwB,KAAxB,gCAAwB,QAMnC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * Similar to many popular logging packages, terminal providers support a range of message\n * severities. These severities have built-in formatting defaults in the Terminal object\n * (warnings are yellow, errors are red, etc.).\n *\n * Terminal providers may choose to suppress certain messages based on their severity,\n * or to route some messages to other providers or not based on severity.\n *\n *   Severity  | Purpose\n *   --------- | -------\n *   error     | Build errors and fatal issues\n *   warning   | Not necessarily fatal, but indicate a problem the user should fix\n *   log       | Informational messages\n *   verbose   | Additional information that may not always be necessary\n *   debug     | Highest detail level, best used for troubleshooting information\n *\n * @beta\n */\nexport enum TerminalProviderSeverity {\n  log,\n  warning,\n  error,\n  verbose,\n  debug\n}\n\n/**\n * Implement the interface to create a terminal provider. Terminal providers\n * can be registered to a {@link Terminal} instance to receive messages.\n *\n * @beta\n */\nexport interface ITerminalProvider {\n  /**\n   * This property should return true only if the terminal provider supports\n   * rendering console colors.\n   */\n  supportsColor: boolean;\n\n  /**\n   * This property should return the newline character the terminal provider\n   * expects.\n   */\n  eolCharacter: string;\n\n  /**\n   * This function gets called on every terminal provider upon every\n   * message function call on the terminal instance.\n   *\n   * @param data - The terminal message.\n   * @param severity - The message severity. Terminal providers can\n   * route different kinds of messages to different streams and may choose\n   * to ignore verbose or debug messages.\n   */\n  write(data: string, severity: TerminalProviderSeverity): void;\n}\n"]}