{"version":3,"file":"CommandLineParameterProvider.js","sourceRoot":"","sources":["../../src/providers/CommandLineParameterProvider.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as argparse from 'argparse';\nimport {\n  ICommandLineChoiceDefinition,\n  ICommandLineChoiceListDefinition,\n  ICommandLineIntegerDefinition,\n  ICommandLineIntegerListDefinition,\n  ICommandLineFlagDefinition,\n  ICommandLineStringDefinition,\n  ICommandLineStringListDefinition,\n  ICommandLineRemainderDefinition\n} from '../parameters/CommandLineDefinition';\nimport {\n  CommandLineParameter,\n  CommandLineParameterWithArgument,\n  CommandLineParameterKind\n} from '../parameters/BaseClasses';\nimport { CommandLineChoiceParameter } from '../parameters/CommandLineChoiceParameter';\nimport { CommandLineChoiceListParameter } from '../parameters/CommandLineChoiceListParameter';\nimport { CommandLineIntegerParameter } from '../parameters/CommandLineIntegerParameter';\nimport { CommandLineIntegerListParameter } from '../parameters/CommandLineIntegerListParameter';\nimport { CommandLineFlagParameter } from '../parameters/CommandLineFlagParameter';\nimport { CommandLineStringParameter } from '../parameters/CommandLineStringParameter';\nimport { CommandLineStringListParameter } from '../parameters/CommandLineStringListParameter';\nimport { CommandLineRemainder } from '../parameters/CommandLineRemainder';\n\n/**\n * This is the argparse result data object\n * @internal\n */\nexport interface ICommandLineParserData {\n  action: string;\n  [key: string]: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\n/**\n * This is the common base class for CommandLineAction and CommandLineParser\n * that provides functionality for defining command-line parameters.\n *\n * @public\n */\nexport abstract class CommandLineParameterProvider {\n  private static _keyCounter: number = 0;\n\n  private _parameters: CommandLineParameter[];\n  private _parametersByLongName: Map<string, CommandLineParameter>;\n  private _parametersProcessed: boolean;\n  private _remainder: CommandLineRemainder | undefined;\n\n  /** @internal */\n  // Third party code should not inherit subclasses or call this constructor\n  public constructor() {\n    this._parameters = [];\n    this._parametersByLongName = new Map<string, CommandLineParameter>();\n    this._parametersProcessed = false;\n  }\n\n  /**\n   * Returns a collection of the parameters that were defined for this object.\n   */\n  public get parameters(): ReadonlyArray<CommandLineParameter> {\n    return this._parameters;\n  }\n\n  /**\n   * Informs the caller if the argparse data has been processed into parameters.\n   */\n  public get parametersProcessed(): boolean {\n    return this._parametersProcessed;\n  }\n\n  /**\n   * If {@link CommandLineParameterProvider.defineCommandLineRemainder} was called,\n   * this object captures any remaining command line arguments after the recognized portion.\n   */\n  public get remainder(): CommandLineRemainder | undefined {\n    return this._remainder;\n  }\n\n  /**\n   * Defines a command-line parameter whose value must be a string from a fixed set of\n   * allowable choices (similar to an enum).\n   *\n   * @remarks\n   * Example of a choice parameter:\n   * ```\n   * example-tool --log-level warn\n   * ```\n   */\n  public defineChoiceParameter(definition: ICommandLineChoiceDefinition): CommandLineChoiceParameter {\n    const parameter: CommandLineChoiceParameter = new CommandLineChoiceParameter(definition);\n    this._defineParameter(parameter);\n    return parameter;\n  }\n\n  /**\n   * Returns the CommandLineChoiceParameter with the specified long name.\n   * @remarks\n   * This method throws an exception if the parameter is not defined.\n   */\n  public getChoiceParameter(parameterLongName: string): CommandLineChoiceParameter {\n    return this._getParameter(parameterLongName, CommandLineParameterKind.Choice);\n  }\n\n  /**\n   * Defines a command-line parameter whose value must be a string from a fixed set of\n   * allowable choices (similar to an enum). The parameter can be specified multiple times to\n   * build a list.\n   *\n   * @remarks\n   * Example of a choice list parameter:\n   * ```\n   * example-tool --allow-color red --allow-color green\n   * ```\n   */\n  public defineChoiceListParameter(\n    definition: ICommandLineChoiceListDefinition\n  ): CommandLineChoiceListParameter {\n    const parameter: CommandLineChoiceListParameter = new CommandLineChoiceListParameter(definition);\n    this._defineParameter(parameter);\n    return parameter;\n  }\n\n  /**\n   * Returns the CommandLineChoiceListParameter with the specified long name.\n   * @remarks\n   * This method throws an exception if the parameter is not defined.\n   */\n  public getChoiceListParameter(parameterLongName: string): CommandLineChoiceListParameter {\n    return this._getParameter(parameterLongName, CommandLineParameterKind.ChoiceList);\n  }\n\n  /**\n   * Defines a command-line switch whose boolean value is true if the switch is provided,\n   * and false otherwise.\n   *\n   * @remarks\n   * Example usage of a flag parameter:\n   * ```\n   * example-tool --debug\n   * ```\n   */\n  public defineFlagParameter(definition: ICommandLineFlagDefinition): CommandLineFlagParameter {\n    const parameter: CommandLineFlagParameter = new CommandLineFlagParameter(definition);\n    this._defineParameter(parameter);\n    return parameter;\n  }\n\n  /**\n   * Returns the CommandLineFlagParameter with the specified long name.\n   * @remarks\n   * This method throws an exception if the parameter is not defined.\n   */\n  public getFlagParameter(parameterLongName: string): CommandLineFlagParameter {\n    return this._getParameter(parameterLongName, CommandLineParameterKind.Flag);\n  }\n\n  /**\n   * Defines a command-line parameter whose argument is an integer.\n   *\n   * @remarks\n   * Example usage of an integer parameter:\n   * ```\n   * example-tool --max-attempts 5\n   * ```\n   */\n  public defineIntegerParameter(definition: ICommandLineIntegerDefinition): CommandLineIntegerParameter {\n    const parameter: CommandLineIntegerParameter = new CommandLineIntegerParameter(definition);\n    this._defineParameter(parameter);\n    return parameter;\n  }\n\n  /**\n   * Returns the CommandLineIntegerParameter with the specified long name.\n   * @remarks\n   * This method throws an exception if the parameter is not defined.\n   */\n  public getIntegerParameter(parameterLongName: string): CommandLineIntegerParameter {\n    return this._getParameter(parameterLongName, CommandLineParameterKind.Integer);\n  }\n\n  /**\n   * Defines a command-line parameter whose argument is an integer. The parameter can be specified\n   * multiple times to build a list.\n   *\n   * @remarks\n   * Example usage of an integer list parameter:\n   * ```\n   * example-tool --avoid 4 --avoid 13\n   * ```\n   */\n  public defineIntegerListParameter(\n    definition: ICommandLineIntegerListDefinition\n  ): CommandLineIntegerListParameter {\n    const parameter: CommandLineIntegerListParameter = new CommandLineIntegerListParameter(definition);\n    this._defineParameter(parameter);\n    return parameter;\n  }\n\n  /**\n   * Returns the CommandLineIntegerParameter with the specified long name.\n   * @remarks\n   * This method throws an exception if the parameter is not defined.\n   */\n  public getIntegerListParameter(parameterLongName: string): CommandLineIntegerListParameter {\n    return this._getParameter(parameterLongName, CommandLineParameterKind.IntegerList);\n  }\n  /**\n   * Defines a command-line parameter whose argument is a single text string.\n   *\n   * @remarks\n   * Example usage of a string parameter:\n   * ```\n   * example-tool --message \"Hello, world!\"\n   * ```\n   */\n  public defineStringParameter(definition: ICommandLineStringDefinition): CommandLineStringParameter {\n    const parameter: CommandLineStringParameter = new CommandLineStringParameter(definition);\n    this._defineParameter(parameter);\n    return parameter;\n  }\n\n  /**\n   * Returns the CommandLineStringParameter with the specified long name.\n   * @remarks\n   * This method throws an exception if the parameter is not defined.\n   */\n  public getStringParameter(parameterLongName: string): CommandLineStringParameter {\n    return this._getParameter(parameterLongName, CommandLineParameterKind.String);\n  }\n\n  /**\n   * Defines a command-line parameter whose argument is a single text string.  The parameter can be\n   * specified multiple times to build a list.\n   *\n   * @remarks\n   * Example usage of a string list parameter:\n   * ```\n   * example-tool --add file1.txt --add file2.txt --add file3.txt\n   * ```\n   */\n  public defineStringListParameter(\n    definition: ICommandLineStringListDefinition\n  ): CommandLineStringListParameter {\n    const parameter: CommandLineStringListParameter = new CommandLineStringListParameter(definition);\n    this._defineParameter(parameter);\n    return parameter;\n  }\n\n  /**\n   * Defines a rule that captures any remaining command line arguments after the recognized portion.\n   *\n   * @remarks\n   * This feature is useful for commands that pass their arguments along to an external tool, relying on\n   * that tool to perform validation.  (It could also be used to parse parameters without any validation\n   * or documentation, but that is not recommended.)\n   *\n   * Example of capturing the remainder after an optional flag parameter.\n   * ```\n   * example-tool --my-flag this is the remainder\n   * ```\n   *\n   * In the \"--help\" documentation, the remainder rule will be represented as \"...\".\n   */\n  public defineCommandLineRemainder(definition: ICommandLineRemainderDefinition): CommandLineRemainder {\n    if (this._remainder) {\n      throw new Error('defineRemainingArguments() has already been called for this provider');\n    }\n    this._remainder = new CommandLineRemainder(definition);\n\n    const argparseOptions: argparse.ArgumentOptions = {\n      help: this._remainder.description,\n      nargs: argparse.Const.REMAINDER,\n      metavar: '\"...\"'\n    };\n\n    this._getArgumentParser().addArgument(argparse.Const.REMAINDER, argparseOptions);\n\n    return this._remainder;\n  }\n\n  /**\n   * Returns the CommandLineStringListParameter with the specified long name.\n   * @remarks\n   * This method throws an exception if the parameter is not defined.\n   */\n  public getStringListParameter(parameterLongName: string): CommandLineStringListParameter {\n    return this._getParameter(parameterLongName, CommandLineParameterKind.StringList);\n  }\n\n  /**\n   * Generates the command-line help text.\n   */\n  public renderHelpText(): string {\n    return this._getArgumentParser().formatHelp();\n  }\n\n  /**\n   * Returns a object which maps the long name of each parameter in this.parameters\n   * to the stringified form of its value. This is useful for logging telemetry, but\n   * it is not the proper way of accessing parameters or their values.\n   */\n  public getParameterStringMap(): Record<string, string> {\n    const parameterMap: Record<string, string> = {};\n    for (const parameter of this.parameters) {\n      switch (parameter.kind) {\n        case CommandLineParameterKind.Flag:\n        case CommandLineParameterKind.Choice:\n        case CommandLineParameterKind.String:\n        case CommandLineParameterKind.Integer:\n          parameterMap[parameter.longName] = JSON.stringify(\n            (\n              parameter as\n                | CommandLineFlagParameter\n                | CommandLineIntegerParameter\n                | CommandLineChoiceParameter\n                | CommandLineStringParameter\n            ).value\n          );\n          break;\n        case CommandLineParameterKind.StringList:\n        case CommandLineParameterKind.IntegerList:\n        case CommandLineParameterKind.ChoiceList:\n          const arrayValue: ReadonlyArray<string | number> | undefined = (\n            parameter as\n              | CommandLineIntegerListParameter\n              | CommandLineStringListParameter\n              | CommandLineChoiceListParameter\n          ).values;\n          parameterMap[parameter.longName] = arrayValue ? arrayValue.join(',') : '';\n          break;\n      }\n    }\n    return parameterMap;\n  }\n\n  /**\n   * The child class should implement this hook to define its command-line parameters,\n   * e.g. by calling defineFlagParameter().\n   */\n  protected abstract onDefineParameters(): void;\n\n  /**\n   * Retrieves the argparse object.\n   * @internal\n   */\n  protected abstract _getArgumentParser(): argparse.ArgumentParser;\n\n  /** @internal */\n  protected _processParsedData(data: ICommandLineParserData): void {\n    if (this._parametersProcessed) {\n      throw new Error('Command Line Parser Data was already processed');\n    }\n\n    // Fill in the values for the parameters\n    for (const parameter of this._parameters) {\n      const value: any = data[parameter._parserKey!]; // eslint-disable-line @typescript-eslint/no-explicit-any\n      parameter._setValue(value);\n    }\n\n    if (this.remainder) {\n      this.remainder._setValue(data[argparse.Const.REMAINDER]);\n    }\n\n    this._parametersProcessed = true;\n  }\n\n  private _generateKey(): string {\n    return 'key_' + (CommandLineParameterProvider._keyCounter++).toString();\n  }\n\n  private _getParameter<T extends CommandLineParameter>(\n    parameterLongName: string,\n    expectedKind: CommandLineParameterKind\n  ): T {\n    const parameter: CommandLineParameter | undefined = this._parametersByLongName.get(parameterLongName);\n    if (!parameter) {\n      throw new Error(`The parameter \"${parameterLongName}\" is not defined`);\n    }\n    if (parameter.kind !== expectedKind) {\n      throw new Error(\n        `The parameter \"${parameterLongName}\" is of type \"${CommandLineParameterKind[parameter.kind]}\"` +\n          ` whereas the caller was expecting \"${CommandLineParameterKind[expectedKind]}\".`\n      );\n    }\n    return parameter as T;\n  }\n\n  private _defineParameter(parameter: CommandLineParameter): void {\n    if (this._remainder) {\n      throw new Error(\n        'defineCommandLineRemainder() was already called for this provider;' +\n          ' no further parameters can be defined'\n      );\n    }\n\n    const names: string[] = [];\n    if (parameter.shortName) {\n      names.push(parameter.shortName);\n    }\n    names.push(parameter.longName);\n\n    parameter._parserKey = this._generateKey();\n\n    let finalDescription: string = parameter.description;\n\n    const supplementaryNotes: string[] = [];\n    parameter._getSupplementaryNotes(supplementaryNotes);\n    if (supplementaryNotes.length > 0) {\n      // If they left the period off the end of their sentence, then add one.\n      if (finalDescription.match(/[a-z0-9]\"?\\s*$/i)) {\n        finalDescription = finalDescription.trimRight() + '.';\n      }\n      // Append the supplementary text\n      finalDescription += ' ' + supplementaryNotes.join(' ');\n    }\n\n    // NOTE: Our \"environmentVariable\" feature takes precedence over argparse's \"defaultValue\",\n    // so we have to reimplement that feature.\n    const argparseOptions: argparse.ArgumentOptions = {\n      help: finalDescription,\n      dest: parameter._parserKey,\n      metavar: (parameter as CommandLineParameterWithArgument).argumentName || undefined,\n      required: parameter.required\n    };\n\n    switch (parameter.kind) {\n      case CommandLineParameterKind.Choice: {\n        const choiceParameter: CommandLineChoiceParameter = parameter as CommandLineChoiceParameter;\n        argparseOptions.choices = choiceParameter.alternatives as string[];\n        break;\n      }\n      case CommandLineParameterKind.ChoiceList: {\n        const choiceParameter: CommandLineChoiceListParameter = parameter as CommandLineChoiceListParameter;\n        argparseOptions.choices = choiceParameter.alternatives as string[];\n        argparseOptions.action = 'append';\n        break;\n      }\n      case CommandLineParameterKind.Flag:\n        argparseOptions.action = 'storeTrue';\n        break;\n      case CommandLineParameterKind.Integer:\n        argparseOptions.type = 'int';\n        break;\n      case CommandLineParameterKind.IntegerList:\n        argparseOptions.type = 'int';\n        argparseOptions.action = 'append';\n        break;\n      case CommandLineParameterKind.String:\n        break;\n      case CommandLineParameterKind.StringList:\n        argparseOptions.action = 'append';\n        break;\n    }\n\n    const argumentParser: argparse.ArgumentParser = this._getArgumentParser();\n    argumentParser.addArgument(names, { ...argparseOptions });\n    if (parameter.undocumentedSynonyms && parameter.undocumentedSynonyms.length > 0) {\n      argumentParser.addArgument(parameter.undocumentedSynonyms, {\n        ...argparseOptions,\n        help: argparse.Const.SUPPRESS\n      });\n    }\n\n    this._parameters.push(parameter);\n    this._parametersByLongName.set(parameter.longName, parameter);\n  }\n}\n"]}