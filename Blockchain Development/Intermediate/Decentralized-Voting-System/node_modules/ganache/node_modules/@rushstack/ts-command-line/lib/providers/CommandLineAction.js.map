{"version":3,"file":"CommandLineAction.js","sourceRoot":"","sources":["../../src/providers/CommandLineAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,iFAAsG;AA0BtG;;;;;;;;;;;;GAYG;AACH,MAAsB,iBAAkB,SAAQ,2DAA4B;IAe1E,YAAmB,OAAkC;QACnD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YACjE,MAAM,IAAI,KAAK,CACb,wBAAwB,OAAO,CAAC,UAAU,KAAK;gBAC7C,2FAA2F,CAC9F,CAAC;SACH;QAED,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;QAE3C,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;IACnC,CAAC;IAED;;;OAGG;IACI,YAAY,CAAC,gBAAoC;QACtD,IAAI,CAAC,eAAe,GAAG,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE;YACjE,IAAI,EAAE,IAAI,CAAC,OAAO;YAClB,WAAW,EAAE,IAAI,CAAC,aAAa;SAChC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACI,kBAAkB,CAAC,IAA4B;QACpD,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;;OAGG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACO,kBAAkB;QAC1B,WAAW;QACX,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,qCAAqC;YACrC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;SACrG;QAED,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;;AAzEH,8CAoFC;AAnFC,0BAA0B;AACX,mCAAiB,GAAW,kCAAkC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as argparse from 'argparse';\nimport { CommandLineParameterProvider, ICommandLineParserData } from './CommandLineParameterProvider';\n\n/**\n * Options for the CommandLineAction constructor.\n * @public\n */\nexport interface ICommandLineActionOptions {\n  /**\n   * The name of the action.  For example, if the tool is called \"example\",\n   * then the \"build\" action might be invoked as: \"example build -q --some-other-option\"\n   */\n  actionName: string;\n\n  /**\n   * A quick summary that is shown on the main help page, which is displayed\n   * by the command \"example --help\"\n   */\n  summary: string;\n\n  /**\n   * A detailed description that is shown on the action help page, which is displayed\n   * by the command \"example build --help\", e.g. for actionName=\"build\".\n   */\n  documentation: string;\n}\n\n/**\n * Represents a sub-command that is part of the CommandLineParser command line.\n * Applications should create subclasses of CommandLineAction corresponding to\n * each action that they want to expose.\n *\n * The action name should be comprised of lower case words separated by hyphens\n * or colons. The name should include an English verb (e.g. \"deploy\"). Use a\n * hyphen to separate words (e.g. \"upload-docs\"). A group of related commands\n * can be prefixed with a colon (e.g. \"docs:generate\", \"docs:deploy\",\n * \"docs:serve\", etc).\n *\n * @public\n */\nexport abstract class CommandLineAction extends CommandLineParameterProvider {\n  // Example: \"do-something\"\n  private static _actionNameRegExp: RegExp = /^[a-z][a-z0-9]*([-:][a-z0-9]+)*$/;\n\n  /** {@inheritDoc ICommandLineActionOptions.actionName} */\n  public readonly actionName: string;\n\n  /** {@inheritDoc ICommandLineActionOptions.summary} */\n  public readonly summary: string;\n\n  /** {@inheritDoc ICommandLineActionOptions.documentation} */\n  public readonly documentation: string;\n\n  private _argumentParser: argparse.ArgumentParser | undefined;\n\n  public constructor(options: ICommandLineActionOptions) {\n    super();\n\n    if (!CommandLineAction._actionNameRegExp.test(options.actionName)) {\n      throw new Error(\n        `Invalid action name \"${options.actionName}\". ` +\n          `The name must be comprised of lower-case words optionally separated by hyphens or colons.`\n      );\n    }\n\n    this.actionName = options.actionName;\n    this.summary = options.summary;\n    this.documentation = options.documentation;\n\n    this._argumentParser = undefined;\n  }\n\n  /**\n   * This is called internally by CommandLineParser.addAction()\n   * @internal\n   */\n  public _buildParser(actionsSubParser: argparse.SubParser): void {\n    this._argumentParser = actionsSubParser.addParser(this.actionName, {\n      help: this.summary,\n      description: this.documentation\n    });\n\n    this.onDefineParameters();\n  }\n\n  /**\n   * This is called internally by CommandLineParser.execute()\n   * @internal\n   */\n  public _processParsedData(data: ICommandLineParserData): void {\n    super._processParsedData(data);\n  }\n\n  /**\n   * Invoked by CommandLineParser.onExecute().\n   * @internal\n   */\n  public _execute(): Promise<void> {\n    return this.onExecute();\n  }\n\n  /**\n   * {@inheritDoc CommandLineParameterProvider._getArgumentParser}\n   * @internal\n   */\n  protected _getArgumentParser(): argparse.ArgumentParser {\n    // override\n    if (!this._argumentParser) {\n      // We will improve this in the future\n      throw new Error('The CommandLineAction must be added to a CommandLineParser before it can be used');\n    }\n\n    return this._argumentParser;\n  }\n\n  /**\n   * {@inheritDoc CommandLineParameterProvider.onDefineParameters}\n   */\n  protected abstract onDefineParameters(): void;\n\n  /**\n   * Your subclass should implement this hook to perform the operation.\n   */\n  protected abstract onExecute(): Promise<void>;\n}\n"]}