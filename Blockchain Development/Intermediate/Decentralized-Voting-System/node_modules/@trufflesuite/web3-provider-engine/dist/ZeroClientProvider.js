(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ZeroClientProvider = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var EventEmitter = require('events').EventEmitter;

var inherits = require('util').inherits;

var ethUtil = require('ethereumjs-util');

var EthBlockTracker = require('eth-block-tracker');

var map = require('async/map');

var eachSeries = require('async/eachSeries');

var Stoplight = require('./util/stoplight.js');

var cacheUtils = require('./util/rpc-cache-utils.js');

var createPayload = require('./util/create-payload.js');

var noop = function noop() {};

module.exports = Web3ProviderEngine;
inherits(Web3ProviderEngine, EventEmitter);

function Web3ProviderEngine(opts) {
  var self = this;
  EventEmitter.call(self);
  self.setMaxListeners(30); // parse options

  opts = opts || {}; // block polling

  var directProvider = {
    sendAsync: self._handleAsync.bind(self)
  };
  var blockTrackerProvider = opts.blockTrackerProvider || directProvider;
  self._blockTracker = opts.blockTracker || new EthBlockTracker({
    provider: blockTrackerProvider,
    pollingInterval: opts.pollingInterval || 4000,
    setSkipCacheFlag: true
  }); // set initialization blocker

  self._ready = new Stoplight(); // local state

  self.currentBlock = null;
  self._providers = []; // ignore all errors broadcast as you kill.

  self.silent = false;
} // public


Web3ProviderEngine.prototype.start = function () {
  var _this = this;

  var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;
  var self = this; // trigger start

  self._ready.go(); // on new block, request block body and emit as events


  self._blockTracker.on('latest', function (blockNumber) {
    // get block body
    self._getBlockByNumberWithRetry(blockNumber, function (err, block) {
      if (err) {
        _this.emit('error', err);

        return;
      }

      if (!block) {
        console.log(block);

        _this.emit('error', new Error("Could not find block"));

        return;
      }

      var bufferBlock = toBufferBlock(block); // set current + emit "block" event

      self._setCurrentBlock(bufferBlock); // emit other events


      self.emit('rawBlock', block);
      self.emit('latest', block);
    });
  }); // forward other events


  self._blockTracker.on('sync', self.emit.bind(self, 'sync'));

  self._blockTracker.on('error', self.emit.bind(self, 'error')); // update state


  self._running = true; // signal that we started

  self.emit('start');
};

Web3ProviderEngine.prototype.stop = function () {
  var self = this; // stop block polling by removing event listeners

  self._blockTracker.removeAllListeners(); // update state


  self._running = false; // signal that we stopped

  self.emit('stop');
};

Web3ProviderEngine.prototype.isRunning = function () {
  var self = this;
  return self._running;
};

Web3ProviderEngine.prototype.addProvider = function (source, index) {
  var self = this;

  if (typeof index === 'number') {
    self._providers.splice(index, 0, source);
  } else {
    self._providers.push(source);
  }

  source.setEngine(this);
};

Web3ProviderEngine.prototype.removeProvider = function (source) {
  var self = this;

  var index = self._providers.indexOf(source);

  if (index < 0) throw new Error('Provider not found.');

  self._providers.splice(index, 1);
};

Web3ProviderEngine.prototype.send = function (payload, cb) {
  this.sendAsync(payload, cb);
};

Web3ProviderEngine.prototype.sendAsync = function (payload, cb) {
  var self = this;

  self._ready["await"](function () {
    if (Array.isArray(payload)) {
      // handle batch
      map(payload, self._handleAsync.bind(self), cb);
    } else {
      // handle single
      self._handleAsync(payload, cb);
    }
  });
}; // private


Web3ProviderEngine.prototype._getBlockByNumberWithRetry = function (blockNumber, cb) {
  var self = this;
  var retriesRemaining = 5;
  attemptRequest();
  return;

  function attemptRequest() {
    self._getBlockByNumber(blockNumber, afterRequest);
  }

  function afterRequest(err, block) {
    // anomalous error occurred
    if (err) return cb(err); // block not ready yet

    if (!block) {
      if (retriesRemaining > 0) {
        // wait 1s then try again
        retriesRemaining--;
        setTimeout(function () {
          attemptRequest();
        }, 1000);
        return;
      } else {
        // give up, return a null block
        cb(null, null);
        return;
      }
    } // otherwise return result


    cb(null, block);
    return;
  }
};

Web3ProviderEngine.prototype._getBlockByNumber = function (blockNumber, cb) {
  var req = createPayload({
    method: 'eth_getBlockByNumber',
    params: [blockNumber, false],
    skipCache: true
  });

  this._handleAsync(req, function (err, res) {
    if (err) return cb(err);
    return cb(null, res.result);
  });
};

Web3ProviderEngine.prototype._handleAsync = function (payload, finished) {
  var self = this;
  var currentProvider = -1;
  var result = null;
  var error = null;
  var stack = [];
  next();

  function next(after) {
    currentProvider += 1;
    stack.unshift(after); // Bubbled down as far as we could go, and the request wasn't
    // handled. Return an error.

    if (currentProvider >= self._providers.length) {
      end(new Error('Request for method "' + payload.method + '" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'));
    } else {
      try {
        var provider = self._providers[currentProvider];
        provider.handleRequest(payload, next, end);
      } catch (e) {
        end(e);
      }
    }
  }

  function end(_error, _result) {
    // Ignore everything?
    if (self.silent) return;
    error = _error;
    result = _result;
    eachSeries(stack, function (fn, callback) {
      if (fn) {
        fn(error, result, callback);
      } else {
        callback();
      }
    }, function () {
      var resultObj = {
        id: payload.id,
        jsonrpc: payload.jsonrpc,
        result: result
      };

      if (error != null) {
        resultObj.error = {
          message: error.stack || error.message || error,
          code: -32000
        }; // respond with both error formats

        finished(error, resultObj);
      } else {
        finished(null, resultObj);
      }
    });
  }
}; //
// from remote-data
//


Web3ProviderEngine.prototype._setCurrentBlock = function (block) {
  var self = this;
  self.currentBlock = block;
  self.emit('block', block);
}; // util


function toBufferBlock(jsonBlock) {
  return {
    number: ethUtil.toBuffer(jsonBlock.number),
    hash: ethUtil.toBuffer(jsonBlock.hash),
    parentHash: ethUtil.toBuffer(jsonBlock.parentHash),
    nonce: ethUtil.toBuffer(jsonBlock.nonce),
    mixHash: ethUtil.toBuffer(jsonBlock.mixHash),
    sha3Uncles: ethUtil.toBuffer(jsonBlock.sha3Uncles),
    logsBloom: ethUtil.toBuffer(jsonBlock.logsBloom),
    transactionsRoot: ethUtil.toBuffer(jsonBlock.transactionsRoot),
    stateRoot: ethUtil.toBuffer(jsonBlock.stateRoot),
    receiptsRoot: ethUtil.toBuffer(jsonBlock.receiptRoot || jsonBlock.receiptsRoot),
    miner: ethUtil.toBuffer(jsonBlock.miner),
    difficulty: ethUtil.toBuffer(jsonBlock.difficulty),
    totalDifficulty: ethUtil.toBuffer(jsonBlock.totalDifficulty),
    size: ethUtil.toBuffer(jsonBlock.size),
    extraData: ethUtil.toBuffer(jsonBlock.extraData),
    gasLimit: ethUtil.toBuffer(jsonBlock.gasLimit),
    gasUsed: ethUtil.toBuffer(jsonBlock.gasUsed),
    timestamp: ethUtil.toBuffer(jsonBlock.timestamp),
    transactions: jsonBlock.transactions
  };
}

},{"./util/create-payload.js":378,"./util/rpc-cache-utils.js":381,"./util/stoplight.js":382,"async/eachSeries":130,"async/map":146,"eth-block-tracker":189,"ethereumjs-util":235,"events":237,"util":360}],2:[function(require,module,exports){
module.exports={
    "name": "goerli",
    "chainId": 5,
    "networkId": 5,
    "defaultHardfork": "istanbul",
    "consensus": {
        "type": "poa",
        "algorithm": "clique",
        "clique": {
            "period": 15,
            "epoch": 30000
        }
    },
    "comment": "Cross-client PoA test network",
    "url": "https://github.com/goerli/testnet",
    "genesis": {
        "hash": "0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a",
        "timestamp": "0x5c51a607",
        "gasLimit": 10485760,
        "difficulty": 1,
        "nonce": "0x0000000000000000",
        "extraData": "0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "stateRoot": "0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "homestead",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "tangerineWhistle",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "spuriousDragon",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "byzantium",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "constantinople",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "petersburg",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "istanbul",
            "block": 1561651,
            "forkHash": "0xc25efa5c"
        },
        {
            "name": "berlin",
            "block": 4460644,
            "forkHash": "0x757a1c47"
        },
        {
            "name": "london",
            "block": 5062605,
            "forkHash": "0xb8c6299d"
        },
        {
            "name": "merge",
            "block": null,
            "forkash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkash": null
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "51.141.78.53",
            "port": 30303,
            "id": "011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a",
            "location": "",
            "comment": "Upstream bootnode 1"
        },
        {
            "ip": "13.93.54.137",
            "port": 30303,
            "id": "176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b",
            "location": "",
            "comment": "Upstream bootnode 2"
        },
        {
            "ip": "94.237.54.114",
            "port": 30313,
            "id": "46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291",
            "location": "",
            "comment": "Upstream bootnode 3"
        },
        {
            "ip": "18.218.250.66",
            "port": 30313,
            "id": "b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949",
            "location": "",
            "comment": "Upstream bootnode 4"
        },
        {
            "ip": "3.11.147.67",
            "port": 30303,
            "id": "a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91",
            "location": "",
            "comment": "Ethereum Foundation bootnode"
        },
        {
            "ip": "51.15.116.226",
            "port": 30303,
            "id": "a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd",
            "location": "",
            "comment": "Goerli Initiative bootnode"
        },
        {
            "ip": "51.15.119.157",
            "port": 30303,
            "id": "807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33",
            "location": "",
            "comment": "Goerli Initiative bootnode"
        },
        {
            "ip": "51.15.119.157",
            "port": 40303,
            "id": "a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd",
            "location": "",
            "comment": "Goerli Initiative bootnode"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"
    ]
}

},{}],3:[function(require,module,exports){
"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.chains = exports._getInitializedChains = void 0;
var mainnet_json_1 = __importDefault(require("./mainnet.json"));
var ropsten_json_1 = __importDefault(require("./ropsten.json"));
var rinkeby_json_1 = __importDefault(require("./rinkeby.json"));
var kovan_json_1 = __importDefault(require("./kovan.json"));
var goerli_json_1 = __importDefault(require("./goerli.json"));
/**
 * @hidden
 */
function _getInitializedChains(customChains) {
    var e_1, _a;
    var names = {
        '1': 'mainnet',
        '3': 'ropsten',
        '4': 'rinkeby',
        '42': 'kovan',
        '5': 'goerli',
    };
    var chains = {
        mainnet: mainnet_json_1.default,
        ropsten: ropsten_json_1.default,
        rinkeby: rinkeby_json_1.default,
        kovan: kovan_json_1.default,
        goerli: goerli_json_1.default,
    };
    if (customChains) {
        try {
            for (var customChains_1 = __values(customChains), customChains_1_1 = customChains_1.next(); !customChains_1_1.done; customChains_1_1 = customChains_1.next()) {
                var chain = customChains_1_1.value;
                var name_1 = chain.name;
                names[chain.chainId.toString()] = name_1;
                chains[name_1] = chain;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (customChains_1_1 && !customChains_1_1.done && (_a = customChains_1.return)) _a.call(customChains_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    chains['names'] = names;
    return chains;
}
exports._getInitializedChains = _getInitializedChains;
/**
 * @deprecated this constant will be internalized (removed)
 * on next major version update
 */
exports.chains = _getInitializedChains();

},{"./goerli.json":2,"./kovan.json":4,"./mainnet.json":5,"./rinkeby.json":6,"./ropsten.json":7}],4:[function(require,module,exports){
module.exports={
    "name": "kovan",
    "chainId": 42,
    "networkId": 42,
    "defaultHardfork": "istanbul",
    "consensus": {
        "type": "poa",
        "algorithm": "aura",
        "aura": {}
    },
    "comment": "Parity PoA test network",
    "url": "https://kovan-testnet.github.io/website/",
    "genesis": {
        "hash": "0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9",
        "timestamp": null,
        "gasLimit": 6000000,
        "difficulty": 131072,
        "nonce": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "extraData": "0x",
        "stateRoot": "0x2480155b48a1cea17d67dbfdfaafe821c1d19cdd478c5358e8ec56dec24502b2"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0x010ffe56"
        },
        {
            "name": "homestead",
            "block": 0,
            "forkHash": "0x010ffe56"
        },
        {
            "name": "tangerineWhistle",
            "block": 0,
            "forkHash": "0x010ffe56"
        },
        {
            "name": "spuriousDragon",
            "block": 0,
            "forkHash": "0x010ffe56"
        },
        {
            "name": "byzantium",
            "block": 5067000,
            "forkHash": "0x7f83c620"
        },
        {
            "name": "constantinople",
            "block": 9200000,
            "forkHash": "0xa94e3dc4"
        },
        {
            "name": "petersburg",
            "block": 10255201,
            "forkHash": "0x186874aa"
        },
        {
            "name": "istanbul",
            "block": 14111141,
            "forkHash": "0x7f6599a6"
        },
        {
            "name": "berlin",
            "block": null,
            "forkHash": null
        },
        {
            "name": "london",
            "block": null,
            "forkHash": null
        },
        {
            "name": "merge",
            "block": null,
            "forkash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkash": null
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "116.203.116.241",
            "port": 30303,
            "id": "16898006ba2cd4fa8bf9a3dfe32684c178fa861df144bfc21fe800dc4838a03e342056951fa9fd533dcb0be1219e306106442ff2cf1f7e9f8faa5f2fc1a3aa45",
            "location": "",
            "comment": "1"
        },
        {
            "ip": "3.217.96.11",
            "port": 30303,
            "id": "2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0",
            "location": "",
            "comment": "2"
        },
        {
            "ip": "108.61.170.124",
            "port": 30303,
            "id": "740e1c8ea64e71762c71a463a04e2046070a0c9394fcab5891d41301dc473c0cff00ebab5a9bc87fbcb610ab98ac18225ff897bc8b7b38def5975d5ceb0a7d7c",
            "location": "",
            "comment": "3"
        },
        {
            "ip": "157.230.31.163",
            "port": 30303,
            "id": "2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0",
            "location": "",
            "comment": "4"
        }
    ]
}

},{}],5:[function(require,module,exports){
module.exports={
    "name": "mainnet",
    "chainId": 1,
    "networkId": 1,
    "defaultHardfork": "istanbul",
    "consensus": {
        "type": "pow",
        "algorithm": "ethash",
        "ethash": {}
    },
    "comment": "The Ethereum main chain",
    "url": "https://ethstats.net/",
    "genesis": {
        "hash": "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
        "timestamp": null,
        "gasLimit": 5000,
        "difficulty": 17179869184,
        "nonce": "0x0000000000000042",
        "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
        "stateRoot": "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0xfc64ec04"
        },
        {
            "name": "homestead",
            "block": 1150000,
            "forkHash": "0x97c2c34c"
        },
        {
            "name": "dao",
            "block": 1920000,
            "forkHash": "0x91d1f948"
        },
        {
            "name": "tangerineWhistle",
            "block": 2463000,
            "forkHash": "0x7a64da13"
        },
        {
            "name": "spuriousDragon",
            "block": 2675000,
            "forkHash": "0x3edd5b10"
        },
        {
            "name": "byzantium",
            "block": 4370000,
            "forkHash": "0xa00bc324"
        },
        {
            "name": "constantinople",
            "block": 7280000,
            "forkHash": "0x668db0af"
        },
        {
            "name": "petersburg",
            "block": 7280000,
            "forkHash": "0x668db0af"
        },
        {
            "name": "istanbul",
            "block": 9069000,
            "forkHash": "0x879d6e30"
        },
        {
            "name": "muirGlacier",
            "block": 9200000,
            "forkHash": "0xe029e991"
        },
        {
            "name": "berlin",
            "block": 12244000,
            "forkHash": "0x0eb440f6"
        },
        {
            "name": "london",
            "block": 12965000,
            "forkHash": "0xb715077d"
        },
        {
            "name": "merge",
            "block": null,
            "forkash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkash": null
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "18.138.108.67",
            "port": 30303,
            "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
            "location": "ap-southeast-1-001",
            "comment": "bootnode-aws-ap-southeast-1-001"
        },
        {
            "ip": "3.209.45.79",
            "port": 30303,
            "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
            "location": "us-east-1-001",
            "comment": "bootnode-aws-us-east-1-001"
        },
        {
            "ip": "34.255.23.113",
            "port": 30303,
            "id": "ca6de62fce278f96aea6ec5a2daadb877e51651247cb96ee310a318def462913b653963c155a0ef6c7d50048bba6e6cea881130857413d9f50a621546b590758",
            "location": "eu-west-1-001",
            "comment": "bootnode-aws-eu-west-1-001"
        },
        {
            "ip": "35.158.244.151",
            "port": 30303,
            "id": "279944d8dcd428dffaa7436f25ca0ca43ae19e7bcf94a8fb7d1641651f92d121e972ac2e8f381414b80cc8e5555811c2ec6e1a99bb009b3f53c4c69923e11bd8",
            "location": "eu-central-1-001",
            "comment": "bootnode-aws-eu-central-1-001"
        },
        {
            "ip": "52.187.207.27",
            "port": 30303,
            "id": "8499da03c47d637b20eee24eec3c356c9a2e6148d6fe25ca195c7949ab8ec2c03e3556126b0d7ed644675e78c4318b08691b7b57de10e5f0d40d05b09238fa0a",
            "location": "australiaeast-001",
            "comment": "bootnode-azure-australiaeast-001"
        },
        {
            "ip": "191.234.162.198",
            "port": 30303,
            "id": "103858bdb88756c71f15e9b5e09b56dc1be52f0a5021d46301dbbfb7e130029cc9d0d6f73f693bc29b665770fff7da4d34f3c6379fe12721b5d7a0bcb5ca1fc1",
            "location": "brazilsouth-001",
            "comment": "bootnode-azure-brazilsouth-001"
        },
        {
            "ip": "52.231.165.108",
            "port": 30303,
            "id": "715171f50508aba88aecd1250af392a45a330af91d7b90701c436b618c86aaa1589c9184561907bebbb56439b8f8787bc01f49a7c77276c58c1b09822d75e8e8",
            "location": "koreasouth-001",
            "comment": "bootnode-azure-koreasouth-001"
        },
        {
            "ip": "104.42.217.25",
            "port": 30303,
            "id": "5d6d7cd20d6da4bb83a1d28cadb5d409b64edf314c0335df658c1a54e32c7c4a7ab7823d57c39b6a757556e68ff1df17c748b698544a55cb488b52479a92b60f",
            "location": "westus-001",
            "comment": "bootnode-azure-westus-001"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"
    ]
}

},{}],6:[function(require,module,exports){
module.exports={
    "name": "rinkeby",
    "chainId": 4,
    "networkId": 4,
    "defaultHardfork": "istanbul",
    "consensus": {
        "type": "poa",
        "algorithm": "clique",
        "clique": {
            "period": 15,
            "epoch": 30000
        }
    },
    "comment": "PoA test network",
    "url": "https://www.rinkeby.io",
    "genesis": {
        "hash": "0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177",
        "timestamp": "0x58ee40ba",
        "gasLimit": 4700000,
        "difficulty": 1,
        "nonce": "0x0000000000000000",
        "extraData": "0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "stateRoot": "0x53580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2d"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0x3b8e0691"
        },
        {
            "name": "homestead",
            "block": 1,
            "forkHash": "0x60949295"
        },
        {
            "name": "tangerineWhistle",
            "block": 2,
            "forkHash": "0x8bde40dd"
        },
        {
            "name": "spuriousDragon",
            "block": 3,
            "forkHash": "0xcb3a64bb"
        },
        {
            "name": "byzantium",
            "block": 1035301,
            "forkHash": "0x8d748b57"
        },
        {
            "name": "constantinople",
            "block": 3660663,
            "forkHash": "0xe49cab14"
        },
        {
            "name": "petersburg",
            "block": 4321234,
            "forkHash": "0xafec6b27"
        },
        {
            "name": "istanbul",
            "block": 5435345,
            "forkHash": "0xcbdb8838"
        },
        {
            "name": "berlin",
            "block": 8290928,
            "forkHash": "0x6910c8bd"
        },
        {
            "name": "london",
            "block": 8897988,
            "forkHash": "0x8e29f2f3"
        },
        {
            "name": "merge",
            "block": null,
            "forkash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkash": null
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "52.169.42.101",
            "port": 30303,
            "id": "a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf",
            "location": "",
            "comment": "IE"
        },
        {
            "ip": "52.3.158.184",
            "port": 30303,
            "id": "343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8",
            "location": "",
            "comment": "INFURA"
        },
        {
            "ip": "159.89.28.211",
            "port": 30303,
            "id": "b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6",
            "location": "",
            "comment": "AKASHA"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net"
    ]
}

},{}],7:[function(require,module,exports){
module.exports={
    "name": "ropsten",
    "chainId": 3,
    "networkId": 3,
    "defaultHardfork": "istanbul",
    "consensus": {
        "type": "pow",
        "algorithm": "ethash",
        "ethash": {}
    },
    "comment": "PoW test network",
    "url": "https://github.com/ethereum/ropsten",
    "genesis": {
        "hash": "0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d",
        "timestamp": null,
        "gasLimit": 16777216,
        "difficulty": 1048576,
        "nonce": "0x0000000000000042",
        "extraData": "0x3535353535353535353535353535353535353535353535353535353535353535",
        "stateRoot": "0x217b0bbcfb72e2d57e28f33cb361b9983513177755dc3f33ce3e7022ed62b77b"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0x30c7ddbc"
        },
        {
            "name": "homestead",
            "block": 0,
            "forkHash": "0x30c7ddbc"
        },
        {
            "name": "tangerineWhistle",
            "block": 0,
            "forkHash": "0x30c7ddbc"
        },
        {
            "name": "spuriousDragon",
            "block": 10,
            "forkHash": "0x63760190"
        },
        {
            "name": "byzantium",
            "block": 1700000,
            "forkHash": "0x3ea159c7"
        },
        {
            "name": "constantinople",
            "block": 4230000,
            "forkHash": "0x97b544f3"
        },
        {
            "name": "petersburg",
            "block": 4939394,
            "forkHash": "0xd6e2149b"
        },
        {
            "name": "istanbul",
            "block": 6485846,
            "forkHash": "0x4bc66396"
        },
        {
            "name": "muirGlacier",
            "block": 7117117,
            "forkHash": "0x6727ef90"
        },
        {
            "name": "berlin",
            "block": 9812189,
            "forkHash": "0xa157d377"
        },
        {
            "name": "london",
            "block": 10499401,
            "forkHash": "0x7119b6b3"
        },
        {
            "name": "merge",
            "block": null,
            "forkash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkash": null
        }
    ],
    "bootstrapNodes": [
        {
            "ip": "52.176.7.10",
            "port": 30303,
            "id": "30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606",
            "location": "",
            "comment": "US-Azure geth"
        },
        {
            "ip": "52.176.100.77",
            "port": 30303,
            "id": "865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c",
            "location": "",
            "comment": "US-Azure parity"
        },
        {
            "ip": "52.232.243.152",
            "port": 30303,
            "id": "6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f",
            "location": "",
            "comment": "Parity"
        },
        {
            "ip": "192.81.208.223",
            "port": 30303,
            "id": "94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09",
            "location": "",
            "comment": "@gpip"
        }
    ],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net"
    ]
}

},{}],8:[function(require,module,exports){
module.exports={
    "name": "EIP-1559",
    "number": 1559,
    "comment": "Fee market change for ETH 1.0 chain",
    "url": "https://eips.ethereum.org/EIPS/eip-1559",
    "status": "Review",
    "minimumHardfork": "berlin",
    "requiredEIPs": [2930],
    "gasConfig": {
        "baseFeeMaxChangeDenominator": {
            "v": 8,
            "d": "Maximum base fee change denominator"
        },
        "elasticityMultiplier": {
            "v": 2,
            "d": "Maximum block gas target elasticity"
        },
        "initialBaseFee": {
            "v": 1000000000,
            "d": "Initial base fee on first EIP1559 block"
        }
    },
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

},{}],9:[function(require,module,exports){
module.exports={
    "name": "EIP-2315",
    "number": 2315,
    "comment": "Simple subroutines for the EVM",
    "url": "https://eips.ethereum.org/EIPS/eip-2315",
    "status": "Draft",
    "minimumHardfork": "istanbul",
    "gasConfig": {},
    "gasPrices": {
        "beginsub": {
            "v": 2,
            "d": "Base fee of the BEGINSUB opcode"
        },
        "returnsub": {
            "v": 5,
            "d": "Base fee of the RETURNSUB opcode"
        },
        "jumpsub": {
            "v": 10,
            "d": "Base fee of the JUMPSUB opcode"
        }
    },
    "vm": {},
    "pow": {}
}

},{}],10:[function(require,module,exports){
module.exports={
    "name": "EIP-2537",
    "number": 2537,
    "comment": "BLS12-381 precompiles",
    "url": "https://eips.ethereum.org/EIPS/eip-2537",
    "status": "Draft",
    "minimumHardfork": "chainstart",
    "gasConfig": {},
    "gasPrices": {
        "Bls12381G1AddGas": {
            "v": 600,
            "d": "Gas cost of a single BLS12-381 G1 addition precompile-call"
        },
        "Bls12381G1MulGas": {
            "v": 12000,
            "d": "Gas cost of a single BLS12-381 G1 multiplication precompile-call"
        },
        "Bls12381G2AddGas": {
            "v": 4500,
            "d": "Gas cost of a single BLS12-381 G2 addition precompile-call"
        },
        "Bls12381G2MulGas": {
            "v": 55000,
            "d": "Gas cost of a single BLS12-381 G2 multiplication precompile-call"
        },
        "Bls12381PairingBaseGas": {
            "v": 115000,
            "d": "Base gas cost of BLS12-381 pairing check"
        },
        "Bls12381PairingPerPairGas": {
            "v": 23000,
            "d": "Per-pair gas cost of BLS12-381 pairing check"
        },
        "Bls12381MapG1Gas": {
            "v": 5500,
            "d": "Gas cost of BLS12-381 map field element to G1"
        },
        "Bls12381MapG2Gas": {
            "v": 110000,
            "d": "Gas cost of BLS12-381 map field element to G2"
        },
        "Bls12381MultiExpGasDiscount": {
            "v": [[1, 1200], [2, 888], [3, 764], [4, 641], [5, 594], [6, 547], [7, 500], [8, 453], [9, 438], [10, 423], [11, 408], [12, 394], [13, 379], [14, 364], [15, 349], [16, 334], [17, 330], [18, 326], [19, 322], [20, 318], [21, 314], [22, 310], [23, 306], [24, 302], [25, 298], [26, 294], [27, 289], [28, 285], [29, 281], [30, 277], [31, 273], [32, 269], [33, 268], [34, 266], [35, 265], [36, 263], [37, 262], [38, 260], [39, 259], [40, 257], [41, 256], [42, 254], [43, 253], [44, 251], [45, 250], [46, 248], [47, 247], [48, 245], [49, 244], [50, 242], [51, 241], [52, 239], [53, 238], [54, 236], [55, 235], [56, 233], [57, 232], [58, 231], [59, 229], [60, 228], [61, 226], [62, 225], [63, 223], [64, 222], [65, 221], [66, 220], [67, 219], [68, 219], [69, 218], [70, 217], [71, 216], [72, 216], [73, 215], [74, 214], [75, 213], [76, 213], [77, 212], [78, 211], [79, 211], [80, 210], [81, 209], [82, 208], [83, 208], [84, 207], [85, 206], [86, 205], [87, 205], [88, 204], [89, 203], [90, 202], [91, 202], [92, 201], [93, 200], [94, 199], [95, 199], [96, 198], [97, 197], [98, 196], [99, 196], [100, 195], [101, 194], [102, 193], [103, 193], [104, 192], [105, 191], [106, 191], [107, 190], [108, 189], [109, 188], [110, 188], [111, 187], [112, 186], [113, 185], [114, 185], [115, 184], [116, 183], [117, 182], [118, 182], [119, 181], [120, 180], [121, 179], [122, 179], [123, 178], [124, 177], [125, 176], [126, 176], [127, 175], [128, 174]],
            "d": "Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"
        }
    },
    "vm": {},
    "pow": {}
}

},{}],11:[function(require,module,exports){
module.exports={
    "name": "EIP-2565",
    "number": 2565,
    "comment": "ModExp gas cost",
    "url": "https://eips.ethereum.org/EIPS/eip-2565",
    "status": "Last call",
    "minimumHardfork": "byzantium",
    "gasConfig": {},
    "gasPrices": {
        "modexpGquaddivisor": {
            "v": 3,
            "d": "Gquaddivisor from modexp precompile for gas calculation"
        }
    },
    "vm": {},
    "pow": {}
}

},{}],12:[function(require,module,exports){
module.exports={
    "name": "EIP-2718",
    "comment": "Typed Transaction Envelope",
    "url": "https://eips.ethereum.org/EIPS/eip-2718",
    "status": "Draft",
    "minimumHardfork": "chainstart",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

},{}],13:[function(require,module,exports){
module.exports={
    "name": "EIP-2929",
    "comment": "Gas cost increases for state access opcodes",
    "url": "https://eips.ethereum.org/EIPS/eip-2929",
    "status": "Draft",
    "minimumHardfork": "chainstart",
    "gasConfig": {},
    "gasPrices": {
        "coldsload": {
            "v": 2100,
            "d": "Gas cost of the first read of storage from a given location (per transaction)"
        },
        "coldaccountaccess": {
            "v": 2600,
            "d": "Gas cost of the first read of a given address (per transaction)"
        },
        "warmstorageread": {
            "v": 100,
            "d": "Gas cost of reading storage locations which have already loaded 'cold'"
        },
        "sstoreCleanGasEIP2200": {
            "v": 2900,
            "d": "Once per SSTORE operation from clean non-zero to something else"
        },
        "sstoreNoopGasEIP2200": {
            "v": 100,
            "d": "Once per SSTORE operation if the value doesn't change"
        },
        "sstoreDirtyGasEIP2200": {
            "v": 100,
            "d": "Once per SSTORE operation if a dirty value is changed"
        },
        "sstoreInitRefundEIP2200": {
            "v": 19900,
            "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "sstoreCleanRefundEIP2200": {
            "v": 4900,
            "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "call": {
            "v": 0,
            "d": "Base fee of the CALL opcode"
        },
        "callcode": {
            "v": 0,
            "d": "Base fee of the CALLCODE opcode"
        },
        "delegatecall": {
            "v": 0,
            "d": "Base fee of the DELEGATECALL opcode"
        },
        "staticcall": {
            "v": 0,
            "d": "Base fee of the STATICCALL opcode"
        },
        "balance": {
            "v": 0,
            "d": "Base fee of the BALANCE opcode"
        },
        "extcodesize": {
            "v": 0,
            "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
            "v": 0,
            "d": "Base fee of the EXTCODECOPY opcode"
        },
        "extcodehash": {
            "v": 0,
            "d": "Base fee of the EXTCODEHASH opcode"
        },
        "sload": {
            "v": 0,
            "d": "Base fee of the SLOAD opcode"
        },
        "sstore": {
            "v": 0,
            "d": "Base fee of the SSTORE opcode"
        }
    },
    "vm": {},
    "pow": {}
}

},{}],14:[function(require,module,exports){
module.exports={
    "name": "EIP-2930",
    "comment": "Optional access lists",
    "url": "https://eips.ethereum.org/EIPS/eip-2930",
    "status": "Draft",
    "minimumHardfork": "istanbul",
    "requiredEIPs": [2718, 2929],
    "gasConfig": {},
    "gasPrices": {
        "accessListStorageKeyCost": {
            "v": 1900,
            "d": "Gas cost per storage key in an Access List transaction"
        },
        "accessListAddressCost": {
            "v": 2400,
            "d": "Gas cost per storage key in an Access List transaction"
        }
    },
    "vm": {},
    "pow": {}
}

},{}],15:[function(require,module,exports){
module.exports={
    "name": "EIP-3198",
    "number": 3198,
    "comment": "BASEFEE opcode",
    "url": "https://eips.ethereum.org/EIPS/eip-3198",
    "status": "Review",
    "minimumHardfork": "london",
    "gasConfig": {},
    "gasPrices": {
        "basefee": {
            "v": 2,
            "d": "Gas cost of the BASEFEE opcode"
        }
    },
    "vm": {},
    "pow": {}
}

},{}],16:[function(require,module,exports){
module.exports={
    "name": "EIP-3529",
    "comment": "Reduction in refunds",
    "url": "https://eips.ethereum.org/EIPS/eip-3529",
    "status": "Draft",
    "minimumHardfork": "berlin",
    "requiredEIPs": [2929],
    "gasConfig": {
        "maxRefundQuotient": {
            "v": 5,
            "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
        }
    },
    "gasPrices": {
        "selfdestructRefund": {
            "v": 0,
            "d": "Refunded following a selfdestruct operation"
        },
        "sstoreClearRefundEIP2200": {
            "v": 4800,
            "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        }
    },
    "vm": {},
    "pow": {}
}

},{}],17:[function(require,module,exports){
module.exports={
    "name": "EIP-3541",
    "comment": "Reject new contracts starting with the 0xEF byte",
    "url": "https://eips.ethereum.org/EIPS/eip-3541",
    "status": "Draft",
    "minimumHardfork": "berlin",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

},{}],18:[function(require,module,exports){
module.exports={
    "name": "EIP-3554",
    "comment": "Reduction in refunds",
    "url": "Difficulty Bomb Delay to December 1st 2021",
    "status": "Draft",
    "minimumHardfork": "muirGlacier",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 9500000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

},{}],19:[function(require,module,exports){
module.exports={
    "name": "EIP-3675",
    "number": 3675,
    "comment": "Upgrade consensus to Proof-of-Stake",
    "url": "https://eips.ethereum.org/EIPS/eip-3675",
    "status": "Draft",
    "minimumHardfork": "london",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

},{}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EIPs = void 0;
exports.EIPs = {
    1559: require('./1559.json'),
    2315: require('./2315.json'),
    2537: require('./2537.json'),
    2565: require('./2565.json'),
    2718: require('./2718.json'),
    2929: require('./2929.json'),
    2930: require('./2930.json'),
    3198: require('./3198.json'),
    3529: require('./3529.json'),
    3541: require('./3541.json'),
    3554: require('./3554.json'),
    3675: require('./3675.json'),
};

},{"./1559.json":8,"./2315.json":9,"./2537.json":10,"./2565.json":11,"./2718.json":12,"./2929.json":13,"./2930.json":14,"./3198.json":15,"./3529.json":16,"./3541.json":17,"./3554.json":18,"./3675.json":19}],21:[function(require,module,exports){
module.exports={
    "0x0000000000000000000000000000000000000000": "0x1",
    "0x0000000000000000000000000000000000000001": "0x1",
    "0x0000000000000000000000000000000000000002": "0x1",
    "0x0000000000000000000000000000000000000003": "0x1",
    "0x0000000000000000000000000000000000000004": "0x1",
    "0x0000000000000000000000000000000000000005": "0x1",
    "0x0000000000000000000000000000000000000006": "0x1",
    "0x0000000000000000000000000000000000000007": "0x1",
    "0x0000000000000000000000000000000000000008": "0x1",
    "0x0000000000000000000000000000000000000009": "0x1",
    "0x000000000000000000000000000000000000000a": "0x1",
    "0x000000000000000000000000000000000000000b": "0x1",
    "0x000000000000000000000000000000000000000c": "0x1",
    "0x000000000000000000000000000000000000000d": "0x1",
    "0x000000000000000000000000000000000000000e": "0x1",
    "0x000000000000000000000000000000000000000f": "0x1",
    "0x0000000000000000000000000000000000000010": "0x1",
    "0x0000000000000000000000000000000000000011": "0x1",
    "0x0000000000000000000000000000000000000012": "0x1",
    "0x0000000000000000000000000000000000000013": "0x1",
    "0x0000000000000000000000000000000000000014": "0x1",
    "0x0000000000000000000000000000000000000015": "0x1",
    "0x0000000000000000000000000000000000000016": "0x1",
    "0x0000000000000000000000000000000000000017": "0x1",
    "0x0000000000000000000000000000000000000018": "0x1",
    "0x0000000000000000000000000000000000000019": "0x1",
    "0x000000000000000000000000000000000000001a": "0x1",
    "0x000000000000000000000000000000000000001b": "0x1",
    "0x000000000000000000000000000000000000001c": "0x1",
    "0x000000000000000000000000000000000000001d": "0x1",
    "0x000000000000000000000000000000000000001e": "0x1",
    "0x000000000000000000000000000000000000001f": "0x1",
    "0x0000000000000000000000000000000000000020": "0x1",
    "0x0000000000000000000000000000000000000021": "0x1",
    "0x0000000000000000000000000000000000000022": "0x1",
    "0x0000000000000000000000000000000000000023": "0x1",
    "0x0000000000000000000000000000000000000024": "0x1",
    "0x0000000000000000000000000000000000000025": "0x1",
    "0x0000000000000000000000000000000000000026": "0x1",
    "0x0000000000000000000000000000000000000027": "0x1",
    "0x0000000000000000000000000000000000000028": "0x1",
    "0x0000000000000000000000000000000000000029": "0x1",
    "0x000000000000000000000000000000000000002a": "0x1",
    "0x000000000000000000000000000000000000002b": "0x1",
    "0x000000000000000000000000000000000000002c": "0x1",
    "0x000000000000000000000000000000000000002d": "0x1",
    "0x000000000000000000000000000000000000002e": "0x1",
    "0x000000000000000000000000000000000000002f": "0x1",
    "0x0000000000000000000000000000000000000030": "0x1",
    "0x0000000000000000000000000000000000000031": "0x1",
    "0x0000000000000000000000000000000000000032": "0x1",
    "0x0000000000000000000000000000000000000033": "0x1",
    "0x0000000000000000000000000000000000000034": "0x1",
    "0x0000000000000000000000000000000000000035": "0x1",
    "0x0000000000000000000000000000000000000036": "0x1",
    "0x0000000000000000000000000000000000000037": "0x1",
    "0x0000000000000000000000000000000000000038": "0x1",
    "0x0000000000000000000000000000000000000039": "0x1",
    "0x000000000000000000000000000000000000003a": "0x1",
    "0x000000000000000000000000000000000000003b": "0x1",
    "0x000000000000000000000000000000000000003c": "0x1",
    "0x000000000000000000000000000000000000003d": "0x1",
    "0x000000000000000000000000000000000000003e": "0x1",
    "0x000000000000000000000000000000000000003f": "0x1",
    "0x0000000000000000000000000000000000000040": "0x1",
    "0x0000000000000000000000000000000000000041": "0x1",
    "0x0000000000000000000000000000000000000042": "0x1",
    "0x0000000000000000000000000000000000000043": "0x1",
    "0x0000000000000000000000000000000000000044": "0x1",
    "0x0000000000000000000000000000000000000045": "0x1",
    "0x0000000000000000000000000000000000000046": "0x1",
    "0x0000000000000000000000000000000000000047": "0x1",
    "0x0000000000000000000000000000000000000048": "0x1",
    "0x0000000000000000000000000000000000000049": "0x1",
    "0x000000000000000000000000000000000000004a": "0x1",
    "0x000000000000000000000000000000000000004b": "0x1",
    "0x000000000000000000000000000000000000004c": "0x1",
    "0x000000000000000000000000000000000000004d": "0x1",
    "0x000000000000000000000000000000000000004e": "0x1",
    "0x000000000000000000000000000000000000004f": "0x1",
    "0x0000000000000000000000000000000000000050": "0x1",
    "0x0000000000000000000000000000000000000051": "0x1",
    "0x0000000000000000000000000000000000000052": "0x1",
    "0x0000000000000000000000000000000000000053": "0x1",
    "0x0000000000000000000000000000000000000054": "0x1",
    "0x0000000000000000000000000000000000000055": "0x1",
    "0x0000000000000000000000000000000000000056": "0x1",
    "0x0000000000000000000000000000000000000057": "0x1",
    "0x0000000000000000000000000000000000000058": "0x1",
    "0x0000000000000000000000000000000000000059": "0x1",
    "0x000000000000000000000000000000000000005a": "0x1",
    "0x000000000000000000000000000000000000005b": "0x1",
    "0x000000000000000000000000000000000000005c": "0x1",
    "0x000000000000000000000000000000000000005d": "0x1",
    "0x000000000000000000000000000000000000005e": "0x1",
    "0x000000000000000000000000000000000000005f": "0x1",
    "0x0000000000000000000000000000000000000060": "0x1",
    "0x0000000000000000000000000000000000000061": "0x1",
    "0x0000000000000000000000000000000000000062": "0x1",
    "0x0000000000000000000000000000000000000063": "0x1",
    "0x0000000000000000000000000000000000000064": "0x1",
    "0x0000000000000000000000000000000000000065": "0x1",
    "0x0000000000000000000000000000000000000066": "0x1",
    "0x0000000000000000000000000000000000000067": "0x1",
    "0x0000000000000000000000000000000000000068": "0x1",
    "0x0000000000000000000000000000000000000069": "0x1",
    "0x000000000000000000000000000000000000006a": "0x1",
    "0x000000000000000000000000000000000000006b": "0x1",
    "0x000000000000000000000000000000000000006c": "0x1",
    "0x000000000000000000000000000000000000006d": "0x1",
    "0x000000000000000000000000000000000000006e": "0x1",
    "0x000000000000000000000000000000000000006f": "0x1",
    "0x0000000000000000000000000000000000000070": "0x1",
    "0x0000000000000000000000000000000000000071": "0x1",
    "0x0000000000000000000000000000000000000072": "0x1",
    "0x0000000000000000000000000000000000000073": "0x1",
    "0x0000000000000000000000000000000000000074": "0x1",
    "0x0000000000000000000000000000000000000075": "0x1",
    "0x0000000000000000000000000000000000000076": "0x1",
    "0x0000000000000000000000000000000000000077": "0x1",
    "0x0000000000000000000000000000000000000078": "0x1",
    "0x0000000000000000000000000000000000000079": "0x1",
    "0x000000000000000000000000000000000000007a": "0x1",
    "0x000000000000000000000000000000000000007b": "0x1",
    "0x000000000000000000000000000000000000007c": "0x1",
    "0x000000000000000000000000000000000000007d": "0x1",
    "0x000000000000000000000000000000000000007e": "0x1",
    "0x000000000000000000000000000000000000007f": "0x1",
    "0x0000000000000000000000000000000000000080": "0x1",
    "0x0000000000000000000000000000000000000081": "0x1",
    "0x0000000000000000000000000000000000000082": "0x1",
    "0x0000000000000000000000000000000000000083": "0x1",
    "0x0000000000000000000000000000000000000084": "0x1",
    "0x0000000000000000000000000000000000000085": "0x1",
    "0x0000000000000000000000000000000000000086": "0x1",
    "0x0000000000000000000000000000000000000087": "0x1",
    "0x0000000000000000000000000000000000000088": "0x1",
    "0x0000000000000000000000000000000000000089": "0x1",
    "0x000000000000000000000000000000000000008a": "0x1",
    "0x000000000000000000000000000000000000008b": "0x1",
    "0x000000000000000000000000000000000000008c": "0x1",
    "0x000000000000000000000000000000000000008d": "0x1",
    "0x000000000000000000000000000000000000008e": "0x1",
    "0x000000000000000000000000000000000000008f": "0x1",
    "0x0000000000000000000000000000000000000090": "0x1",
    "0x0000000000000000000000000000000000000091": "0x1",
    "0x0000000000000000000000000000000000000092": "0x1",
    "0x0000000000000000000000000000000000000093": "0x1",
    "0x0000000000000000000000000000000000000094": "0x1",
    "0x0000000000000000000000000000000000000095": "0x1",
    "0x0000000000000000000000000000000000000096": "0x1",
    "0x0000000000000000000000000000000000000097": "0x1",
    "0x0000000000000000000000000000000000000098": "0x1",
    "0x0000000000000000000000000000000000000099": "0x1",
    "0x000000000000000000000000000000000000009a": "0x1",
    "0x000000000000000000000000000000000000009b": "0x1",
    "0x000000000000000000000000000000000000009c": "0x1",
    "0x000000000000000000000000000000000000009d": "0x1",
    "0x000000000000000000000000000000000000009e": "0x1",
    "0x000000000000000000000000000000000000009f": "0x1",
    "0x00000000000000000000000000000000000000a0": "0x1",
    "0x00000000000000000000000000000000000000a1": "0x1",
    "0x00000000000000000000000000000000000000a2": "0x1",
    "0x00000000000000000000000000000000000000a3": "0x1",
    "0x00000000000000000000000000000000000000a4": "0x1",
    "0x00000000000000000000000000000000000000a5": "0x1",
    "0x00000000000000000000000000000000000000a6": "0x1",
    "0x00000000000000000000000000000000000000a7": "0x1",
    "0x00000000000000000000000000000000000000a8": "0x1",
    "0x00000000000000000000000000000000000000a9": "0x1",
    "0x00000000000000000000000000000000000000aa": "0x1",
    "0x00000000000000000000000000000000000000ab": "0x1",
    "0x00000000000000000000000000000000000000ac": "0x1",
    "0x00000000000000000000000000000000000000ad": "0x1",
    "0x00000000000000000000000000000000000000ae": "0x1",
    "0x00000000000000000000000000000000000000af": "0x1",
    "0x00000000000000000000000000000000000000b0": "0x1",
    "0x00000000000000000000000000000000000000b1": "0x1",
    "0x00000000000000000000000000000000000000b2": "0x1",
    "0x00000000000000000000000000000000000000b3": "0x1",
    "0x00000000000000000000000000000000000000b4": "0x1",
    "0x00000000000000000000000000000000000000b5": "0x1",
    "0x00000000000000000000000000000000000000b6": "0x1",
    "0x00000000000000000000000000000000000000b7": "0x1",
    "0x00000000000000000000000000000000000000b8": "0x1",
    "0x00000000000000000000000000000000000000b9": "0x1",
    "0x00000000000000000000000000000000000000ba": "0x1",
    "0x00000000000000000000000000000000000000bb": "0x1",
    "0x00000000000000000000000000000000000000bc": "0x1",
    "0x00000000000000000000000000000000000000bd": "0x1",
    "0x00000000000000000000000000000000000000be": "0x1",
    "0x00000000000000000000000000000000000000bf": "0x1",
    "0x00000000000000000000000000000000000000c0": "0x1",
    "0x00000000000000000000000000000000000000c1": "0x1",
    "0x00000000000000000000000000000000000000c2": "0x1",
    "0x00000000000000000000000000000000000000c3": "0x1",
    "0x00000000000000000000000000000000000000c4": "0x1",
    "0x00000000000000000000000000000000000000c5": "0x1",
    "0x00000000000000000000000000000000000000c6": "0x1",
    "0x00000000000000000000000000000000000000c7": "0x1",
    "0x00000000000000000000000000000000000000c8": "0x1",
    "0x00000000000000000000000000000000000000c9": "0x1",
    "0x00000000000000000000000000000000000000ca": "0x1",
    "0x00000000000000000000000000000000000000cb": "0x1",
    "0x00000000000000000000000000000000000000cc": "0x1",
    "0x00000000000000000000000000000000000000cd": "0x1",
    "0x00000000000000000000000000000000000000ce": "0x1",
    "0x00000000000000000000000000000000000000cf": "0x1",
    "0x00000000000000000000000000000000000000d0": "0x1",
    "0x00000000000000000000000000000000000000d1": "0x1",
    "0x00000000000000000000000000000000000000d2": "0x1",
    "0x00000000000000000000000000000000000000d3": "0x1",
    "0x00000000000000000000000000000000000000d4": "0x1",
    "0x00000000000000000000000000000000000000d5": "0x1",
    "0x00000000000000000000000000000000000000d6": "0x1",
    "0x00000000000000000000000000000000000000d7": "0x1",
    "0x00000000000000000000000000000000000000d8": "0x1",
    "0x00000000000000000000000000000000000000d9": "0x1",
    "0x00000000000000000000000000000000000000da": "0x1",
    "0x00000000000000000000000000000000000000db": "0x1",
    "0x00000000000000000000000000000000000000dc": "0x1",
    "0x00000000000000000000000000000000000000dd": "0x1",
    "0x00000000000000000000000000000000000000de": "0x1",
    "0x00000000000000000000000000000000000000df": "0x1",
    "0x00000000000000000000000000000000000000e0": "0x1",
    "0x00000000000000000000000000000000000000e1": "0x1",
    "0x00000000000000000000000000000000000000e2": "0x1",
    "0x00000000000000000000000000000000000000e3": "0x1",
    "0x00000000000000000000000000000000000000e4": "0x1",
    "0x00000000000000000000000000000000000000e5": "0x1",
    "0x00000000000000000000000000000000000000e6": "0x1",
    "0x00000000000000000000000000000000000000e7": "0x1",
    "0x00000000000000000000000000000000000000e8": "0x1",
    "0x00000000000000000000000000000000000000e9": "0x1",
    "0x00000000000000000000000000000000000000ea": "0x1",
    "0x00000000000000000000000000000000000000eb": "0x1",
    "0x00000000000000000000000000000000000000ec": "0x1",
    "0x00000000000000000000000000000000000000ed": "0x1",
    "0x00000000000000000000000000000000000000ee": "0x1",
    "0x00000000000000000000000000000000000000ef": "0x1",
    "0x00000000000000000000000000000000000000f0": "0x1",
    "0x00000000000000000000000000000000000000f1": "0x1",
    "0x00000000000000000000000000000000000000f2": "0x1",
    "0x00000000000000000000000000000000000000f3": "0x1",
    "0x00000000000000000000000000000000000000f4": "0x1",
    "0x00000000000000000000000000000000000000f5": "0x1",
    "0x00000000000000000000000000000000000000f6": "0x1",
    "0x00000000000000000000000000000000000000f7": "0x1",
    "0x00000000000000000000000000000000000000f8": "0x1",
    "0x00000000000000000000000000000000000000f9": "0x1",
    "0x00000000000000000000000000000000000000fa": "0x1",
    "0x00000000000000000000000000000000000000fb": "0x1",
    "0x00000000000000000000000000000000000000fc": "0x1",
    "0x00000000000000000000000000000000000000fd": "0x1",
    "0x00000000000000000000000000000000000000fe": "0x1",
    "0x00000000000000000000000000000000000000ff": "0x1",
    "0x4c2ae482593505f0163cdefc073e81c63cda4107": "0x152d02c7e14af6800000",
    "0xa8e8f14732658e4b51e8711931053a8a69baf2b1": "0x152d02c7e14af6800000",
    "0xd9a5179f091d85051d3c982785efd1455cec8699": "0x84595161401484a000000",
    "0xe0a2bd4258d2768837baa26a28fe71dc079f84c7": "0x4a47e3c12448f4ad000000"
}

},{}],22:[function(require,module,exports){
module.exports={
    "0x0000000000000000000000000000000000000001": "0x1",
    "0x0000000000000000000000000000000000000002": "0x1",
    "0x0000000000000000000000000000000000000003": "0x1",
    "0x0000000000000000000000000000000000000004": "0x1",
    "0x00521965e7bd230323c423d96c657db5b79d099f": "0x100000000000000000000000000000000000000000000000000"
}

},{}],23:[function(require,module,exports){
module.exports={
    "0x000d836201318ec6899a67540690382780743280": "0xad78ebc5ac6200000",
    "0x001762430ea9c3a26e5749afdb70da5f78ddbb8c": "0xad78ebc5ac6200000",
    "0x001d14804b399c6ef80e64576f657660804fec0b": "0xe3aeb5737240a00000",
    "0x0032403587947b9f15622a68d104d54d33dbd1cd": "0x433874f632cc60000",
    "0x00497e92cdc0e0b963d752b2296acb87da828b24": "0xa8f649fe7c6180000",
    "0x004bfbe1546bc6c65b5c7eaa55304b38bbfec6d3": "0x6c6b935b8bbd400000",
    "0x005a9c03f69d17d66cbb8ad721008a9ebbb836fb": "0x6c6b935b8bbd400000",
    "0x005d0ee8155ec0a6ff6808552ca5f16bb5be323a": "0xaadec983fcff40000",
    "0x007622d84a234bb8b078230fcf84b67ae9a8acae": "0x25e1cc519952f80000",
    "0x007b9fc31905b4994b04c9e2cfdc5e2770503f42": "0x6c5db2a4d815dc0000",
    "0x007f4a23ca00cd043d25c2888c1aa5688f81a344": "0x29f0a95bfbf7290000",
    "0x008639dabbe3aeac887b5dc0e43e13bcd287d76c": "0x10d0e3c87d6e2c0000",
    "0x0089508679abf8c71bf6781687120e3e6a84584d": "0x6194049f30f7200000",
    "0x008fc7cbadffbd0d7fe44f8dfd60a79d721a1c9c": "0x3635c9adc5dea00000",
    "0x009560a3de627868f91fa8bfe1c1b7afaf08186b": "0x1c67f5f7baa0b00000",
    "0x00969747f7a5b30645fe00e44901435ace24cc37": "0x5c283d410394100000",
    "0x009a6d7db326679b77c90391a7476d238f3ba33e": "0xada55474b81340000",
    "0x009eef0a0886056e3f69211853b9b7457f3782e4": "0xa2a878069b28e00000",
    "0x009fdbf44e1f4a6362b769c39a475f95a96c2bc7": "0x1e931283ccc8500000",
    "0x00a5797f52c9d58f189f36b1d45d1bf6041f2f6b": "0x127d1b3461acd1a0000",
    "0x00aa5381b2138ebeffc191d5d8c391753b7098d2": "0x35abb09ffedeb68000",
    "0x00aada25ea2286709abb422d41923fd380cd04c7": "0x233df3299f61720000",
    "0x00acbfb2f25a5485c739ef70a44eeeeb7c65a66f": "0x56bc75e2d63100000",
    "0x00acc6f082a442828764d11f58d6894ae408f073": "0xcb49b44ba602d800000",
    "0x00b277b099a8e866ca0ec65bcb87284fd142a582": "0x6acb3df27e1f880000",
    "0x00bdd4013aa31c04616c2bc9785f2788f915679b": "0xb9f65d00f63c0000",
    "0x00c27d63fde24b92ee8a1e7ed5d26d8dc5c83b03": "0x6c6b935b8bbd400000",
    "0x00c40fe2095423509b9fd9b754323158af2310f3": "0x0",
    "0x00d75ed60c774f8b3a5a5173fb1833ad7105a2d9": "0x6cb7e74867d5e60000",
    "0x00d78d89b35f472716eceafebf600527d3a1f969": "0x5e0549c9632e1d80000",
    "0x00dae27b350bae20c5652124af5d8b5cba001ec1": "0x22b1c8c1227a00000",
    "0x00dc01cbf44978a42e8de8e436edf94205cfb6ec": "0x4f0febbcda8cb40000",
    "0x00e681bc2d10db62de85848324492250348e90bf": "0x43c33c1937564800000",
    "0x00f463e137dcf625fbf3bca39eca98d2b968cf7f": "0x14061b9d77a5e980000",
    "0x010007394b8b7565a1658af88ce463499135d6b7": "0x56bc75e2d63100000",
    "0x010df1df4bed23760d2d1c03781586ddf7918e54": "0x340aad21b3b700000",
    "0x010f4a98dfa1d9799bf5c796fb550efbe7ecd877": "0x1b2f292236292c70000",
    "0x01155057002f6b0d18acb9388d3bc8129f8f7a20": "0x48a43c54602f700000",
    "0x01226e0ad8d62277b162621c62c928e96e0b9a8c": "0x6c6b935b8bbd400000",
    "0x0126e12ebc17035f35c0e9d11dd148393c405d7a": "0x6c660645aa47180000",
    "0x012f396a2b5eb83559bac515e5210df2c8c362ba": "0xad78ebc5ac6200000",
    "0x0134ff38155fabae94fd35c4ffe1d79de7ef9c59": "0x35659ef93f0fc40000",
    "0x0136a5af6c3299c6b5f005fdaddb148c070b299b": "0x11aa9ac15f1280000",
    "0x01488ad3da603c4cdd6cb0b7a1e30d2a30c8fc38": "0xad78ebc5ac6200000",
    "0x014974a1f46bf204944a853111e52f1602617def": "0x6c6b935b8bbd400000",
    "0x014b7f67b14f5d983d87014f570c8b993b9872b5": "0xad78ebc5ac6200000",
    "0x0151fa5d17a2dce2d7f1eb39ef7fe2ad213d5d89": "0xd8d726b7177a800000",
    "0x01577afd4e50890247c9b10d44af73229aec884f": "0x24dce54d34a1a00000",
    "0x015f097d9acddcddafaf2a107eb93a40fc94b04c": "0x43c33c1937564800000",
    "0x0169c1c210eae845e56840412e1f65993ea90fb4": "0x6c6b935b8bbd400000",
    "0x016b60bb6d67928c29fd0313c666da8f1698d9c5": "0x6c6b935b8bbd400000",
    "0x016c85e1613b900fa357b8283b120e65aefcdd08": "0x2b5d9784a97cd50000",
    "0x018492488ba1a292342247b31855a55905fef269": "0x796e3ea3f8ab00000",
    "0x018f20a27b27ec441af723fd9099f2cbb79d6263": "0x75792a8abdef7c0000",
    "0x0191eb547e7bf6976b9b1b577546761de65622e2": "0x6c6b4c4da6ddbe0000",
    "0x019d709579ff4bc09fdcdde431dc1447d2c260bc": "0x1158e460913d00000",
    "0x01a25a5f5af0169b30864c3be4d7563ccd44f09e": "0x4d853c8f8908980000",
    "0x01a7d9fa7d0eb1185c67e54da83c2e75db69e39f": "0x19d4addd0d8bc960000",
    "0x01a818135a414210c37c62b625aca1a54611ac36": "0xe18398e7601900000",
    "0x01b1cae91a3b9559afb33cdc6d689442fdbfe037": "0xad78ebc5ac6200000",
    "0x01b5b5bc5a117fa08b34ed1db9440608597ac548": "0xad78ebc5ac6200000",
    "0x01bbc14f67af0639aab1441e6a08d4ce7162090f": "0x46fcf68ff8be060000",
    "0x01d03815c61f416b71a2610a2daba59ff6a6de5b": "0x205dfe50b81c82e0000",
    "0x01d599ee0d5f8c38ab2d392e2c65b74c3ce31820": "0x1ba5abf9e779380000",
    "0x01e40521122530d9ac91113c06a0190b6d63850b": "0x487a9a304539440000",
    "0x01e6415d587b065490f1ed7f21d6e0f386ee6747": "0x6c6b935b8bbd400000",
    "0x01e864d354741b423e6f42851724468c74f5aa9c": "0x43c33c1937564800000",
    "0x01ed5fba8d2eab673aec042d30e4e8a611d8c55a": "0x6c6b935b8bbd400000",
    "0x01fb8ec12425a04f813e46c54c05748ca6b29aa9": "0xe15730385467c0000",
    "0x01ff1eb1dead50a7f2f9638fdee6eccf3a7b2ac8": "0x2086ac351052600000",
    "0x020362c3ade878ca90d6b2d889a4cc5510eed5f3": "0x3888e8b311adb38000",
    "0x0203ae01d4c41cae1865e04b1f5b53cdfaecae31": "0x3689cdceb28cd70000",
    "0x02089361a3fe7451fb1f87f01a2d866653dc0b07": "0x22ac74832b5040000",
    "0x021f69043de88c4917ca10f1842897eec0589c7c": "0x6b44cfb81487f40000",
    "0x02290fb5f9a517f82845acdeca0fc846039be233": "0x6c6b935b8bbd400000",
    "0x0239b4f21f8e05cd01512b2be7a0e18a6d974607": "0x3635c9adc5dea00000",
    "0x02477212ffdd75e5155651b76506b1646671a1eb": "0x5f68e8131ecf800000",
    "0x024a098ae702bef5406c9c22b78bd4eb2cc7a293": "0xd8d726b7177a800000",
    "0x024bdd2c7bfd500ee7404f7fb3e9fb31dd20fbd1": "0x9c2007651b2500000",
    "0x025367960304beee34591118e9ac2d1358d8021a": "0x6c6b935b8bbd400000",
    "0x0256149f5b5063bea14e15661ffb58f9b459a957": "0x2629f66e0c53000000",
    "0x02603d7a3bb297c67c877e5d34fbd5b913d4c63a": "0x1158e460913d00000",
    "0x0261ad3a172abf1315f0ffec3270986a8409cb25": "0xb08213bcf8ffe0000",
    "0x026432af37dc5113f1f46d480a4de0b28052237e": "0x1349b786e40bfc0000",
    "0x0266ab1c6b0216230b9395443d5fa75e684568c6": "0x3635c9adc5dea00000",
    "0x02751dc68cb5bd737027abf7ddb77390cd77c16b": "0x1158e460913d00000",
    "0x02778e390fa17510a3428af2870c4273547d386c": "0x36c3c66170c0d720000",
    "0x02ade5db22f8b758ee1443626c64ec2f32aa0a15": "0x43c33c1937564800000",
    "0x02af2459a93d0b3f4d062636236cd4b29e3bcecf": "0x678a932062e4180000",
    "0x02b1af72339b2a2256389fd64607de24f0de600a": "0x6c6b935b8bbd400000",
    "0x02b643d6fabd437a851accbe79abb7fde126dccf": "0x18650127cc3dc800000",
    "0x02b6d65cb00b7b36e1fb5ed3632c4cb20a894130": "0x43c33c1937564800000",
    "0x02b7b1d6b34ce053a40eb65cd4a4f7dddd0e9f30": "0x252248deb6e6940000",
    "0x02c9f7940a7b8b7a410bf83dc9c22333d4275dd3": "0x10f0cf064dd59200000",
    "0x02d4a30968a39e2b3498c3a6a4ed45c1c6646822": "0x6c6b935b8bbd400000",
    "0x02dfcb17a1b87441036374b762a5d3418b1cb4d4": "0x48b02ba9d1ba460000",
    "0x02e4cb22be46258a40e16d4338d802fffd00c151": "0x149696eaceba810000",
    "0x02e816afc1b5c0f39852131959d946eb3b07b5ad": "0x3635c9adc5dea00000",
    "0x02f7f67209b16a17550c694c72583819c80b54ad": "0x5559306a78a700000",
    "0x030973807b2f426914ad00181270acd27b8ff61f": "0x121ea68c114e5100000",
    "0x03097923ba155e16d82f3ad3f6b815540884b92c": "0x62a992e53a0af00000",
    "0x030fb3401f72bd3418b7d1da75bf8c519dd707dc": "0xa2a15d09519be00000",
    "0x031e25db516b0f099faebfd94f890cf96660836b": "0x6c6b935b8bbd400000",
    "0x0328510c09dbcd85194a98d67c33ac49f2f94d60": "0x2544faa778090e00000",
    "0x0329188f080657ab3a2afa522467178279832085": "0xbbf510ddfcb260000",
    "0x03317826d1f70aa4bddfa09be0c4105552d2358b": "0x21a754a6dc5280000",
    "0x03337012ae1d7ff3ee7f697c403e7780188bf0ef": "0xad78ebc5ac6200000",
    "0x03377c0e556b640103289a6189e1aeae63493467": "0x43c33c1937564800000",
    "0x0349634dc2a9e80c3f7721ee2b5046aeaaedfbb5": "0xd8d726b7177a800000",
    "0x0355bcacbd21441e95adeedc30c17218c8a408ce": "0x15af1d78b58c400000",
    "0x036eeff5ba90a6879a14dff4c5043b18ca0460c9": "0x56bc75e2d63100000",
    "0x03714b41d2a6f751008ef8dd4d2b29aecab8f36e": "0x14542ba12a337c00000",
    "0x0372e852582e0934344a0fed2178304df25d4628": "0x43c33c1937564800000",
    "0x0372ee5508bf8163ed284e5eef94ce4d7367e522": "0x56bc75e2d63100000",
    "0x037dd056e7fdbd641db5b6bea2a8780a83fae180": "0x796e3ea3f8ab00000",
    "0x038323b184cff7a82ae2e1bda7793fe4319ca0bf": "0x43c33c1937564800000",
    "0x038779ca2dbe663e63db3fe75683ea0ec62e2383": "0x5a87e7d7f5f6580000",
    "0x038e45eadd3d88b87fe4dab066680522f0dfc8f9": "0x21e19e0c9bab2400000",
    "0x0392549a727f81655429cb928b529f25df4d1385": "0x16c43a0eea0740000",
    "0x0394b90fadb8604f86f43fc1e35d3124b32a5989": "0x296aa140278e700000",
    "0x039e7a4ebc284e2ccd42b1bdd60bd6511c0f7706": "0xf015f25736420000",
    "0x039ef1ce52fe7963f166d5a275c4b1069fe3a832": "0x15af39e4aab2740000",
    "0x03a26cfc4c18316f70d59e9e1a79ee3e8b962f4c": "0x6c6b935b8bbd400000",
    "0x03aa622881236dd0f4940c24c324ff8b7b7e2186": "0xad78ebc5ac62000000",
    "0x03af7ad9d5223cf7c8c13f20df67ebe5ffc5bb41": "0xad78ebc5ac6200000",
    "0x03b0f17cd4469ddccfb7da697e82a91a5f9e7774": "0x1158e460913d00000",
    "0x03b41b51f41df20dd279bae18c12775f77ad771c": "0x3635c9adc5dea00000",
    "0x03be5b4629aefbbcab9de26d39576cb7f691d764": "0xadf30ba70c8970000",
    "0x03c647a9f929b0781fe9ae01caa3e183e876777e": "0x182ab7c20ce5240000",
    "0x03c91d92943603e752203e05340e566013b90045": "0x2b7cc2e9c3225c0000",
    "0x03cb4c4f4516c4ff79a1b6244fbf572e1c7fea79": "0x9489237adb9a500000",
    "0x03cb98d7acd817de9d886d22fab3f1b57d92a608": "0x56bc75e2d631000000",
    "0x03cc9d2d21f86b84ac8ceaf971dba78a90e62570": "0x57473d05dabae80000",
    "0x03d1724fd00e54aabcd2de2a91e8462b1049dd3a": "0x8f1d5c1cae37400000",
    "0x03dedfcd0b3c2e17c705da248790ef98a6bd5751": "0x487a9a304539440000",
    "0x03e8b084537557e709eae2e1e1a5a6bce1ef8314": "0x1158e460913d00000",
    "0x03ea6d26d080e57aee3926b18e8ed73a4e5b2826": "0xad78ebc5ac6200000",
    "0x03eb3cb860f6028da554d344a2bb5a500ae8b86f": "0x6c6b935b8bbd400000",
    "0x03ebc63fda6660a465045e235fbe6e5cf195735f": "0x7b06ce87fdd680000",
    "0x03ef6ad20ff7bd4f002bac58d47544cf879ae728": "0x175c758d0b96e5c0000",
    "0x03f7b92008813ae0a676eb212814afab35221069": "0x6c6b935b8bbd400000",
    "0x041170f581de80e58b2a045c8f7c1493b001b7cb": "0x303c74a1a336940000",
    "0x0413d0cf78c001898a378b918cd6e498ea773c4d": "0xf2dc7d47f15600000",
    "0x04241b41ecbd0bfdf1295e9d4fa59ea09e6c6186": "0x655f769450bc780000",
    "0x043707071e2ae21eed977891dc79cd5d8ee1c2da": "0x6c6b935b8bbd400000",
    "0x044e853144e3364495e7a69fa1d46abea3ac0964": "0x2ab2254b1dc9a8000",
    "0x0455dcec8a7fc4461bfd7f37456fce3f4c3caac7": "0x15af1d78b58c400000",
    "0x045ed7f6d9ee9f252e073268db022c6326adfc5b": "0x56bc75e2d63100000",
    "0x046377f864b0143f282174a892a73d3ec8ec6132": "0xa5aa85009e39c0000",
    "0x0469e8c440450b0e512626fe817e6754a8152830": "0x6c6b935b8bbd400000",
    "0x046d274b1af615fb505a764ad8dda770b1db2f3d": "0x6c6b935b8bbd400000",
    "0x047d5a26d7ad8f8e70600f70a398ddaa1c2db26f": "0x14542ba12a337c00000",
    "0x047e87c8f7d1fce3b01353a85862a948ac049f3e": "0x50c5e761a444080000",
    "0x047f9bf1529daf87d407175e6f171b5e59e9ff3e": "0x233c8fe42703e80000",
    "0x04852732b4c652f6c2e58eb36587e60a62da14db": "0x43c33c1937564800000",
    "0x048a8970ea4145c64d5517b8de5b46d0595aad06": "0x43c33c1937564800000",
    "0x049c5d4bc6f25d4e456c697b52a07811ccd19fb1": "0x104400a2470e680000",
    "0x04a1cada1cc751082ff8da928e3cfa000820a9e9": "0x22b1c8c1227a00000",
    "0x04a80afad53ef1f84165cfd852b0fdf1b1c24ba8": "0x324e964b3eca80000",
    "0x04aafc8ae5ce6f4903c89d7fac9cb19512224777": "0x1b1ae4d6e2ef500000",
    "0x04ba4bb87140022c214a6fac42db5a16dd954045": "0x3635c9adc5dea00000",
    "0x04ba8a3f03f08b895095994dda619edaacee3e7a": "0x6c6b935b8bbd400000",
    "0x04c2c64bb54c3eccd05585e10ec6f99a0cdb01a3": "0x56bc75e2d63100000",
    "0x04ce45f600db18a9d0851b29d9393ebdaafe3dc5": "0x1158e460913d00000",
    "0x04d6b8d4da867407bb997749debbcdc0b358538a": "0x3635c9adc5dea00000",
    "0x04d73896cf6593a691972a13a6e4871ff2c42b13": "0x6c6b935b8bbd400000",
    "0x04d82af9e01a936d97f8f85940b970f9d4db9936": "0xad78ebc5ac6200000",
    "0x04e5f5bc7c923fd1e31735e72ef968fd67110c6e": "0x57551dbc8e624c0000",
    "0x04eca501630abce35218b174956b891ba25efb23": "0x36369ed7747d260000",
    "0x0505a08e22a109015a22f685305354662a5531d5": "0x8cf23f909c0fa00000",
    "0x0514954c3c2fb657f9a06f510ea22748f027cdd3": "0x15af1d78b58c400000",
    "0x051633080d07a557adde319261b074997f14692d": "0x13a6b2b564871a00000",
    "0x0517448dada761cc5ba4033ee881c83037036400": "0x6c4fd1ee246e780000",
    "0x051d424276b21239665186133d653bb8b1862f89": "0x3635c9adc5dea00000",
    "0x0521bc3a9f8711fecb10f50797d71083e341eb9d": "0x1158e460913d00000",
    "0x05236d4c90d065f9e3938358aaffd777b86aec49": "0x1b1ae4d6e2ef500000",
    "0x052a58e035f1fe9cdd169bcf20970345d12b9c51": "0x50c5e761a444080000",
    "0x052eab1f61b6d45517283f41d1441824878749d0": "0xd8d726b7177a800000",
    "0x05336e9a722728d963e7a1cf2759fd0274530fca": "0x31a2443f888a798000",
    "0x053471cd9a41925b3904a5a8ffca3659e034be23": "0xad201a6794ff80000",
    "0x05361d8eb6941d4e90fb7e1418a95a32d5257732": "0x1158e460913d00000",
    "0x05423a54c8d0f9707e704173d923b946edc8e700": "0x6ea03c2bf8ba58000",
    "0x05440c5b073b529b4829209dff88090e07c4f6f5": "0x45d29737e22f200000",
    "0x055ab658c6f0ed4f875ed6742e4bc7292d1abbf0": "0x486cb9799191e0000",
    "0x055bd02caf19d6202bbcdc836d187bd1c01cf261": "0x56bc75e2d63100000",
    "0x055eac4f1ad3f58f0bd024d68ea60dbe01c6afb3": "0x56bc75e2d63100000",
    "0x05665155cc49cbf6aabdd5ae92cbfaad82b8c0c1": "0x15af1d78b58c400000",
    "0x056686078fb6bcf9ba0a8a8dc63a906f5feac0ea": "0x1b181e4bf2343c0000",
    "0x05696b73916bd3033e05521e3211dfec026e98e4": "0x6c6b935b8bbd400000",
    "0x056b1546894f9a85e203fb336db569b16c25e04f": "0x92edb09ff08d88000",
    "0x057949e1ca0570469e4ce3c690ae613a6b01c559": "0xad78ebc5ac6200000",
    "0x057dd29f2d19aa3da42327ea50bce86ff5c911d9": "0xd8d726b7177a800000",
    "0x057f7f81cd7a406fc45994408b5049912c566463": "0x5c283d410394100000",
    "0x05915d4e225a668162aee7d6c25fcfc6ed18db03": "0x398c37279259e0000",
    "0x0596a27dc3ee115fce2f94b481bc207a9e261525": "0x3635c9adc5dea00000",
    "0x05a830724302bc0f6ebdaa1ebeeeb46e6ce00b39": "0x556f64c1fe7fa0000",
    "0x05ae7fd4bbcc80ca11a90a1ec7a301f7cccc83db": "0x3154c9729d05780000",
    "0x05bb64a916be66f460f5e3b64332110d209e19ae": "0xe3aeb5737240a00000",
    "0x05bf4fcfe772e45b826443852e6c351350ce72a2": "0x1b1ae4d6e2ef5000000",
    "0x05c64004a9a826e94e5e4ee267fa2a7632dd4e6f": "0x36dc42ebff90b7f8000",
    "0x05c736d365aa37b5c0be9c12c8ad5cd903c32cf9": "0x1455e7b800a86880000",
    "0x05cb6c3b0072d3116761b532b218443b53e8f6c5": "0x1e02c3d7fca9b6280000",
    "0x05d0f4d728ebe82e84bf597515ad41b60bf28b39": "0xe3aeb5737240a00000",
    "0x05d68dad61d3bbdfb3f779265c49474aff3fcd30": "0x222c55dc1519d8000",
    "0x05e671de55afec964b074de574d5158d5d21b0a3": "0xd5967be4fc3f100000",
    "0x05e97b09492cd68f63b12b892ed1d11d152c0eca": "0x3708baed3d68900000",
    "0x05f3631f5664bdad5d0132c8388d36d7d8920918": "0x1158e460913d00000",
    "0x0609d83a6ce1ffc9b690f3e9a81e983e8bdc4d9d": "0xed2b525841adfc00000",
    "0x061ea4877cd08944eb64c2966e9db8dedcfec06b": "0x3635c9adc5dea00000",
    "0x0625d06056968b002206ff91980140242bfaa499": "0x3635c9adc5dea00000",
    "0x0628bfbe5535782fb588406bc96660a49b011af5": "0x52663ccab1e1c00000",
    "0x0631d18bbbbd30d9e1732bf36edae2ce8901ab80": "0xa3f98855ec39900000",
    "0x0631dc40d74e5095e3729eddf49544ecd4396f67": "0x8ac7230489e800000",
    "0x063759dd1c4e362eb19398951ff9f8fad1d31068": "0x21e19e0c9bab2400000",
    "0x065ff575fd9c16d3cb6fd68ffc8f483fc32ec835": "0xad78ebc5ac6200000",
    "0x06618e9d5762df62028601a81d4487d6a0ecb80e": "0x487a9a304539440000",
    "0x066647cfc85d23d37605573d208ca154b244d76c": "0x21e19e0c9bab2400000",
    "0x0678654ac6761db904a2f7e8595ec1eaac734308": "0x2f98b29c2818f80000",
    "0x06860a93525955ff624940fadcffb8e149fd599c": "0x6c68ccd09b022c0000",
    "0x068ce8bd6e902a45cb83b51541b40f39c4469712": "0x11c0f9bad4a46e00000",
    "0x068e29b3f191c812a6393918f71ab933ae6847f2": "0x6c6acc67d7b1d40000",
    "0x068e655766b944fb263619658740b850c94afa31": "0x1e87f85809dc00000",
    "0x06964e2d17e9189f88a8203936b40ac96e533c06": "0xfc936392801c0000",
    "0x06994cd83aa2640a97b2600b41339d1e0d3ede6c": "0xd8d726b7177a80000",
    "0x069ed0ab7aa77de571f16106051d92afe195f2d0": "0xad78ebc5ac6200000",
    "0x06ac26ad92cb859bd5905ddce4266aa0ec50a9c5": "0x2a034919dfbfbc0000",
    "0x06b0c1e37f5a5ec4bbf50840548f9d3ac0288897": "0xd8d882e1928e7d0000",
    "0x06b0ff834073cce1cbc9ea557ea87b605963e8b4": "0x1043561a8829300000",
    "0x06b106649aa8c421ddcd1b8c32cd0418cf30da1f": "0x878678326eac9000000",
    "0x06b5ede6fdf1d6e9a34721379aeaa17c713dd82a": "0x6c6b935b8bbd400000",
    "0x06cbfa08cdd4fba737bac407be8224f4eef35828": "0x202be5e8382e8b8000",
    "0x06d6cb308481c336a6e1a225a912f6e6355940a1": "0x5f68e8131ecf800000",
    "0x06dc7f18cee7edab5b795337b1df6a9e8bd8ae59": "0x15af1d78b58c400000",
    "0x06f68de3d739db41121eacf779aada3de8762107": "0x18493fba64ef00000",
    "0x06f7dc8d1b9462cef6feb13368a7e3974b097f9f": "0x6c6b935b8bbd400000",
    "0x0701f9f147ec486856f5e1b71de9f117e99e2105": "0x965da717fd5b80000",
    "0x070d5d364cb7bbf822fc2ca91a35bdd441b215d5": "0x6c6b935b8bbd400000",
    "0x071dd90d14d41f4ff7c413c24238d3359cd61a07": "0x7b53f79e888dac00000",
    "0x0726c42e00f45404836eb1e280d073e7059687f5": "0x58003e3fb947a38000",
    "0x0727be0a2a00212048b5520fbefb953ebc9d54a0": "0x21e19e0c9bab2400000",
    "0x0729a8a4a5ba23f579d0025b1ad0f8a0d35cdfd2": "0x20dd68aaf3289100000",
    "0x0729b4b47c09eb16158464c8aa7fd9690b438839": "0x6c68ccd09b022c0000",
    "0x0734a0a81c9562f4d9e9e10a8503da15db46d76e": "0xfc936392801c0000",
    "0x073c67e09b5c713c5221c8a0c7f3f74466c347b0": "0x41bad155e6512200000",
    "0x073f1ed1c9c3e9c52a9b0249a5c1caa0571fdf05": "0x3d0ff0b013b800000",
    "0x0748713145ef83c3f0ef4d31d823786f7e9cc689": "0xf3f20b8dfa69d00000",
    "0x075d15e2d33d8b4fa7dba8b9e607f04a261e340b": "0x678a932062e4180000",
    "0x076561a856455d7ef86e63f87c73dbb628a55f45": "0x30ca024f987b900000",
    "0x076ee99d3548623a03b5f99859d2d785a1778d48": "0xad78ebc5ac6200000",
    "0x0770b43dbae4b1f35a927b4fa8124d3866caf97b": "0x37193ea7ef5b470000",
    "0x0770c61be78772230cb5a3bb2429a72614a0b336": "0x16ee0a299b713418000",
    "0x07723e3c30e8b731ee456a291ee0e798b0204a77": "0x6c6b935b8bbd400000",
    "0x0773eeacc050f74720b4a1bd57895b1cceeb495d": "0x21e19e0c9bab2400000",
    "0x07800d2f8068e448c79a4f69b1f15ef682aae5f6": "0x41bad155e6512200000",
    "0x07a8dadec142571a7d53a4297051786d072cba55": "0x13b6da1139bda8000",
    "0x07af938c1237a27c9030094dcf240750246e3d2c": "0x1b1ae4d6e2ef500000",
    "0x07b1a306cb4312df66482c2cae72d1e061400fcd": "0x43c33c1937564800000",
    "0x07b7a57033f8f11330e4665e185d234e83ec140b": "0xea7ee92a0c9a0b8000",
    "0x07bc2cc8eedc01970700efc9c4fb36735e98cd71": "0xd8d726b7177a800000",
    "0x07d41217badca5e0e60327d845a3464f0f27f84a": "0xd8d726b7177a800000",
    "0x07d4334ec385e8aa54eedaeadb30022f0cdfa4ab": "0x8e91d520f2eb790000",
    "0x07dae622630d1136381933d2ad6b22b839d82102": "0xad78ebc5ac6200000",
    "0x07dc2bf83bc6af19a842ffea661af5b41b67fda1": "0x5150ae84a8cdf00000",
    "0x07dc8c8b927adbedfa8f5d639b4352351f2f36d2": "0x110aed3b5530db0000",
    "0x07ddd0422c86ef65bf0c7fc3452862b1228b08b8": "0x6ff5d2aa8f9fcf0000",
    "0x07e1162ceae3cf21a3f62d105990302e307f4e3b": "0x52f103edb66ba80000",
    "0x07e2b4cdeed9d087b12e556d9e770c13c099615f": "0x243d4d18229ca20000",
    "0x07feef54c136850829badc4b49c3f2a73c89fb9e": "0x6685ac1bfe32c0000",
    "0x080546508a3d2682c8b9884f13637b8847b44db3": "0x6c6b935b8bbd400000",
    "0x08090876baadfee65c3d363ba55312748cfa873d": "0x5c2a99371cffe10000",
    "0x08166f02313feae18bb044e7877c808b55b5bf58": "0x6acb3df27e1f880000",
    "0x0829d0f7bb7c446cfbb0deadb2394d9db7249a87": "0x22ca3587cf4eb0000",
    "0x08306de51981e7aca1856859b7c778696a6b69f9": "0xad78ebc5ac62000000",
    "0x0837539b5f6a522a482cdcd3a9bb7043af39bdd2": "0x14542ba12a337c00000",
    "0x0838a7768d9c2aca8ba279adfee4b1f491e326f1": "0xad78ebc5ac6200000",
    "0x08411652c871713609af0062a8a1281bf1bbcfd9": "0x4be4e7267b6ae00000",
    "0x084d103254759b343cb2b9c2d8ff9e1ac5f14596": "0x19bff2ff57968c00000",
    "0x08504f05643fab5919f5eea55925d7a3ed7d807a": "0x1158e460913d00000",
    "0x085b4ab75d8362d914435cedee1daa2b1ee1a23b": "0xd255d112e103a00000",
    "0x085ba65febe23eefc2c802666ab1262382cfc494": "0x15af1d78b58c400000",
    "0x087498c0464668f31150f4d3c4bcdda5221ba102": "0x1158e460913d00000",
    "0x0877eeaeab78d5c00e83c32b2d98fa79ad51482f": "0x17d22d71da62260000",
    "0x08936a37df85b3a158cafd9de021f58137681347": "0xfc936392801c0000",
    "0x08a9a44e1f41de3dbba7a363a3ab412c124cd15e": "0xad78ebc5ac6200000",
    "0x08b7bdcf944d5570838be70460243a8694485858": "0x6c6b935b8bbd400000",
    "0x08b84536b74c8c01543da88b84d78bb95747d822": "0xad78ebc5ac6200000",
    "0x08c2f236ac4adcd3fda9fbc6e4532253f9da3bec": "0x1158e460913d00000",
    "0x08c802f87758349fa03e6bc2e2fd0791197eea9a": "0x6c6b935b8bbd400000",
    "0x08c9f1bfb689fdf804d769f82123360215aff93b": "0x6acb3df27e1f880000",
    "0x08cac8952641d8fc526ec1ab4f2df826a5e7710f": "0x1043561a8829300000",
    "0x08ccda50e4b26a0ffc0ef92e9205310706bec2c7": "0x149756c3857c6000000",
    "0x08d0864dc32f9acb36bf4ea447e8dd6726906a15": "0x6c6e59e67c78540000",
    "0x08d4267feb15da9700f7ccc3c84a8918bf17cfde": "0x61093d7c2c6d380000",
    "0x08d4311c9c1bbaf87fabe1a1d01463828d5d98ce": "0x130ee8e7179044400000",
    "0x08d54e83ad486a934cfaeae283a33efd227c0e99": "0x38530583245edc0000",
    "0x08d97eadfcb7b064e1ccd9c8979fbee5e77a9719": "0xe6c5da8d67ac18000",
    "0x08da3a7a0f452161cfbcec311bb68ebfdee17e88": "0x6c6b935b8bbd400000",
    "0x08e38ee0ce48c9ca645c1019f73b5355581c56e6": "0x56bc75e2d631000000",
    "0x08ef3fa4c43ccdc57b22a4b9b2331a82e53818f2": "0xd8d726b7177a800000",
    "0x0909648c18a3ce5bae7a047ec2f868d24cdda81d": "0xcf152640c5c8300000",
    "0x090cd67b60e81d54e7b5f6078f3e021ba65b9a1e": "0x3635c9adc5dea00000",
    "0x090cebef292c3eb081a05fd8aaf7d39bf07b89d4": "0xd8d726b7177a800000",
    "0x090fa9367bda57d0d3253a0a8ff76ce0b8e19a73": "0x3635c9adc5dea00000",
    "0x09146ea3885176f07782e1fe30dce3ce24c49e1f": "0x1158e460913d00000",
    "0x0921605f99164e3bcc28f31caece78973182561d": "0x2b07692a9065a80000",
    "0x09261f9acb451c3788844f0c1451a35bad5098e3": "0x1d5ad27502920600000",
    "0x0927220492194b2eda9fc4bbe38f25d681dfd36c": "0x14542ba12a337c00000",
    "0x092acb624b08c05510189bbbe21e6524d644ccad": "0xfc936392801c0000",
    "0x092e815558402d67f90d6bfe6da0b2fffa91455a": "0x340aad21b3b700000",
    "0x095030e4b82692dcf8b8d0912494b9b378ec9328": "0x48a43c54602f700000",
    "0x095270cc42141dd998ad2862dbd1fe9b44e7e650": "0x410d586a20a4c00000",
    "0x095457f8ef8e2bdc362196b9a9125da09c67e3ab": "0xad78ebc5ac6200000",
    "0x0954a8cb5d321fc3351a7523a617d0f58da676a7": "0x87d9bc7aa498e80000",
    "0x095b0ea2b218d82e0aea7c2889238a39c9bf9077": "0x43c33c1937564800000",
    "0x095b949de3333a377d5019d893754a5e4656ff97": "0x126e72a69a50d00000",
    "0x095e0174829f34c3781be1a5e38d1541ea439b7f": "0x14542ba12a337c00000",
    "0x095f5a51d06f6340d80b6d29ea2e88118ad730fe": "0x6c6e59e67c78540000",
    "0x0968ee5a378f8cadb3bafdbed1d19aaacf936711": "0x3635c9adc5dea00000",
    "0x0977bfba038a44fb49b03970d8d8cf2cb61f8b25": "0x16c4abbebea0100000",
    "0x097da12cfc1f7c1a2464def08c29bed5e2f851e9": "0x1158e460913d00000",
    "0x097ecda22567c2d91cb03f8c5215c22e9dcda949": "0x11651ac3e7a758000",
    "0x0989c200440b878991b69d6095dfe69e33a22e70": "0x678a932062e4180000",
    "0x0990e81cd785599ea236bd1966cf526302c35b9c": "0x3635c9adc5dea00000",
    "0x0998d8273115b56af43c505e087aff0676ed3659": "0xd8d6eddf2d2e180000",
    "0x09a025316f967fa8b9a1d60700063f5a68001caa": "0x21221a99b93ec0000",
    "0x09a928d528ec1b3e25ffc83e218c1e0afe8928c7": "0xfc936392801c0000",
    "0x09ae49e37f121df5dc158cfde806f173a06b0c7f": "0xd8309e26aba1d00000",
    "0x09afa73bc047ef46b977fd9763f87286a6be68c6": "0x1b2fb5e8f06a660000",
    "0x09b4668696f86a080f8bebb91db8e6f87015915a": "0x238ff7b34f60010000",
    "0x09b59b8698a7fbd3d2f8c73a008988de3e406b2b": "0x878678326eac9000000",
    "0x09b7a988d13ff89186736f03fdf46175b53d16e0": "0x14542ba12a337c00000",
    "0x09c177f1ae442411ddacf187d46db956148360e7": "0x1e52e336cde22180000",
    "0x09c88f917e4d6ad473fa12e98ea3c4472a5ed6da": "0x21e19e0c9bab2400000",
    "0x09d0b8cd077c69d9f32d9cca43b3c208a21ed48b": "0x821d221b5291f8000",
    "0x09d6cefd75b0c4b3f8f1d687a522c96123f1f539": "0x14542ba12a337c00000",
    "0x09e437d448861228a232b62ee8d37965a904ed9c": "0x498cf401df8842e8000",
    "0x09ee12b1b42b05af9cf207d5fcac255b2ec411f2": "0x331cddd47e0fe8000",
    "0x09f3f601f605441140586ce0656fa24aa5b1d9ae": "0x5373776fe8c4540000",
    "0x09f9575be57d004793c7a4eb84b71587f97cbb6a": "0xad78ebc5ac6200000",
    "0x0a0650861f785ed8e4bf1005c450bbd06eb48fb6": "0xa6413b79144e7e0000",
    "0x0a06fad7dcd7a492cbc053eeabde6934b39d8637": "0x1158e460913d00000",
    "0x0a077db13ffeb09484c217709d5886b8bf9c5a8b": "0xd8d726b7177a800000",
    "0x0a0ecda6636f7716ef1973614687fd89a820a706": "0x155bd9307f9fe80000",
    "0x0a29a8a4d5fd950075ffb34d77afeb2d823bd689": "0xad78ebc5ac6200000",
    "0x0a2ade95b2e8c66d8ae6f0ba64ca57d783be6d44": "0xd8d726b7177a800000",
    "0x0a2b4fc5d81ace67dc4bba03f7b455413d46fe3d": "0xaadec983fcff40000",
    "0x0a2dcb7a671701dbb8f495728088265873356c8e": "0x83f16ce08a06c0000",
    "0x0a3de155d5ecd8e81c1ff9bbf0378301f8d4c623": "0xd8d726b7177a800000",
    "0x0a47ad9059a249fc936b2662353da6905f75c2b9": "0x6c6b935b8bbd400000",
    "0x0a48296f7631708c95d2b74975bc4ab88ac1392a": "0x10f0cf064dd59200000",
    "0x0a4a011995c681bc999fdd79754e9a324ae3b379": "0x8c19ab06eb89af60000",
    "0x0a58fddd71898de773a74fdae45e7bd84ef43646": "0x1158e460913d00000",
    "0x0a5b79d8f23b6483dbe2bdaa62b1064cc76366ae": "0x6ac882100952c78000",
    "0x0a652e2a8b77bd97a790d0e91361c98890dbb04e": "0x3635c9adc5dea00000",
    "0x0a6ebe723b6ed1f9a86a69ddda68dc47465c2b1b": "0x403d2db599d5e40000",
    "0x0a77e7f72b437b574f00128b21f2ac265133528c": "0x6c6b935b8bbd400000",
    "0x0a917f3b5cb0b883047fd9b6593dbcd557f453b9": "0x3635c9adc5dea00000",
    "0x0a931b449ea8f12cdbd5e2c8cc76bad2c27c0639": "0x13f9e8c79fe058000",
    "0x0a9804137803ba6868d93a55f9985fcd540451e4": "0xb98bc829a6f90000",
    "0x0a9ab2638b1cfd654d25dab018a0aebddf85fd55": "0x12e8cb5fe4c4a8000",
    "0x0ab366e6e7d5abbce6b44a438d69a1cabb90d133": "0x1158e460913d000000",
    "0x0ab4281ebb318590abb89a81df07fa3af904258a": "0x1b1ae4d6e2ef500000",
    "0x0ab59d390702c9c059db148eb4f3fcfa7d04c7e7": "0xfc936392801c0000",
    "0x0abfb39b11486d79572866195ba26c630b6784db": "0x19ba8737f96928f00000",
    "0x0aca9a5626913b08cfc9a66d40508dce52b60f87": "0x678a932062e4180000",
    "0x0ad3e44d3c001fa290b393617030544108ac6eb9": "0x6abda0bc30b2df8000",
    "0x0aec2e426ed6cc0cf3c249c1897eac47a7faa9bd": "0xad78ebc5ac6200000",
    "0x0af65f14784e55a6f95667fd73252a1c94072d2a": "0xa763b8e02d44f8000",
    "0x0af6c8d539c96d50259e1ba6719e9c8060f388c2": "0x3635c9adc5dea00000",
    "0x0b06390f2437b20ec4a3d3431b3279c6583e5ed7": "0xa844a7424d9c80000",
    "0x0b0b3862112aeec3a03492b1b05f440eca54256e": "0xd8d726b7177a800000",
    "0x0b0e055b28cbd03dc5ff44aa64f3dce04f5e63fb": "0x6c6b935b8bbd400000",
    "0x0b119df99c6b8de58a1e2c3f297a6744bf552277": "0x6c6b935b8bbd400000",
    "0x0b14891999a65c9ef73308efe3100ca1b20e8192": "0x2b5e3af16b18800000",
    "0x0b2113504534642a1daf102eee10b9ebde76e261": "0x942cdd7c95f2bd8000",
    "0x0b288a5a8b75f3dc4191eb0457e1c83dbd204d25": "0x10714e77bb43ab40000",
    "0x0b369e002e1b4c7913fcf00f2d5e19c58165478f": "0x37f6516288c340000",
    "0x0b43bd2391025581d8956ce42a072579cbbfcb14": "0x104e70464b1580000",
    "0x0b507cf553568daaf65504ae4eaa17a8ea3cdbf5": "0x6c6b935b8bbd400000",
    "0x0b5d66b13c87b392e94d91d5f76c0d450a552843": "0x6c6b935b8bbd400000",
    "0x0b5e2011ebc25a007f21362960498afb8af280fb": "0x6c6b935b8bbd400000",
    "0x0b649da3b96a102cdc6db652a0c07d65b1e443e6": "0x6c6b935b8bbd400000",
    "0x0b6920a64b363b8d5d90802494cf564b547c430d": "0x410d586a20a4c00000",
    "0x0b701101a4109f9cb360dc57b77442673d5e5983": "0x6c6b935b8bbd400000",
    "0x0b71f554122469ef978e2f1fefd7cbb410982772": "0xd255d112e103a00000",
    "0x0b7bb342f01bc9888e6a9af4a887cbf4c2dd2caf": "0x3635c9adc5dea000000",
    "0x0b7d339371e5be6727e6e331b5821fa24bdb9d5a": "0x2e7f81868262010000",
    "0x0b7fc9ddf70576f6330669eaaa71b6a831e99528": "0x796e3ea3f8ab00000",
    "0x0b80fc70282cbdd5fde35bf78984db3bdb120188": "0x3638021cecdab00000",
    "0x0b924df007e9c0878417cfe63b976ea1a382a897": "0x22b1c8c1227a00000",
    "0x0b93fca4a4f09cac20db60e065edcccc11e0a5b6": "0xad78ebc5ac6200000",
    "0x0b9df80fbe232009dacf0aa8cac59376e2476203": "0x6c6b935b8bbd400000",
    "0x0ba6e46af25a13f57169255a34a4dac7ce12be04": "0x1b1ae4d6e2ef500000",
    "0x0ba8705bf55cf219c0956b5e3fc01c4474a6cdc1": "0x525e0595d4d6b8000",
    "0x0baf6ecdb91acb3606a8357c0bc4f45cfd2d7e6f": "0x3635c9adc5dea00000",
    "0x0bb05f7224bb5804856556c07eeadbed87ba8f7c": "0x15be6174e1912e0000",
    "0x0bb0c12682a2f15c9b5741b2385cbe41f034068e": "0x5150ae84a8cdf00000",
    "0x0bb25ca7d188e71e4d693d7b170717d6f8f0a70a": "0x124302a82fadd70000",
    "0x0bb2650ea01aca755bc0c017b64b1ab5a66d82e3": "0x487a9a304539440000",
    "0x0bb54c72fd6610bfa4363397e020384b022b0c49": "0x487a9a304539440000",
    "0x0bb7160aba293762f8734f3e0326ffc9a4cac190": "0x3635c9adc5dea00000",
    "0x0bc95cb32dbb574c832fa8174a81356d38bc92ac": "0x6c6b935b8bbd400000",
    "0x0bd67dbde07a856ebd893b5edc4f3a5be4202616": "0x6c6b935b8bbd400000",
    "0x0bdbc54cc8bdbbb402a08911e2232a5460ce866b": "0xa2a15d09519be00000",
    "0x0bdd58b96e7c916dd2fb30356f2aebfaaf1d8630": "0x6c6b935b8bbd400000",
    "0x0be1bcb90343fae5303173f461bd914a4839056c": "0x14542ba12a337c00000",
    "0x0be1fdf626ee6189102d70d13b31012c95cd1cd6": "0x6c6b935b8bbd400000",
    "0x0be2b94ad950a2a62640c35bfccd6c67dae450f6": "0x692ae8897081d00000",
    "0x0be6a09e4307fe48d412b8d1a1a8284dce486261": "0x40fbff85c0138300000",
    "0x0befb54707f61b2c9fb04715ab026e1bb72042bd": "0xd8d726b7177a800000",
    "0x0bf064428f83626722a7b5b26a9ab20421a7723e": "0x73f75d1a085ba0000",
    "0x0bfbb6925dc75e52cf2684224bbe0550fea685d3": "0x6acb3df27e1f880000",
    "0x0c088006c64b30c4ddafbc36cb5f05469eb62834": "0x6c6b935b8bbd400000",
    "0x0c2073ba44d3ddbdb639c04e191039a71716237f": "0x4d853c8f8908980000",
    "0x0c222c7c41c9b048efcce0a232434362e12d673b": "0x21e8359697677380000",
    "0x0c2808b951ed9e872d7b32790fcc5994ae41ffdc": "0x15996e5b3cd6b3c00000",
    "0x0c28847e4f09dfce5f9b25af7c4e530f59c880fe": "0x3635c9adc5dea00000",
    "0x0c2d5c920538e953caaf24f0737f554cc6927742": "0x3635c9adc5dea00000",
    "0x0c30cacc3f72269f8b4f04cf073d2b05a83d9ad1": "0x6c7974123f64a40000",
    "0x0c3239e2e841242db989a61518c22247e8c55208": "0xe4af6471734640000",
    "0x0c480de9f7461002908b49f60fc61e2b62d3140b": "0x21e19e0c9bab2400000",
    "0x0c48ae62d1539788eba013d75ea60b64eeba4e80": "0x77fbdc43e030998000",
    "0x0c5589a7a89b9ad15b02751930415948a875fbef": "0x6d499ec6c63380000",
    "0x0c67033dd8ee7f0c8ae534d42a51f7d9d4f7978f": "0xad78ebc5ac6200000",
    "0x0c6845bf41d5ee273c3ee6b5b0d69f6fd5eabbf7": "0xa2a1b9682e58090000",
    "0x0c7f869f8e90d53fdc03e8b2819b016b9d18eb26": "0x43c33c1937564800000",
    "0x0c8692eeff2a53d6d1688ed56a9ddbbd68dabba1": "0x6c6b935b8bbd400000",
    "0x0c8f66c6017bce5b20347204b602b743bad78d60": "0x6c6b935b8bbd400000",
    "0x0c8fd7775e54a6d9c9a3bf890e761f6577693ff0": "0x215f835bc769da80000",
    "0x0c925ad5eb352c8ef76d0c222d115b0791b962a1": "0xac635d7fa34e300000",
    "0x0c967e3061b87a753e84507eb60986782c8f3013": "0x56bc75e2d63100000",
    "0x0ca12ab0b9666cf0cec6671a15292f2653476ab2": "0x2c7827c42d22d07c0000",
    "0x0ca670eb2c8b96cba379217f5929c2b892f39ef6": "0x6c6b935b8bbd400000",
    "0x0cae108e6db99b9e637876b064c6303eda8a65c8": "0xa2a15d09519be00000",
    "0x0cbd921dbe121563b98a6871fecb14f1cc7e88d7": "0xad78ebc5ac6200000",
    "0x0cbf8770f0d1082e5c20c5aead34e5fca9ae7ae2": "0x3635c9adc5dea00000",
    "0x0cc67f8273e1bae0867fd42e8b8193d72679dbf8": "0x1b1ae4d6e2ef500000",
    "0x0cd6a141918d126b106d9f2ebf69e102de4d3277": "0x1158e460913d00000",
    "0x0cda12bf72d461bbc479eb92e6491d057e6b5ad1": "0x21e19e0c9bab2400000",
    "0x0cdc960b998c141998160dc179b36c15d28470ed": "0x1b1b6bd7af64c70000",
    "0x0cfb172335b16c87d519cd1475530d20577f5e0e": "0x152d02c7e14af6800000",
    "0x0d1f2a57713ebc6e94de29846e8844d376665763": "0x10f0cf064dd59200000",
    "0x0d3265d3e7bdb93d5e8e8b1ca47f210a793ecc8e": "0xad78ebc5ac6200000",
    "0x0d35408f226566116fb8acdaa9e2c9d59b76683f": "0x32f51edbaaa3300000",
    "0x0d551ec1a2133c981d5fc6a8c8173f9e7c4f47af": "0x6c6b935b8bbd400000",
    "0x0d5d98565c647ca5f177a2adb9d3022fac287f21": "0xad78ebc5ac6200000",
    "0x0d658014a199061cf6b39433140303c20ffd4e5a": "0x1bc85dc2a89bb200000",
    "0x0d678706d037187f3e22e6f69b99a592d11ebc59": "0x55a6e79ccd1d300000",
    "0x0d69100c395ce6c5eaadf95d05d872837ededd21": "0x15af1d78b58c400000",
    "0x0d747ee5969bf79d57381d6fe3a2406cd0d8ce27": "0x152d02c7e14af6800000",
    "0x0d8023929d917234ae40512b1aabb5e8a4512771": "0x805e99fdcc5d00000",
    "0x0d8aab8f74ea862cdf766805009d3f3e42d8d00b": "0x13b80b99c5185700000",
    "0x0d8c40a79e18994ff99ec251ee10d088c3912e80": "0x63664fcd2bbc40000",
    "0x0d8ed7d0d15638330ed7e4eaccab8a458d75737e": "0x6c6b935b8bbd400000",
    "0x0d92582fdba05eabc3e51538c56db8813785b328": "0xa5aa85009e39c0000",
    "0x0d9443a79468a5bbf7c13c6e225d1de91aee07df": "0x3cb71f51fc5580000",
    "0x0d9a825ff2bcd397cbad5b711d9dcc95f1cc112d": "0x2b5e3af16b188000000",
    "0x0d9d3f9bc4a4c6efbd59679b69826bc1f63d9916": "0x2086ac351052600000",
    "0x0da532c910e3ac0dfb14db61cd739a93353fd05f": "0x4878be1ffaf95d0000",
    "0x0da7401262384e2e8b4b26dd154799b55145efa0": "0x1043561a8829300000",
    "0x0dae3ee5b915b36487f9161f19846d101433318a": "0x678a932062e4180000",
    "0x0dbd417c372b8b0d01bcd944706bd32e60ae28d1": "0x126e72a69a50d00000",
    "0x0dc100b107011c7fc0a1339612a16ccec3285208": "0x6c6b935b8bbd400000",
    "0x0dcf9d8c9804459f647c14138ed50fad563b4154": "0x960db77681e940000",
    "0x0dcfe837ea1cf28c65fccec3bef1f84e59d150c0": "0xad78ebc5ac6200000",
    "0x0dd4e674bbadb1b0dc824498713dce3b5156da29": "0x93739534d28680000",
    "0x0dfbd4817050d91d9d625c02053cf61a3ee28572": "0x126e72a69a50d00000",
    "0x0e024e7f029c6aaf3a8b910f5e080873b85795aa": "0x3635c9adc5dea00000",
    "0x0e09646c99af438e99fa274cb2f9c856cb65f736": "0x678a932062e4180000",
    "0x0e0c9d005ea016c295cd795cc9213e87febc33eb": "0xabbcd4ef377580000",
    "0x0e0d6633db1e0c7f234a6df163a10e0ab39c200f": "0xad78ebc5ac6200000",
    "0x0e11d77a8977fac30d268445e531149b31541a24": "0x6c6b935b8bbd400000",
    "0x0e123d7da6d1e6fac2dcadd27029240bb39052fe": "0x3635c9adc5dea00000",
    "0x0e1801e70b6262861b1134ccbc391f568afc92f7": "0xd8d726b7177a800000",
    "0x0e2094ac1654a46ba1c4d3a40bb8c17da7f39688": "0x13683f7f3c15d80000",
    "0x0e21af1b8dbf27fcf63f37e047b87a825cbe7c27": "0xa2a15d09519be00000",
    "0x0e2e504a2d1122b5a9feee5cb1451bf4c2ace87b": "0xd5967be4fc3f100000",
    "0x0e2f8e28a681f77c583bd0ecde16634bdd7e00cd": "0x52738f659bca20000",
    "0x0e320219838e859b2f9f18b72e3d4073ca50b37d": "0x6c6b935b8bbd400000",
    "0x0e33fcbbc003510be35785b52a9c5d216bc005f4": "0x65ea3db75546600000",
    "0x0e3696cf1f4217b163d1bc12a5ea730f1c32a14a": "0xd8d726b7177a800000",
    "0x0e390f44053ddfcef0d608b35e4d9c2cbe9871bb": "0x6acb3df27e1f880000",
    "0x0e3a28c1dfafb0505bdce19fe025f506a6d01ceb": "0x6c6b935b8bbd400000",
    "0x0e3dd7d4e429fe3930a6414035f52bdc599d784d": "0x22ca3587cf4eb0000",
    "0x0e4765790352656bc656682c24fc5ef3e76a23c7": "0x286d7fc0cb4f50000",
    "0x0e498800447177b8c8afc3fdfa7f69f4051bb629": "0x7405b69b8de5610000",
    "0x0e6baaa3deb989f289620076668618e9ac332865": "0xad78ebc5ac6200000",
    "0x0e6cd664ad9c1ed64bf98749f40644b626e3792c": "0xcb49b44ba602d800000",
    "0x0e6dfd553b2e873d2aec15bd5fbb3f8472d8d394": "0x28a857425466f800000",
    "0x0e6ec313376271dff55423ab5422cc3a8b06b22b": "0xd8d726b7177a800000",
    "0x0e6ece99111cad1961c748ed3df51edd69d2a3b1": "0x152d02c7e14af6800000",
    "0x0e83b850481ab44d49e0a229a2e464902c69539b": "0x56bc75e2d63100000",
    "0x0e89eddd3fa0d71d8ab0ff8da5580686e3d4f74f": "0x6c6b935b8bbd400000",
    "0x0e9096d343c060db581a120112b278607ec6e52b": "0x1158e460913d00000",
    "0x0e9c511864a177f49be78202773f60489fe04e52": "0x14542ba12a337c00000",
    "0x0ea2a210312b3e867ee0d1cc682ce1d666f18ed5": "0x21e19e0c9bab2400000",
    "0x0eb189ef2c2d5762a963d6b7bdf9698ea8e7b48a": "0x487a9a304539440000",
    "0x0eb5b662a1c718608fd52f0c25f9378830178519": "0x14a37281a612e740000",
    "0x0ec46696ffac1f58005fa8439824f08eed1df89b": "0x21e19e0c9bab2400000",
    "0x0ec50aa823f465b9464b0bc0c4a57724a555f5d6": "0xc83d1426ac7b1f00000",
    "0x0ec5308b31282e218fc9e759d4fec5db3708cec4": "0x3643aa647986040000",
    "0x0eccf617844fd61fba62cb0e445b7ac68bcc1fbe": "0x14fe4fe63565c60000",
    "0x0ed3bb3a4eb554cfca97947d575507cdfd6d21d8": "0x1db3205fcc23d58000",
    "0x0ed76c2c3b5d50ff8fb50b3eeacd681590be1c2d": "0x56bc75e2d63100000",
    "0x0eda80f4ed074aea697aeddf283b63dbca3dc4da": "0x6c6b935b8bbd400000",
    "0x0edd4b580ff10fe06c4a03116239ef96622bae35": "0xaadec983fcff40000",
    "0x0ee391f03c765b11d69026fd1ab35395dc3802a0": "0xad78ebc5ac6200000",
    "0x0ee414940487fd24e390378285c5d7b9334d8b65": "0x914878a8c05ee00000",
    "0x0ef54ac7264d2254abbb5f8b41adde875157db7c": "0x22b1c8c1227a00000",
    "0x0ef85b49d08a75198692914eddb4b22cf5fa4450": "0x6cae30621d47200000",
    "0x0efd1789eb1244a3dede0f5de582d8963cb1f39f": "0x5150ae84a8cdf00000",
    "0x0f042c9c2fb18766f836bb59f735f27dc329fe3c": "0x21e19e0c9bab2400000",
    "0x0f049a8bdfd761de8ec02cee2829c4005b23c06b": "0xda933d8d8c6700000",
    "0x0f05f120c89e9fbc93d4ab0c5e2b4a0df092b424": "0x65a4da25d3016c00000",
    "0x0f127bbf8e311caea2ba502a33feced3f730ba42": "0xa31062beeed700000",
    "0x0f1c249cd962b00fd114a9349f6a6cc778d76c4d": "0x6c6b935b8bbd400000",
    "0x0f206e1a1da7207ea518b112418baa8b06260328": "0x2086ac351052600000",
    "0x0f24105abbdaa03fa6309ef6c188e51f714a6e59": "0xad78ebc5ac6200000",
    "0x0f26480a150961b8e30750713a94ee6f2e47fc00": "0x3635c9adc5dea00000",
    "0x0f2d8daf04b5414a0261f549ff6477b80f2f1d07": "0x2a5a058fc295ed000000",
    "0x0f2fb884c8aaff6f543ac6228bd08e4f60b0a5fd": "0xaa7da485136b840000",
    "0x0f32d9cb4d0fdaa0150656bb608dcc43ed7d9301": "0x28df8bf440db790000",
    "0x0f3665d48e9f1419cd984fc7fa92788710c8f2e4": "0x6c6b935b8bbd400000",
    "0x0f3a1023cac04dbf44f5a5fa6a9cf8508cd4fddf": "0x62a992e53a0af00000",
    "0x0f4073c1b99df60a1549d69789c7318d9403a814": "0x43c33c1937564800000",
    "0x0f46c81db780c1674ac73d314f06539ee56ebc83": "0x215f835bc769da80000",
    "0x0f4f94b9191bb7bb556aaad7c74ddb288417a50b": "0x4be4e7267b6ae00000",
    "0x0f6000de1578619320aba5e392706b131fb1de6f": "0x1b1ab319f5ec750000",
    "0x0f6e840a3f2a24647d8e43e09d45c7c335df4248": "0x878678326eac900000",
    "0x0f7515ff0e808f695e0c20485ff96ed2f7b79310": "0x3638221660a5aa8000",
    "0x0f789e30397c53bf256fc364e6ef39f853504114": "0xc55325ca7415e00000",
    "0x0f7b61c59b016322e8226cafaee9d9e76d50a1b3": "0xd8d726b7177a800000",
    "0x0f7bea4ef3f73ae0233df1e100718cbe29310bb0": "0x6c6b935b8bbd400000",
    "0x0f7bf6373f771a4601762c4dae5fbbf4fedd9cc9": "0x6c6b935b8bbd400000",
    "0x0f832a93df9d7f74cd0fb8546b7198bf5377d925": "0x7c0860e5a80dc0000",
    "0x0f83461ba224bb1e8fdd9dae535172b735acb4e0": "0xad78ebc5ac6200000",
    "0x0f85e42b1df321a4b3e835b50c00b06173968436": "0x35659ef93f0fc40000",
    "0x0f88aac9346cb0e7347fba70905475ba8b3e5ece": "0x21e19e0c9bab2400000",
    "0x0f929cf895db017af79f3ead2216b1bd69c37dc7": "0x6c6b935b8bbd400000",
    "0x0fa010ce0c731d3b628e36b91f571300e49dbeab": "0x36330322d5238c0000",
    "0x0fa5d8c5b3f294efd495ab69d768f81872508548": "0x6c6b935b8bbd400000",
    "0x0fa6c7b0973d0bae2940540e247d3627e37ca347": "0x3635c9adc5dea00000",
    "0x0fad05507cdc8f24b2be4cb7fa5d927ddb911b88": "0xa2df13f441f0098000",
    "0x0fb5d2c673bfb1ddca141b9894fd6d3f05da6720": "0x56bc75e2d63100000",
    "0x0fc9a0e34145fbfdd2c9d2a499b617d7a02969b9": "0x9c2007651b2500000",
    "0x0fcfc4065008cfd323305f6286b57a4dd7eee23b": "0x43c33c1937564800000",
    "0x0fdd65402395df9bd19fee4507ef5345f745104c": "0x10f0cf064dd59200000",
    "0x0fec4ee0d7ca180290b6bd20f9992342f60ff68d": "0x12207f0edce9718000",
    "0x0fee81ac331efd8f81161c57382bb4507bb9ebec": "0x15af880d8cdb830000",
    "0x0ffea06d7113fb6aec2869f4a9dfb09007facef4": "0xc384681b1e1740000",
    "0x10097198b4e7ee91ff82cc2f3bd95fed73c540c0": "0x6c6b935b8bbd400000",
    "0x100b4d0977fcbad4debd5e64a0497aeae5168fab": "0x110c9073b5245a0000",
    "0x101a0a64f9afcc448a8a130d4dfcbee89537d854": "0x337fe5feaf2d1800000",
    "0x102c477d69aadba9a0b0f62b7459e17fbb1c1561": "0x6c6b935b8bbd400000",
    "0x1031e0ecb54985ae21af1793950dc811888fde7c": "0x1158e460913d00000",
    "0x10346414bec6d3dcc44e50e54d54c2b8c3734e3e": "0xd8d726b7177a800000",
    "0x10389858b800e8c0ec32f51ed61a355946cc409b": "0xad78ebc5ac6200000",
    "0x1059cbc63e36c43e88f30008aca7ce058eeaa096": "0x152d02c7e14af6800000",
    "0x106ed5c719b5261477890425ae7551dc59bd255c": "0x2896a58c95be5880000",
    "0x10711c3dda32317885f0a2fd8ae92e82069b0d0b": "0xd8d726b7177a800000",
    "0x107379d4c467464f235bc18e55938aad3e688ad7": "0x2b5e3af16b1880000",
    "0x1076212d4f758c8ec7121c1c7d74254926459284": "0x7695b59b5c17b4c0000",
    "0x1078d7f61b0e56c74ee6635b2e1819ef1e3d8785": "0x3635c9adc5dea00000",
    "0x107a03cf0842dbdeb0618fb587ca69189ec92ff5": "0x6acb3df27e1f880000",
    "0x1080c1d8358a15bc84dac8253c6883319020df2c": "0x90f534608a72880000",
    "0x108a2b7c336f784779d8b54d02a8d31d9a139c0a": "0x21e19e0c9bab2400000",
    "0x108ba7c2895c50e072dc6f964932d50c282d3034": "0x1b1ae4d6e2ef500000",
    "0x108fe8ee2a13da487b22c6ab6d582ea71064d98c": "0x15ac56edc4d12c0000",
    "0x1091176be19b9964a8f72e0ece6bf8e3cfad6e9c": "0x21f2f6f0fc3c6100000",
    "0x1098c774c20ca1daac5ddb620365316d353f109c": "0x56bc75e2d63100000",
    "0x1098cc20ef84bad5146639c4cd1ca6c3996cb99b": "0xfc936392801c0000",
    "0x10a1c42dc1ba746986b985a522a73c93eae64c63": "0x3635c9adc5dea00000",
    "0x10a93457496f1108cd98e140a1ecdbae5e6de171": "0x15a99062d416180000",
    "0x10b5b34d1248fcf017f8c8ffc408ce899ceef92f": "0xe7eeba3410b740000",
    "0x10cf560964ff83c1c9674c783c0f73fcd89943fc": "0x878678326eac9000000",
    "0x10d32416722ca4e648630548ead91edd79c06aff": "0x56bc75e2d63100000",
    "0x10d945334ecde47beb9ca3816c173dfbbd0b5333": "0x4be4e7267b6ae00000",
    "0x10df681506e34930ac7a5c67a54c3e89ce92b981": "0x74c1fab8adb4540000",
    "0x10e1e3377885c42d7df218522ee7766887c05e6a": "0x1043c43cde1d398000",
    "0x10e390ad2ba33d82b37388d09c4544c6b0225de5": "0xad78ebc5ac6200000",
    "0x10f4bff0caa5027c0a6a2dcfc952824de2940909": "0x6c6b935b8bbd400000",
    "0x11001b89ed873e3aaec1155634b4681643986323": "0x3635c9adc5dea00000",
    "0x110237cf9117e767922fc4a1b78d7964da82df20": "0xd5967be4fc3f100000",
    "0x1111e5dbf45e6f906d62866f1708101788ddd571": "0x467be6533ec2e40000",
    "0x11172b278ddd44eea2fdf4cb1d16962391c453d9": "0xc62f3d9bfd4895f00000",
    "0x112634b4ec30ff786e024159f796a57939ea144e": "0x6c6acc67d7b1d40000",
    "0x11306c7d57588637780fc9fde8e98ecb008f0164": "0x6c6acc67d7b1d40000",
    "0x113612bc3ba0ee4898b49dd20233905f2f458f62": "0x2f6f10780d22cc00000",
    "0x11415fab61e0dfd4b90676141a557a869ba0bde9": "0x6f05b59d3b20000000",
    "0x114cbbbf6fb52ac414be7ec61f7bb71495ce1dfa": "0xa2a15d09519be00000",
    "0x114cfefe50170dd97ae08f0a44544978c599548d": "0x2ec887e7a14a1c0000",
    "0x116108c12084612eeda7a93ddcf8d2602e279e5c": "0x6c6b935b8bbd400000",
    "0x1164caaa8cc5977afe1fad8a7d6028ce2d57299b": "0x15af1d78b58c400000",
    "0x11675a25554607a3b6c92a9ee8f36f75edd3e336": "0x8a9aba557e36c0000",
    "0x116a09df66cb150e97578e297fb06e13040c893c": "0x6c6b935b8bbd400000",
    "0x116fef5e601642c918cb89160fc2293ba71da936": "0x2b7cc2e9c3225c0000",
    "0x1178501ff94add1c5881fe886136f6dfdbe61a94": "0x890b0c2e14fb80000",
    "0x1179c60dbd068b150b074da4be23033b20c68558": "0x24dce54d34a1a00000",
    "0x117d9aa3c4d13bee12c7500f09f5dd1c66c46504": "0xb2ad30490b2780000",
    "0x117db836377fe15455e02c2ebda40b1ceb551b19": "0x14542ba12a337c00000",
    "0x118c18b2dce170e8f445753ba5d7513cb7636d2d": "0x1dd0c885f9a0d800000",
    "0x118fbd753b9792395aef7a4d78d263cdcaabd4f7": "0x36330322d5238c0000",
    "0x11928378d27d55c520ceedf24ceb1e822d890df0": "0x1b1ae4d6e2ef5000000",
    "0x119aa64d5b7d181dae9d3cb449955c89c1f963fa": "0x25f273933db5700000",
    "0x11c0358aa6479de21866fe21071924b65e70f8b9": "0x7b53f79e888dac00000",
    "0x11d2247a221e70c2d66d17ee138d38c55ffb8640": "0x21e19e0c9bab2400000",
    "0x11d7844a471ef89a8d877555583ceebd1439ea26": "0x22369e6ba80c6880000",
    "0x11dd6185d9a8d73ddfdaa71e9b7774431c4dfec2": "0x3635c9adc5dea00000",
    "0x11e7997edd904503d77da6038ab0a4c834bbd563": "0x150894e849b3900000",
    "0x11ec00f849b6319cf51aa8dd8f66b35529c0be77": "0x6c6b935b8bbd400000",
    "0x11efb8a20451161b644a8ccebbc1d343a3bbcb52": "0xad78ebc5ac62000000",
    "0x11fefb5dc1a4598aa712640c517775dfa1d91f8c": "0x21e19e0c9bab2400000",
    "0x120f9de6e0af7ec02a07c609ca8447f157e6344c": "0xe7eeba3410b740000",
    "0x1210f80bdb826c175462ab0716e69e46c24ad076": "0x56bc75e2d63100000",
    "0x12134e7f6b017bf48e855a399ca58e2e892fa5c8": "0x3635c9adc5dea00000",
    "0x12173074980153aeaa4b0dcbc7132eadcec21b64": "0xd02ab486cedc00000",
    "0x121f855b70149ac83473b9706fb44d47828b983b": "0x4be4e7267b6ae00000",
    "0x1227e10a4dbf9caca31b1780239f557615fc35c1": "0xad78ebc5ac6200000",
    "0x122dcfd81addb97d1a0e4925c4b549806e9f3beb": "0x522035cc6e01210000",
    "0x122f56122549d168a5c5e267f52662e5c5cce5c8": "0xa076407d3f7440000",
    "0x12316fc7f178eac22eb2b25aedeadf3d75d00177": "0x43c33be05f6bfb98000",
    "0x123759f333e13e3069e2034b4f05398918119d36": "0x43c33c1937564800000",
    "0x125cc5e4d56b2bcc2ee1c709fb9e68fb177440bd": "0x6c6b935b8bbd400000",
    "0x12632388b2765ee4452b50161d1fffd91ab81f4a": "0x281d901f4fdd100000",
    "0x126897a311a14ad43b78e0920100c4426bfd6bdd": "0x34c726893f2d948000",
    "0x126d91f7ad86debb0557c612ca276eb7f96d00a1": "0x56bc75e2d63100000",
    "0x127d3fc5003bf63c0d83e93957836515fd279045": "0x610c9222e6e750000",
    "0x127db1cadf1b771cbd7475e1b272690f558c8565": "0x2f6f10780d22cc00000",
    "0x1284f0cee9d2ff2989b65574d06ffd9ab0f7b805": "0x15af1d78b58c400000",
    "0x128b908fe743a434203de294c441c7e20a86ea67": "0x26ab14e0c0e13c0000",
    "0x1293c78c7d6a443b9d74b0ba5ee7bb47fd418588": "0x16a6502f15a1e540000",
    "0x1296acded1e063af39fe8ba0b4b63df789f70517": "0x56bf91b1a65eb0000",
    "0x12aa7d86ddfbad301692feac8a08f841cb215c37": "0x76d41c62494840000",
    "0x12afbcba1427a6a39e7ba4849f7ab1c4358ac31b": "0x43c33c1937564800000",
    "0x12b5e28945bb2969f9c64c63cc05b6f1f8d6f4d5": "0x1a29e86913b74050000",
    "0x12cf8b0e465213211a5b53dfb0dd271a282c12c9": "0xd2f13f7789f00000",
    "0x12d20790b7d3dbd88c81a279b812039e8a603bd0": "0x56f985d38644b80000",
    "0x12d60d65b7d9fc48840be5f891c745ce76ee501e": "0x485e5388d0c76840000",
    "0x12d91a92d74fc861a729646db192a125b79f5374": "0xfc936392801c0000",
    "0x12e9a4ad2ad57484dd700565bddb46423bd9bd31": "0x43c30fb0884a96c0000",
    "0x12f32c0a1f2daab676fe69abd9e018352d4ccd45": "0x2b5e3af16b1880000",
    "0x12f460ae646cd2780fd35c50a6af4b9accfa85c6": "0x3635c9adc5dea00000",
    "0x12ffc1128605cb0c13709a7290506f2690977193": "0xb50fcfafebecb00000",
    "0x13032446e7d610aa00ec8c56c9b574d36ca1c016": "0x6c6b935b8bbd400000",
    "0x131c792c197d18bd045d7024937c1f84b60f4438": "0xd8d726b7177a800000",
    "0x131df8d330eb7cc7147d0a55576f05de8d26a8b7": "0xa31062beeed700000",
    "0x131faed12561bb7aee04e5185af802b1c3438d9b": "0xbdf3c4bb0328c0000",
    "0x1321b605026f4ffb296a3e0edcb390c9c85608b7": "0x6c6b935b8bbd400000",
    "0x1321ccf29739b974e5a516f18f3a843671e39642": "0xd8d726b7177a800000",
    "0x1327d759d56e0ab87af37ecf63fe01f310be100a": "0x23bc3cdb68a1800000",
    "0x1329dd19cd4baa9fc64310efeceab22117251f12": "0xad78ebc5ac6200000",
    "0x13371f92a56ea8381e43059a95128bdc4d43c5a6": "0x3635c9adc5dea00000",
    "0x133c490fa5bf7f372888e607d958fab7f955bae1": "0x55a6e79ccd1d300000",
    "0x133e4f15e1e39c53435930aaedf3e0fe56fde843": "0x1158e460913d00000",
    "0x134163be9fbbe1c5696ee255e90b13254395c318": "0xad78ebc5ac6200000",
    "0x135cecd955e5798370769230159303d9b1839f66": "0x10f0cf064dd59200000",
    "0x135d1719bf03e3f866312479fe338118cd387e70": "0x6c6b935b8bbd400000",
    "0x135eb8c0e9e101deedec11f2ecdb66ae1aae8867": "0x43c33c1937564800000",
    "0x1360e87df24c69ee6d51c76e73767ffe19a2131c": "0x4fcc1a89027f00000",
    "0x136c834bf111326d207395295b2e583ea7f33572": "0x56bc75e2d63100000",
    "0x136d4b662bbd1080cfe4445b0fa213864435b7f1": "0xd8d726b7177a800000",
    "0x136f4907cab41e27084b9845069ff2fd0c9ade79": "0xd8d726b7177a800000",
    "0x1374facd7b3f8d68649d60d4550ee69ff0484133": "0xe9ed6e11172da0000",
    "0x137cf341e8516c815814ebcd73e6569af14cf7bc": "0x3635c9adc5dea00000",
    "0x13848b46ea75beb7eaa85f59d866d77fd24cf21a": "0xa968163f0a57b400000",
    "0x139d3531c9922ad56269f6309aa789fb2485f98c": "0xd8d726b7177a800000",
    "0x139e479764b499d666208c4a8a047a97043163dd": "0x2077212aff6df00000",
    "0x13a5eecb38305df94971ef2d9e179ae6cebab337": "0x11e3ab8395c6e80000",
    "0x13acada8980affc7504921be84eb4944c8fbb2bd": "0x56d2aa3a5c09a00000",
    "0x13b9b10715714c09cfd610cf9c9846051cb1d513": "0x6acb3df27e1f880000",
    "0x13ce332dff65a6ab933897588aa23e000980fa82": "0xe020536f028f00000",
    "0x13d67a7e25f2b12cdb85585009f8acc49b967301": "0x6c6acc67d7b1d40000",
    "0x13dee03e3799952d0738843d4be8fc0a803fb20e": "0x6c6b935b8bbd400000",
    "0x13e02fb448d6c84ae17db310ad286d056160da95": "0x6c6b935b8bbd400000",
    "0x13e321728c9c57628058e93fc866a032dd0bda90": "0x26bcca23fe2ea20000",
    "0x13ec812284026e409bc066dfebf9d5a4a2bf801e": "0x57473d05dabae80000",
    "0x140129eaa766b5a29f5b3af2574e4409f8f6d3f1": "0x15af1d78b58c4000000",
    "0x140518a3194bad1350b8949e650565debe6db315": "0x6c6b935b8bbd400000",
    "0x1406854d149e081ac09cb4ca560da463f3123059": "0x487a9a304539440000",
    "0x140ca28ff33b9f66d7f1fc0078f8c1eef69a1bc0": "0x56bc75e2d631000000",
    "0x140fba58dbc04803d84c2130f01978f9e0c73129": "0x15af1d78b58c400000",
    "0x141a5e39ee2f680a600fbf6fa297de90f3225cdd": "0x21e19e0c9bab2400000",
    "0x14254ea126b52d0142da0a7e188ce255d8c47178": "0x2a034919dfbfbc0000",
    "0x142b87c5043ffb5a91df18c2e109ced6fe4a71db": "0xad78ebc5ac6200000",
    "0x143c639752caeecf6a997d39709fc8f19878c7e8": "0x6acb3df27e1f880000",
    "0x143d536b8b1cb84f56a39e0bc81fd5442bcacce1": "0x56bc75e2d63100000",
    "0x143f5f1658d9e578f4f3d95f80c0b1bd3933cbda": "0x50c5e761a444080000",
    "0x14410fb310711be074a80883c635d0ef6afb2539": "0x6c6b935b8bbd400000",
    "0x144b19f1f66cbe318347e48d84b14039466c5909": "0x6c6b935b8bbd400000",
    "0x145250b06e4fa7cb2749422eb817bdda8b54de5f": "0xbdf3c4bb0328c0000",
    "0x145e0600e2a927b2dd8d379356b45a2e7d51d3ae": "0x8a02ab400bb2cb8000",
    "0x145e1de0147911ccd880875fbbea61f6a142d11d": "0xd8d726b7177a800000",
    "0x1463a873555bc0397e575c2471cf77fa9db146e0": "0x21e19e0c9bab2400000",
    "0x1479a9ec7480b74b5db8fc499be352da7f84ee9c": "0x3635c9adc5dea00000",
    "0x147af46ae9ccd18bb35ca01b353b51990e49dce1": "0xd8d726b7177a800000",
    "0x147f4210ab5804940a0b7db8c14c28396b62a6bf": "0x6c6b935b8bbd400000",
    "0x14830704e99aaad5c55e1f502b27b22c12c91933": "0x219c3a7b1966300000",
    "0x149b6dbde632c19f5af47cb493114bebd9b03c1f": "0x28a857425466f800000",
    "0x149ba10f0da2725dc704733e87f5a524ca88515e": "0x1ab2cf7c9f87e200000",
    "0x14a7352066364404db50f0d0d78d754a22198ef4": "0x65ea3db75546600000",
    "0x14ab164b3b524c82d6abfbc0de831126ae8d1375": "0x6c6b935b8bbd400000",
    "0x14b1603ec62b20022033eec4d6d6655ac24a015a": "0x2b5e3af16b1880000",
    "0x14c63ba2dcb1dd4df33ddab11c4f0007fa96a62d": "0x34841b6057afab00000",
    "0x14cdddbc8b09e6675a9e9e05091cb92238c39e1e": "0x11478b7c30abc300000",
    "0x14d00aad39a0a7d19ca05350f7b03727f08dd82e": "0x1b1ae4d6e2ef500000",
    "0x14eec09bf03e352bd6ff1b1e876be664ceffd0cf": "0x116dc3a8994b30000",
    "0x14f221159518783bc4a706676fc4f3c5ee405829": "0xad78ebc5ac6200000",
    "0x14fcd1391e7d732f41766cdacd84fa1deb9ffdd2": "0x6c6b935b8bbd400000",
    "0x150e3dbcbcfc84ccf89b73427763a565c23e60d0": "0x22b1c8c1227a00000",
    "0x1518627b88351fede796d3f3083364fbd4887b0c": "0x3635c9adc5dea000000",
    "0x15224ad1c0face46f9f556e4774a3025ad06bd52": "0xb98bc829a6f90000",
    "0x152f2bd229ddf3cb0fdaf455c183209c0e1e39a2": "0x6c6b935b8bbd400000",
    "0x152f4e860ef3ee806a502777a1b8dbc91a907668": "0x2086ac351052600000",
    "0x153c08aa8b96a611ef63c0253e2a4334829e579d": "0x155bd9307f9fe80000",
    "0x153cf2842cb9de876c276fa64767d1a8ecf573bb": "0x6c6b935b8bbd400000",
    "0x153ef58a1e2e7a3eb6b459a80ab2a547c94182a2": "0x14542ba12a337c000000",
    "0x154459fa2f21318e3434449789d826cdc1570ce5": "0x6c6b935b8bbd400000",
    "0x1547b9bf7ad66274f3413827231ba405ee8c88c1": "0x3a9d5baa4abf1d00000",
    "0x1548b770a5118ede87dba2f690337f616de683ab": "0x1c995685e0bf870000",
    "0x15528350e0d9670a2ea27f7b4a33b9c0f9621d21": "0xd8d8583fa2d52f0000",
    "0x155b3779bb6d56342e2fda817b5b2d81c7f41327": "0x2b8aa3a076c9c0000",
    "0x1565af837ef3b0bd4e2b23568d5023cd34b16498": "0x1551e9724ac4ba0000",
    "0x15669180dee29598869b08a721c7d24c4c0ee63f": "0x3635c9adc5dea00000",
    "0x1572cdfab72a01ce968e78f5b5448da29853fbdd": "0x112626c49060fa60000",
    "0x157559adc55764cc6df79323092534e3d6645a66": "0x14542ba12a337c00000",
    "0x1578bdbc371b4d243845330556fff2d5ef4dff67": "0x56bc75e2d63100000",
    "0x157eb3d3113bd3b597714d3a954edd018982a5cb": "0x6c6b935b8bbd400000",
    "0x1584a2c066b7a455dbd6ae2807a7334e83c35fa5": "0x70c1cc73b00c80000",
    "0x15874686b6733d10d703c9f9bec6c52eb8628d67": "0x6c6b935b8bbd400000",
    "0x158a0d619253bf4432b5cd02c7b862f7c2b75636": "0x75bac7c5b12188000",
    "0x1598127982f2f8ad3b6b8fc3cf27bf617801ba2b": "0x960db77681e940000",
    "0x159adce27aa10b47236429a34a5ac42cad5b6416": "0x6bf90a96edbfa718000",
    "0x15a0aec37ff9ff3d5409f2a4f0c1212aaccb0296": "0x3635c9adc5dea00000",
    "0x15aa530dc36958b4edb38eee6dd9e3c77d4c9145": "0x6c6b935b8bbd400000",
    "0x15acb61568ec4af7ea2819386181b116a6c5ee70": "0x690836c0af5f5600000",
    "0x15b96f30c23b8664e7490651066b00c4391fbf84": "0x1642e9df4876290000",
    "0x15c7edb8118ee27b342285eb5926b47a855bc7a5": "0x1158e460913d00000",
    "0x15d99468507aa0413fb60dca2adc7f569cb36b54": "0x6c6b935b8bbd400000",
    "0x15dbb48c98309764f99ced3692dcca35ee306bac": "0x1fc3842bd1f071c00000",
    "0x15dcafcc2bace7b55b54c01a1c514626bf61ebd8": "0x1fd933494aa5fe00000",
    "0x15e3b584056b62c973cf5eb096f1733e54c15c91": "0x32c75a0223ddf30000",
    "0x15ebd1c7cad2aff19275c657c4d808d010efa0f5": "0xadf30ba70c8970000",
    "0x15ee0fc63ebf1b1fc49d7bb38f8863823a2e17d2": "0x678a932062e4180000",
    "0x15f1b352110d68901d8f67aac46a6cfafe031477": "0xad78ebc5ac6200000",
    "0x15f2b7b16432ee50a5f55b41232f6334ed58bdc0": "0x15af1d78b58c400000",
    "0x16019a4dafab43f4d9bf4163fae0847d848afca2": "0x15bc70139f74a0000",
    "0x160226efe7b53a8af462d117a0108089bdecc2d1": "0xadf30ba70c8970000",
    "0x160ceb6f980e04315f53c4fc988b2bf69e284d7d": "0x10910d4cdc9f60000",
    "0x161caf5a972ace8379a6d0a04ae6e163fe21df2b": "0x152d02c7e14af6800000",
    "0x161d26ef6759ba5b9f20fdcd66f16132c352415e": "0x6c6b935b8bbd400000",
    "0x162110f29eac5f7d02b543d8dcd5bb59a5e33b73": "0x6c6b935b8bbd400000",
    "0x162ba503276214b509f97586bd842110d103d517": "0x1e7ffd8895c22680000",
    "0x162d76c2e6514a3afb6fe3d3cb93a35c5ae783f1": "0x6c6b935b8bbd400000",
    "0x163bad4a122b457d64e8150a413eae4d07023e6b": "0x104e70464b1580000",
    "0x163cc8be227646cb09719159f28ed09c5dc0dce0": "0x487a9a304539440000",
    "0x163dca73d7d6ea3f3e6062322a8734180c0b78ef": "0x9f742003cb7dfc0000",
    "0x164d7aac3eecbaeca1ad5191b753f173fe12ec33": "0x285652b8a468690000",
    "0x16526c9edf943efa4f6d0f0bae81e18b31c54079": "0x35659ef93f0fc40000",
    "0x165305b787322e25dc6ad0cefe6c6f334678d569": "0x6c6b935b8bbd400000",
    "0x1665ab1739d71119ee6132abbd926a279fe67948": "0x56bc75e2d63100000",
    "0x166bf6dab22d841b486c38e7ba6ab33a1487ed8c": "0x43c33c1937564800000",
    "0x167699f48a78c615512515739958993312574f07": "0x21d3bd55e803c0000",
    "0x1678c5f2a522393225196361894f53cc752fe2f3": "0x68f365aea1e4400000",
    "0x167ce7de65e84708595a525497a3eb5e5a665073": "0x1f314773666fc40000",
    "0x167e3e3ae2003348459392f7dfce44af7c21ad59": "0x1b1ae4d6e2ef500000",
    "0x1680cec5021ee93050f8ae127251839e74c1f1fd": "0x2c61461e5d743d68000",
    "0x16816aac0ede0d2d3cd442da79e063880f0f1d67": "0x6c6b935b8bbd400000",
    "0x168b5019b818691644835fe69bf229e17112d52c": "0x5ede20f01a459800000",
    "0x168bdec818eafc6d2992e5ef54aa0e1601e3c561": "0x3637507a30abeb0000",
    "0x168d30e53fa681092b52e9bae15a0dcb41a8c9bb": "0x56bc75e2d63100000",
    "0x169bbefc41cfd7d7cbb8dfc63020e9fb06d49546": "0x6c6b935b8bbd400000",
    "0x16a58e985dccd707a594d193e7cca78b5d027849": "0x49b9ca9a6943400000",
    "0x16a9e9b73ae98b864d1728798b8766dbc6ea8d12": "0x33e7b44b0db5040000",
    "0x16aa52cb0b554723e7060f21f327b0a68315fea3": "0xd8d726b7177a80000",
    "0x16abb8b021a710bdc78ea53494b20614ff4eafe8": "0x890b0c2e14fb80000",
    "0x16afa787fc9f94bdff6976b1a42f430a8bf6fb0f": "0x6c6b935b8bbd400000",
    "0x16bae5d24eff91778cd98b4d3a1cc3162f44aa77": "0x15be6174e1912e0000",
    "0x16bc40215abbd9ae5d280b95b8010b4514ff1292": "0xad78ebc5ac6200000",
    "0x16be75e98a995a395222d00bd79ff4b6e638e191": "0x79f905c6fd34e800000",
    "0x16c1bf5b7dc9c83c179efacbcf2eb174e3561cb3": "0x3635c9adc5dea00000",
    "0x16c7b31e8c376282ac2271728c31c95e35d952c3": "0x6c6b935b8bbd400000",
    "0x16f313cf8ad000914a0a176dc6a4342b79ec2538": "0x6c6b935b8bbd400000",
    "0x16ffac84032940f0121a09668b858a7e79ffa3bb": "0xd24ada6e1087110000",
    "0x1703b4b292b8a9deddede81bb25d89179f6446b6": "0x42b65a455e8b1680000",
    "0x17049311101d817efb1d65910f663662a699c98c": "0x6c68ccd09b022c0000",
    "0x1704cefcfb1331ec7a78388b29393e85c1af7916": "0x15af1d78b58c400000",
    "0x170a88a8997f92d238370f1affdee6347050b013": "0xa2ac77351488300000",
    "0x17108dab2c50f99de110e1b3b3b4cd82f5df28e7": "0x35203b67bccad00000",
    "0x17125b59ac51cee029e4bd78d7f5947d1ea49bb2": "0x4a89f54ef0121c00000",
    "0x171ad9a04bedc8b861e8ed4bddf5717813b1bb48": "0x15af1d78b58c400000",
    "0x171ca02a8b6d62bf4ca47e906914079861972cb2": "0xad78ebc5ac6200000",
    "0x1722c4cbe70a94b6559d425084caeed4d6e66e21": "0xd8d726b7177a800000",
    "0x17580b766f7453525ca4c6a88b01b50570ea088c": "0x56bc75e2d63100000",
    "0x17589a6c006a54cad70103123aae0a82135fdeb4": "0xd8d726b7177a800000",
    "0x175a183a3a235ffbb03ba835675267229417a091": "0x3635c9adc5dea000000",
    "0x175feeea2aa4e0efda12e1588d2f483290ede81a": "0xad78ebc5ac6200000",
    "0x1765361c2ec2f83616ce8363aae21025f2566f40": "0x10f0cf064dd59200000",
    "0x1767525c5f5a22ed80e9d4d7710f0362d29efa33": "0x15af1d78b58c400000",
    "0x17762560e82a93b3f522e0e524adb8612c3a7470": "0x3635c9adc5dea00000",
    "0x177dae78bc0113d8d39c4402f2a641ae2a105ab8": "0x6292425620b4480000",
    "0x1784948bf99848c89e445638504dd698271b5924": "0x1474c410d87baee0000",
    "0x1788da9b57fd05edc4ff99e7fef301519c8a0a1e": "0x6c6b935b8bbd400000",
    "0x178eaf6b8554c45dfde16b78ce0c157f2ee31351": "0x1158e460913d000000",
    "0x17961d633bcf20a7b029a7d94b7df4da2ec5427f": "0xc6ff070f1938b8000",
    "0x1796bcc97b8abc717f4b4a7c6b1036ea2182639f": "0x1341f91cd8e3510000",
    "0x17993d312aa1106957868f6a55a5e8f12f77c843": "0x1865e814f4142e8000",
    "0x179a825e0f1f6e985309668465cffed436f6aea9": "0x1158e460913d00000",
    "0x17b2d6cf65c6f4a347ddc6572655354d8a412b29": "0x6c6b935b8bbd400000",
    "0x17b807afa3ddd647e723542e7b52fee39527f306": "0x15af40ffa7fc010000",
    "0x17c0478657e1d3d17aaa331dd429cecf91f8ae5d": "0x3634fb9f1489a70000",
    "0x17c0fef6986cfb2e4041f9979d9940b69dff3de2": "0xd8d726b7177a800000",
    "0x17d4918dfac15d77c47f9ed400a850190d64f151": "0x6c6b935b8bbd400000",
    "0x17d521a8d9779023f7164d233c3b6420ffd223ed": "0x1158e460913d00000",
    "0x17d931d4c56294dcbe77c8655be4695f006d4a3c": "0x6c6b935b8bbd400000",
    "0x17df49518d73b129f0da36b1c9b40cb66420fdc7": "0x21e19e0c9bab2400000",
    "0x17e4a0e52bac3ee44efe0954e753d4b85d644e05": "0x6c6b935b8bbd400000",
    "0x17e584e810e567702c61d55d434b34cdb5ee30f6": "0x10f0cf064dd59200000",
    "0x17e82e7078dc4fd9e879fb8a50667f53a5c54591": "0xad78ebc5ac6200000",
    "0x17e86f3b5b30c0ba59f2b2e858425ba89f0a10b0": "0x6c6b935b8bbd400000",
    "0x17ee9f54d4ddc84d670eff11e54a659fd72f4455": "0x3635c9adc5dea000000",
    "0x17ef4acc1bf147e326749d10e677dcffd76f9e06": "0x87751f4e0e1b5300000",
    "0x17f14632a7e2820be6e8f6df823558283dadab2d": "0x6c6b935b8bbd400000",
    "0x17f523f117bc9fe978aa481eb4f5561711371bc8": "0x6c69f73e29134e0000",
    "0x17fd9b551a98cb61c2e07fbf41d3e8c9a530cba5": "0x1768c308193048000",
    "0x180478a655d78d0f3b0c4f202b61485bc4002fd5": "0x6c6b935b8bbd400000",
    "0x18136c9df167aa17b6f18e22a702c88f4bc28245": "0xd8d726b7177a800000",
    "0x1815279dff9952da3be8f77249dbe22243377be7": "0x1017cb76e7b26640000",
    "0x181fbba852a7f50178b1c7f03ed9e58d54162929": "0x241a9b4f617a280000",
    "0x1827039f09570294088fddf047165c33e696a492": "0x205b4dfa1ee74780000",
    "0x182db85293f606e88988c3704cb3f0c0bbbfca5a": "0x73f75d1a085ba0000",
    "0x1848003c25bfd4aa90e7fcb5d7b16bcd0cffc0d8": "0x3635c9adc5dea00000",
    "0x184a4f0beb71ffd558a6b6e8f228b78796c4cf3e": "0x28a857425466f800000",
    "0x184d86f3466ae6683b19729982e7a7e1a48347b2": "0x21e19e0c9bab2400000",
    "0x1851a063ccdb30549077f1d139e72de7971197d5": "0x6c6b935b8bbd400000",
    "0x185546e8768d506873818ac9751c1f12116a3bef": "0xad78ebc5ac6200000",
    "0x1858cf11aea79f5398ad2bb22267b5a3c952ea74": "0x215f835bc769da80000",
    "0x185a7fc4ace368d233e620b2a45935661292bdf2": "0x43c33c1937564800000",
    "0x1864a3c7b48155448c54c88c708f166709736d31": "0x73f75d1a085ba0000",
    "0x186afdc085f2a3dce4615edffbadf71a11780f50": "0xad78ebc5ac6200000",
    "0x186b95f8e5effddcc94f1a315bf0295d3b1ea588": "0x6c6acc67d7b1d40000",
    "0x187d9f0c07f8eb74faaad15ebc7b80447417f782": "0x1158e460913d00000",
    "0x1895a0eb4a4372722fcbc5afe6936f289c88a419": "0x3154c9729d05780000",
    "0x1899f69f653b05a5a6e81f480711d09bbf97588c": "0x69fb133df750ac0000",
    "0x18a6d2fc52be73084023c91802f05bc24a4be09f": "0x6c6b935b8bbd400000",
    "0x18b0407cdad4ce52600623bd5e1f6a81ab61f026": "0x1151ccf0c654c68000",
    "0x18b8bcf98321da61fb4e3eacc1ec5417272dc27e": "0x2fb474098f67c00000",
    "0x18c6723a6753299cb914477d04a3bd218df8c775": "0x3635c9adc5dea00000",
    "0x18e113d8177c691a61be785852fa5bb47aeebdaf": "0x487a9a304539440000",
    "0x18e4ce47483b53040adbab35172c01ef64506e0c": "0x1e7e4171bf4d3a00000",
    "0x18e53243981aabc8767da10c73449f1391560eaa": "0x14542ba12a337c00000",
    "0x18fa8625c9dc843c78c7ab259ff87c9599e07f10": "0x3635c9adc5dea00000",
    "0x18fb09188f27f1038e654031924f628a2106703d": "0x6c6b935b8bbd400000",
    "0x18fccf62d2c3395453b7587b9e26f5cff9eb7482": "0x3635c9adc5dea00000",
    "0x191313525238a21c767457a91374f02200c55448": "0x64f5fdf494f780000",
    "0x1914f1eb95d1277e93b6e61b668b7d77f13a11a1": "0x34957444b840e80000",
    "0x1923cfc68b13ea7e2055803645c1e320156bd88d": "0x487a9a304539440000",
    "0x19336a236ded755872411f2e0491d83e3e00159e": "0x32f51edbaaa3300000",
    "0x1933e334c40f3acbad0c0b851158206924beca3a": "0x1995eaf01b896188000",
    "0x1937c5c515057553ccbd46d5866455ce66290284": "0xd3c21bcecceda1000000",
    "0x193ac65183651800e23580f8f0ead3bb597eb8a4": "0x2b62abcfb910a0000",
    "0x193d37ed347d1c2f4e35350d9a444bc57ca4db43": "0x340aad21b3b700000",
    "0x1940dc9364a852165f47414e27f5002445a4f143": "0x24c2dff6a3c7c480000",
    "0x1945fe377fe6d4b71e3e791f6f17db243c9b8b0f": "0x7679e7beb988360000",
    "0x194a6bb302b8aba7a5b579df93e0df1574967625": "0x1b1ae4d6e2ef500000",
    "0x194cebb4929882bf3b4bf9864c2b1b0f62c283f9": "0x1ef861531f74aa0000",
    "0x194ff44aefc17bd20efd7a204c47d1620c86db5d": "0xa29909687f6aa40000",
    "0x194ffe78bbf5d20dd18a1f01da552e00b7b11db1": "0x17b7883c06916600000",
    "0x1953313e2ad746239cb2270f48af34d8bb9c4465": "0x6c6b935b8bbd400000",
    "0x19571a2b8f81c6bcf66ab3a10083295617150003": "0x1ab2cf7c9f87e20000",
    "0x19687daa39c368139b6e7be60dc1753a9f0cbea3": "0x1b1ae4d6e2ef5000000",
    "0x196c02210a450ab0b36370655f717aa87bd1c004": "0xe10ace157dbc00000",
    "0x196e85df7e732b4a8f0ed03623f4db9db0b8fa31": "0x125b92f5cef248000",
    "0x19732bf973055dbd91a4533adaa2149a91d38380": "0x6c6b935b8bbd400000",
    "0x197672fd39d6f246ce66a790d13aa922d70ea109": "0x3635c9adc5dea00000",
    "0x19798cbda715ea9a9b9d6aab942c55121e98bf91": "0x410d586a20a4c00000",
    "0x198bfcf1b07ae308fa2c02069ac9dafe7135fb47": "0x1158e460913d00000",
    "0x198ef1ec325a96cc354c7266a038be8b5c558f67": "0x80d1e4373e7f21da0000",
    "0x19918aa09e7d494e98ffa5db50350892f7156ac6": "0x21e19e0c9bab2400000",
    "0x19b36b0c87ea664ed80318dc77b688dde87d95a5": "0x699f499802303d0000",
    "0x19df9445a81c1b3d804aeaeb6f6e204e4236663f": "0x206d94e6a49878000",
    "0x19e5dea3370a2c746aae34a37c531f41da264e83": "0xad78ebc5ac6200000",
    "0x19e7f3eb7bf67f3599209ebe08b62ad3327f8cde": "0x6c6b935b8bbd400000",
    "0x19e94e620050aad766b9e1bad931238312d4bf49": "0x81e32df972abf00000",
    "0x19ecf2abf40c9e857b252fe1dbfd3d4c5d8f816e": "0x6c6b935b8bbd400000",
    "0x19f5caf4c40e6908813c0745b0aea9586d9dd931": "0x23fed9e1fa2b600000",
    "0x19f643e1a8fa04ae16006028138333a59a96de87": "0x1158e460913d00000",
    "0x19f99f2c0b46ce8906875dc9f90ae104dae35594": "0xf4575a5d4d162a0000",
    "0x19ff244fcfe3d4fa2f4fd99f87e55bb315b81eb6": "0xad78ebc5ac6200000",
    "0x1a04cec420ad432215246d77fe178d339ed0b595": "0x11216185c29f700000",
    "0x1a04d5389eb006f9ce880c30d15353f8d11c4b31": "0x39d84b2186dc9100000",
    "0x1a0841b92a7f7075569dc4627e6b76cab05ade91": "0x52663ccab1e1c00000",
    "0x1a085d43ec92414ea27b914fe767b6d46b1eef44": "0x641e8a13563d8f80000",
    "0x1a09fdc2c7a20e23574b97c69e93deba67d37220": "0x6c4fd1ee246e780000",
    "0x1a0a1ddfb031e5c8cc1d46cf05842d50fddc7130": "0x3635c9adc5dea00000",
    "0x1a1c9a26e0e02418a5cf687da75a275c622c9440": "0x10f0cf064dd59200000",
    "0x1a201b4327cea7f399046246a3c87e6e03a3cda8": "0x3635c9adc5dea00000",
    "0x1a2434cc774422d48d53d59c5d562cce8407c94b": "0x1a055690d9db80000",
    "0x1a25e1c5bc7e5f50ec16f8885f210ea1b938800e": "0xd8d726b7177a800000",
    "0x1a2694ec07cf5e4d68ba40f3e7a14c53f3038c6e": "0x3636cd06e2db3a8000",
    "0x1a3520453582c718a21c42375bc50773255253e1": "0x2ad373ce668e980000",
    "0x1a376e1b2d2f590769bb858d4575320d4e149970": "0x106712576391d180000",
    "0x1a3a330e4fcb69dbef5e6901783bf50fd1c15342": "0xe3aeb5737240a00000",
    "0x1a4ec6a0ae7f5a9427d23db9724c0d0cffb2ab2f": "0x9b41fbf9e0aec0000",
    "0x1a505e62a74e87e577473e4f3afa16bedd3cfa52": "0x1b1ae4d6e2ef500000",
    "0x1a5ee533acbfb3a2d76d5b685277b796c56a052b": "0x6c6b935b8bbd400000",
    "0x1a644a50cbc2aee823bd2bf243e825be4d47df02": "0x56be03ca3e47d8000",
    "0x1a7044e2383f8708305b495bd1176b92e7ef043a": "0xad78ebc5ac6200000",
    "0x1a79c7f4039c67a39d7513884cdc0e2c34222490": "0x1158e460913d00000",
    "0x1a89899cbebdbb64bb26a195a63c08491fcd9eee": "0x6c6b935b8bbd400000",
    "0x1a8a5ce414de9cd172937e37f2d59cff71ce57a0": "0x21e19e0c9bab2400000",
    "0x1a95a8a8082e4652e4170df9271cb4bb4305f0b2": "0x2b5e3af16b1880000",
    "0x1a95c9b7546b5d1786c3858fb1236446bc0ca4ce": "0x6acb3df27e1f880000",
    "0x1a987e3f83de75a42f1bde7c997c19217b4a5f24": "0x6c6b935b8bbd400000",
    "0x1a9e702f385dcd105e8b9fa428eea21c57ff528a": "0x4be4e7267b6ae00000",
    "0x1aa1021f550af158c747668dd13b463160f95a40": "0x4fb0591b9b30380000",
    "0x1aa27699cada8dc3a76f7933aa66c71919040e88": "0x15af1d78b58c400000",
    "0x1aa40270d21e5cde86b6316d1ac3c533494b79ed": "0x1158e460913d00000",
    "0x1ab53a11bcc63ddfaa40a02b9e186496cdbb8aff": "0x6c3f2aac800c000000",
    "0x1abc4e253b080aeb437984ab05bca0979aa43e1c": "0x3635c9adc5dea00000",
    "0x1ac089c3bc4d82f06a20051a9d732dc0e734cb61": "0x25f69d63a6ce0e0000",
    "0x1ad4563ea5786be1159935abb0f1d5879c3e7372": "0x14542ba12a337c00000",
    "0x1ad72d20a76e7fcc6b764058f48d417d496fa6cd": "0x6c6b935b8bbd400000",
    "0x1adaf4abfa867db17f99af6abebf707a3cf55df6": "0x14542ba12a337c00000",
    "0x1af60343360e0b2d75255210375720df21db5c7d": "0x3635c9adc5dea00000",
    "0x1afcc585896cd0ede129ee2de5c19ea811540b64": "0xaf2aba0c8e5bef8000",
    "0x1b05ea6a6ac8af7cb6a8b911a8cce8fe1a2acfc8": "0x6c6b935b8bbd400000",
    "0x1b0b31afff4b6df3653a94d7c87978ae35f34aae": "0x133910453fa9840000",
    "0x1b0d076817e8d68ee2df4e1da1c1142d198c4435": "0x54069233bf7f780000",
    "0x1b130d6fa51d5c48ec8d1d52dc8a227be8735c8a": "0x6c6b935b8bbd400000",
    "0x1b23cb8663554871fbbe0d9e60397efb6faedc3e": "0xad78ebc5ac6200000",
    "0x1b2639588b55c344b023e8de5fd4087b1f040361": "0x5150ae84a8cdf00000",
    "0x1b3920d001c43e72b24e7ca46f0fd6e0c20a5ff2": "0x6c6b935b8bbd400000",
    "0x1b3cb81e51011b549d78bf720b0d924ac763a7c2": "0x7695a92c20d6fe000000",
    "0x1b43232ccd4880d6f46fa751a96cd82473315841": "0x4563918244f400000",
    "0x1b4bbcb18165211b265b280716cb3f1f212176e8": "0x199ad37d03d0608000",
    "0x1b4d07acd38183a61bb2783d2b7b178dd502ac8d": "0xad78ebc5ac6200000",
    "0x1b636b7a496f044d7359596e353a104616436f6b": "0x1388ea95c33f1d0000",
    "0x1b6495891240e64e594493c2662171db5e30ce13": "0x95887d695ed580000",
    "0x1b6610fb68bad6ed1cfaa0bbe33a24eb2e96fafb": "0x83d6c7aab63600000",
    "0x1b799033ef6dc7127822f74542bb22dbfc09a308": "0x56bc75e2d63100000",
    "0x1b7ed974b6e234ce81247498429a5bd4a0a2d139": "0x6c6b935b8bbd400000",
    "0x1b826fb3c012b0d159e294ba5b8a499ff3c0e03c": "0x6c6b935b8bbd400000",
    "0x1b8aa0160cd79f005f88510a714913d70ad3be33": "0xaeffb83079ad00000",
    "0x1b8bd6d2eca20185a78e7d98e8e185678dac4830": "0x3894f0e6f9b9f700000",
    "0x1b9b2dc2960e4cb9408f7405827c9b59071612fd": "0x3635c9adc5dea00000",
    "0x1ba9228d388727f389150ea03b73c82de8eb2e09": "0x18974fbe177c9280000",
    "0x1ba9f7997e5387b6b2aa0135ac2452fe36b4c20d": "0x2e141ea081ca080000",
    "0x1bba03ff6b4ad5bf18184acb21b188a399e9eb4a": "0x61093d7c2c6d380000",
    "0x1bbc199e586790be87afedc849c04726745c5d7b": "0xd8d726b7177a800000",
    "0x1bbc60bcc80e5cdc35c5416a1f0a40a83dae867b": "0x6c6b935b8bbd400000",
    "0x1bc44c8761231ba1f11f5faa40fa669a013e12ce": "0xb0952c45aeaad0000",
    "0x1bcf3441a866bdbe963009ce33c81cbb0261b02c": "0x9ddc1e3b901180000",
    "0x1bd28cd5c78aee51357c95c1ef9235e7c18bc854": "0x6c6b935b8bbd400000",
    "0x1bd8ebaa7674bb18e19198db244f570313075f43": "0x821ab0d4414980000",
    "0x1bd909ac0d4a1102ec98dcf2cca96a0adcd7a951": "0x11651ac3e7a758000",
    "0x1be3542c3613687465f15a70aeeb81662b65cca8": "0x6c6b935b8bbd400000",
    "0x1bea4df5122fafdeb3607eddda1ea4ffdb9abf2a": "0x12c1b6eed03d280000",
    "0x1bec4d02ce85fc48feb62489841d85b170586a9b": "0x821ab0d44149800000",
    "0x1bf974d9904f45ce81a845e11ef4cbcf27af719e": "0x56bc75e2d63100000",
    "0x1c045649cd53dc23541f8ed4d341812808d5dd9c": "0x17b7883c06916600000",
    "0x1c128bd6cda5fca27575e4b43b3253c8c4172afe": "0x6c6b935b8bbd400000",
    "0x1c13d38637b9a47ce79d37a86f50fb409c060728": "0x487a9a304539440000",
    "0x1c2010bd662df417f2a271879afb13ef4c88a3ae": "0xd8d726b7177a800000",
    "0x1c257ad4a55105ea3b58ed374b198da266c85f63": "0x21e19e0c9bab2400000",
    "0x1c2e3607e127caca0fbd5c5948adad7dd830b285": "0x42bf06b78ed3b500000",
    "0x1c356cfdb95febb714633b28d5c132dd84a9b436": "0x15af1d78b58c40000",
    "0x1c35aab688a0cd8ef82e76541ba7ac39527f743b": "0x1b1ae4d6e2ef500000",
    "0x1c3ef05dae9dcbd489f3024408669de244c52a02": "0x43c33c1937564800000",
    "0x1c4af0e863d2656c8635bc6ffec8dd9928908cb5": "0x6c6b935b8bbd400000",
    "0x1c601993789207f965bb865cbb4cd657cce76fc0": "0x5541a7037503f0000",
    "0x1c63fa9e2cbbf23c49fcdef1cbabfe6e0d1e14c1": "0x3635c9adc5dea00000",
    "0x1c6702b3b05a5114bdbcaeca25531aeeb34835f4": "0x58556bead45dcae0000",
    "0x1c68a66138783a63c98cc675a9ec77af4598d35e": "0x2b746f48f0f120000",
    "0x1c73d00b6e25d8eb9c1ff4ad827b6b9e9cf6d20c": "0xad78ebc5ac6200000",
    "0x1c751e7f24df9d94a637a5dedeffc58277b5db19": "0xae8e7a0bb575d00000",
    "0x1c7cb2fe6bf3e09cbcdc187af38fa8f5053a70b6": "0x21c84f742d0cead8000",
    "0x1c89060f987c518fa079ec2c0a5ebfa30f5d20f7": "0x80bfbefcb5f0bc00000",
    "0x1c94d636e684eb155895ce6db4a2588fba1d001b": "0x6c6b935b8bbd400000",
    "0x1c99fe9bb6c6d1066d912099547fd1f4809eacd9": "0x6c6b935b8bbd400000",
    "0x1cb450920078aab2317c7db3b38af7dd298b2d41": "0x126e72a69a50d00000",
    "0x1cb5f33b4d488936d13e3161da33a1da7df70d1b": "0xad78ebc5ac6200000",
    "0x1cb6b2d7cfc559b7f41e6f56ab95c7c958cd0e4c": "0x487a9a304539440000",
    "0x1cc1d3c14f0fb8640e36724dc43229d2ea7a1e48": "0x5c283d410394100000",
    "0x1cc90876004109cd79a3dea866cb840ac364ba1b": "0x6c6b935b8bbd400000",
    "0x1cd1f0a314cbb200de0a0cb1ef97e920709d97c2": "0x6c6b935b8bbd400000",
    "0x1cda411bd5163baeca1e558563601ce720e24ee1": "0xfc936392801c0000",
    "0x1ce81d31a7923022e125bf48a3e03693b98dc9dd": "0x6c6b935b8bbd400000",
    "0x1cebf0985d7f680aaa915c44cc62edb49eab269e": "0x3635c9adc5dea00000",
    "0x1ced6715f862b1ff86058201fcce5082b36e62b2": "0x16a5e60bee273b10000",
    "0x1cf04cb14380059efd3f238b65d5beb86afa14d8": "0x1158e460913d00000",
    "0x1cf105ab23023b554c583e86d7921179ee83169f": "0x6acb3df27e1f880000",
    "0x1cf2eb7a8ccac2adeaef0ee87347d535d3b94058": "0x6c6b935b8bbd400000",
    "0x1cfcf7517f0c08459720942b647ad192aa9c8828": "0x2b5e3af16b18800000",
    "0x1d09ad2412691cc581c1ab36b6f9434cd4f08b54": "0x17b7883c06916600000",
    "0x1d157c5876c5cad553c912caf6ce2d5277e05c73": "0x6c6b935b8bbd400000",
    "0x1d2615f8b6ca5012b663bdd094b0c5137c778ddf": "0x21e19e0c9bab2400000",
    "0x1d29c7aab42b2048d2b25225d498dba67a03fbb2": "0xad78ebc5ac6200000",
    "0x1d341fa5a3a1bd051f7db807b6db2fc7ba4f9b45": "0xfc936392801c0000",
    "0x1d344e962567cb27e44db9f2fac7b68df1c1e6f7": "0x692ae8897081d00000",
    "0x1d36683063b7e9eb99462dabd569bddce71686f2": "0x3635c9adc5dea00000",
    "0x1d37616b793f94911838ac8e19ee9449df921ec4": "0x5150ae84a8cdf00000",
    "0x1d395b30adda1cf21f091a4f4a7b753371189441": "0x152d02c7e14af6800000",
    "0x1d45586eb803ca2190650bf748a2b174312bb507": "0x4be4e7267b6ae00000",
    "0x1d572edd2d87ca271a6714c15a3b37761dcca005": "0x6ebd52a8ddd390000",
    "0x1d633097a85225a1ff4321b12988fdd55c2b3844": "0xd8d726b7177a800000",
    "0x1d69c83d28ff0474ceebeacb3ad227a144ece7a3": "0x128cc03920a62d28000",
    "0x1d96bcd58457bbf1d3c2a46ffaf16dbf7d836859": "0x9497209d8467e8000",
    "0x1d9e6aaf8019a05f230e5def05af5d889bd4d0f2": "0x73f75d1a085ba0000",
    "0x1dab172effa6fbee534c94b17e794edac54f55f8": "0x6acb3df27e1f880000",
    "0x1db9ac9a9eaeec0a523757050c71f47278c72d50": "0x487a9a304539440000",
    "0x1dbe8e1c2b8a009f85f1ad3ce80d2e05350ee39c": "0x7570d6e9ebbe40000",
    "0x1dc7f7dad85df53f1271152403f4e1e4fdb3afa0": "0xad78ebc5ac6200000",
    "0x1dcebcb7656df5dcaa3368a055d22f9ed6cdd940": "0x1b181e4bf2343c0000",
    "0x1dd77441844afe9cc18f15d8c77bccfb655ee034": "0x106eb45579944880000",
    "0x1ddefefd35ab8f658b2471e54790bc17af98dea4": "0x3635c9adc5dea00000",
    "0x1deec01abe5c0d952de9106c3dc30639d85005d6": "0x6c6b935b8bbd400000",
    "0x1df6911672679bb0ef3509038c0c27e394fdfe30": "0x1d460162f516f00000",
    "0x1dfaee077212f1beaf0e6f2f1840537ae154ad86": "0x3635c9adc5dea00000",
    "0x1e060dc6c5f1cb8cc7e1452e02ee167508b56542": "0x2b14f02c864c77e0000",
    "0x1e13ec51142cebb7a26083412c3ce35144ba56a1": "0x10f0cf064dd59200000",
    "0x1e1a4828119be309bd88236e4d482b504dc55711": "0xa030dcebbd2f4c0000",
    "0x1e1aed85b86c6562cb8fa1eb6f8f3bc9dcae6e79": "0xf4d2dd84259b240000",
    "0x1e1c6351776ac31091397ecf16002d979a1b2d51": "0x4be4e7267b6ae00000",
    "0x1e1d7a5f2468b94ea826982dbf2125793c6e4a5a": "0x3634f48417401a0000",
    "0x1e210e7047886daa52aaf70f4b991dac68e3025e": "0xad78ebc5ac6200000",
    "0x1e2bf4ba8e5ef18d37de6d6ad636c4cae489d0cc": "0x6c6b935b8bbd400000",
    "0x1e2fe4e4a77d141ff49a0c7fbc95b0a2b283eeeb": "0x6c6b935b8bbd400000",
    "0x1e33d1c2fb5e084f2f1d54bc5267727fec3f985d": "0x1b1ae4d6e2ef500000",
    "0x1e381adcf801a3bf9fd7bfac9ccc2b8482ad5e66": "0x208972c0010d740000",
    "0x1e3badb1b6e1380e27039c576ae6222e963a5b53": "0x43c33c1937564800000",
    "0x1e484d0621f0f5331b35d5408d9aae4eb1acf21e": "0x1158e460913d00000",
    "0x1e5800227d4dcf75e30f5595c5bed3f72e341e3b": "0xd75dace73417e0000",
    "0x1e596a81b357c6f24970cc313df6dbdaabd0d09e": "0x6c6b935b8bbd400000",
    "0x1e6915ebd9a19c81b692ad99b1218a592c1ac7b1": "0xd8d726b7177a800000",
    "0x1e6e0153fc161bc05e656bbb144c7187bf4fe84d": "0x6c6b935b8bbd400000",
    "0x1e706655e284dcf0bb37fe075d613a18dc12ff4a": "0xed43bf1eee82ac0000",
    "0x1e783e522ab7df0acaac9eeed3593039e5ac7579": "0x2b1446dd6aefe41c0000",
    "0x1e7b5e4d1f572becf2c00fc90cb4767b4a6e33d4": "0x61fc6107593e10000",
    "0x1e8e689b02917cdc29245d0c9c68b094b41a9ed6": "0x6c6b935b8bbd400000",
    "0x1ea334b5750807ea74aac5ab8694ec5f28aa77cf": "0x1ab2cf7c9f87e20000",
    "0x1ea4715504c6af107b0194f4f7b1cb6fcccd6f4b": "0x20043197e0b0270000",
    "0x1ea492bce1ad107e337f4bd4a7ac9a7babcccdab": "0x56bc75e2d63100000",
    "0x1ea6bf2f15ae9c1dbc64daa7f8ea4d0d81aad3eb": "0xe3aeb5737240a00000",
    "0x1eb4bf73156a82a0a6822080c6edf49c469af8b9": "0x678a932062e4180000",
    "0x1ebacb7844fdc322f805904fbf1962802db1537c": "0x21e19e0c9bab2400000",
    "0x1ec4ec4b77bf19d091a868e6f49154180541f90e": "0x6c6b935b8bbd400000",
    "0x1ed06ee51662a86c634588fb62dc43c8f27e7c17": "0xad78ebc5ac6200000",
    "0x1ed8bb3f06778b039e9961d81cb71a73e6787c8e": "0x6c6b935b8bbd400000",
    "0x1eda084e796500ba14c5121c0d90846f66e4be62": "0x1cfdd7468216e80000",
    "0x1eee6cbee4fe96ad615a9cf5857a647940df8c78": "0x10d3aa536e2940000",
    "0x1ef2dcbfe0a500411d956eb8c8939c3d6cfe669d": "0x2a1129d09367200000",
    "0x1ef5c9c73650cfbbde5c885531d427c7c3fe5544": "0x14542ba12a337c00000",
    "0x1f0412bfedcd964e837d092c71a5fcbaf30126e2": "0x1158e460913d00000",
    "0x1f174f40a0447234e66653914d75bc003e5690dc": "0x8ac7230489e800000",
    "0x1f2186ded23e0cf9521694e4e164593e690a9685": "0x1043561a8829300000",
    "0x1f2afc0aed11bfc71e77a907657b36ea76e3fb99": "0xd8d726b7177a800000",
    "0x1f3959fc291110e88232c36b7667fc78a379613f": "0xfc936392801c0000",
    "0x1f3da68fe87eaf43a829ab6d7ec5a6e009b204fb": "0x1e1601758c2c7e0000",
    "0x1f49b86d0d3945590698a6aaf1673c37755ca80d": "0x25f273933db5700000",
    "0x1f5f3b34bd134b2781afe5a0424ac5846cdefd11": "0x55de6a779bbac0000",
    "0x1f6f0030349752061c96072bc3d6eb3549208d6b": "0x14b8de1eb88db8000",
    "0x1f7d8e86d6eeb02545aad90e91327bd369d7d2f3": "0x1158e460913d00000",
    "0x1f8116bd0af5570eaf0c56c49c7ab5e37a580458": "0x6c6b935b8bbd400000",
    "0x1f88f8a1338fc7c10976abcd3fb8d38554b5ec9c": "0xb9f65d00f63c0000",
    "0x1f9c3268458da301a2be5ab08257f77bb5a98aa4": "0xad78ebc5ac6200000",
    "0x1fa2319fed8c2d462adf2e17feec6a6f30516e95": "0x6cae30621d4720000",
    "0x1fb463a0389983df7d593f7bdd6d78497fed8879": "0x1158e460913d00000",
    "0x1fb7bd310d95f2a6d9baaf8a8a430a9a04453a8b": "0xa2a15d09519be00000",
    "0x1fcc7ce6a8485895a3199e16481f72e1f762defe": "0x3635c9adc5dea00000",
    "0x1fcfd1d57f872290560cb62d600e1defbefccc1c": "0x50c5e761a444080000",
    "0x1fd296be03ad737c92f9c6869e8d80a71c5714aa": "0xb98bc829a6f90000",
    "0x1fddd85fc98be9c4045961f40f93805ecc4549e5": "0x8e3f50b173c100000",
    "0x2001bef77b66f51e1599b02fb110194a0099b78d": "0x6c6b935b8bbd400000",
    "0x200264a09f8c68e3e6629795280f56254f8640d0": "0x1158e460913d00000",
    "0x2003717907a72560f4307f1beecc5436f43d21e7": "0x1b1ae4d6e2ef500000",
    "0x200dfc0b71e359b2b465440a36a6cdc352773007": "0x5150ae84a8cdf00000",
    "0x20134cbff88bfadc466b52eceaa79857891d831e": "0x3635c9adc5dea00000",
    "0x2014261f01089f53795630ba9dd24f9a34c2d942": "0x487a9a304539440000",
    "0x2016895df32c8ed5478269468423aea7b7fbce50": "0x1158e460913d00000",
    "0x20181c4b41f6f972b66958215f19f570c15ddff1": "0x56bc75e2d631000000",
    "0x201864a8f784c2277b0b7c9ee734f7b377eab648": "0xf2281400d1d5ec0000",
    "0x2020b81ae53926ace9f7d7415a050c031d585f20": "0x127f19e83eb3480000",
    "0x203c6283f20df7bc86542fdfb4e763ecdbbbeef5": "0x54b40b1f852bda00000",
    "0x204ac98867a7c9c7ed711cb82f28a878caf69b48": "0x14542ba12a337c00000",
    "0x205237c4be146fba99478f3a7dad17b09138da95": "0x6c6b935b8bbd400000",
    "0x2053ac97548a0c4e8b80bc72590cd6a098fe7516": "0xa2325753b460c0000",
    "0x205f5166f12440d85762c967d3ae86184f8f4d98": "0x177224aa844c720000",
    "0x205fc843e19a4913d1881eb69b69c0fa3be5c50b": "0x20dd68aaf3289100000",
    "0x206482ee6f138a778fe1ad62b180ce856fbb23e6": "0x6c6b935b8bbd400000",
    "0x2066774d822793ff25f1760909479cf62491bf88": "0xbae3ac685cb72e00000",
    "0x206d55d5792a514ec108e090599f2a065e501185": "0xadf30ba70c8970000",
    "0x20707e425d2a11d2c89f391b2b809f556c592421": "0x6c6b935b8bbd400000",
    "0x207ef80b5d60b6fbffc51f3a64b8c72036a5abbd": "0x16a6502f15a1e540000",
    "0x20824ba1dbebbef9846ef3d0f6c1b017e6912ec4": "0x184b26e4daf1d350000",
    "0x2084fce505d97bebf1ad8c5ff6826fc645371fb2": "0x1a055690d9db80000",
    "0x208c45732c0a378f17ac8324926d459ba8b658b4": "0xa030dcebbd2f4c0000",
    "0x209377b6ad3fe101c9685b3576545c6b1684e73c": "0x62a992e53a0af00000",
    "0x209e8e29d33beae8fb6baa783d133e1d9ec1bc0b": "0x2d43f3ebfafb2c0000",
    "0x20a15256d50ce058bf0eac43aa533aa16ec9b380": "0x1158e460913d00000",
    "0x20a29c5079e26b3f18318bb2e50e8e8b346e5be8": "0x1b1ab319f5ec750000",
    "0x20a81680e465f88790f0074f60b4f35f5d1e6aa5": "0x456180278f0c778000",
    "0x20b9a9e6bd8880d9994ae00dd0b9282a0beab816": "0x1b1ae4d6e2ef500000",
    "0x20c284ba10a20830fc3d699ec97d2dfa27e1b95e": "0x6c6b935b8bbd400000",
    "0x20d1417f99c569e3beb095856530fe12d0fceaaa": "0x4015f94b1183698000",
    "0x20dd8fcbb46ea46fe381a68b8ca0ea5be21fe9a5": "0x6c6b935b8bbd400000",
    "0x20ff3ede8cadb5c37b48cb14580fb65e23090a7b": "0x8e4d316827686400000",
    "0x2100381d60a5b54adc09d19683a8f6d5bb4bfbcb": "0x21e19e0c9bab2400000",
    "0x2118c116ab0cdf6fd11d54a4309307b477c3fc0f": "0x21e19e0c9bab2400000",
    "0x211b29cefc79ae976744fdebcebd3cbb32c51303": "0x2f6f10780d22cc00000",
    "0x21206ce22ea480e85940d31314e0d64f4e4d3a04": "0x3635c9adc5dea00000",
    "0x2132c0516a2e17174ac547c43b7b0020d1eb4c59": "0x35659ef93f0fc40000",
    "0x21408b4d7a2c0e6eca4143f2cacdbbccba121bd8": "0x43c33c1937564800000",
    "0x214b743955a512de6e0d886a8cbd0282bee6d2a2": "0x6c6b935b8bbd400000",
    "0x214c89c5bd8e7d22bc574bb35e48950211c6f776": "0x10654f258fd358000",
    "0x21546914dfd3af2add41b0ff3e83ffda7414e1e0": "0x14395e7385a502e0000",
    "0x21582e99e502cbf3d3c23bdffb76e901ac6d56b2": "0x56bc75e2d63100000",
    "0x2159240813a73095a7ebf7c3b3743e8028ae5f09": "0x6c6b935b8bbd400000",
    "0x2160b4c02cac0a81de9108de434590a8bfe68735": "0x6acb3df27e1f880000",
    "0x216e41864ef98f060da08ecae19ad1166a17d036": "0x1369fb96128ac480000",
    "0x21846f2fdf5a41ed8df36e5ed8544df75988ece3": "0x6c6acc67d7b1d40000",
    "0x21a6db6527467bc6dad54bc16e9fe2953b6794ed": "0x2f6f10780d22cc00000",
    "0x21a6feb6ab11c766fdd977f8df4121155f47a1c0": "0x319cf38f100580000",
    "0x21b182f2da2b384493cf5f35f83d9d1ee14f2a21": "0x6c6b935b8bbd400000",
    "0x21bfe1b45cacde6274fd8608d9a178bf3eeb6edc": "0x6cee06ddbe15ec0000",
    "0x21c07380484f6cbc8724ad32bc864c3b5ad500b7": "0x3635c9adc5dea00000",
    "0x21c3a8bba267c8cca27b1a9afabad86f607af708": "0x1e4a36c49d998300000",
    "0x21ce6d5b9018cec04ad6967944bea39e8030b6b8": "0x1158e460913d00000",
    "0x21d02705f3f64905d80ed9147913ea8c7307d695": "0x49edb1c09887360000",
    "0x21d13f0c4024e967d9470791b50f22de3afecf1b": "0xf15ad35e2e31e50000",
    "0x21dbdb817a0d8404c6bdd61504374e9c43c9210e": "0x21e18b9e9ab45e48000",
    "0x21df1ec24b4e4bfe79b0c095cebae198f291fbd1": "0x43c33c1937564800000",
    "0x21df2dcdaf74b2bf803404dd4de6a35eabec1bbd": "0x177224aa844c7200000",
    "0x21e219c89ca8ac14ae4cba6130eeb77d9e6d3962": "0x2acd9faaa038ee0000",
    "0x21e5d2bae995ccfd08a5c16bb524e1f630448f82": "0x97c9ce4cf6d5c00000",
    "0x21e5d77320304c201c1e53b261a123d0a1063e81": "0x4b6fa9d33dd460000",
    "0x21eae6feffa9fbf4cd874f4739ace530ccbe5937": "0x10f0cf064dd59200000",
    "0x21ecb2dfa65779c7592d041cd2105a81f4fd4e46": "0x3635c9adc5dea00000",
    "0x21efbca09b3580b98e73f5b2f7f4dc0bf02c529c": "0x6c6b935b8bbd400000",
    "0x21fd0bade5f4ef7474d058b7f3d854cb1300524e": "0x1158e460913d00000",
    "0x21fd47c5256012198fa5abf131c06d6aa1965f75": "0x1ab2cf7c9f87e200000",
    "0x21fd6c5d97f9c600b76821ddd4e776350fce2be0": "0x6c6ad382d4fb610000",
    "0x220dc68df019b6b0ccbffb784b5a5ab4b15d4060": "0xd5967be4fc3f100000",
    "0x220e2b92c0f6c902b513d9f1e6fab6a8b0def3d7": "0x2b5e3af16b18800000",
    "0x22561c5931143536309c17e832587b625c390b9a": "0xd8d726b7177a800000",
    "0x2257fca16a6e5c2a647c3c29f36ce229ab93b17e": "0xd8d726b7177a800000",
    "0x225d35faedb391c7bc2db7fa9071160405996d00": "0x91854fc1862630000",
    "0x225f9eb3fb6ff3e9e3c8447e14a66e8d4f3779f6": "0x6c6b935b8bbd400000",
    "0x2272186ef27dcbe2f5fc373050fdae7f2ace2316": "0x368c8623a8b4d100000",
    "0x2273bad7bc4e487622d175ef7a66988b6a93c4ee": "0x1158e460913d00000",
    "0x2276264bec8526c0c0f270677abaf4f0e441e167": "0x3635c9adc5dea00000",
    "0x228242f8336eecd8242e1f000f41937e71dffbbf": "0x10f0cf064dd59200000",
    "0x22842ab830da509913f81dd1f04f10af9edd1c55": "0x6c6b935b8bbd400000",
    "0x22944fbca9b57963084eb84df7c85fb9bcdfb856": "0xfc118fef90ba388000",
    "0x229cc4711b62755ea296445ac3b77fc633821cf2": "0x223e8b05219328000",
    "0x229e430de2b74f442651ddcdb70176bc054cad54": "0xbbf981bc4aaa8000",
    "0x229f4f1a2a4f540774505b4707a81de44410255b": "0x6c6b935b8bbd400000",
    "0x229ff80bf5708009a9f739e0f8b560914016d5a6": "0x1211ecb56d13488000",
    "0x22a25812ab56dcc423175ed1d8adacce33cd1810": "0x6449e84e47a8a80000",
    "0x22b96ab2cad55db100b53001f9e4db378104c807": "0x21e19e0c9bab2400000",
    "0x22bdffc240a88ff7431af3bff50e14da37d5183e": "0x3635c9adc5dea00000",
    "0x22ce349159eeb144ef06ff2636588aef79f62832": "0xa31062beeed700000",
    "0x22db559f2c3c1475a2e6ffe83a5979599196a7fa": "0x3635c9adc5dea00000",
    "0x22e15158b5ee3e86eb0332e3e6a9ac6cd9b55ecd": "0x8ac7230489e800000",
    "0x22e2488e2da26a49ae84c01bd54b21f2947891c6": "0x5dc892aa1131c80000",
    "0x22e512149a18d369b73c71efa43e86c9edabaf1d": "0x4ee02e6714615c0000",
    "0x22eb7db0ba56b0f8b816ccb206e615d929185b0d": "0x45d29737e22f20000",
    "0x22eed327f8eb1d1338a3cb7b0f8a4baa5907cd95": "0x1455d5f4877088000",
    "0x22f004df8de9e6ebf523ccace457accb26f97281": "0x21e19e0c9bab2400000",
    "0x22f2dcff5ad78c3eb6850b5cb951127b659522e6": "0xbe202d6a0eda0000",
    "0x22f3c779dd79023ea92a78b65c1a1780f62d5c4a": "0x6acb3df27e1f880000",
    "0x22fe884d9037291b4d52e6285ae68dea0be9ffb5": "0x6c6b935b8bbd400000",
    "0x2306df931a940d58c01665fa4d0800802c02edfe": "0x3635c9adc5dea00000",
    "0x2309d34091445b3232590bd70f4f10025b2c9509": "0x21e19e0c9bab2400000",
    "0x23120046f6832102a752a76656691c863e17e59c": "0x11e0e4f8a50bd40000",
    "0x231a15acc199c89fa9cb22441cc70330bdcce617": "0x1b1ae4d6e2ef500000",
    "0x231d94155dbcfe2a93a319b6171f63b20bd2b6fa": "0xcf147bb906e2f80000",
    "0x232832cd5977e00a4c30d0163f2e24f088a6cb09": "0xa2a15d09519be00000",
    "0x232c6d03b5b6e6711efff190e49c28eef36c82b0": "0x487a9a304539440000",
    "0x232cb1cd49993c144a3f88b3611e233569a86bd6": "0x34c606c42d0ac600000",
    "0x232ce782506225fd9860a2edc14a7a3047736da2": "0x1158e460913d00000",
    "0x232f525d55859b7d4e608d20487faadb00293135": "0xd8d726b7177a800000",
    "0x2334c590c7a48769103045c5b6534c8a3469f44a": "0x3b199073df72dc00000",
    "0x23376ecabf746ce53321cf42c86649b92b67b2ff": "0x6c6b935b8bbd400000",
    "0x23378f42926d0184b793b0c827a6dd3e3d334fcd": "0x30927f74c9de00000",
    "0x233842b1d0692fd11140cf5acda4bf9630bae5f8": "0x6c6b935b8bbd400000",
    "0x2339e9492870afea2537f389ac2f838302a33c06": "0x6c6b935b8bbd400000",
    "0x233bdddd5da94852f4ade8d212885682d9076bc6": "0xd8d726b7177a800000",
    "0x234f46bab73fe45d31bf87f0a1e0466199f2ebac": "0x1a4aba225c20740000",
    "0x23551f56975fe92b31fa469c49ea66ee6662f41e": "0x678a932062e4180000",
    "0x23569542c97d566018c907acfcf391d14067e87e": "0x6c6b935b8bbd400000",
    "0x235fa66c025ef5540070ebcf0d372d8177c467ab": "0x7129e1cdf373ee00000",
    "0x2372c4c1c9939f7aaf6cfac04090f00474840a09": "0x21e19e0c9bab2400000",
    "0x23730c357a91026e44b1d0e2fc2a51d071d8d77b": "0xd8d726b7177a800000",
    "0x2376ada90333b1d181084c97e645e810aa5b76f1": "0x28a857425466f80000",
    "0x2378fd4382511e968ed192106737d324f454b535": "0x3635c9adc5dea00000",
    "0x2382a9d48ec83ea3652890fd0ee79c907b5b2dc1": "0x73f75d1a085ba0000",
    "0x2383c222e67e969190d3219ef14da37850e26c55": "0x6c6b935b8bbd400000",
    "0x238a6b7635252f5244486c0af0a73a207385e039": "0x4a4491bd6dcd280000",
    "0x239a733e6b855ac592d663156186a8a174d2449e": "0x58be3758b241f60000",
    "0x23ab09e73f87aa0f3be0139df0c8eb6be5634f95": "0x1b1ae4d6e2ef5000000",
    "0x23abd9e93e7957e5b636be6579051c15e5ce0b0e": "0x3a3c8f7cbf42c380000",
    "0x23b1c4917fbd93ee3d48389306957384a5496cbf": "0xd8d8583fa2d52f0000",
    "0x23ba3864da583dab56f420873c37679690e02f00": "0x21342520d5fec200000",
    "0x23c55aeb5739876f0ac8d7ebea13be729685f000": "0x487a9a304539440000",
    "0x23c99ba087448e19c9701df66e0cab52368331fa": "0x6c6b935b8bbd400000",
    "0x23ccc3c6acd85c2e460c4ffdd82bc75dc849ea14": "0xd8d726b7177a800000",
    "0x23cd2598a20e149ead2ad69379576ecedb60e38e": "0x6c6b935b8bbd400000",
    "0x23df8f48ee009256ea797e1fa369beebcf6bc663": "0x7cd3fac26d19818000",
    "0x23e2c6a8be8e0acfa5c4df5e36058bb7cbac5a81": "0x6c6b935b8bbd400000",
    "0x23ea669e3564819a83b0c26c00a16d9e826f6c46": "0x4d8d6ca968ca130000",
    "0x23eb6fd85671a9063ab7678ebe265a20f61a02b3": "0x6c6b935b8bbd400000",
    "0x23f9ecf3e5dddca38815d3e59ed34b5b90b4a353": "0xb1781a3f0bb200000",
    "0x23fa7eb51a48229598f97e762be0869652dffc66": "0x3635c9adc5dea00000",
    "0x240305727313d01e73542c775ff59d11cd35f819": "0x141885666807f5c8000",
    "0x24046b91da9b61b629cb8b8ec0c351a07e0703e4": "0x6c6b935b8bbd400000",
    "0x240e559e274aaef0c258998c979f671d1173b88b": "0xd8d726b7177a800000",
    "0x241361559feef80ef137302153bd9ed2f25db3ef": "0x43c33c1937564800000",
    "0x243b3bca6a299359e886ce33a30341fafe4d573d": "0x43c33c1937564800000",
    "0x243c84d12420570cc4ef3baba1c959c283249520": "0x7f1f6993a853040000",
    "0x24434a3e32e54ecf272fe3470b5f6f512f675520": "0x14061b9d77a5e980000",
    "0x2448596f91c09baa30bc96106a2d37b5705e5d28": "0x6c6b935b8bbd400000",
    "0x24586ec5451735eeaaeb470dc8736aae752f82e5": "0xf43fc2c04ee00000",
    "0x2458d6555ff98a129cce4037953d00206eff4287": "0xaadec983fcff40000",
    "0x246291165b59332df5f18ce5c98856fae95897d6": "0x5c283d410394100000",
    "0x2467c6a5c696ede9a1e542bf1ad06bcc4b06aca0": "0x100bd33fb98ba0000",
    "0x2476b2bb751ce748e1a4c4ff7b230be0c15d2245": "0xd8d726b7177a800000",
    "0x247a0a11c57f0383b949de540b66dee68604b0a1": "0x39fbae8d042dd00000",
    "0x2487c3c4be86a2723d917c06b458550170c3edba": "0x3635c9adc5dea00000",
    "0x2489ac126934d4d6a94df08743da7b7691e9798e": "0x3635c9adc5dea00000",
    "0x249db29dbc19d1235da7298a04081c315742e9ac": "0x61acff81a78ad40000",
    "0x24a4eb36a7e498c36f99975c1a8d729fd6b305d7": "0xdfc78210eb2c80000",
    "0x24a750eae5874711116dd7d47b7186ce990d3103": "0xad78ebc5ac6200000",
    "0x24aa1151bb765fa3a89ca50eb6e1b1c706417fd4": "0xa80d24677efef00000",
    "0x24aca08d5be85ebb9f3132dfc1b620824edfedf9": "0xfc936392801c0000",
    "0x24b2be118b16d8b2174769d17b4cf84f07ca946d": "0x6c6b935b8bbd400000",
    "0x24b8b446debd1947955dd084f2c544933346d3ad": "0xea696d904039bd8000",
    "0x24b95ebef79500baa0eda72e77f877415df75c33": "0x3154c9729d05780000",
    "0x24b9e6644f6ba4cde126270d81f6ab60f286dff4": "0x73f75d1a085ba0000",
    "0x24bd5904059091d2f9e12d6a26a010ca22ab14e8": "0x65ea3db75546600000",
    "0x24c0c88b54a3544709828ab4ab06840559f6c5e2": "0x90f534608a72880000",
    "0x24c117d1d2b3a97ab11a4679c99a774a9eade8d1": "0x3635c9adc5dea00000",
    "0x24cff0e9336a9f80f9b1cb968caf6b1d1c4932a4": "0xada55474b81340000",
    "0x24daaaddf7b06bbcea9b80590085a88567682b4e": "0x114b2015d2bbd00000",
    "0x24dcc24bd9c7210ceacfb30da98ae04a4d7b8ab9": "0x3635c9adc5dea00000",
    "0x24f7450ddbf18b020feb1a2032d9d54b633edf37": "0x2b5e3af16b1880000",
    "0x24fc73d20793098e09ddab5798506224fa1e1850": "0xad78ebc5ac6200000",
    "0x24fd9a6c874c2fab3ff36e9afbf8ce0d32c7de92": "0x487a9a304539440000",
    "0x250a40cef3202397f240469548beb5626af4f23c": "0x503b203e9fba20000",
    "0x250a69430776f6347703f9529783955a6197b682": "0x692ae8897081d00000",
    "0x250eb7c66f869ddf49da85f3393e980c029aa434": "0xd8d726b7177a800000",
    "0x25106ab6755df86d6b63a187703b0cfea0e594a0": "0x17c405ad41db40000",
    "0x25185f325acf2d64500698f65c769ddf68301602": "0x10f0cf064dd59200000",
    "0x251c12722c6879227992a304eb3576cd18434ea5": "0x6c6b935b8bbd400000",
    "0x251e6838f7cec5b383c1d90146341274daf8e502": "0x7ff1ccb7561df0000",
    "0x25259d975a21d83ae30e33f800f53f37dfa01938": "0x1158e460913d00000",
    "0x25287b815f5c82380a73b0b13fbaf982be24c4d3": "0x22b1c8c1227a00000",
    "0x252b6555afdc80f2d96d972d17db84ea5ad521ac": "0x1ab2cf7c9f87e200000",
    "0x2538532936813c91e653284f017c80c3b8f8a36f": "0x6c8754c8f30c080000",
    "0x253e32b74ea4490ab92606fda0aa257bf23dcb8b": "0x21e19e0c9bab2400000",
    "0x253f1e742a2cec86b0d7b306e5eacb6ccb2f8554": "0x43e5ede1f878c200000",
    "0x2541314a0b408e95a694444977712a50713591ab": "0x589e1a5df4d7b50000",
    "0x254c1ecc630c2877de8095f0a8dba1e8bf1f550c": "0x5c283d410394100000",
    "0x255abc8d08a096a88f3d6ab55fbc7352bddcb9ce": "0x4743682313ede8000",
    "0x255bdd6474cc8262f26a22c38f45940e1ceea69b": "0xd8d726b7177a800000",
    "0x2560b09b89a4ae6849ed5a3c9958426631714466": "0x5c283d410394100000",
    "0x2561a138dcf83bd813e0e7f108642be3de3d6f05": "0x3634f48417401a0000",
    "0x2561ec0f379218fe5ed4e028a3f744aa41754c72": "0xb98bc829a6f90000",
    "0x256292a191bdda34c4da6b6bd69147bf75e2a9ab": "0xc2ff2e0dfb038000",
    "0x25697ef20cccaa70d32d376f8272d9c1070c3d78": "0xad78ebc5ac6200000",
    "0x256fa150cc87b5056a07d004efc84524739e62b5": "0xad78ebc5ac6200000",
    "0x25721c87b0dc21377c7200e524b14a22f0af69fb": "0xd8d726b7177a800000",
    "0x258939bbf00c9de9af5338f5d714abf6d0c1c671": "0x54069233bf7f780000",
    "0x2590126870e0bde8a663ab040a72a5573d8d41c2": "0x10f0cf064dd59200000",
    "0x259ec4d265f3ab536b7c70fa97aca142692c13fc": "0x11b1b5bea89f80000",
    "0x25a500eeec7a662a841552b5168b707b0de21e9e": "0x21f2f6f0fc3c6100000",
    "0x25a5a44d38a2f44c6a9db9cdbc6b1e2e97abb509": "0x39992648a23c8a00000",
    "0x25a74c2ac75dc8baa8b31a9c7cb4b7829b2456da": "0x6c6b935b8bbd400000",
    "0x25adb8f96f39492c9bb47c5edc88624e46075697": "0x5a9940bc56879500000",
    "0x25aee68d09afb71d8817f3f184ec562f7897b734": "0x6c6b935b8bbd400000",
    "0x25b0533b81d02a617b9229c7ec5d6f2f672e5b5a": "0x3635c9adc5dea00000",
    "0x25b78c9fad85b43343f0bfcd0fac11c9949ca5eb": "0x6c6b935b8bbd400000",
    "0x25bc49ef288cd165e525c661a812cf84fbec8f33": "0x125921aebda9d00000",
    "0x25bdfa3ee26f3849617b230062588a97e3cae701": "0x3635e619bb04d40000",
    "0x25c1a37ee5f08265a1e10d3d90d5472955f97806": "0x62a992e53a0af00000",
    "0x25c6e74ff1d928df98137af4df8430df24f07cd7": "0x15245655b102580000",
    "0x25cfc4e25c35c13b69f7e77dbfb08baf58756b8d": "0x878678326eac9000000",
    "0x25dad495a11a86b9eeece1eeec805e57f157faff": "0x3635c9adc5dea000000",
    "0x25e037f00a18270ba5ec3420229ddb0a2ce38fa2": "0x21e19e0c9bab2400000",
    "0x25e661c939863acc044e6f17b5698cce379ec3cc": "0x4a4491bd6dcd280000",
    "0x26048fe84d9b010a62e731627e49bc2eb73f408f": "0xd8d726b7177a800000",
    "0x2606c3b3b4ca1b091498602cb1978bf3b95221c0": "0x15af1d78b58c400000",
    "0x260a230e4465077e0b14ee4442a482d5b0c914bf": "0x5af606a06b5b118000",
    "0x260df8943a8c9a5dba7945327fd7e0837c11ad07": "0xad78ebc5ac6200000",
    "0x2614f42d5da844377578e6b448dc24305bef2b03": "0x6c6b935b8bbd400000",
    "0x2615100ea7e25bba9bca746058afbbb4ffbe4244": "0x1b1ae4d6e2ef500000",
    "0x261575e9cf59c8226fa7aaf91de86fb70f5ac3ae": "0x1043a4436a523f0000",
    "0x261e0fa64c51137465eecf5b90f197f7937fdb05": "0x3cfc82e37e9a7400000",
    "0x262a8bfd7d9dc5dd3ad78161b6bb560824373655": "0x3f6a8384072b760000",
    "0x262aed4bc0f4a4b2c6fb35793e835a49189cdfec": "0x21e19e0c9bab2400000",
    "0x262dc1364ccf6df85c43268ee182554dae692e29": "0x10b202fec74ced80000",
    "0x263814309de4e635cf585e0d365477fc40e66cf7": "0x7ea28327577080000",
    "0x2639eee9873ceec26fcc9454b548b9e7c54aa65c": "0x3635c9adc5dea00000",
    "0x263e57dacbe0149f82fe65a2664898866ff5b463": "0x80bfbefcb5f0bc00000",
    "0x26475419c06d5f147aa597248eb46cf7befa64a5": "0x58e7926ee858a00000",
    "0x264cc8086a8710f91b21720905912cd7964ae868": "0x1731790534df20000",
    "0x265383d68b52d034161bfab01ae1b047942fbc32": "0x47271dee20d745c0000",
    "0x2659facb1e83436553b5b42989adb8075f9953ed": "0x1976576771a5e0000",
    "0x266f2da7f0085ef3f3fa09baee232b93c744db2e": "0xcb49b44ba602d800000",
    "0x267148fd72c54f620a592fb92799319cc4532b5c": "0x1639e49bba16280000",
    "0x26784ade91c8a83a8e39658c8d8277413ccc9954": "0x14542ba12a337c00000",
    "0x267a7e6e82e1b91d51deddb644f0e96dbb1f7f7e": "0x1158e460913d00000",
    "0x2680713d40808e2a50ed013150a2a694b96a7f1d": "0x61093d7c2c6d380000",
    "0x2697b339813b0c2d964b2471eb1c606f4ecb9616": "0x3e8ef795d890c80000",
    "0x26a68eab905a8b3dce00e317308225dab1b9f6b8": "0x6b56051582a9700000",
    "0x26b11d066588ce74a572a85a6328739212aa8b40": "0x6c6b935b8bbd400000",
    "0x26babf42b267fdcf3861fdd4236a5e474848b358": "0x3635c9adc5dea00000",
    "0x26c0054b700d3a7c2dcbe275689d4f4cad16a335": "0x6c6b935b8bbd400000",
    "0x26c2ffc30efdc5273e76183a16c2698d6e531286": "0x2a1129d09367200000",
    "0x26c99f8849c9802b83c861217fd07a9e84cdb79d": "0x1043561a8829300000",
    "0x26cfffd052152bb3f957b478d5f98b233a7c2b92": "0xd8d726b7177a800000",
    "0x26d4a16891f52922789217fcd886f7fce296d400": "0x6c6b935b8bbd400000",
    "0x26d4ec17d5ceb2c894bdc59d0a6a695dad2b43cc": "0x9f1f78761d341a0000",
    "0x26e801b62c827191dd68d31a011990947fd0ebe0": "0x1158e460913d00000",
    "0x26e9e2ad729702626417ef25de0dc800f7a779b3": "0x3635c9adc5dea00000",
    "0x26f9f7cefd7e394b9d3924412bf2c2831faf1f85": "0xd8d726b7177a800000",
    "0x26fe174cbf526650e0cd009bd6126502ce8e684d": "0x277017338a30ae00000",
    "0x26ff0a51e7cece8400276978dbd6236ef162c0e6": "0x152e185627540a500000",
    "0x27101a0f56d39a88c5a84f9b324cdde33e5cb68c": "0x6c6b935b8bbd400000",
    "0x27144ca9a7771a836ad50f803f64d869b2ae2b20": "0xd8d726b7177a800000",
    "0x27146913563aa745e2588430d9348e86ea7c3510": "0x15af1d78b58c400000",
    "0x271d3d481cb88e7671ad216949b6365e06303de0": "0xd8d726b7177a800000",
    "0x2720f9ca426ef2f2cbd2fecd39920c4f1a89e16d": "0x6c6b935b8bbd400000",
    "0x272a131a5a656a7a3aca35c8bd202222a7592258": "0x90f534608a72880000",
    "0x2744ff67464121e35afc2922177164fa2fcb0267": "0x56bc75e2d63100000",
    "0x274a3d771a3d709796fbc4d5f48fce2fe38c79d6": "0x1158e460913d00000",
    "0x274d69170fe7141401882b886ac4618c6ae40edb": "0x33c5499031720c0000",
    "0x27521deb3b6ef1416ea4c781a2e5d7b36ee81c61": "0x6c6b935b8bbd400000",
    "0x275875ff4fbb0cf3a430213127487f7608d04cba": "0x1b1c010e766d580000",
    "0x276a006e3028ecd44cdb62ba0a77ce94ebd9f10f": "0x6194049f30f7200000",
    "0x276b0521b0e68b277df0bb32f3fd48326350bfb2": "0x2b5e3af16b1880000",
    "0x276fd7d24f8f883f5a7a28295bf17151c7a84b03": "0x6c6b935b8bbd400000",
    "0x2770f14efb165ddeba79c10bb0af31c31e59334c": "0xa2a15d09519be00000",
    "0x277677aba1e52c3b53bfa2071d4e859a0af7e8e1": "0x3635c9adc5dea00000",
    "0x27824666d278d70423f03dfe1dc7a3f02f43e2b5": "0x3636c25e66ece70000",
    "0x27830c5f6023afaaf79745676c204a0faccda0ba": "0xd02ab486cedc00000",
    "0x2784903f1d7c1b5cd901f8875d14a79b3cbe2a56": "0x4bda7e9d74ad5500000",
    "0x278c0bde630ec393b1e7267fc9d7d97019e4145b": "0x6c6b935b8bbd400000",
    "0x27987110221a880826adb2e7ab5eca78c6e31aec": "0xd8d726b7177a800000",
    "0x27ac073be79ce657a93aa693ee43bf0fa41fef04": "0xa968163f0a57b400000",
    "0x27b1694eafa165ebd7cc7bc99e74814a951419dc": "0x2b5e3af16b18800000",
    "0x27b62816e1e3b8d19b79d1513d5dfa855b0c3a2a": "0x56af5c1fd69508000",
    "0x27bf943c1633fe32f8bcccdb6302b407a5724e44": "0x32f84c6df408c08000",
    "0x27bf9f44ba7d05c33540c3a53bb02cbbffe7c3c6": "0x6c6b935b8bbd400000",
    "0x27c2d7ca504daa3d9066dc09137dc42f3aaab452": "0x2086ac351052600000",
    "0x27d158ac3d3e1109ab6e570e90e85d3892cd7680": "0x56bc75e2d63100000",
    "0x27e63989ca1e903bc620cf1b9c3f67b9e2ae6581": "0x487a9a304539440000",
    "0x27f03cf1abc5e1b51dbc444b289e542c9ddfb0e6": "0x10f0cf064dd59200000",
    "0x27fc85a49cff90dbcfdadc9ddd40d6b9a2210a6c": "0x56bc75e2d63100000",
    "0x2805415e1d7fdec6dedfb89e521d10592d743c10": "0x56bc75e2d63100000",
    "0x28073efc17d05cab3195c2db332b61984777a612": "0x3635c9adc5dea00000",
    "0x281250a29121270a4ee5d78d24feafe82c70ba3a": "0x3635c9adc5dea00000",
    "0x2813d263fc5ff2479e970595d6b6b560f8d6d6d1": "0x6c6b935b8bbd400000",
    "0x282e80a554875a56799fa0a97f5510e795974c4e": "0x3635c9adc5dea00000",
    "0x283396ce3cac398bcbe7227f323e78ff96d08767": "0x15af1d78b58c400000",
    "0x28349f7ef974ea55fe36a1583b34cec3c45065f0": "0xcb633d49e65590000",
    "0x2836123046b284e5ef102bfd22b1765e508116ad": "0x1653fbb5c427e40000",
    "0x283c2314283c92d4b064f0aef9bb5246a7007f39": "0xad78ebc5ac6200000",
    "0x283e11203749b1fa4f32febb71e49d135919382a": "0x3635c9adc5dea00000",
    "0x283e6252b4efcf4654391acb75f903c59b78c5fb": "0x28a857425466f800000",
    "0x28510e6eff1fc829b6576f4328bc3938ec7a6580": "0x21e19e0c9bab2400000",
    "0x2858acacaf21ea81cab7598fdbd86b452e9e8e15": "0x241a9b4f617a280000",
    "0x285ae51b9500c58d541365d97569f14bb2a3709b": "0x6c6b935b8bbd400000",
    "0x2866b81decb02ee70ae250cee5cdc77b59d7b679": "0x6c6b935b8bbd400000",
    "0x286906b6bd4972e3c71655e04baf36260c7cb153": "0x126e72a69a50d00000",
    "0x286b186d61ea1fd78d9930fe12b06537b05c3d51": "0x3635c9adc5dea00000",
    "0x2874f3e2985d5f7b406627e17baa772b01abcc9e": "0x146050410765f380000",
    "0x287cf9d0902ef819a7a5f149445bf1775ee8c47c": "0x3635c9adc5dea000000",
    "0x28818e18b610001321b31df6fe7d2815cdadc9f5": "0x3635c9adc5dea00000",
    "0x28868324337e11ba106cb481da962f3a8453808d": "0x6c6b935b8bbd400000",
    "0x28904bb7c4302943b709b14d7970e42b8324e1a1": "0x21f97846a072d7e0000",
    "0x2895e80999d406ad592e2b262737d35f7db4b699": "0x692ae8897081d00000",
    "0x28967280214e218a120c5dda37041b111ea36d74": "0xad78ebc5ac6200000",
    "0x28a3da09a8194819ae199f2e6d9d1304817e28a5": "0x6c6b935b8bbd400000",
    "0x28ab165ffb69eda0c549ae38e9826f5f7f92f853": "0x464df6d7c844590000",
    "0x28b77585cb3d55a199ab291d3a18c68fe89a848a": "0x6a4076cf7995a00000",
    "0x28d4ebf41e3d3c451e943bdd7e1f175fae932a3d": "0x14542ba12a337c00000",
    "0x28d7e5866f1d85fd1ceb32bfbe1dfc36db434566": "0x1864231c610351c0000",
    "0x28d8c35fb7eea622582135e3ad47a227c9a663bd": "0xfc936392801c0000",
    "0x28e4af30cd93f686a122ad7bb19f8a8785eee342": "0x71e53b706cc7b40000",
    "0x28eaea78cd4d95faecfb68836eafe83520f3bbb7": "0xad78ebc5ac6200000",
    "0x28efae6356509edface89fc61a7fdcdb39eea8e5": "0x121ea68c114e5100000",
    "0x28fa2580f9ebe420f3e5eefdd371638e3b7af499": "0x14542ba12a337c00000",
    "0x2901f8077f34190bb47a8e227fa29b30ce113b31": "0x56bc75e2d63100000",
    "0x2905b192e83ce659aa355b9d0c204e3e95f9bb9a": "0x75235c1d00393e8000",
    "0x290a56d41f6e9efbdcea0342e0b7929a8cdfcb05": "0x12a5f58168ee600000",
    "0x2915624bcb679137b8dae9ab57d11b4905eaee4b": "0x1158e460913d00000",
    "0x291efe0081dce8c14799f7b2a43619c0c3b3fc1f": "0x410d586a20a4c00000",
    "0x291f929ca59b54f8443e3d4d75d95dee243cef78": "0x1b1a089237073d0000",
    "0x29298ccbdff689f87fe41aa6e98fdfb53deaf37a": "0x4315c32d71a9e600000",
    "0x292f228b0a94748c8eec612d246f989363e08f08": "0xa076407d3f7440000",
    "0x293384c42b6f8f2905ce52b7205c2274376c612b": "0x4be4e7267b6ae00000",
    "0x2934c0df7bbc172b6c186b0b72547ace8bf75454": "0x340aad21b3b700000",
    "0x293c2306df3604ae4fda0d207aba736f67de0792": "0xad78ebc5ac6200000",
    "0x2949fd1def5c76a286b3872424809a07db3966f3": "0x11bd906daa0c9438000",
    "0x294f494b3f2e143c2ffc9738cbfd9501850b874e": "0x796e3ea3f8ab000000",
    "0x2955c357fd8f75d5159a3dfa69c5b87a359dea8c": "0x6c6b935b8bbd400000",
    "0x2961fb391c61957cb5c9e407dda29338d3b92c80": "0x3634fb9f1489a70000",
    "0x29681d9912ddd07eaabb88d05d90f766e862417d": "0x3635c9adc5dea00000",
    "0x296b71c0015819c242a7861e6ff7eded8a5f71e3": "0x6c68ccd09b022c0000",
    "0x296d66b521571a4e4103a7f562c511e6aa732d81": "0x243d4d18229ca20000",
    "0x296f00de1dc3bb01d47a8ccd1e5d1dd9a1eb7791": "0x3635c9adc5dea00000",
    "0x297385e88634465685c231a314a0d5dcd146af01": "0x54069233bf7f780000",
    "0x29763dd6da9a7c161173888321eba6b63c8fb845": "0x11c7ea162e78200000",
    "0x2979741174a8c1ea0b7f9edf658177859417f512": "0x1901966c8496838000",
    "0x297a88921b5fca10e5bb9ded60025437ae221694": "0xad78ebc5ac6200000",
    "0x297d5dbe222f2fb52531acbd0b013dc446ac7368": "0x43c33c1937564800000",
    "0x29824e94cc4348bc963279dcdf47391715324cd3": "0x692ae8897081d00000",
    "0x2982d76a15f847dd41f1922af368fe678d0e681e": "0x56bc75e2d63100000",
    "0x298887bab57c5ba4f0615229d7525fa113b7ea89": "0x22b1c8c1227a00000",
    "0x298ec76b440d8807b3f78b5f90979bee42ed43db": "0x65a4da25d3016c00000",
    "0x299368609042a858d1ecdf1fc0ada5eaceca29cf": "0x6c6b935b8bbd400000",
    "0x299e0bca55e069de8504e89aca6eca21d38a9a5d": "0x302379bf2ca2e0000",
    "0x29ac2b458454a36c7e96c73a8667222a12242c71": "0xd8d726b7177a800000",
    "0x29adcf83b6b20ac6a434abb1993cbd05c60ea2e4": "0x21e19e0c9bab2400000",
    "0x29aef48de8c9fbad4b9e4ca970797a5533eb722d": "0x21e19e0c9bab2400000",
    "0x29b3f561ee7a6e25941e98a5325b78adc79785f3": "0x56bc75e2d63100000",
    "0x29bdc4f28de0180f433c2694eb74f5504ce94337": "0x6c6b935b8bbd400000",
    "0x29cc804d922be91f5909f348b0aaa5d21b607830": "0xd8d726b7177a800000",
    "0x29da3e35b23bb1f72f8e2258cf7f553359d24bac": "0x43c33c1937564800000",
    "0x29e67990e1b6d52e1055ffe049c53195a81542cf": "0x43c33c1937564800000",
    "0x29eaae82761762f4d2db53a9c68b0f6b0b6d4e66": "0x6c6b935b8bbd400000",
    "0x29eb7eefdae9feb449c63ff5f279d67510eb1422": "0x10d3aa536e2940000",
    "0x29f0edc60338e7112085a1d114da8c42ce8f55d6": "0xa05a7f0fd825780000",
    "0x29f8fba4c30772b057edbbe62ae7420c390572e1": "0x3635c9adc5dea00000",
    "0x29f9286c0e738d1721a691c6b95ab3d9a797ede8": "0x2a5a058fc295ed000000",
    "0x2a085e25b64862f5e68d768e2b0f7a8529858eee": "0x6b883acd5766cd0000",
    "0x2a2ab6b74c7af1d9476bb5bcb4524797bedc3552": "0x3635c9adc5dea00000",
    "0x2a39190a4fde83dfb3ddcb4c5fbb83ac6c49755c": "0x3635c9adc5dea00000",
    "0x2a400dff8594de7228b4fd15c32322b75bb87da8": "0x531a17f607a2d0000",
    "0x2a44a7218fe44d65a1b4b7a7d9b1c2c52c8c3e34": "0xd2d06c305a1eb578000",
    "0x2a46d353777176ff8e83ffa8001f4f70f9733aa5": "0x5bf0ba6634f680000",
    "0x2a595f16eee4cb0c17d9a2d939b3c10f6c677243": "0x3ba1910bf341b00000",
    "0x2a59e47ea5d8f0e7c028a3e8e093a49c1b50b9a3": "0x6c6b935b8bbd400000",
    "0x2a5ba9e34cd58da54c9a2712663a3be274c8e47b": "0xaadec983fcff40000",
    "0x2a5e3a40d2cd0325766de73a3d671896b362c73b": "0x152d02c7e14af6800000",
    "0x2a63590efe9986c3fee09b0a0a338b15bed91f21": "0x15e1c4e05ee26d00000",
    "0x2a67660a1368efcd626ef36b2b1b601980941c05": "0x73f75d1a085ba0000",
    "0x2a742b8910941e0932830a1d9692cfd28494cf40": "0x1b1ab319f5ec750000",
    "0x2a746cd44027af3ebd37c378c85ef7f754ab5f28": "0x155bd9307f9fe80000",
    "0x2a81d27cb6d4770ff4f3c4a3ba18e5e57f07517c": "0x6c6b935b8bbd400000",
    "0x2a91a9fed41b7d0e5cd2d83158d3e8a41a9a2d71": "0x692ae8897081d00000",
    "0x2a9c57fe7b6b138a920d676f3c76b6c2a0eef699": "0x1fd933494aa5fe00000",
    "0x2a9c96c19151ffcbe29a4616d0c52b3933b4659f": "0x3c1379b8765e18000",
    "0x2aa192777ca5b978b6b2c2ff800ac1860f753f47": "0x12290f15180bdc0000",
    "0x2aaa35274d742546670b7426264521032af4f4c3": "0x21e19e0c9bab2400000",
    "0x2aaea1f1046f30f109faec1c63ef5c7594eb08da": "0xd8d726b7177a800000",
    "0x2ab97e8d59eee648ab6caf8696f89937143864d6": "0xcf152640c5c8300000",
    "0x2abce1808940cd4ef5b5e05285f82df7a9ab5e03": "0x21342520d5fec200000",
    "0x2abdf1a637ef6c42a7e2fe217773d677e804ebdd": "0x10f0cf064dd59200000",
    "0x2ac1f8d7bf721f3cfe74d20fea9b87a28aaa982c": "0x8ba52e6fc45e40000",
    "0x2acc9c1a32240b4d5b2f777a2ea052b42fc1271c": "0x8d807ee14d836100000",
    "0x2ad6c9d10c261819a1a0ca2c48d8c7b2a71728df": "0x3635c9adc5dea00000",
    "0x2ae53866fc2d14d572ab73b4a065a1188267f527": "0x1b1ae4d6e2ef5000000",
    "0x2ae73a79aea0278533accf21070922b1613f8f32": "0xa7e94bbeae701a8000",
    "0x2ae82dab92a66389eea1abb901d1d57f5a7cca0b": "0x6c6b935b8bbd400000",
    "0x2aec809df9325b9f483996e99f7331097f08aa0e": "0xd8d726b7177a800000",
    "0x2aed2ce531c056b0097efc3c6de10c4762004ed9": "0x2356953ab7ddc380000",
    "0x2afb058c3d31032b353bf24f09ae20d54de57dbe": "0x3ba1910bf341b00000",
    "0x2b0362633614bfcb583569438ecc4ea57b1d337e": "0x43c33c1937564800000",
    "0x2b101e822cd962962a06800a2c08d3b15d82b735": "0x83d6c7aab63600000",
    "0x2b129c26b75dde127f8320bd0f63410c92a9f876": "0x77432217e683600000",
    "0x2b241f037337eb4acc61849bd272ac133f7cdf4b": "0x500b6bca962ab8400000",
    "0x2b3a68db6b0cae8a7c7a476bdfcfbd6205e10687": "0x821ab0d44149800000",
    "0x2b3cf97311ff30f460945a9d8099f4a88e26d456": "0x6c6b935b8bbd400000",
    "0x2b49fba29830360fcdb6da23bbfea5c0bbac5281": "0x1158e460913d00000",
    "0x2b4f4507bb6b9817942ce433781b708fbcd166fd": "0xfc936392801c0000",
    "0x2b5016e2457387956562587115aa8759d8695fdf": "0x2a5a058fc295ed000000",
    "0x2b5c60e84535eeb4d580de127a12eb2677ccb392": "0x43c33c1937564800000",
    "0x2b5ced9987c0765f900e49cf9da2d9f9c1138855": "0x15af1d78b58c400000",
    "0x2b5f4b3f1e11707a227aa5e69fa49dded33fb321": "0x14542ba12a337c00000",
    "0x2b68306ba7f8daaf73f4c644ef7d2743c0f26856": "0x2ee182ca17ddd00000",
    "0x2b6ed29a95753c3ad948348e3e7b1a251080ffb9": "0x34f086f3b33b68400000",
    "0x2b701d16c0d3cc1e4cd85445e6ad02eea4ac012d": "0x2086ac351052600000",
    "0x2b717cd432a323a4659039848d3b87de26fc9546": "0x69e10de76676d0800000",
    "0x2b74c373d04bfb0fd60a18a01a88fbe84770e58c": "0x22b1c8c1227a00000",
    "0x2b77a4d88c0d56a3dbe3bae04a05f4fcd1b757e1": "0x1043561a8829300000",
    "0x2b8488bd2d3c197a3d26151815b5a798d27168dc": "0x16a1f9f5fd7d9600000",
    "0x2b8a0dee5cb0e1e97e15cfca6e19ad21f995efad": "0x1b55438d9a249b0000",
    "0x2b8fe4166e23d11963c0932b8ade8e0145ea0770": "0x92896529baddc880000",
    "0x2b99b42e4f42619ee36baa7e4af2d65eacfcba35": "0x878678326eac9000000",
    "0x2bab0fbe28d58420b52036770a12f9952aea6911": "0xcf152640c5c8300000",
    "0x2bade91d154517620fd4b439ac97157a4102a9f7": "0xd8d726b7177a800000",
    "0x2baf8d6e221174124820ee492b9459ec4fadafbb": "0x6c6b935b8bbd400000",
    "0x2bafbf9e9ed2c219f7f2791374e7d05cb06777e7": "0xbed1d0263d9f00000",
    "0x2bb366b9edcb0da680f0e10b3b6e28748190d6c3": "0x13a62d7b57640640000",
    "0x2bb6f578adfbe7b2a116b3554facf9969813c319": "0x19127a1391ea2a00000",
    "0x2bbe62eac80ca7f4d6fdee7e7d8e28b63acf770e": "0x81e32df972abf00000",
    "0x2bbe672a1857508f630f2a5edb563d9e9de92815": "0x6c6b935b8bbd400000",
    "0x2bc429d618a66a4cf82dbb2d824e9356effa126a": "0x6c6acc67d7b1d40000",
    "0x2bd252e0d732ff1d7c78f0a02e6cb25423cf1b1a": "0x90f534608a72880000",
    "0x2bdd03bebbee273b6ca1059b34999a5bbd61bb79": "0x1158e460913d00000",
    "0x2c04115c3e52961b0dc0b0bf31fba4546f5966fd": "0xad78ebc5ac6200000",
    "0x2c06dd922b61514aafedd84488c0c28e6dcf0e99": "0x152d02c7e14af6800000",
    "0x2c0cc3f951482cc8a2925815684eb9f94e060200": "0x14542ba12a337c00000",
    "0x2c0ee134d8b36145b47beee7af8d2738dbda08e8": "0xae56f730e6d840000",
    "0x2c0f5b9df43625798e7e03c1a5fd6a6d091af82b": "0x1b0fcaab200300000",
    "0x2c128c95d957215101f043dd8fc582456d41016d": "0x2d43f3ebfafb2c0000",
    "0x2c1800f35fa02d3eb6ff5b25285f5e4add13b38d": "0x3122d3adafde100000",
    "0x2c1c19114e3d6de27851484b8d2715e50f8a1065": "0x56bc75e2d63100000",
    "0x2c1cc6e18c152488ba11c2cc1bcefa2df306abd1": "0x5a87e7d7f5f6580000",
    "0x2c1df8a76f48f6b54bcf9caf56f0ee1cf57ab33d": "0x2247f750089da580000",
    "0x2c2147947ae33fb098b489a5c16bfff9abcd4e2a": "0xad78ebc5ac6200000",
    "0x2c234f505ca8dcc77d9b7e01d257c318cc19396d": "0x56bc75e2d63100000",
    "0x2c2428e4a66974edc822d5dbfb241b2728075158": "0x6c6b935b8bbd400000",
    "0x2c2d15ff39561c1b72eda1cc027ffef23743a144": "0xd480ed9ef32b400000",
    "0x2c2db28c3309375eea3c6d72cd6d0eec145afcc0": "0x6c6b935b8bbd400000",
    "0x2c424ee47f583cdce07ae318b6fad462381d4d2b": "0xd8d726b7177a800000",
    "0x2c4b470307a059854055d91ec3794d80b53d0f4a": "0x43c33c1937564800000",
    "0x2c52c984102ee0cd3e31821b84d408930efa1ac7": "0x6c6b935b8bbd400000",
    "0x2c5a2d0abda03bbe215781b4ff296c8c61bdbaf6": "0x1a8e56f48c0228000",
    "0x2c5b7d7b195a371bf9abddb42fe04f2f1d9a9910": "0xad78ebc5ac6200000",
    "0x2c5df866666a194b26cebb407e4a1fd73e208d5e": "0x3635c9adc5dea00000",
    "0x2c603ff0fe93616c43573ef279bfea40888d6ae7": "0x100f4b6d66757900000",
    "0x2c6846a1aa999a2246a287056000ba4dcba8e63d": "0x21f2f6f0fc3c6100000",
    "0x2c6afcd4037c1ed14fa74ff6758e0945a185a8e8": "0xf43fc2c04ee00000",
    "0x2c6b699d9ead349f067f45711a074a641db6a897": "0x1158e460913d00000",
    "0x2c6f5c124cc789f8bb398e3f889751bc4b602d9e": "0x159f20bed00f00000",
    "0x2c83aeb02fcf067d65a47082fd977833ab1cec91": "0x8273823258ac00000",
    "0x2c89f5fdca3d155409b638b98a742e55eb4652b7": "0x14dbb2195ca228900000",
    "0x2c964849b1f69cc7cea4442538ed87fdf16cfc8f": "0x6c6b935b8bbd400000",
    "0x2c9fa72c95f37d08e9a36009e7a4b07f29bad41a": "0xdf6eb0b2d3ca0000",
    "0x2caf6bf4ec7d5a19c5e0897a5eeb011dcece4210": "0x7934835a031160000",
    "0x2cb4c3c16bb1c55e7c6b7a19b127a1ac9390cc09": "0xb82794a9244f0c8000",
    "0x2cb5495a505336c2465410d1cae095b8e1ba5cdd": "0x43c33c1937564800000",
    "0x2cb615073a40dcdb99faa848572e987b3b056efb": "0x2b58addb89a2580000",
    "0x2cba6d5d0dc204ea8a25ada2e26f5675bd5f2fdc": "0x4823ef7ddb9af38000",
    "0x2cbb0c73df91b91740b6693b774a7d05177e8e58": "0x6449e84e47a8a80000",
    "0x2ccb66494d0af689abf9483d365d782444e7dead": "0x3635c9adc5dea00000",
    "0x2ccc1f1cb5f4a8002e186b20885d9dbc030c0894": "0x6c6b935b8bbd400000",
    "0x2ccf80e21898125eb4e807cd82e09b9d28592f6e": "0x6c6b935b8bbd400000",
    "0x2cd19694d1926a0fa9189edebafc671cf1b2caa5": "0x3635c9adc5dea00000",
    "0x2cd39334ac7eac797257abe3736195f5b4b5ce0f": "0x56b47785e37260000",
    "0x2cd79eb52027b12c18828e3eaab2969bfcd287e9": "0x1158e460913d00000",
    "0x2cd87866568dd81ad47d9d3ad0846e5a65507373": "0x15af1d78b58c400000",
    "0x2cdb3944650616e47cb182e060322fa1487978ce": "0x62a992e53a0af00000",
    "0x2ce11a92fad024ff2b3e87e3b542e6c60dcbd996": "0xd8d726b7177a800000",
    "0x2d0326b23f0409c0c0e9236863a133075a94ba18": "0xb679be75be6ae0000",
    "0x2d0dec51a6e87330a6a8fa2a0f65d88d4abcdf73": "0xa076407d3f7440000",
    "0x2d23766b6f6b05737dad80a419c40eda4d77103e": "0xcf152640c5c8300000",
    "0x2d2b032359b363964fc11a518263bfd05431e867": "0x81c1df7629e700000",
    "0x2d3480bf0865074a72c7759ee5137b4d70c51ce9": "0xad78ebc5ac6200000",
    "0x2d35a9df62757f7ffad1049afb06ca4afc464c51": "0x1158e460913d00000",
    "0x2d40558b06f90a3923145592123b6774e46e31f4": "0x3635c9adc5dea00000",
    "0x2d426912d059fad9740b2e390a2eeac0546ff01b": "0x4be4e7267b6ae00000",
    "0x2d532df4c63911d1ce91f6d1fcbff7960f78a885": "0x5a85968a5878da8000",
    "0x2d5391e938b34858cf965b840531d5efda410b09": "0x4be4e7267b6ae00000",
    "0x2d5b42fc59ebda0dfd66ae914bc28c1b0a6ef83a": "0x2bc8b59fdcd836638000",
    "0x2d5d7335acb0362b47dfa3a8a4d3f5949544d380": "0xad78ebc5ac6200000",
    "0x2d61bfc56873923c2b00095dc3eaa0f590d8ae0f": "0x46566dff8ce55600000",
    "0x2d6511fd7a3800b26854c7ec39c0dcb5f4c4e8e8": "0x15adddba2f9e770000",
    "0x2d7d5c40ddafc450b04a74a4dabc2bb5d665002e": "0x6c6b935b8bbd400000",
    "0x2d89a8006a4f137a20dc2bec46fe2eb312ea9654": "0xad78ebc5ac6200000",
    "0x2d8c52329f38d2a2fa9cbaf5c583daf1490bb11c": "0x1158e460913d00000",
    "0x2d8e061892a5dcce21966ae1bb0788fd3e8ba059": "0xd8e5ce617f2d50000",
    "0x2d8e5bb8d3521695c77e7c834e0291bfacee7408": "0x6acb3df27e1f880000",
    "0x2d90b415a38e2e19cdd02ff3ad81a97af7cbf672": "0x5f3c7f64131e40000",
    "0x2d9bad6f1ee02a70f1f13def5cccb27a9a274031": "0x61093d7c2c6d380000",
    "0x2d9c5fecd2b44fbb6a1ec732ea059f4f1f9d2b5c": "0x36ca32661d1aa70000",
    "0x2da617695009cc57d26ad490b32a5dfbeb934e5e": "0x43c33c1937564800000",
    "0x2da76b7c39b420e388ba2c1020b0856b0270648a": "0x6c6b935b8bbd400000",
    "0x2dc79d6e7f55bce2e2d0c02ad07ceca8bb529354": "0x55a6e79ccd1d300000",
    "0x2dca0e449ab646dbdfd393a96662960bcab5ae1e": "0x878678326eac9000000",
    "0x2dd325fdffb97b19995284afa5abdb574a1df16a": "0x1b1ae4d6e2ef500000",
    "0x2dd578f7407dfbd548d05e95ccc39c485429626a": "0xe3aeb5737240a00000",
    "0x2dd8eeef87194abc2ce7585da1e35b7cea780cb7": "0x3635c6204739d98000",
    "0x2ddf40905769bcc426cb2c2938ffe077e1e89d98": "0xa2a15d09519be00000",
    "0x2de0964400c282bdd78a919c6bf77c6b5f796179": "0xad78ebc5ac6200000",
    "0x2de31afd189a13a76ff6fe73ead9f74bb5c4a629": "0x14542ba12a337c00000",
    "0x2dec98329d1f96c3a59caa7981755452d4da49d5": "0xad78ebc5ac6200000",
    "0x2dee90a28f192d676a8773232b56f18f239e2fad": "0x3efa7e747b6d1ad0000",
    "0x2e0880a34596230720f05ac8f065af8681dcb6c2": "0x152d02c7e14af6800000",
    "0x2e0c57b47150f95aa6a7e16ab9b1cbf54328979a": "0x56bc75e2d63100000",
    "0x2e10910ba6e0bc17e055556614cb87090f4d7e5b": "0xad78ebc5ac6200000",
    "0x2e24b597873bb141bdb237ea8a5ab747799af02d": "0x43c33c1937564800000",
    "0x2e2810dee44ae4dff3d86342ab126657d653c336": "0xad78ebc5ac6200000",
    "0x2e2cbd7ad82547b4f5ff8b3ab56f942a6445a3b0": "0xad78ebc5ac6200000",
    "0x2e2d7ea66b9f47d8cc52c01c52b6e191bc7d4786": "0xd8d4602c26bf6c0000",
    "0x2e439348df8a4277b22a768457d1158e97c40904": "0x2a1e9ff26fbf410000",
    "0x2e46fcee6a3bb145b594a243a3913fce5dad6fba": "0x21e19e0c9bab2400000",
    "0x2e47f287f498233713850d3126823cc67dcee255": "0xca9d9ea558b40000",
    "0x2e4ee1ae996aa0a1d92428d06652a6bea6d2d15d": "0x6c6b935b8bbd400000",
    "0x2e52912bc10ea39d54e293f7aed6b99a0f4c73be": "0x15af1d78b58c400000",
    "0x2e619f57abc1e987aa936ae3a2264962e7eb2d9a": "0x28fb9b8a8a53500000",
    "0x2e64a8d71111a22f4c5de1e039b336f68d398a7c": "0x6c6b935b8bbd400000",
    "0x2e6933543d4f2cc00b5350bd8068ba9243d6beb0": "0x6c6b935b8bbd400000",
    "0x2e7e05e29edda7e4ae25c5173543efd71f6d3d80": "0x14542ba12a337c00000",
    "0x2e7f465520ec35cc23d68e75651bb6689544a196": "0x38ec5b721a1a268000",
    "0x2e8eb30a716e5fe15c74233e039bfb1106e81d12": "0x56bc75e2d63100000",
    "0x2e9824b5c132111bca24ddfba7e575a5cd7296c1": "0x3a484516e6d7ffe0000",
    "0x2ea5fee63f337a376e4b918ea82148f94d48a626": "0x650f8e0dd293c50000",
    "0x2eaf4e2a46b789ccc288c8d1d9294e3fb0853896": "0x6c6b935b8bbd400000",
    "0x2eaff9f8f8113064d3957ac6d6e11eee42c8195d": "0x6acb3df27e1f880000",
    "0x2eba0c6ee5a1145c1c573984963a605d880a7a20": "0x1b1ae4d6e2ef500000",
    "0x2ec95822eb887bc113b4712a4dfd7f13b097b5e7": "0x3635c9adc5dea00000",
    "0x2eca6a3c5d9f449d0956bd43fa7b4d7be8435958": "0x6c6bda69709cc20000",
    "0x2ecac504b233866eb5a4a99e7bd2901359e43b3d": "0x43c33c1937564800000",
    "0x2eebf59432b52892f9380bd140aa99dcf8ad0c0f": "0x83d6c7aab63600000",
    "0x2eeed50471a1a2bf53ee30b1232e6e9d80ef866d": "0x1158e460913d00000",
    "0x2eef6b1417d7b10ecfc19b123a8a89e73e526c58": "0x2086ac351052600000",
    "0x2ef869f0350b57d53478d701e3fee529bc911c75": "0x2b5e3af16b1880000",
    "0x2ef9e465716acacfb8c8252fa8e7bc7969ebf6e4": "0x959eb1c0e4ae200000",
    "0x2efc4c647dac6acac35577ad221758fef6616faa": "0x1b1ae4d6e2ef5000000",
    "0x2f13657526b177cad547c3908c840eff647b45d9": "0x3f76849cf1ee2c8000",
    "0x2f187d5a704d5a338c5b2876a090dce964284e29": "0xd8d726b7177a800000",
    "0x2f2523cc834f0086052402626296675186a8e582": "0x3635c9adc5dea000000",
    "0x2f282abbb6d4a3c3cd3b5ca812f7643e80305f06": "0x6449e84e47a8a80000",
    "0x2f2bba1b1796821a766fce64b84f28ec68f15aea": "0x1158e460913d00000",
    "0x2f315d9016e8ee5f536681202f9084b032544d4d": "0x383cd12b9e863c0000",
    "0x2f4da753430fc09e73acbccdcde9da647f2b5d37": "0xad78ebc5ac6200000",
    "0x2f5080b83f7e2dc0a1dd11b092ad042bff788f4c": "0xb4f8fb79231d2b8000",
    "0x2f61efa5819d705f2b1e4ee754aeb8a819506a75": "0x4f2591f896a6500000",
    "0x2f66bfbf2262efcc8d2bd0444fc5b0696298ff1e": "0x21ad935f79f76d00000",
    "0x2f6dce1330c59ef921602154572d4d4bacbd048a": "0x3635c9adc5dea00000",
    "0x2f7d3290851be5c6b4b43f7d4574329f61a792c3": "0x56bc75e2d63100000",
    "0x2f853817afd3b8f3b86e9f60ee77b5d97773c0e3": "0x4eaeea44e368b90000",
    "0x2fa491fb5920a6574ebd289f39c1b2430d2d9a6a": "0x6c6b935b8bbd400000",
    "0x2fb566c94bbba4e3cb67cdda7d5fad7131539102": "0x6c6b935b8bbd400000",
    "0x2fbb504a5dc527d3e3eb0085e2fc3c7dd538cb7a": "0x43c2b18aec3c0a8000",
    "0x2fbc85798a583598b522166d6e9dda121d627dbc": "0xad78ebc5ac6200000",
    "0x2fbcef3384d420e4bf61a0669990bc7054f1a5af": "0x6c6b935b8bbd400000",
    "0x2fc82ef076932341264f617a0c80dd571e6ae939": "0x18424f5f0b1b4e00000",
    "0x2fdd9b79df8df530ad63c20e62af431ae99216b8": "0x1236efcbcbb340000",
    "0x2fe0023f5722650f3a8ac01009125e74e3f82e9b": "0xa2a15d09519be00000",
    "0x2fe0cc424b53a31f0916be08ec81c50bf8eab0c1": "0x2086ac351052600000",
    "0x2fe13a8d0785de8758a5e41876c36e916cf75074": "0xd8d726b7177a800000",
    "0x2fea1b2f834f02fc54333f8a809f0438e5870aa9": "0x11854d0f9cee40000",
    "0x2fee36a49ee50ecf716f1047915646779f8ba03f": "0x394222c4da86d70000",
    "0x2fef81478a4b2e8098db5ff387ba2153f4e22b79": "0x3627e8f712373c0000",
    "0x2ff160c44f72a299b5ec2d71e28ce5446d2fcbaf": "0x138400eca364a00000",
    "0x2ff1ca55fd9cec1b1fe9f0a9abb74c513c1e2aaa": "0xa2a15d09519be00000",
    "0x2ff5cab12c0d957fd333f382eeb75107a64cb8e8": "0x21e19e0c9bab2400000",
    "0x2ff830cf55fb00d5a0e03514fecd44314bd6d9f1": "0x21e19e0c9bab2400000",
    "0x2ffe93ec1a5636e9ee34af70dff52682e6ff7079": "0x6c6b935b8bbd400000",
    "0x30037988702671acbe892c03fe5788aa98af287a": "0x97c9ce4cf6d5c00000",
    "0x30248d58e414b20fed3a6c482b59d9d8f5a4b7e2": "0x340aad21b3b700000",
    "0x303139bc596403d5d3931f774c66c4ba467454db": "0x5c25e14aea283f0000",
    "0x30380087786965149e81423b15e313ba32c5c783": "0xfc936392801c0000",
    "0x303a30ac4286ae17cf483dad7b870c6bd64d7b4a": "0x1b1ae4d6e2ef500000",
    "0x303fbaebbe46b35b6e5b74946a5f99bc1585cae7": "0x2f9ac0695f5bba0000",
    "0x3041445a33ba158741160d9c344eb88e5c306f94": "0x340aad21b3b700000",
    "0x30480164bcd84974ebc0d90c9b9afab626cd1c73": "0x2b5e3af16b18800000",
    "0x304ec69a74545721d7316aef4dcfb41ac59ee2f0": "0xad78ebc5ac6200000",
    "0x30511832918d8034a7bee72ef2bfee440ecbbcf6": "0x368c8623a8b4d100000",
    "0x30513fca9f36fd788cfea7a340e86df98294a244": "0x183b5f03b1479c0000",
    "0x3055efd26029e0d11b930df4f53b162c8c3fd2ce": "0x1b1a089237073d0000",
    "0x305d26c10bdc103f6b9c21272eb7cb2d9108c47e": "0x1b1ae4d6e2ef500000",
    "0x305f78d618b990b4295bac8a2dfa262884f804ea": "0xd8d726b7177a800000",
    "0x3064899a963c4779cbf613cd6980846af1e6ec65": "0x17b773ce6e5df0a0000",
    "0x30730466b8eb6dc90d5496aa76a3472d7dbe0bbe": "0x6c68ccd09b022c0000",
    "0x30742ccdf4abbcd005681f8159345c9e79054b1a": "0x243d4d18229ca20000",
    "0x3083ef0ed4c4401196774a95cf4edc83edc1484f": "0x23ffb7ed6565d6400000",
    "0x308dd21cebe755126704b48c0f0dc234c60ba9b1": "0xad78ebc5ac6200000",
    "0x3090f8130ec44466afadb36ed3c926133963677b": "0xd8d726b7177a800000",
    "0x309544b6232c3dd737f945a03193d19b5f3f65b9": "0x3af342f67ef6c80000",
    "0x3096dca34108085bcf04ae72b94574a13e1a3e1d": "0xad78ebc5ac6200000",
    "0x3098b65db93ecacaf7353c48808390a223d57684": "0x186484cf7bb6a48000",
    "0x30a9da72574c51e7ee0904ba1f73a6b7b83b9b9d": "0x11854d0f9cee40000",
    "0x30acd858875fa24eef0d572fc7d62aad0ebddc35": "0x15af1d78b58c400000",
    "0x30b66150f1a63457023fdd45d0cc6cb54e0c0f06": "0x3635c9adc5dea00000",
    "0x30bb4357cd6910c86d2238bf727cbe8156680e62": "0x56bf91b1a65eb0000",
    "0x30bf61b2d877fe10635126326fa189e4b0b1c3b0": "0x37b48985a5d7e60000",
    "0x30c01142907acb1565f70438b9980ae731818738": "0x6c6b935b8bbd400000",
    "0x30c26a8e971baa1855d633ba703f028cc7873140": "0x21e19e0c9bab2400000",
    "0x30db6b9b107e62102f434a9dd0960c2021f5ce4c": "0x2083179b6e42530000",
    "0x30e33358fc21c85006e40f32357dc8895940aaf0": "0x678a932062e4180000",
    "0x30e60900cacc7203f314dc604347255167fc2a0f": "0x6c6b935b8bbd400000",
    "0x30e789b3d2465e946e6210fa5b35de4e8c93085f": "0x6c6b935b8bbd400000",
    "0x30e9698cf1e08a9d048bd8d8048f28be7ed9409f": "0x16a6502f15a1e540000",
    "0x30e9d5a0088f1ddb2fd380e2a049192266c51cbf": "0xaacacd9b9e22b0000",
    "0x30eac740e4f02cb56eef0526e5d300322600d03e": "0x6acb3df27e1f880000",
    "0x30ec9392244a2108c987bc5cdde0ed9f837a817b": "0x549925f6c9c5250000",
    "0x30ed11b77bc17e5e6694c8bc5b6e4798f68d9ca7": "0x1e6fb3421fe0299e0000",
    "0x30f7d025d16f7bee105580486f9f561c7bae3fef": "0x1b1ae4d6e2ef500000",
    "0x30fbe5885f9fcce9ea5edb82ed4a1196dd259aed": "0x119e47f21381f400000",
    "0x31047d703f63b93424fbbd6e2f1f9e74de13e709": "0x9a8166f7e6b2a78000",
    "0x31313ffd635bf2f3324841a88c07ed146144ceeb": "0x6acb3df27e1f880000",
    "0x3159e90c48a915904adfe292b22fa5fd5e72796b": "0x36afe98f2606100000",
    "0x315db7439fa1d5b423afa7dd7198c1cf74c918bc": "0x2086ac351052600000",
    "0x315ef2da620fd330d12ee55de5f329a696e0a968": "0x821ab0d4414980000",
    "0x316e92a91bbda68b9e2f98b3c048934e3cc0b416": "0x6c6b935b8bbd400000",
    "0x316eb4e47df71b42e16d6fe46825b7327baf3124": "0xd8d726b7177a800000",
    "0x3171877e9d820cc618fc0919b29efd333fda4934": "0x3635c9adc5dea00000",
    "0x317cf4a23cb191cdc56312c29d15e210b3b9b784": "0x7ce66c50e28400000",
    "0x318b2ea5f0aaa879c4d5e548ac9d92a0c67487b7": "0xad78ebc5ac6200000",
    "0x318c76ecfd8af68d70555352e1f601e35988042d": "0x1b31192e68c7f00000",
    "0x318f1f8bd220b0558b95fb33100ffdbb640d7ca6": "0xd8d726b7177a800000",
    "0x31aa3b1ebe8c4dbcb6a708b1d74831e60e497660": "0x15af1d78b58c400000",
    "0x31ab088966ecc7229258f6098fce68cf39b38485": "0x3635c9adc5dea00000",
    "0x31ad4d9946ef09d8e988d946b1227f9141901736": "0x4d853c8f89089800000",
    "0x31b43b015d0081643c6cda46a7073a6dfdbca825": "0xa97916520cd18e80000",
    "0x31ccc616b3118268e75d9ab8996c8858ebd7f3c3": "0x15ae0f771ca1520000",
    "0x31d81d526c195e3f10b5c6db52b5e59afbe0a995": "0xe4fbc69449f200000",
    "0x31e9c00f0c206a4e4e7e0522170dc81e88f3eb70": "0x918ddc3a42a3d40000",
    "0x31ea12d49a35a740780ddeeaece84c0835b26270": "0xad78ebc5ac6200000",
    "0x31ea6eab19d00764e9a95e183f2b1b22fc7dc40f": "0x1158e460913d00000",
    "0x31eb123c95c82bf685ace7a75a1881a289efca10": "0x31e009607371bd0000",
    "0x31ed858788bda4d5270992221cc04206ec62610d": "0x3fc0474948f3600000",
    "0x31f006f3494ed6c16eb92aaf9044fa8abb5fd5a3": "0x1b1ae4d6e2ef500000",
    "0x3201259caf734ad7581c561051ba0bca7fd6946b": "0x261dd1ce2f2088800000",
    "0x32034e8581d9484e8af42a28df190132ec29c466": "0xbb9125542263900000",
    "0x322021022678a0166d204b3aaa7ad4ec4b88b7d0": "0x15af1d78b58c400000",
    "0x3225c1ca5f2a9c88156bb7d9cdc44a326653c214": "0x15af1d78b58c400000",
    "0x322788b5e29bf4f5f55ae1ddb32085fda91b8ebe": "0xad78ebc5ac6200000",
    "0x322d6f9a140d213f4c80cd051afe25c620bf4c7d": "0x1158e460913d00000",
    "0x322e5c43b0f524389655a9b3ff24f2d4db3da10f": "0xfc13b69b3e7e680000",
    "0x323486ca64b375474fb2b759a9e7a135859bd9f6": "0x15af1d78b58c400000",
    "0x323749a3b971959e46c8b4822dcafaf7aaf9bd6e": "0x11671a5b245700000",
    "0x323aad41df4b6fc8fece8c93958aa901fa680843": "0x34957444b840e80000",
    "0x323b3cfe3ee62bbde2a261e53cb3ecc05810f2c6": "0x2eb8eb1a172dcb80000",
    "0x323fca5ed77f699f9d9930f5ceeff8e56f59f03c": "0x487a9a304539440000",
    "0x32485c818728c197fea487fbb6e829159eba8370": "0x3921b413bc4ec08000",
    "0x3250e3e858c26adeccadf36a5663c22aa84c4170": "0x10f0cf064dd59200000",
    "0x3259bd2fddfbbc6fbad3b6e874f0bbc02cda18b5": "0x2846056495b0d188000",
    "0x3275496fd4dd8931fd69fb0a0b04c4d1ff879ef5": "0x182d7e4cfda0380000",
    "0x327bb49e754f6fb4f733c6e06f3989b4f65d4bee": "0x1158e460913d00000",
    "0x3282791d6fd713f1e94f4bfd565eaa78b3a0599d": "0x487a9a304539440000",
    "0x3283eb7f9137dd39bed55ffe6b8dc845f3e1a079": "0x3970ae92155780000",
    "0x32860997d730b2d83b73241a25d3667d51c908ef": "0x1b1a089237073d0000",
    "0x3286d1bc657a312c8847d93cb3cb7950f2b0c6e3": "0x43c33c1937564800000",
    "0x32a20d028e2c6218b9d95b445c771524636a22ef": "0x202fefbf2d7c2f00000",
    "0x32a70691255c9fc9791a4f75c8b81f388e0a2503": "0x35659ef93f0fc40000",
    "0x32b7feebc5c59bf65e861c4c0be42a7611a5541a": "0x77e9aaa8525c100000",
    "0x32ba9a7d0423e03a525fe2ebeb661d2085778bd8": "0x43c33c1937564800000",
    "0x32bb2e9693e4e085344d2f0dbd46a283e3a087fd": "0x15af1d78b58c400000",
    "0x32c2fde2b6aabb80e5aea2b949a217f3cb092283": "0x1306160afdf20378000",
    "0x32d950d5e93ea1d5b48db4714f867b0320b31c0f": "0x3708baed3d68900000",
    "0x32dbb6716c54e83165829a4abb36757849b6e47d": "0x3635c9adc5dea00000",
    "0x32eb64be1b5dede408c6bdefbe6e405c16b7ed02": "0x6acb3df27e1f880000",
    "0x32ef5cdc671df5562a901aee5db716b9be76dcf6": "0x6c6b935b8bbd400000",
    "0x32f29e8727a74c6b4301e3ffff0687c1b870dae9": "0x3635c9adc5dea00000",
    "0x32fa0e86cd087dd68d693190f32d93310909ed53": "0xd8d726b7177a800000",
    "0x32fbeed6f626fcdfd51acafb730b9eeff612f564": "0x6c6b935b8bbd400000",
    "0x3300fb149aded65bcba6c04e9cd6b7a03b893bb1": "0xfc936392801c0000",
    "0x3301d9ca2f3bfe026279cd6819f79a293d98156e": "0xa968163f0a57b400000",
    "0x3308b03466c27a17dfe1aafceb81e16d2934566f": "0x39992648a23c8a00000",
    "0x331a1c26cc6994cdd3c14bece276ffff4b9df77c": "0xfa7aeddf4f068000",
    "0x3326b88de806184454c40b27f309d9dd6dcfb978": "0x3ca5c66d9bc44300000",
    "0x3329eb3baf4345d600ced40e6e9975656f113742": "0x10f08eda8e555098000",
    "0x33320dd90f2baa110dd334872a998f148426453c": "0x36356633ebd8ea0000",
    "0x3336c3ef6e8b50ee90e037b164b7a8ea5faac65d": "0xec8a3a71c22540000",
    "0x33380c6fff5acd2651309629db9a71bf3f20c5ba": "0x368c8623a8b4d100000",
    "0x333ad1596401e05aea2d36ca47318ef4cd2cb3df": "0x9dc05cce28c2b80000",
    "0x334340ee4b9cdc81f850a75116d50ee9b69825bf": "0x6c6b935b8bbd400000",
    "0x33481e856ebed48ea708a27426ef28e867f57cd1": "0xad78ebc5ac6200000",
    "0x33565ba9da2c03e778ce12294f081dfe81064d24": "0x3635c9adc5dea000000",
    "0x33581cee233088c0860d944e0cf1ceabb8261c2e": "0xb98bc829a6f90000",
    "0x335858f749f169cabcfe52b796e3c11ec47ea3c2": "0xad78ebc5ac6200000",
    "0x335e22025b7a77c3a074c78b8e3dfe071341946e": "0x227ca730ab3f6ac0000",
    "0x33629bd52f0e107bc071176c64df108f64777d49": "0x1cfdd7468216e8000",
    "0x337b3bdf86d713dbd07b5dbfcc022b7a7b1946ae": "0xd7c198710e66b00000",
    "0x337cfe1157a5c6912010dd561533791769c2b6a6": "0x3635c9adc5dea00000",
    "0x33b336f5ba5edb7b1ccc7eb1a0d984c1231d0edc": "0x6c6b935b8bbd400000",
    "0x33c407133b84b3ca4c3ded1f4658900c38101624": "0x97c9ce4cf6d5c00000",
    "0x33d172ab075c51db1cd40a8ca8dbff0d93b843bb": "0x136780510d12de38000",
    "0x33e9b71823952e1f66958c278fc28b1196a6c5a4": "0x56bc75e2d63100000",
    "0x33ea6b7855e05b07ab80dab1e14de9b649e99b6c": "0x1cd6fbad57dbd00000",
    "0x33f15223310d44de8b6636685f3a4c3d9c5655a5": "0xd9462c6cb4b5a0000",
    "0x33f4a6471eb1bca6a9f85b3b4872e10755c82be1": "0x6c6b935b8bbd400000",
    "0x33fb577a4d214fe010d32cca7c3eeda63f87ceef": "0x3635c9adc5dea00000",
    "0x33fd718f0b91b5cec88a5dc15eecf0ecefa4ef3d": "0x177224aa844c720000",
    "0x341480cc8cb476f8d01ff30812e7c70e05afaf5d": "0x6c6b935b8bbd400000",
    "0x34272d5e7574315dcae9abbd317bac90289d4765": "0x62a992e53a0af00000",
    "0x3430a16381f869f6ea5423915855e800883525a9": "0x3ca5c66d9bc44300000",
    "0x34318625818ec13f11835ae97353ce377d6f590a": "0x52663ccab1e1c00000",
    "0x34393c5d91b9de597203e75bac4309b5fa3d28c3": "0xa844a7424d9c80000",
    "0x3439998b247cb4bf8bc80a6d2b3527f1dfe9a6d2": "0x796e3ea3f8ab00000",
    "0x34437d1465640b136cb5841c3f934f9ba0b7097d": "0x960db77681e940000",
    "0x344a8db086faed4efc37131b3a22b0782dad7095": "0x1b1ae4d6e2ef500000",
    "0x34664d220fa7f37958024a3332d684bcc6d4c8bd": "0x21e19e0c9bab2400000",
    "0x3466f67e39636c01f43b3a21a0e8529325c08624": "0x2db1167650acd80000",
    "0x3485361ee6bf06ef6508ccd23d94641f814d3e2f": "0x6c6b935b8bbd400000",
    "0x3485f621256433b98a4200dad857efe55937ec98": "0x6c6b935b8bbd400000",
    "0x34958a46d30e30b273ecc6e5d358a212e5307e8c": "0x6c6b935b8bbd400000",
    "0x3497dd66fd118071a78c2cb36e40b6651cc82598": "0x5f1016b5076d00000",
    "0x349a816b17ab3d27bbc0ae0051f6a070be1ff29d": "0x21e19e0c9bab2400000",
    "0x349d2c918fd09e2807318e66ce432909176bd50b": "0x3cb71f51fc55800000",
    "0x34a0431fff5ead927f3c69649616dc6e97945f6f": "0x15af1d78b58c400000",
    "0x34a85d6d243fb1dfb7d1d2d44f536e947a4cee9e": "0x43c33c1937564800000",
    "0x34a901a69f036bcf9f7843c0ba01b426e8c3dc2b": "0xd8d726b7177a800000",
    "0x34b454416e9fb4274e6addf853428a0198d62ee1": "0x161042779f1ffc0000",
    "0x34c8e5f1330fcb4b14ca75cb2580a4b93d204e36": "0x6c6b935b8bbd400000",
    "0x34e2849bea583ab0cc37975190f322b395055582": "0x1a5c5e857fdf2b20000",
    "0x34fa7792bad8bbd7ff64056214a33eb6600c1ea8": "0x2b5e3af16b1880000",
    "0x34ff26eb60a8d1a95a489fae136ee91d4e58084c": "0x2086ac351052600000",
    "0x34ff582952ff24458f7b13d51f0b4f987022c1fe": "0x9806de3da6e9780000",
    "0x35106ba94e8563d4b3cb3c5c692c10e604b7ced8": "0x6c6b935b8bbd400000",
    "0x35145f620397c69cb8e00962961f0f4886643989": "0x14542ba12a337c00000",
    "0x35147430c3106500e79fa2f502462e94703c23b1": "0x6c6acc67d7b1d40000",
    "0x351787843505f8e4eff46566cce6a59f4d1c5fe7": "0x1f5718987664b480000",
    "0x351f16e5e0735af56751b0e225b2421171394090": "0x2d4ca05e2b43ca80000",
    "0x3524a000234ebaaf0789a134a2a417383ce5282a": "0x1317955947d8e2c0000",
    "0x3526eece1a6bdc3ee7b400fe935b48463f31bed7": "0x477879b6d14300000",
    "0x352a785f4a921632504ce5d015f83c49aa838d6d": "0xe9e7e0fb35b7780000",
    "0x352d29a26e8a41818181746467f582e6e84012e0": "0x14542ba12a337c00000",
    "0x352e77c861696ef96ad54934f894aa8ea35151dd": "0x3635c9adc5dea00000",
    "0x352f25babf4a690673e35195efa8f79d05848aad": "0xe253c39be6e7dc00000",
    "0x3536453322c1466cb905af5c335ca8db74bff1e6": "0x183b5f03b1479c0000",
    "0x353dbec42f92b50f975129b93c4c997375f09073": "0x6c5db2a4d815dc0000",
    "0x3540c7bd7a8442d5bee21a2180a1c4edff1649e0": "0x432eac4c6f05b98000",
    "0x3549bd40bbbc2b30095cac8be2c07a0588e0aed6": "0x1158e460913d00000",
    "0x3552a496eba67f12be6eedab360cd13661dc7480": "0x1043561a8829300000",
    "0x3554947b7b947b0040da52ca180925c6d3b88ffe": "0x39fbae8d042dd0000",
    "0x355c0c39f5d5700b41d375b3f17851dcd52401f9": "0xd7b3b7ba5abf4c0000",
    "0x355ccfe0e77d557b971be1a558bc02df9eee0594": "0x5f5cb1afc865280000",
    "0x3571cf7ad304ecaee595792f4bbfa484418549d6": "0x13bcd0d892d9e160000",
    "0x3575c770668a9d179f1ef768c293f80166e2aa3d": "0x19b21248a3ef280000",
    "0x357a02c0a9dfe287de447fb67a70ec5b62366647": "0x1731790534df20000",
    "0x35855ec641ab9e081ed0c2a6dcd81354d0244a87": "0x4127abe993a7aa8000",
    "0x3588895ac9fbafec012092dc05c0c302d90740fa": "0xa2a15d09519be00000",
    "0x3599493ce65772cf93e98af1195ec0955dc98002": "0x5151590c67b3280000",
    "0x35a08081799173e001cc5bd46a02406dc95d1787": "0x21e19e0c9bab2400000",
    "0x35a549e8fd6c368d6dcca6d2e7d18e4db95f5284": "0x1b1a089237073d0000",
    "0x35a6885083c899dabbf530ed6c12f4dd3a204cf5": "0xad78ebc5ac6200000",
    "0x35aaa0465d1c260c420fa30e2629869fb6559207": "0x263781e0e087c80000",
    "0x35ac1d3ed7464fa3db14e7729213ceaa378c095e": "0x52663ccab1e1c00000",
    "0x35af040a0cc2337a76af288154c7561e1a233349": "0x3635c9adc5dea00000",
    "0x35b03ea4245736f57b85d2eb79628f036ddcd705": "0xd8d726b7177a800000",
    "0x35bd246865fab490ac087ac1f1d4f2c10d0cda03": "0x15af1d78b58c400000",
    "0x35bf6688522f35467a7f75302314c02ba176800e": "0x3af418202d954e00000",
    "0x35c8adc11125432b3b77acd64625fe58ebee9d66": "0x6c6b935b8bbd400000",
    "0x35d2970f49dcc81ea9ee707e9c8a0ab2a8bb7463": "0x4e1003b28d92800000",
    "0x35e096120deaa5c1ecb1645e2ccb8b4edbd9299a": "0x1b1ae4d6e2ef500000",
    "0x35ea2163a38cdf9a123f82a5ec00258dae0bc767": "0xd8d726b7177a800000",
    "0x35f1da127b83376f1b88c82a3359f67a5e67dd50": "0x678a932062e4180000",
    "0x35f2949cf78bc219bb4f01907cf3b4b3d3865482": "0xfb5c86c92e4340000",
    "0x35f5860149e4bbc04b8ac5b272be55ad1aca58e0": "0xad78ebc5ac6200000",
    "0x3602458da86f6d6a9d9eb03daf97fe5619d442fa": "0x6c6b935b8bbd400000",
    "0x3605372d93a9010988018f9f315d032ed1880fa1": "0x1b1bcf51896a7d0000",
    "0x3616d448985f5d32aefa8b93a993e094bd854986": "0xb227f63be813c0000",
    "0x3616fb46c81578c9c8eb4d3bf880451a88379d7d": "0xad78ebc5ac6200000",
    "0x361c75931696bc3d427d93e76c77fd13b241f6f4": "0x1dc5d8fc266dd60000",
    "0x361d9ed80b5bd27cf9f1226f26753258ee5f9b3f": "0xbf6914ba7d72c20000",
    "0x361f3ba9ed956b770f257d3672fe1ff9f7b0240c": "0x2086ac351052600000",
    "0x36227cdfa0fd3b9d7e6a744685f5be9aa366a7f0": "0xac2730ee9c6c18000",
    "0x362fbcb10662370a068fc2652602a2577937cce6": "0xad78ebc5ac6200000",
    "0x3630c5e565ceaa8a0f0ffe32875eae2a6ce63c19": "0x937722b3774d00000",
    "0x36339f84a5c2b44ce53dfdb6d4f97df78212a7df": "0x116f18b81715a00000",
    "0x36343aeca07b6ed58a0e62fa4ecb498a124fc971": "0x1043561a8829300000",
    "0x366175403481e0ab15bb514615cbb989ebc68f82": "0x6c6b935b8bbd400000",
    "0x36726f3b885a24f92996da81625ec8ad16d8cbe6": "0x53af75d18148578000",
    "0x3673954399f6dfbe671818259bb278e2e92ee315": "0x2a5a058fc295ed000000",
    "0x36758e049cd98bcea12277a676f9297362890023": "0xd8d726b7177a800000",
    "0x367f59cc82795329384e41e1283115e791f26a01": "0x6c6b935b8bbd400000",
    "0x36810ff9d213a271eda2b8aa798be654fa4bbe06": "0x6c6b935b8bbd400000",
    "0x368c5414b56b8455171fbf076220c1cba4b5ca31": "0x1e3ef911e83d720000",
    "0x3690246ba3c80679e22eac4412a1aefce6d7cd82": "0x43c33c1937564800000",
    "0x36928b55bc861509d51c8cf1d546bfec6e3e90af": "0x6acb3df27e1f880000",
    "0x369822f5578b40dd1f4471706b22cd971352da6b": "0x12c1b6eed03d280000",
    "0x369ef761195f3a373e24ece6cd22520fe0b9e86e": "0x1cffafc94db2088000",
    "0x36a08fd6fd1ac17ce15ed57eefb12a2be28188bf": "0x487a9a304539440000",
    "0x36a0e61e1be47fa87e30d32888ee0330901ca991": "0x1158e460913d00000",
    "0x36b2c85e3aeeebb70d63c4a4730ce2e8e88a3624": "0x21e19e0c9bab2400000",
    "0x36bf43ff35df90908824336c9b31ce33067e2f50": "0x49721510c1c1e9480000",
    "0x36bfe1fa3b7b70c172eb042f6819a8972595413e": "0x3635c9adc5dea00000",
    "0x36c510bf8d6e569bf2f37d47265dbcb502ff2bce": "0x65a4da25d3016c00000",
    "0x36d85dc3683156e63bf880a9fab7788cf8143a27": "0x43c33c1937564800000",
    "0x36df8f883c1273ec8a171f7a33cfd649b1fe6075": "0xc52484ac416890000",
    "0x36e156610cd8ff64e780d89d0054385ca76755aa": "0x2f6f10780d22cc00000",
    "0x36fec62c2c425e219b18448ad757009d8c54026f": "0x15af1d78b58c400000",
    "0x3700e3027424d939dbde5d42fb78f6c4dbec1a8f": "0x22b1c8c1227a00000",
    "0x3702e704cc21617439ad4ea27a5714f2fda1e932": "0x3635c9adc5dea00000",
    "0x3703350c4d6fe337342cddc65bf1e2386bf3f9b2": "0x6d8121a194d1100000",
    "0x3708e59de6b4055088782902e0579c7201a8bf50": "0x2a5a058fc295ed000000",
    "0x3712367e5e55a96d5a19168f6eb2bc7e9971f869": "0x3635c9adc5dea00000",
    "0x37195a635dcc62f56a718049d47e8f9f96832891": "0x6acb3df27e1f880000",
    "0x3727341f26c12001e378405ee38b2d8464ec7140": "0x6c6b935b8bbd400000",
    "0x372e453a6b629f27678cc8aeb5e57ce85ec0aef9": "0xad78ebc5ac6200000",
    "0x3734cb187491ede713ae5b3b2d12284af46b8101": "0xa2a15d09519be00000",
    "0x3737216ee91f177732fb58fa4097267207e2cf55": "0x52663ccab1e1c00000",
    "0x373c547e0cb5ce632e1c5ad66155720c01c40995": "0xfe54dcdce6c55a0000",
    "0x376cd7577383e902951b60a2017ba7ea29e33576": "0x6c6b935b8bbd400000",
    "0x378ea1dc8edc19bae82638029ea8752ce98bcfcd": "0x6c6b935b8bbd400000",
    "0x378f37243f3ff0bef5e1dc85eb4308d9340c29f9": "0x6c6e59e67c78540000",
    "0x37959c20b7e9931d72f5a8ae869dafddad3b6d5c": "0xad78ebc5ac6200000",
    "0x379a7f755a81a17edb7daaa28afc665dfa6be63a": "0x15af1d78b58c40000",
    "0x379c7166849bc24a02d6535e2def13daeef8aa8d": "0x56bc75e2d63100000",
    "0x37a05aceb9395c8635a39a7c5d266ae610d10bf2": "0x65a4da25d3016c00000",
    "0x37a10451f36166cf643dd2de6c1cbba8a011cfa3": "0x14998f32ac78700000",
    "0x37a7a6ff4ea3d60ec307ca516a48d3053bb79cbb": "0x6c6b935b8bbd400000",
    "0x37ab66083a4fa23848b886f9e66d79cdc150cc70": "0x12be22ffb5ec00380000",
    "0x37ac29bda93f497bc4aeaab935452c431510341e": "0x35659ef93f0fc40000",
    "0x37b8beac7b1ca38829d61ab552c766f48a10c32f": "0x15af1d78b58c400000",
    "0x37bbc47212d82fcb5ee08f5225ecc2041ad2da7d": "0xb1cf24ddd0b1400000",
    "0x37cb868d2c3f95b257611eb34a4188d58b749802": "0x6c6b935b8bbd400000",
    "0x37d980a12ee3bf23cc5cdb63b4ae45691f74c837": "0x6c6b935b8bbd400000",
    "0x37e169a93808d8035698f815c7235613c1e659f2": "0x3635c9adc5dea00000",
    "0x37eada93c475ded2f7e15e7787d400470fa52062": "0xad78ebc5ac6200000",
    "0x37fac1e6bc122e936dfb84de0c4bef6e0d60c2d7": "0x6c6b935b8bbd400000",
    "0x3807eff43aa97c76910a19752dd715ee0182d94e": "0xd90156f6fc2fb0000",
    "0x3815b0743f94fc8cc8654fd9d597ed7d8b77c57e": "0x2809d429d896750000",
    "0x381db4c8465df446a4ce15bf81d47e2f17c980bf": "0x6c6b935b8bbd4000000",
    "0x38202c5cd7078d4f887673ab07109ad8ada89720": "0x3635c9adc5dea00000",
    "0x3821862493242c0aeb84b90de05d250c1e50c074": "0x11776c58e946dc0000",
    "0x382591e7217b435e8e884cdbf415fe377a6fe29e": "0x1b2df9d219f57980000",
    "0x382ba76db41b75606dd48a48f0137e9174e031b6": "0x1158e460913d00000",
    "0x3831757eae7557cb8a37a4b10644b63e4d3b3c75": "0xad78ebc5ac6200000",
    "0x383304dd7a5720b29c1a10f60342219f48032f80": "0x12f939c99edab800000",
    "0x383a7c899ee18bc214969870bc7482f6d8f3570e": "0x21e19e0c9bab2400000",
    "0x38430e931d93be01b4c3ef0dc535f1e0a9610063": "0x21e19e0c9bab2400000",
    "0x38439aaa24e3636f3a18e020ea1da7e145160d86": "0x8cf23f909c0fa00000",
    "0x38458e0685573cb4d28f53098829904570179266": "0x22b1c8c1227a00000",
    "0x3847667038f33b01c1cc795d8daf5475eff5a0d4": "0x277b9bf4246c410000",
    "0x38643babea6011316cc797d9b093c897a17bdae7": "0x1220bb7445daa00000",
    "0x38695fc7e1367ceb163ebb053751f9f68ddb07a0": "0x6c6b935b8bbd400000",
    "0x3872f48dc5e3f817bc6b2ad2d030fc5e0471193d": "0xd8d726b7177a800000",
    "0x387eeafd6b4009deaf8bd5b85a72983a8dcc3487": "0xd8d726b7177a800000",
    "0x3881defae1c07b3ce04c78abe26b0cdc8d73f010": "0xad78ebc5ac6200000",
    "0x3883becc08b9be68ad3b0836aac3b620dc0017ef": "0x6c6b935b8bbd400000",
    "0x3885fee67107dc3a3c741ee290c98918c9b99397": "0x1158e460913d00000",
    "0x3887192c7f705006b630091276b39ac680448d6b": "0x340aad21b3b700000",
    "0x38898bbb4553e00bbfd0cf268b2fc464d154add5": "0x1158e460913d000000",
    "0x388bdcdae794fc44082e667501344118ea96cd96": "0x5a87e7d7f5f6580000",
    "0x388c85a9b9207d8146033fe38143f6d34b595c47": "0xad78ebc5ac6200000",
    "0x3896ad743579d38e2302454d1fb6e2ab69e01bfd": "0x65ea3db75546600000",
    "0x38a3dccf2fcfe0c91a2624bd0cbf88ee4a076c33": "0x6c6b935b8bbd400000",
    "0x38a744efa6d5c2137defef8ef9187b649eee1c78": "0xd8d726b7177a800000",
    "0x38ac664ee8e0795e4275cb852bcba6a479ad9c8d": "0x1158e460913d00000",
    "0x38b2197106123387a0d4de368431a8bacdda30e2": "0x1158e460913d00000",
    "0x38b3965c21fa893931079beacfffaf153678b6eb": "0x93c6a0a51e2670000",
    "0x38b403fb1fb7c14559a2d6f6564a5552bca39aff": "0x6c6b935b8bbd400000",
    "0x38b50146e71916a5448de12a4d742135dcf39833": "0x6d190c475169a200000",
    "0x38bf2a1f7a69de0e2546adb808b36335645da9ff": "0x6c700439d9b5600000",
    "0x38c10b90c859cbb7815692f99dae520ab5febf5e": "0x2c9e4966fa5cf240000",
    "0x38c7851f5ffd4cee98df30f3b25597af8a6ca263": "0x8ead3a2f7d7e180000",
    "0x38d2e9154964b41c8d50a7487d391e7ee2c3d3c2": "0xbdbc41e0348b300000",
    "0x38da1ba2de9e2c954b092dd9d81204fd016ba016": "0x2268ed01f34b3300000",
    "0x38df0c4abe7ded5fe068eadf154ac691774324a4": "0x61093d7c2c6d380000",
    "0x38e2af73393ea98a1d993a74df5cd754b98d529a": "0x61093d7c2c6d380000",
    "0x38e46de4453c38e941e7930f43304f94bb7b2be8": "0x6cb7e74867d5e60000",
    "0x38e7dba8fd4f1f850dbc2649d8e84f0952e3eb3c": "0x2b5e3af16b1880000",
    "0x38e8a31af2d265e31a9fff2d8f46286d1245a467": "0x1158e460913d00000",
    "0x38ea6f5b5a7b88417551b4123dc127dfe9342da6": "0x15af1d78b58c400000",
    "0x38eec6e217f4d41aa920e424b9525197041cd4c6": "0xf00d25eb922e670000",
    "0x38f387e1a4ed4a73106ef2b462e474e2e3143ad0": "0x14542ba12a337c00000",
    "0x391161b0e43c302066e8a68d2ce7e199ecdb1d57": "0xd8d726b7177a800000",
    "0x3915eab5ab2e5977d075dec47d96b68b4b5cf515": "0xd07018185120f400000",
    "0x391a77405c09a72b5e8436237aaaf95d68da1709": "0x2a9264af3d1b90000",
    "0x391f20176d12360d724d51470a90703675594a4d": "0x56bc75e2d631000000",
    "0x392433d2ce83d3fb4a7602cca3faca4ec140a4b0": "0x2c3c465ca58ec0000",
    "0x393f783b5cdb86221bf0294fb714959c7b45899c": "0x14061b9d77a5e980000",
    "0x393ff4255e5c658f2e7f10ecbd292572671bc2d2": "0x6c6b935b8bbd400000",
    "0x394132600f4155e07f4d45bc3eb8d9fb72dcd784": "0x9f6e92edea07d40000",
    "0x3951e48e3c869e6b72a143b6a45068cdb9d466d0": "0x1158e460913d00000",
    "0x3954bdfe0bf587c695a305d9244c3d5bdddac9bb": "0x410278327f985608000",
    "0x395d6d255520a8db29abc47d83a5db8a1a7df087": "0x56bc75e2d63100000",
    "0x39636b25811b176abfcfeeca64bc87452f1fdff4": "0x15af1d78b58c400000",
    "0x3969b4f71bb8751ede43c016363a7a614f76118e": "0x6c6b935b8bbd400000",
    "0x39782ffe06ac78822a3c3a8afe305e50a56188ce": "0x21e19e0c9bab2400000",
    "0x397a6ef8763a18f00fac217e055c0d3094101011": "0x6c6b935b8bbd400000",
    "0x397cdb8c80c67950b18d654229610e93bfa6ee1a": "0x3f95c8e08215210000",
    "0x39824f8bced176fd3ea22ec6a493d0ccc33fc147": "0xd8d726b7177a800000",
    "0x39936c2719450b9420cc2522cf91db01f227c1c1": "0x1b1ae4d6e2ef500000",
    "0x3995e096b08a5a726800fcd17d9c64c64e088d2b": "0xad78ebc5ac6200000",
    "0x399aa6f5d078cb0970882bc9992006f8fbdf3471": "0x3635c9adc5dea00000",
    "0x39aa05e56d7d32385421cf9336e90d3d15a9f859": "0x168d28e3f00280000",
    "0x39aaf0854db6eb39bc7b2e43846a76171c0445de": "0x6449e84e47a8a80000",
    "0x39b1c471ae94e12164452e811fbbe2b3cd7275ac": "0x6c6b935b8bbd400000",
    "0x39b299327490d72f9a9edff11b83afd0e9d3c450": "0xad78ebc5ac6200000",
    "0x39bac68d947859f59e9226089c96d62e9fbe3cde": "0x22b1c8c1227a00000",
    "0x39bfd978689bec048fc776aa15247f5e1d7c39a2": "0x43c33c1937564800000",
    "0x39c773367c8825d3596c686f42bf0d14319e3f84": "0x73f75d1a085ba0000",
    "0x39d4a931402c0c79c457186f24df8729cf957031": "0xd8d726b7177a800000",
    "0x39d6caca22bccd6a72f87ee7d6b59e0bde21d719": "0x6c8754c8f30c080000",
    "0x39e0db4d60568c800b8c5500026c2594f5768960": "0x3635c9adc5dea00000",
    "0x39ee4fe00fbced647068d4f57c01cb22a80bccd1": "0x14542ba12a337c00000",
    "0x39f198331e4b21c1b760a3155f4ab2fe00a74619": "0x6c6b935b8bbd400000",
    "0x39f44663d92561091b82a70dcf593d754005973a": "0xad78b2edc21598000",
    "0x3a035594c747476d42d1ee966c36224cdd224993": "0x134af74569f9c50000",
    "0x3a04572847d31e81f7765ca5bfc9d557159f3683": "0x7362d0dabeafd8000",
    "0x3a06e3bb1edcfd0c44c3074de0bb606b049894a2": "0x21e19e0c9bab2400000",
    "0x3a10888b7e149cae272c01302c327d0af01a0b24": "0xebec21ee1da40000",
    "0x3a3108c1e680a33b336c21131334409d97e5adec": "0x1158e460913d00000",
    "0x3a368efe4ad786e26395ec9fc6ad698cae29fe01": "0x2245899675f9f40000",
    "0x3a3dd104cd7eb04f21932fd433ea7affd39369f5": "0x13614f23e242260000",
    "0x3a4297da3c555e46c073669d0478fce75f2f790e": "0x6ac5c62d9486070000",
    "0x3a476bd2c9e664c63ab266aa4c6e4a4825f516c3": "0xad78ebc5ac6200000",
    "0x3a48e0a7098b06a905802b87545731118e89f439": "0x6c6b935b8bbd400000",
    "0x3a4da78dce05aeb87de9aead9185726da1926798": "0xad78ebc5ac6200000",
    "0x3a59a08246a8206f8d58f70bb1f0d35c5bcc71bd": "0xa076407d3f7440000",
    "0x3a72d635aadeee4382349db98a1813a4cfeb3df1": "0x2a5a058fc295ed000000",
    "0x3a7db224acae17de7798797d82cdf8253017dfa8": "0x10f0cf064dd59200000",
    "0x3a805fa0f7387f73055b7858ca8519edd93d634f": "0x6449e84e47a8a80000",
    "0x3a84e950ed410e51b7e8801049ab2634b285fea1": "0x3f52fdaa822d2c80000",
    "0x3a86ee94862b743dd34f410969d94e2c5652d4ad": "0xaede69ad30e810000",
    "0x3a9132b7093d3ec42e1e4fb8cb31ecdd43ae773c": "0x6c6b935b8bbd400000",
    "0x3a9960266df6492063538a99f487c950a3a5ec9e": "0x5150ae84a8cdf000000",
    "0x3a9b111029ce1f20c9109c7a74eeeef34f4f2eb2": "0xd8d726b7177a800000",
    "0x3a9e5441d44b243be55b75027a1ceb9eacf50df2": "0x3635c9adc5dea00000",
    "0x3aa07a34a1afc8967d3d1383b96b62cf96d5fa90": "0x43c33c1937564800000",
    "0x3aa42c21b9b31c3e27ccd17e099af679cdf56907": "0x1b1ae4d6e2ef5000000",
    "0x3aa948ea02397755effb2f9dc9392df1058f7e33": "0x2e141ea081ca080000",
    "0x3aadf98b61e5c896e7d100a3391d3250225d61df": "0xcaf67003701680000",
    "0x3aae4872fd9093cbcad1406f1e8078bab50359e2": "0x222c8eb3ff6640000",
    "0x3abb8adfc604f48d5984811d7f1d52fef6758270": "0xf29719b66f110c0000",
    "0x3ac2f0ff1612e4a1c346d53382abf6d8a25baa53": "0x6c6b935b8bbd400000",
    "0x3ac9dc7a436ae98fd01c7a9621aa8e9d0b8b531d": "0x61093d7c2c6d380000",
    "0x3ad06149b21c55ff867cc3fb9740d2bcc7101231": "0x29b76432b94451200000",
    "0x3ad70243d88bf0400f57c8c1fd57811848af162a": "0x2e9ee5c38653f00000",
    "0x3ad915d550b723415620f5a9b5b88a85f382f035": "0x3635c9adc5dea00000",
    "0x3ae160e3cd60ae31b9d6742d68e14e76bd96c517": "0x1a055690d9db80000",
    "0x3ae62bd271a760637fad79c31c94ff62b4cd12f7": "0x6c6b935b8bbd400000",
    "0x3aea4e82d2400248f99871a41ca257060d3a221b": "0x3635c9adc5dea00000",
    "0x3af65b3e28895a4a001153391d1e69c31fb9db39": "0xd5967be4fc3f100000",
    "0x3b07db5a357f5af2484cbc9d77d73b1fd0519fc7": "0x1b1ae4d6e2ef500000",
    "0x3b0accaf4b607cfe61d17334c214b75cdefdbd89": "0x6c6b935b8bbd400000",
    "0x3b13631a1b89cb566548899a1d60915cdcc4205b": "0x6c6b935b8bbd400000",
    "0x3b159099075207c6807663b1f0f7eda54ac8cce3": "0x6ac4e65b69f92d8000",
    "0x3b1937d5e793b89b63fb8eb5f1b1c9ca6ba0fa8e": "0x6c6b935b8bbd400000",
    "0x3b22da2a0271c8efe102532773636a69b1c17e09": "0x1b36a6444a3e180000",
    "0x3b22dea3c25f1b59c7bd27bb91d3a3eaecef3984": "0x56bc75e2d63100000",
    "0x3b2367f8494b5fe18d683c055d89999c9f3d1b34": "0x21e19e0c9bab2400000",
    "0x3b2c45990e21474451cf4f59f01955b331c7d7c9": "0x6c6b935b8bbd400000",
    "0x3b4100e30a73b0c734b18ffa8426d19b19312f1a": "0xbb5d1aa700afd900000",
    "0x3b42a66d979f582834747a8b60428e9b4eeccd23": "0x21a1c790fadc580000",
    "0x3b4768fd71e2db2cbe7fa050483c27b4eb931df3": "0x6c6b935b8bbd400000",
    "0x3b566a8afad19682dc2ce8679a3ce444a5b0fd4f": "0x6c6b935b8bbd400000",
    "0x3b5c251d7fd7893ba209fe541cecd0ce253a990d": "0x65a4da25d3016c00000",
    "0x3b5e8b3c77f792decb7a8985df916efb490aac23": "0x6c6b935b8bbd400000",
    "0x3b6e814f770748a7c3997806347605480a3fd509": "0x6c6b935b8bbd400000",
    "0x3b7b4f53c45655f3dc5f017edc23b16f9bc536fa": "0x56bc75e2d63100000",
    "0x3b7b8e27de33d3ce7961b98d19a52fe79f6c25be": "0x152d02c7e14af6800000",
    "0x3b7c77dbe95dc2602ce3269a9545d04965fefdbd": "0x6c6b935b8bbd400000",
    "0x3b8098533f7d9bdcd307dbb23e1777ca18418936": "0x6c6b935b8bbd400000",
    "0x3b93b16136f11eaf10996c95990d3b2739ccea5f": "0x21e19e0c9bab2400000",
    "0x3bab4b01a7c84ba13feea9b0bb191b77a3aadca3": "0xad78ebc5ac6200000",
    "0x3bb53598cc20e2055dc553b049404ac9b7dd1e83": "0x21571df77c00be0000",
    "0x3bbc13d04accc0707aebdcaef087d0b87e0b5ee3": "0xbed1d0263d9f000000",
    "0x3bc6e3ee7a56ce8f14a37532590f63716b9966e8": "0x6c6b935b8bbd400000",
    "0x3bc85d6c735b9cda4bba5f48b24b13e70630307b": "0x6acb3df27e1f880000",
    "0x3bd624b548cb659736907ed8aa3c0c705e24b575": "0x6c6b935b8bbd400000",
    "0x3bd9a06d1bd36c4edd27fc0d1f5b088ddae3c72a": "0x1b1a7a420ba00d0000",
    "0x3bddbc8134f77d55597fc97c26d26698090604eb": "0xbe202d6a0eda0000",
    "0x3bf86ed8a3153ec933786a02ac090301855e576b": "0x5f4a8c8375d155400000",
    "0x3bfbd3847c17a61cf3f17b52f8eba1b960b3f39f": "0xa2a15d09519be00000",
    "0x3c03bbc023e1e93fa3a3a6e428cf0cd8f95e1ec6": "0x52663ccab1e1c00000",
    "0x3c0c3defac9cea7acc319a96c30b8e1fedab4574": "0x692ae8897081d00000",
    "0x3c15b3511df6f0342e7348cc89af39a168b7730f": "0x3635c9adc5dea00000",
    "0x3c1f91f301f4b565bca24751aa1f761322709ddd": "0x61093d7c2c6d380000",
    "0x3c286cfb30146e5fd790c2c8541552578de334d8": "0x2291b11aa306e8c0000",
    "0x3c322e611fdb820d47c6f8fc64b6fad74ca95f5e": "0xd258ece1b13150000",
    "0x3c5a241459c6abbf630239c98a30d20b8b3ac561": "0x88b23acffd9900000",
    "0x3c79c863c3d372b3ff0c6f452734a7f97042d706": "0x98a7d9b8314c00000",
    "0x3c83c1701db0388b68210d00f5717cd9bd322c6a": "0x65a4da25d3016c00000",
    "0x3c860e2e663f46db53427b29fe3ea5e5bf62bbcc": "0x556f64c1fe7fa0000",
    "0x3c869c09696523ced824a070414605bb76231ff2": "0x3635c9adc5dea00000",
    "0x3c925619c9b33144463f0537d896358706c520b0": "0x6c6b935b8bbd400000",
    "0x3c98594bf68b57351e8814ae9e6dfd2d254aa06f": "0x1043561a8829300000",
    "0x3cadeb3d3eed3f62311d52553e70df4afce56f23": "0xd8d726b7177a800000",
    "0x3caedb5319fe806543c56e5021d372f71be9062e": "0x878678326eac9000000",
    "0x3cafaf5e62505615068af8eb22a13ad8a9e55070": "0x6c660645aa47180000",
    "0x3cb179cb4801a99b95c3b0c324a2bdc101a65360": "0x168d28e3f00280000",
    "0x3cb561ce86424b359891e364ec925ffeff277df7": "0xad78ebc5ac6200000",
    "0x3ccb71aa6880cb0b84012d90e60740ec06acd78f": "0x6c6b935b8bbd400000",
    "0x3ccef88679573947e94997798a1e327e08603a65": "0x2bc916d69f3b020000",
    "0x3cd1d9731bd548c1dd6fcea61beb75d91754f7d3": "0x1161d01b215cae48000",
    "0x3cd3a6e93579c56d494171fc533e7a90e6f59464": "0x6c6b935b8bbd400000",
    "0x3cd6b7593cbee77830a8b19d0801958fcd4bc57a": "0x1b1ae4d6e2ef500000",
    "0x3cd7f7c7c2353780cde081eeec45822b25f2860c": "0xad78ebc5ac6200000",
    "0x3ce1dc97fcd7b7c4d3a18a49d6f2a5c1b1a906d7": "0xad78ebc5ac6200000",
    "0x3cea302a472a940379dd398a24eafdbadf88ad79": "0xa2a15d09519be00000",
    "0x3ceca96bb1cdc214029cbc5e181d398ab94d3d41": "0x10f0cf064dd592000000",
    "0x3cf484524fbdfadae26dc185e32b2b630fd2e726": "0x185452cb2a91c30000",
    "0x3cf9a1d465e78b7039e3694478e2627b36fcd141": "0x4a60532ad51bf00000",
    "0x3cfbf066565970639e130df2a7d16b0e14d6091c": "0x5c283d410394100000",
    "0x3d09688d93ad07f3abe68c722723cd680990435e": "0x65a4ce99f769e6e0000",
    "0x3d31587b5fd5869845788725a663290a49d3678c": "0x1b1ae4d6e2ef500000",
    "0x3d3fad49c9e5d2759c8e8e5a7a4d60a0dd135692": "0x1158e460913d00000",
    "0x3d574fcf00fae1d98cc8bf9ddfa1b3953b9741bc": "0x6acb3df27e1f880000",
    "0x3d5a8b2b80be8b35d8ecf789b5ed7a0775c5076c": "0x1158e460913d00000",
    "0x3d66cd4bd64d5c8c1b5eea281e106d1c5aad2373": "0x69c4f3a8a110a60000",
    "0x3d6ae053fcbc318d6fd0fbc353b8bf542e680d27": "0xc673ce3c40160000",
    "0x3d6ff82c9377059fb30d9215723f60c775c891fe": "0xd8e5ce617f2d50000",
    "0x3d79a853d71be0621b44e29759656ca075fdf409": "0x6c6b935b8bbd400000",
    "0x3d7ea5bf03528100ed8af8aed2653e921b6e6725": "0x3635c9adc5dea00000",
    "0x3d813ff2b6ed57b937dabf2b381d148a411fa085": "0x56bc75e2d63100000",
    "0x3d881433f04a7d0d27f84944e08a512da3555287": "0x410d586a20a4c00000",
    "0x3d89e505cb46e211a53f32f167a877bec87f4b0a": "0x15b3557f1937f8000",
    "0x3d8d0723721e73a6c0d860aa0557abd14c1ee362": "0x10f0cf064dd59200000",
    "0x3d8f39881b9edfe91227c33fa4cdd91e678544b0": "0x4ab07ba43ada98000",
    "0x3d9d6be57ff83e065985664f12564483f2e600b2": "0x6eace43f23bd800000",
    "0x3da39ce3ef4a7a3966b32ee7ea4ebc2335a8f11f": "0x6c6b935b8bbd400000",
    "0x3daa01ceb70eaf9591fa521ba4a27ea9fb8ede4a": "0x5a63d2c9bc76540000",
    "0x3db5fe6a68bd3612ac15a99a61e555928eeceaf3": "0x55a6e79ccd1d300000",
    "0x3db9ed7f024c7e26372feacf2b050803445e3810": "0x45b148b4996a300000",
    "0x3dbf0dbfd77890800533f09dea8301b9f025d2a6": "0x3635c9adc5dea00000",
    "0x3dcef19c868b15d34eda426ec7e04b18b6017002": "0x6c68ccd09b022c0000",
    "0x3dd12e556a603736feba4a6fa8bd4ac45d662a04": "0x23757b9183e078280000",
    "0x3dde8b15b3ccbaa5780112c3d674f313bba68026": "0x601d515a3e4f940000",
    "0x3ddedbe48923fbf9e536bf9ffb0747c9cdd39eef": "0x368c8623a8b4d100000",
    "0x3deae43327913f62808faa1b6276a2bd6368ead9": "0x6c6b935b8bbd400000",
    "0x3df762049eda8ac6927d904c7af42f94e5519601": "0x6c6b935b8bbd400000",
    "0x3e040d40cb80ba0125f3b15fdefcc83f3005da1b": "0x384524cc70b7780000",
    "0x3e0b8ed86ed669e12723af7572fbacfe829b1e16": "0x514de7f9b812dc0000",
    "0x3e0cbe6a6dcb61f110c45ba2aa361d7fcad3da73": "0x1b2df9d219f57980000",
    "0x3e194b4ecef8bb711ea2ff24fec4e87bd032f7d1": "0x8b9dc1bc1a036a8000",
    "0x3e1b2230afbbd310b4926a4c776d5ae7819c661d": "0x65a4da25d3016c00000",
    "0x3e1c53300e4c168912163c7e99b95da268ad280a": "0x3662325cd18fe00000",
    "0x3e1c962063e0d5295941f210dca3ab531eec8809": "0xa2a15d09519be00000",
    "0x3e2ca0d234baf607ad466a1b85f4a6488ef00ae7": "0x4da21a3483d568000",
    "0x3e2f26235e137a7324e4dc154b5df5af46ea1a49": "0x137aad8032db90000",
    "0x3e3161f1ea2fbf126e79da1801da9512b37988c9": "0xa6dd90cae5114480000",
    "0x3e36c17253c11cf38974ed0db1b759160da63783": "0x17b7883c06916600000",
    "0x3e3cd3bec06591d6346f254b621eb41c89008d31": "0x35dfbeda9f37340000",
    "0x3e45bd55db9060eced923bb9cb733cb3573fb531": "0x58e7926ee858a00000",
    "0x3e4d13c55a84e46ed7e9cb90fd355e8ad991e38f": "0x3635c9adc5dea00000",
    "0x3e4e9265223c9738324cf20bd06006d0073edb8c": "0x73f75d1a085ba0000",
    "0x3e4fbd661015f6461ed6735cefef01f31445de3a": "0x36e342998b8b0200000",
    "0x3e53ff2107a8debe3328493a92a586a7e1f49758": "0x4e69c2a71a405ab0000",
    "0x3e5a39fdda70df1126ab0dc49a7378311a537a1f": "0x821ab0d44149800000",
    "0x3e5abd09ce5af7ba8487c359e0f2a93a986b0b18": "0x21e19e0c9bab2400000",
    "0x3e5cb8928c417825c03a3bfcc52183e5c91e42d7": "0xe731d9c52c962f0000",
    "0x3e5e93fb4c9c9d1246f8f247358e22c3c5d17b6a": "0x821ab0d4414980000",
    "0x3e618350fa01657ab0ef3ebac8e37012f8fc2b6f": "0x9806de3da6e9780000",
    "0x3e63ce3b24ca2865b4c5a687b7aea3597ef6e548": "0x6c6b935b8bbd400000",
    "0x3e66b84769566ab67945d5fa81373556bcc3a1fa": "0x83d6c7aab63600000",
    "0x3e76a62db187aa74f63817533b306cead0e8cebe": "0x69b5afac750bb800000",
    "0x3e7a966b5dc357ffb07e9fe067c45791fd8e3049": "0x3342d60dff1960000",
    "0x3e81772175237eb4cbe0fe2dcafdadffeb6a1999": "0x1dd0c885f9a0d800000",
    "0x3e8349b67f5745449f659367d9ad4712db5b895a": "0x62a992e53a0af00000",
    "0x3e83544f0082552572c782bee5d218f1ef064a9d": "0x56cd55fc64dfe0000",
    "0x3e84b35c5b2265507061d30b6f12da033fe6f8b9": "0x61093d7c2c6d380000",
    "0x3e8641d43c42003f0a33c929f711079deb2b9e46": "0x1b1ae4d6e2ef500000",
    "0x3e8745ba322f5fd6cb50124ec46688c7a69a7fae": "0x10afc1ade3b4ed40000",
    "0x3e914e3018ac00449341c49da71d04dfeeed6221": "0xd8d726b7177a800000",
    "0x3e9410d3b9a87ed5e451a6b91bb8923fe90fb2b5": "0xad78ebc5ac6200000",
    "0x3e94df5313fa520570ef232bc3311d5f622ff183": "0x6c6b935b8bbd400000",
    "0x3e9b34a57f3375ae59c0a75e19c4b641228d9700": "0xf8699329677e0000",
    "0x3eada8c92f56067e1bb73ce378da56dc2cdfd365": "0x77cde93aeb0d480000",
    "0x3eaf0879b5b6db159b589f84578b6a74f6c10357": "0x18938b671fa65a28000",
    "0x3eaf316b87615d88f7adc77c58e712ed4d77966b": "0x56dbc4cee24648000",
    "0x3eb8b33b21d23cda86d8288884ab470e164691b5": "0x1b1ae4d6e2ef500000",
    "0x3eb9ef06d0c259040319947e8c7a6812aa0253d8": "0x90d972f32323c0000",
    "0x3ecc8e1668dde995dc570fe414f44211c534a615": "0x6c6b935b8bbd400000",
    "0x3ecdb532e397579662b2a46141e78f8235936a5f": "0x39fbae8d042dd0000",
    "0x3eee6f1e96360b7689b3069adaf9af8eb60ce481": "0x3635c9adc5dea00000",
    "0x3f08d9ad894f813e8e2148c160d24b353a8e74b0": "0xcb49b44ba602d800000",
    "0x3f0c83aac5717962734e5ceaeaecd39b28ad06be": "0x6c6b935b8bbd400000",
    "0x3f10800282d1b7ddc78fa92d8230074e1bf6aeae": "0x10afc1ade3b4ed40000",
    "0x3f1233714f204de9de4ee96d073b368d8197989f": "0x217c41074e6bb0000",
    "0x3f173aa6edf469d185e59bd26ae4236b92b4d8e1": "0x1158e460913d000000",
    "0x3f1bc420c53c002c9e90037c44fe6a8ef4ddc962": "0x960db77681e940000",
    "0x3f236108eec72289bac3a65cd283f95e041d144c": "0x3634bf39ab98788000",
    "0x3f2da093bb16eb064f8bfa9e30b929d15f8e1c4c": "0x6c6b935b8bbd400000",
    "0x3f2dd55db7eab0ebee65b33ed8202c1e992e958b": "0x2c73c937742c500000",
    "0x3f2f381491797cc5c0d48296c14fd0cd00cdfa2d": "0x2b95bdcc39b6100000",
    "0x3f30d3bc9f602232bc724288ca46cd0b0788f715": "0xd8d726b7177a800000",
    "0x3f3c8e61e5604cef0605d436dd22accd862217fc": "0x487a9a304539440000",
    "0x3f3f46b75cabe37bfacc8760281f4341ca7f463d": "0x20ac448235fae88000",
    "0x3f472963197883bbda5a9b7dfcb22db11440ad31": "0x1a19643cb1eff08000",
    "0x3f4cd1399f8a34eddb9a17a471fc922b5870aafc": "0xad78ebc5ac6200000",
    "0x3f551ba93cd54693c183fb9ad60d65e1609673c9": "0x6c6b935b8bbd400000",
    "0x3f627a769e6a950eb87017a7cd9ca20871136831": "0x2eb8eb1a172dcb80000",
    "0x3f6dd3650ee428dcb7759553b017a96a94286ac9": "0x487a9a304539440000",
    "0x3f747237806fed3f828a6852eb0867f79027af89": "0x5150ae84a8cdf00000",
    "0x3f75ae61cc1d8042653b5baec4443e051c5e7abd": "0x52d542804f1ce0000",
    "0x3fb7d197b3ba4fe045efc23d50a14585f558d9b2": "0x1158e460913d00000",
    "0x3fbc1e4518d73400c6d046359439fb68ea1a49f4": "0x3790bb8551376400000",
    "0x3fbed6e7e0ca9c84fbe9ebcf9d4ef9bb49428165": "0x6c6b935b8bbd400000",
    "0x3fd0bb47798cf44cdfbe4d333de637df4a00e45c": "0x56c5579f722140000",
    "0x3fe40fbd919aad2818df01ee4df46c46842ac539": "0x14542ba12a337c00000",
    "0x3fe801e61335c5140dc7eda2ef5204460a501230": "0x6c6b935b8bbd400000",
    "0x3ff836b6f57b901b440c30e4dbd065cf37d3d48c": "0xad78ebc5ac6200000",
    "0x3ffcb870d4023d255d5167d8a507cefc366b68ba": "0x23343c4354d2ac0000",
    "0x401354a297952fa972ad383ca07a0a2811d74a71": "0xc249fdd327780000",
    "0x4030a925706b2c101c8c5cb9bd05fbb4f6759b18": "0xd8d726b7177a800000",
    "0x403145cb4ae7489fcc90cd985c6dc782b3cc4e44": "0x1453ff387b27cac0000",
    "0x403220600a36f73f24e190d1edb2d61be3f41354": "0x107ad8f556c6c00000",
    "0x4039bd50a2bde15ffe37191f410390962a2b8886": "0xad78ebc5ac6200000",
    "0x403c64896a75cad816a9105e18d8aa5bf80f238e": "0x35659ef93f0fc40000",
    "0x403d53cf620f0922b417848dee96c190b5bc8271": "0x215f835bc769da80000",
    "0x404100db4c5d0eec557823b58343758bcc2c8083": "0x1158e460913d00000",
    "0x4041374b0feef4792e4b33691fb86897a4ff560c": "0x13c9647e25a9940000",
    "0x40467d80e74c35407b7db51789234615fea66818": "0x150894e849b3900000",
    "0x40585200683a403901372912a89834aadcb55fdb": "0x6c6b935b8bbd400000",
    "0x4058808816fdaa3a5fc98ed47cfae6c18315422e": "0xad4c8316a0b0c0000",
    "0x405f596b94b947344c033ce2dcbff12e25b79784": "0x6c6b935b8bbd400000",
    "0x40630024bd2c58d248edd8465617b2bf1647da0e": "0x3635c9adc5dea00000",
    "0x40652360d6716dc55cf9aab21f3482f816cc2cbd": "0x21e19e0c9bab2400000",
    "0x407295ebd94b48269c2d569c9b9af9aa05e83e5e": "0x21e19e0c9bab2400000",
    "0x4073fa49b87117cb908cf1ab512da754a932d477": "0x6acb3df27e1f880000",
    "0x408a69a40715e1b313e1354e600800a1e6dc02a5": "0x1e7b891cc92540000",
    "0x409bd75085821c1de70cdc3b11ffc3d923c74010": "0xd8d726b7177a800000",
    "0x409d5a962edeeebea178018c0f38b9cdb213f289": "0x1158e460913d00000",
    "0x40a331195b977325c2aa28fa2f42cb25ec3c253c": "0x6c6b935b8bbd400000",
    "0x40a7f72867a7dc86770b162b7557a434ed50cce9": "0x3635c9adc5dea00000",
    "0x40ab0a3e83d0c8ac9366910520eab1772bac3b1a": "0x34f10c2dc05e7c0000",
    "0x40ab66fe213ea56c3afb12c75be33f8e32fd085d": "0xd8d726b7177a800000",
    "0x40ad74bc0bce2a45e52f36c3debb1b3ada1b7619": "0x170162de109c6580000",
    "0x40cf890591eae4a18f812a2954cb295f633327e6": "0x29bf736fc591a0000",
    "0x40cf90ef5b768c5da585002ccbe6617650d8e837": "0x36330322d5238c0000",
    "0x40d45d9d7625d15156c932b771ca7b0527130958": "0x152d02c7e14af6800000",
    "0x40db1ba585ce34531edec5494849391381e6ccd3": "0x61093d7c2c6d380000",
    "0x40df495ecf3f8b4cef2a6c189957248fe884bc2b": "0x28a857425466f800000",
    "0x40e0dbf3efef9084ea1cd7e503f40b3b4a8443f6": "0xd8d726b7177a800000",
    "0x40e2440ae142c880366a12c6d4102f4b8434b62a": "0x3635c9adc5dea00000",
    "0x40e3c283f7e24de0410c121bee60a5607f3e29a6": "0x3635c9adc5dea00000",
    "0x40ea5044b204b23076b1a5803bf1d30c0f88871a": "0x2f6f10780d22cc00000",
    "0x40eddb448d690ed72e05c225d34fc8350fa1e4c5": "0x17b7883c06916600000",
    "0x40f4f4c06c732cd35b119b893b127e7d9d0771e4": "0x21e19e0c9bab2400000",
    "0x41010fc8baf8437d17a04369809a168a17ca56fb": "0x56bc75e2d63100000",
    "0x4103299671d46763978fa4aa19ee34b1fc952784": "0xad78ebc5ac6200000",
    "0x41033c1b6d05e1ca89b0948fc64453fbe87ab25e": "0x487a9a304539440000",
    "0x41098a81452317c19e3eef0bd123bbe178e9e9ca": "0x97c9ce4cf6d5c00000",
    "0x411610b178d5617dfab934d293f512a93e5c10e1": "0x93739534d28680000",
    "0x411c831cc6f44f1965ec5757ab4e5b3ca4cffd1f": "0x170a0f5040e5040000",
    "0x412a68f6c645559cc977fc4964047a201d1bb0e2": "0xa968163f0a57b400000",
    "0x413f4b02669ccff6806bc826fcb7deca3b0ea9bc": "0x1158e460913d00000",
    "0x414599092e879ae25372a84d735af5c4e510cd6d": "0x15af1d78b58c400000",
    "0x41485612d03446ec4c05e5244e563f1cbae0f197": "0x34957444b840e80000",
    "0x415d096ab06293183f3c033d25f6cf7178ac3bc7": "0x22b1c8c1227a00000",
    "0x4166fc08ca85f766fde831460e9dc93c0e21aa6c": "0x3635c9adc5dea00000",
    "0x416784af609630b070d49a8bcd12235c6428a408": "0x43c33c1937564800000",
    "0x4167cd48e733418e8f99ffd134121c4a4ab278c4": "0xc55325ca7415e00000",
    "0x416c86b72083d1f8907d84efd2d2d783dffa3efb": "0x6c6acc67d7b1d40000",
    "0x4173419d5c9f6329551dc4d3d0ceac1b701b869e": "0x4c53ecdc18a600000",
    "0x4174fa1bc12a3b7183cbabb77a0b59557ba5f1db": "0x6c6b935b8bbd400000",
    "0x41786a10d447f484d33244ccb7facd8b427b5b8c": "0x3635c9adc5dea00000",
    "0x417a3cd19496530a6d4204c3b5a17ce0f207b1a5": "0x1b1ae4d6e2ef5000000",
    "0x417e4e2688b1fd66d821529e46ed4f42f8b3db3d": "0x6c6b935b8bbd400000",
    "0x419a71a36c11d105e0f2aef5a3e598078e85c80b": "0x10f0cf064dd59200000",
    "0x419bde7316cc1ed295c885ace342c79bf7ee33ea": "0x14542ba12a337c00000",
    "0x41a2f2e6ecb86394ec0e338c0fc97e9c5583ded2": "0x6cee06ddbe15ec0000",
    "0x41a8c2830081b102df6e0131657c07ab635b54ce": "0x6c6acc67d7b1d40000",
    "0x41a8e236a30e6d63c1ff644d132aa25c89537e01": "0x1158e460913d00000",
    "0x41a9a404fc9f5bfee48ec265b12523338e29a8bf": "0x150894e849b3900000",
    "0x41ad369f758fef38a19aa3149379832c818ef2a0": "0x36369ed7747d260000",
    "0x41b2d34fde0b1029262b4172c81c1590405b03ae": "0x3635c9adc5dea00000",
    "0x41b2dbd79dda9b864f6a7030275419c39d3efd3b": "0xad78ebc5ac62000000",
    "0x41c3c2367534d13ba2b33f185cdbe6ac43c2fa31": "0xd8d726b7177a800000",
    "0x41cb9896445f70a10a14215296daf614e32cf4d5": "0x678a932062e4180000",
    "0x41ce79950935cff55bf78e4ccec2fe631785db95": "0x6c6b935b8bbd400000",
    "0x41d3b731a326e76858baa5f4bd89b57b36932343": "0x155bd9307f9fe80000",
    "0x41e4a20275e39bdcefeb655c0322744b765140c2": "0x21e19e0c9bab2400000",
    "0x41ed2d8e7081482c919fc23d8f0091b3c82c4685": "0x463a1e765bd78a0000",
    "0x41f27e744bd29de2b0598f02a0bb9f98e681eaa4": "0x1a4aba225c207400000",
    "0x41f489a1ec747bc29c3e5f9d8db97877d4d1b4e9": "0x73f75d1a085ba0000",
    "0x420fb86e7d2b51401fc5e8c72015decb4ef8fc2e": "0x3635c9adc5dea00000",
    "0x421684baa9c0b4b5f55338e6f6e7c8e146d41cb7": "0x5150ae84a8cdf00000",
    "0x42399659aca6a5a863ea2245c933fe9a35b7880e": "0x6ece32c26c82700000",
    "0x423bca47abc00c7057e3ad34fca63e375fbd8b4a": "0x3cfc82e37e9a7400000",
    "0x423c3107f4bace414e499c64390a51f74615ca5e": "0x6c6b935b8bbd400000",
    "0x423cc4594cf4abb6368de59fd2b1230734612143": "0x6c6b935b8bbd400000",
    "0x4244f1331158b9ce26bbe0b9236b9203ca351434": "0x21e19e0c9bab2400000",
    "0x425177eb74ad0a9d9a5752228147ee6d6356a6e6": "0xb98bc829a6f90000",
    "0x425725c0f08f0811f5f006eec91c5c5c126b12ae": "0x821ab0d4414980000",
    "0x4258fd662fc4ce3295f0d4ed8f7bb1449600a0a9": "0x16c452ed6088ad80000",
    "0x425c1816868f7777cc2ba6c6d28c9e1e796c52b3": "0x21e19e0c9bab2400000",
    "0x425c338a1325e3a1578efa299e57d986eb474f81": "0x6c6b935b8bbd400000",
    "0x426259b0a756701a8b663528522156c0288f0f24": "0x218ae196b8d4f300000",
    "0x426d15f407a01135b13a6b72f8f2520b3531e302": "0x1158e460913d00000",
    "0x426f78f70db259ac8534145b2934f4ef1098b5d8": "0x138400eca364a00000",
    "0x42732d8ef49ffda04b19780fd3c18469fb374106": "0x170b00e5e4a9be0000",
    "0x427417bd16b1b3d22dbb902d8f9657016f24a61c": "0x6c6b935b8bbd400000",
    "0x42746aeea14f27beff0c0da64253f1e7971890a0": "0x54069233bf7f780000",
    "0x427b462ab84e5091f48a46eb0cdc92ddcb26e078": "0x6c6b935b8bbd400000",
    "0x427e4751c3babe78cff8830886febc10f9908d74": "0x6acb3df27e1f880000",
    "0x427ec668ac9404e895cc861511d1620a4912be98": "0x878678326eac9000000",
    "0x4280a58f8bb10b9440de94f42b4f592120820191": "0x6c6b935b8bbd400000",
    "0x428a1ee0ed331d7952ccbe1c7974b2852bd1938a": "0x77b74a4e8de5650000",
    "0x429c06b487e8546abdfc958a25a3f0fba53f6f00": "0xbb644af542198000",
    "0x42a98bf16027ce589c4ed2c95831e2724205064e": "0x21e19e0c9bab2400000",
    "0x42c6edc515d35557808d13cd44dcc4400b2504e4": "0xaba14c59ba7320000",
    "0x42cecfd2921079c2d7df3f08b07aa3beee5e219a": "0x3635c9adc5dea00000",
    "0x42d1a6399b3016a8597f8b640927b8afbce4b215": "0xa18bcec34888100000",
    "0x42d34940edd2e7005d46e2188e4cfece8311d74d": "0x890b0c2e14fb80000",
    "0x42d3a5a901f2f6bd9356f112a70180e5a1550b60": "0x3224f42723d4540000",
    "0x42d6b263d9e9f4116c411424fc9955783c763030": "0x6c6b935b8bbd400000",
    "0x42db0b902559e04087dd5c441bc7611934184b89": "0x6d33b17d253a620000",
    "0x42ddd014dc52bfbcc555325a40b516f4866a1dd3": "0x6c6b935b8bbd400000",
    "0x4319263f75402c0b5325f263be4a5080651087f0": "0x354b0f14631bab0000",
    "0x431f2c19e316b044a4b3e61a0c6ff8c104a1a12f": "0x3635c9adc5dea00000",
    "0x43227d65334e691cf231b4a4e1d339b95d598afb": "0x21e19e0c9bab2400000",
    "0x432809a2390f07c665921ff37d547d12f1c9966a": "0x65a4da25d3016c00000",
    "0x4329fc0931cbeb033880fe4c9398ca45b0e2d11a": "0x6c7120716d33680000",
    "0x432d884bd69db1acc0d89c64ade4cb4fc3a88b7a": "0x869a8c10808eec0000",
    "0x4331ab3747d35720a9d8ca25165cd285acd4bda8": "0x6c6b935b8bbd400000",
    "0x433a3b68e56b0df1862b90586bbd39c840ff1936": "0x6c6b935b8bbd400000",
    "0x433e3ba1c51b810fc467d5ba4dea42f7a9885e69": "0x878678326eac9000000",
    "0x433eb94a339086ed12d9bde9cd1d458603c97dd6": "0x152d02c7e14af6800000",
    "0x4349225a62f70aea480a029915a01e5379e64fa5": "0x8cd67e2334c0d80000",
    "0x4354221e62dc09e6406436163a185ef06d114a81": "0x6c6b935b8bbd400000",
    "0x435443b81dfdb9bd8c6787bc2518e2d47e57c15f": "0x1438d9397881ef20000",
    "0x4361d4846fafb377b6c0ee49a596a78ddf3516a3": "0xc2127af858da700000",
    "0x4364309a9fa07095600f79edc65120cdcd23dc64": "0x21e19e0c9bab2400000",
    "0x4367ae4b0ce964f4a54afd4b5c368496db169e9a": "0x6c6b935b8bbd400000",
    "0x43748928e8c3ec4436a1d092fbe43ac749be1251": "0x15af1d78b58c400000",
    "0x43767bf7fd2af95b72e9312da9443cb1688e4343": "0x1043561a8829300000",
    "0x437983388ab59a4ffc215f8e8269461029c3f1c1": "0x43c33c1937564800000",
    "0x43898c49a34d509bfed4f76041ee91caf3aa6aa5": "0x1043561a8829300000",
    "0x438c2f54ff8e629bab36b1442b760b12a88f02ae": "0x6c6b935b8bbd400000",
    "0x4398628ea6632d393e929cbd928464c568aa4a0c": "0x4be4e7267b6ae00000",
    "0x439d2f2f5110a4d58b1757935015408740fec7f8": "0xcfa5c5150f4c888000",
    "0x439dee3f7679ff1030733f9340c096686b49390b": "0x6c6b935b8bbd400000",
    "0x43b079baf0727999e66bf743d5bcbf776c3b0922": "0x6c6b935b8bbd400000",
    "0x43bc2d4ddcd6583be2c7bc094b28fb72e62ba83b": "0x6c6b935b8bbd400000",
    "0x43c7ebc5b3e7af16f47dc5617ab10e0f39b4afbb": "0x678a932062e4180000",
    "0x43cb9652818c6f4d6796b0e89409306c79db6349": "0x6c6b935b8bbd400000",
    "0x43cc08d0732aa58adef7619bed46558ad7774173": "0xf0e7dcb0122a8f0000",
    "0x43d5a71ce8b8f8ae02b2eaf8eaf2ca2840b93fb6": "0x14542ba12a337c00000",
    "0x43db7ff95a086d28ebbfb82fb8fb5f230a5ebccd": "0xdf6eb0b2d3ca0000",
    "0x43e7ec846358d7d0f937ad1c350ba069d7bf72bf": "0x670ae629214680000",
    "0x43f16f1e75c3c06a9478e8c597a40a3cb0bf04cc": "0x9df7dfa8f760480000",
    "0x43f470ed659e2991c375957e5ddec5bd1d382231": "0x56bc75e2d63100000",
    "0x43f7e86e381ec51ec4906d1476cba97a3db584e4": "0x3635c9adc5dea00000",
    "0x43ff38743ed0cd43308c066509cc8e7e72c862aa": "0x692ae8897081d00000",
    "0x43ff8853e98ed8406b95000ada848362d6a0392a": "0x4ae0b1c4d2e84d00000",
    "0x44098866a69b68c0b6bc168229b9603587058967": "0xa31062beeed700000",
    "0x4419ac618d5dea7cdc6077206fb07dbdd71c1702": "0xd8d726b7177a800000",
    "0x441a52001661fac718b2d7b351b7c6fb521a7afd": "0x15af1d78b58c400000",
    "0x441aca82631324acbfa2468bda325bbd78477bbf": "0x14542ba12a337c00000",
    "0x441f37e8a029fd02482f289c49b5d06d00e408a4": "0x1211ecb56d13488000",
    "0x4420aa35465be617ad2498f370de0a3cc4d230af": "0x6c6b935b8bbd400000",
    "0x44232ff66ddad1fd841266380036afd7cf7d7f42": "0xad78ebc5ac6200000",
    "0x44250d476e062484e9080a3967bf3a4a732ad73f": "0x1158e460913d00000",
    "0x4429a29fee198450672c0c1d073162250bec6474": "0x362aaf8202f2500000",
    "0x44355253b27748e3f34fe9cae1fb718c8f249529": "0xad78ebc5ac6200000",
    "0x4438e880cb2766b0c1ceaec9d2418fceb952a044": "0x73fa073903f080000",
    "0x444caf79b71338ee9aa7c733b02acaa7dc025948": "0x22b1c8c1227a00000",
    "0x445cb8de5e3df520b499efc980f52bff40f55c76": "0x6c6b935b8bbd400000",
    "0x446a8039cecf9dce4879cbcaf3493bf545a88610": "0x17b7883c06916600000",
    "0x4474299d0ee090dc90789a1486489c3d0d645e6d": "0x3635c9adc5dea00000",
    "0x448bf410ad9bbc2fecc4508d87a7fc2e4b8561ad": "0xad6eedd17cf3b8000",
    "0x44901e0d0e08ac3d5e95b8ec9d5e0ff5f12e0393": "0x16a1f9f5fd7d960000",
    "0x4493123c021ece3b33b1a452c9268de14007f9d3": "0x16a6502f15a1e540000",
    "0x449ac4fbe383e36738855e364a57f471b2bfa131": "0x29b76432b94451200000",
    "0x44a01fb04ac0db2cce5dbe281e1c46e28b39d878": "0x6c6acc67d7b1d40000",
    "0x44a63d18424587b9b307bfc3c364ae10cd04c713": "0x1158e460913d00000",
    "0x44a8989e32308121f72466978db395d1f76c3a4b": "0x18850299f42b06a0000",
    "0x44c1110b18870ec81178d93d215838c551d48e64": "0xad6f98593bd8f0000",
    "0x44c14765127cde11fab46c5d2cf4d4b2890023fd": "0x6c6b935b8bbd400000",
    "0x44c54eaa8ac940f9e80f1e74e82fc14f1676856a": "0x1ab2cf7c9f87e200000",
    "0x44cd77535a893fa7c4d5eb3a240e79d099a72d2d": "0x2c73c937742c500000",
    "0x44dfba50b829becc5f4f14d1b04aab3320a295e5": "0x3635c9adc5dea00000",
    "0x44e2fdc679e6bee01e93ef4a3ab1bcce012abc7c": "0x163d194900c5458000",
    "0x44f62f2aaabc29ad3a6b04e1ff6f9ce452d1c140": "0x39992648a23c8a00000",
    "0x44fff37be01a3888d3b8b8e18880a7ddefeeead3": "0xe0c5bfc7dae9a8000",
    "0x4506fe19fa4b006baa3984529d8516db2b2b50ab": "0x6c6b935b8bbd400000",
    "0x451b3699475bed5d7905f8905aa3456f1ed788fc": "0x8ac7230489e8000000",
    "0x451b7070259bdba27100e36e23428a53dfe304e9": "0xb98bc829a6f90000",
    "0x45272b8f62e9f9fa8ce04420e1aea3eba9686eac": "0xd8d726b7177a800000",
    "0x452b64db8ef7d6df87c788639c2290be8482d575": "0x1b1ae4d6e2ef5000000",
    "0x453e359a3397944c5a275ab1a2f70a5e5a3f6989": "0xd02ab486cedc00000",
    "0x4549b15979255f7e65e99b0d5604db98dfcac8bf": "0xd8d726b7177a800000",
    "0x454b61b344c0ef965179238155f277c3829d0b38": "0x6c6b935b8bbd400000",
    "0x454f0141d721d33cbdc41018bd01119aa4784818": "0x14542ba12a337c00000",
    "0x45533390e340fe0de3b3cf5fb9fc8ea552e29e62": "0x4f2591f896a6500000",
    "0x455396a4bbd9bae8af9fb7c4d64d471db9c24505": "0x8ba52e6fc45e40000",
    "0x455b9296921a74d1fc41617f43b8303e6f3ed76c": "0xe3aeb5737240a00000",
    "0x455cb8ee39ffbc752331e5aefc588ef0ee593454": "0x3635463a780def8000",
    "0x456ae0aca48ebcfae166060250525f63965e760f": "0x1043561a8829300000",
    "0x456f8d746682b224679349064d1b368c7c05b176": "0xc893d09c8f51500000",
    "0x457029c469c4548d168cec3e65872e4428d42b67": "0x6c6b935b8bbd400000",
    "0x4571de672b9904bad8743692c21c4fdcea4c2e01": "0xd8d726b7177a800000",
    "0x45781bbe7714a1c8f73b1c747921df4f84278b70": "0x6c6b935b8bbd400000",
    "0x457bcef37dd3d60b2dd019e3fe61d46b3f1e7252": "0x1158e460913d00000",
    "0x458e3cc99e947844a18e6a42918fef7e7f5f5eb3": "0x7b53f79e888dac00000",
    "0x459393d63a063ef3721e16bd9fde45ee9dbd77fb": "0x6abad6a3c153050000",
    "0x45a570dcc2090c86a6b3ea29a60863dde41f13b5": "0xc9a95ee2986520000",
    "0x45a820a0672f17dc74a08112bc643fd1167736c3": "0xad6c43b2815ed8000",
    "0x45b47105fe42c4712dce6e2a21c05bffd5ea47a9": "0x6c6b935b8bbd400000",
    "0x45bb829652d8bfb58b8527f0ecb621c29e212ec3": "0x6c6b935b8bbd400000",
    "0x45c0d19f0b8e054f9e893836d5ecae7901af2812": "0x10f0cf064dd59200000",
    "0x45c4ecb4ee891ea984a7c5cefd8dfb00310b2850": "0x6b56051582a9700000",
    "0x45ca8d956608f9e00a2f9974028640888465668f": "0x6c6b935b8bbd400000",
    "0x45ca9862003b4e40a3171fb5cafa9028cac8de19": "0x2eb8eb1a172dcb80000",
    "0x45d1c9eedf7cab41a779057b79395f5428d80528": "0x6c6b935b8bbd400000",
    "0x45d4b54d37a8cf599821235f062fa9d170ede8a4": "0x1190673b5fda900000",
    "0x45db03bccfd6a5f4d0266b82a22a368792c77d83": "0x1b1ae4d6e2ef5000000",
    "0x45e3a93e72144ada860cbc56ff85145ada38c6da": "0x57473d05dabae80000",
    "0x45e68db8dbbaba5fc2cb337c62bcd0d61b059189": "0x6c6b935b8bbd400000",
    "0x45e68db94c7d0ab7ac41857a71d67147870f4e71": "0x54b40b1f852bda000000",
    "0x45f4fc60f08eaca10598f0336329801e3c92cb46": "0xad78ebc5ac6200000",
    "0x460d5355b2ceeb6e62107d81e51270b26bf45620": "0x6cb7e74867d5e60000",
    "0x46224f32f4ece5c8867090d4409d55e50b18432d": "0x14542ba12a337c00000",
    "0x4627c606842671abde8295ee5dd94c7f549534f4": "0xf895fbd8732f40000",
    "0x462b678b51b584f3ed7ada070b5cd99c0bf7b87f": "0x56bc75e2d63100000",
    "0x464d9c89cce484df000277198ed8075fa63572d1": "0x1158e460913d00000",
    "0x46504e6a215ac83bccf956befc82ab5a679371c8": "0x1c212805c2b4a50000",
    "0x4651dc420e08c3293b27d2497890eb50223ae2f4": "0x43c33c1937564800000",
    "0x46531e8b1bde097fdf849d6d119885608a008df7": "0xad78ebc5ac6200000",
    "0x466292f0e80d43a78774277590a9eb45961214f4": "0x34957444b840e80000",
    "0x4662a1765ee921842ddc88898d1dc8627597bd7e": "0x21e19e0c9bab2400000",
    "0x4665e47396c7db97eb2a03d90863d5d4ba319a94": "0x2086ac351052600000",
    "0x466fda6b9b58c5532750306a10a2a8c768103b07": "0xad6eedd17cf3b8000",
    "0x467124ae7f452f26b3d574f6088894fa5d1cfb3b": "0x925e06eec972b00000",
    "0x46722a36a01e841d03f780935e917d85d5a67abd": "0xcec76f0e71520000",
    "0x46779a5656ff00d73eac3ad0c38b6c853094fb40": "0xc8253c96c6af00000",
    "0x4677b04e0343a32131fd6abb39b1b6156bba3d5b": "0xad78ebc5ac6200000",
    "0x467d5988249a68614716659840ed0ae6f6f457bc": "0x1501a48cefdfde0000",
    "0x467e0ed54f3b76ae0636176e07420815a021736e": "0x6c6b935b8bbd400000",
    "0x467ea10445827ef1e502daf76b928a209e0d4032": "0x6c6b935b8bbd400000",
    "0x467fbf41441600757fe15830c8cd5f4ffbbbd560": "0x21e19e0c9bab2400000",
    "0x469358709332c82b887e20bcddd0220f8edba7d0": "0x3a9d5baa4abf1d00000",
    "0x4697baaf9ccb603fd30430689d435445e9c98bf5": "0xad201a6794ff80000",
    "0x46a30b8a808931217445c3f5a93e882c0345b426": "0xd8db5ebd7b2638000",
    "0x46a430a2d4a894a0d8aa3feac615361415c3f81f": "0x6c6b935b8bbd400000",
    "0x46aa501870677e7f0a504876b4e8801a0ad01c46": "0x2b5e3af16b18800000",
    "0x46bfc5b207eb2013e2e60f775fecd71810c5990c": "0x54069233bf7f780000",
    "0x46c1aa2244b9c8a957ca8fac431b0595a3b86824": "0xd8d726b7177a800000",
    "0x46d80631284203f6288ecd4e5758bb9d41d05dbe": "0x6c6b935b8bbd400000",
    "0x470ac5d1f3efe28f3802af925b571e63868b397d": "0x6c6b935b8bbd400000",
    "0x471010da492f4018833b088d9872901e06129174": "0x1b1ae4d6e2ef500000",
    "0x4712540265cbeec3847022c59f1b318d43400a9e": "0xbdbc41e0348b300000",
    "0x4714cfa4f46bd6bd70737d75878197e08f88e631": "0x27f3edfb34e6e400000",
    "0x472048cc609aeb242165eaaa8705850cf3125de0": "0x3635c9adc5dea00000",
    "0x47219229e8cd56659a65c2a943e2dd9a8f4bfd89": "0x52663ccab1e1c00000",
    "0x4737d042dc6ae73ec73ae2517acea2fdd96487c5": "0x3635c9adc5dea00000",
    "0x474158a1a9dc693c133f65e47b5c3ae2f773a86f": "0xada55474b81340000",
    "0x4745ab181a36aa8cbf2289d0c45165bc7ebe2381": "0x222c8eb3ff6640000",
    "0x475066f9ad26655196d5535327bbeb9b7929cb04": "0xa4cc799563c3800000",
    "0x4752218e54de423f86c0501933917aea08c8fed5": "0x43c33c1937564800000",
    "0x475a6193572d4a4e59d7be09cb960ddd8c530e2f": "0x242cf78cdf07ff8000",
    "0x47648bed01f3cd3249084e635d14daa9e7ec3c8a": "0xa844a7424d9c80000",
    "0x47688410ff25d654d72eb2bc06e4ad24f833b094": "0x8b28d61f3d3ac0000",
    "0x476b5599089a3fb6f29c6c72e49b2e4740ea808d": "0x97c9ce4cf6d5c00000",
    "0x47730f5f8ebf89ac72ef80e46c12195038ecdc49": "0xab4dcf399a3a600000",
    "0x477b24eee8839e4fd19d1250bd0b6645794a61ca": "0x1b1ae4d6e2ef5000000",
    "0x4781a10a4df5eebc82f4cfe107ba1d8a7640bd66": "0x61093d7c2c6d380000",
    "0x47885ababedf4d928e1c3c71d7ca40d563ed595f": "0x62a992e53a0af00000",
    "0x478dc09a1311377c093f9cc8ae74111f65f82f39": "0xd8d726b7177a800000",
    "0x478e524ef2a381d70c82588a93ca7a5fa9d51cbf": "0x35fa97226f8899700000",
    "0x479298a9de147e63a1c7d6d2fce089c7e64083bd": "0x21e19dd3c3c0d798000",
    "0x479abf2da4d58716fd973a0d13a75f530150260a": "0x1158e460913d00000",
    "0x47a281dff64167197855bf6e705eb9f2cef632ea": "0x3636c9796436740000",
    "0x47beb20f759100542aa93d41118b3211d664920e": "0x6c6b935b8bbd400000",
    "0x47c247f53b9fbeb17bba0703a00c009fdb0f6eae": "0x43c33c1937564800000",
    "0x47c7e5efb48b3aed4b7c6e824b435f357df4c723": "0xfc936392801c0000",
    "0x47cf9cdaf92fc999cc5efbb7203c61e4f1cdd4c3": "0x71f8a93d01e540000",
    "0x47d20e6ae4cad3f829eac07e5ac97b66fdd56cf5": "0x3635c9adc5dea00000",
    "0x47d792a756779aedf1343e8883a6619c6c281184": "0x6c6b935b8bbd400000",
    "0x47e25df8822538a8596b28c637896b4d143c351d": "0x110be9eb24b881500000",
    "0x47f4696bd462b20da09fb83ed2039818d77625b3": "0x813ca56906d340000",
    "0x47fef58584465248a0810d60463ee93e5a6ee8d3": "0xf58cd3e1269160000",
    "0x47ff6feb43212060bb1503d7a397fc08f4e70352": "0x6c6b935b8bbd400000",
    "0x47fff42c678551d141eb75a6ee398117df3e4a8d": "0x56beae51fd2d10000",
    "0x48010ef3b8e95e3f308f30a8cb7f4eb4bf60d965": "0x6c6b935b8bbd400000",
    "0x480af52076009ca73781b70e43b95916a62203ab": "0x321972f4083d878000",
    "0x480f31b989311e4124c6a7465f5a44094d36f9d0": "0x3790bb855137640000",
    "0x481115296ab7db52492ff7b647d63329fb5cbc6b": "0x368c8623a8b4d100000",
    "0x481e3a91bfdc2f1c8428a0119d03a41601417e1c": "0x3635c9adc5dea00000",
    "0x4828e4cbe34e1510afb72c2beeac8a4513eaebd9": "0xd5967be4fc3f100000",
    "0x482982ac1f1c6d1721feecd9b9c96cd949805055": "0x21e19e0c9bab2400000",
    "0x48302c311ef8e5dc664158dd583c81194d6e0d58": "0xb6676ce0bccb5c0000",
    "0x483ba99034e900e3aedf61499d3b2bce39beb7aa": "0x35659ef93f0fc40000",
    "0x48548b4ba62bcb2f0d34a88dc69a680e539cf046": "0x56cf1cbbb74320000",
    "0x4863849739265a63b0a2bf236a5913e6f959ce15": "0x52663ccab1e1c00000",
    "0x48659d8f8c9a2fd44f68daa55d23a608fbe500dc": "0x6c6b935b8bbd400000",
    "0x48669eb5a801d8b75fb6aa58c3451b7058c243bf": "0x68d42c138dab9f00000",
    "0x486a6c8583a84484e3df43a123837f8c7e2317d0": "0x1187c571ab80450000",
    "0x487adf7d70a6740f8d51cbdd68bb3f91c4a5ce68": "0x39fbae8d042dd0000",
    "0x487e108502b0b189ef9c8c6da4d0db6261eec6c0": "0x678a932062e4180000",
    "0x4888fb25cd50dbb9e048f41ca47d78b78a27c7d9": "0x3a9d5baa4abf1d00000",
    "0x489334c2b695c8ee0794bd864217fb9fd8f8b135": "0xfc936392801c0000",
    "0x48a30de1c919d3fd3180e97d5f2b2a9dbd964d2d": "0x2629f66e0c5300000",
    "0x48bf14d7b1fc84ebf3c96be12f7bce01aa69b03e": "0x68155a43676e00000",
    "0x48c2ee91a50756d8ce9abeeb7589d22c6fee5dfb": "0xae8e7a0bb575d00000",
    "0x48c5c6970b9161bb1c7b7adfed9cdede8a1ba864": "0xd8d726b7177a800000",
    "0x48d2434b7a7dbbff08223b6387b05da2e5093126": "0x3cfc82e37e9a7400000",
    "0x48d4f2468f963fd79a006198bb67895d2d5aa4d3": "0x4be4e7267b6ae00000",
    "0x48e0cbd67f18acdb7a6291e1254db32e0972737f": "0x56be03ca3e47d8000",
    "0x48f60a35484fe7792bcc8a7b6393d0dda1f6b717": "0xc328093e61ee400000",
    "0x48f883e567b436a27bb5a3124dbc84dec775a800": "0x29d76e869dcd800000",
    "0x490145afa8b54522bb21f352f06da5a788fa8f1d": "0x1f46c62901a03fb0000",
    "0x4909b31998ead414b8fb0e846bd5cbde393935be": "0xd8d726b7177a800000",
    "0x4912d902931676ff39fc34fe3c3cc8fb2182fa7a": "0x1158e460913d00000",
    "0x49136fe6e28b7453fcb16b6bbbe9aaacba8337fd": "0x6c6b935b8bbd400000",
    "0x491561db8b6fafb9007e62d050c282e92c4b6bc8": "0x65a4da25d3016c00000",
    "0x49185dd7c23632f46c759473ebae966008cd3598": "0xdc55fdb17647b0000",
    "0x492cb5f861b187f9df21cd4485bed90b50ffe22d": "0x1b19e50b44977c0000",
    "0x492de46aaf8f1d708d59d79af1d03ad2cb60902f": "0x6c6b935b8bbd400000",
    "0x492e70f04d18408cb41e25603730506b35a2876b": "0x222c8eb3ff6640000",
    "0x493a67fe23decc63b10dda75f3287695a81bd5ab": "0x2fb474098f67c00000",
    "0x493d48bda015a9bfcf1603936eab68024ce551e0": "0x138a388a43c000000",
    "0x494256e99b0f9cd6e5ebca3899863252900165c8": "0x2f6f10780d22cc00000",
    "0x494dec4d5ee88a2771a815f1ee7264942fb58b28": "0x6c6b935b8bbd400000",
    "0x495b641b1cdea362c3b4cbbd0f5cc50b1e176b9c": "0x3635c9adc5dea00000",
    "0x4968a2cedb457555a139295aea28776e54003c87": "0x2231aefc9a6628f0000",
    "0x496d365534530a5fc1577c0a5241cb88c4da7072": "0x61093d7c2c6d380000",
    "0x496e319592b341eaccd778dda7c8196d54cac775": "0x1f5718987664b480000",
    "0x496f5843f6d24cd98d255e4c23d1e1f023227545": "0x5f179fd4a6ee098000",
    "0x4970d3acf72b5b1f32a7003cf102c64ee0547941": "0x1da56a4b0835bf800000",
    "0x4977a7939d0939689455ce2639d0ee5a4cd910ed": "0x62a992e53a0af00000",
    "0x4979194ec9e97db9bee8343b7c77d9d7f3f1dc9f": "0x1158e460913d00000",
    "0x49793463e1681083d6abd6e725d5bba745dccde8": "0x1d98e94c4e471f0000",
    "0x4981c5ff66cc4e9680251fc4cd2ff907cb327865": "0x28a857425466f80000",
    "0x49897fe932bbb3154c95d3bce6d93b6d732904dd": "0xd8d726b7177a800000",
    "0x4989e1ab5e7cd00746b3938ef0f0d064a2025ba5": "0x6c6b935b8bbd400000",
    "0x498abdeb14c26b7b7234d70fceaef361a76dff72": "0xa2a15d09519be00000",
    "0x49a645e0667dfd7b32d075cc2467dd8c680907c4": "0x70601958fcb9c0000",
    "0x49b74e169265f01a89ec4c9072c5a4cd72e4e835": "0x368c8623a8b4d100000",
    "0x49bdbc7ba5abebb6389e91a3285220d3451bd253": "0x3635c9adc5dea00000",
    "0x49c941e0e5018726b7290fc473b471d41dae80d1": "0x1b1ae4d6e2ef500000",
    "0x49c9771fca19d5b9d245c891f8158fe49f47a062": "0x21e19e0c9bab2400000",
    "0x49cf1e54be363106b920729d2d0ba46f0867989a": "0xe873f44133cb00000",
    "0x49d2c28ee9bc545eaaf7fd14c27c4073b4bb5f1a": "0x4fe9b806b40daf0000",
    "0x49ddee902e1d0c99d1b11af3cc8a96f78e4dcf1a": "0xacea5e4c18c530000",
    "0x49f028395b5a86c9e07f7778630e4c2e3d373a77": "0x6a74a5038db918000",
    "0x4a192035e2619b24b0709d56590e9183ccf2c1d9": "0x21e19e0c9bab2400000",
    "0x4a4053b31d0ee5dbafb1d06bd7ac7ff3222c47d6": "0x4be4e7267b6ae00000",
    "0x4a430170152de5172633dd8262d107a0afd96a0f": "0xab4dcf399a3a600000",
    "0x4a47fc3e177f567a1e3893e000e36bba23520ab8": "0x6c6b935b8bbd400000",
    "0x4a52bad20357228faa1e996bed790c93674ba7d0": "0x487a9a304539440000",
    "0x4a53dcdb56ce4cdce9f82ec0eb13d67352e7c88b": "0xe3aeb5737240a00000",
    "0x4a5fae3b0372c230c125d6d470140337ab915656": "0x56bc75e2d631000000",
    "0x4a719061f5285495b37b9d7ef8a51b07d6e6acac": "0xad4c8316a0b0c0000",
    "0x4a73389298031b8816cca946421c199e18b343d6": "0x223868b879146f0000",
    "0x4a735d224792376d331367c093d31c8794341582": "0x66ffcbfd5e5a300000",
    "0x4a7494cce44855cc80582842be958a0d1c0072ee": "0x821ab0d44149800000",
    "0x4a75c3d4fa6fccbd5dd5a703c15379a1e783e9b7": "0x62a992e53a0af00000",
    "0x4a81abe4984c7c6bef63d69820e55743c61f201c": "0x36401004e9aa3470000",
    "0x4a82694fa29d9e213202a1a209285df6e745c209": "0xd8d726b7177a800000",
    "0x4a835c25824c47ecbfc79439bf3f5c3481aa75cd": "0x4be4e7267b6ae00000",
    "0x4a918032439159bb315b6725b6830dc83697739f": "0x12a32ef678334c0000",
    "0x4a97e8fcf4635ea7fc5e96ee51752ec388716b60": "0x1d9945ab2b03480000",
    "0x4a9a26fd0a8ba10f977da4f77c31908dab4a8016": "0x61093d7c2c6d380000",
    "0x4aa148c2c33401e66a2b586e6577c4b292d3f240": "0xbb860b285f7740000",
    "0x4aa693b122f314482a47b11cc77c68a497876162": "0x6acb3df27e1f880000",
    "0x4ab2d34f04834fbf7479649cab923d2c4725c553": "0xbed1d0263d9f000000",
    "0x4ac07673e42f64c1a25ec2fa2d86e5aa2b34e039": "0x6c6b935b8bbd400000",
    "0x4ac5acad000b8877214cb1ae00eac9a37d59a0fd": "0xd8d726b7177a800000",
    "0x4ac9905a4cb6ab1cfd62546ee5917300b87c4fde": "0x3708baed3d68900000",
    "0x4acfa9d94eda6625c9dfa5f9f4f5d107c4031fdf": "0x222c8eb3ff6640000",
    "0x4ad047fae67ef162fe68fedbc27d3b65caf10c36": "0x6acb3df27e1f880000",
    "0x4ad95d188d6464709add2555fb4d97fe1ebf311f": "0x12c1b6eed03d280000",
    "0x4adbf4aae0e3ef44f7dd4d8985cfaf096ec48e98": "0x821ab0d4414980000",
    "0x4ae2a04d3909ef454e544ccfd614bfefa71089ae": "0x1801159df1eef80000",
    "0x4ae93082e45187c26160e66792f57fad3551c73a": "0x4961520daff82280000",
    "0x4af0db077bb9ba5e443e21e148e59f379105c592": "0x2086ac351052600000",
    "0x4b0619d9d8aa313a9531ac7dbe04ca0d6a5ad1b6": "0x6c6b935b8bbd400000",
    "0x4b0bd8acfcbc53a6010b40d4d08ddd2d9d69622d": "0x243d4d18229ca20000",
    "0x4b19eb0c354bc1393960eb06063b83926f0d67b2": "0x19274b259f6540000",
    "0x4b29437c97b4a844be71cca3b648d4ca0fdd9ba4": "0x824719834cfac0000",
    "0x4b31bf41abc75c9ae2cd8f7f35163b6e2b745054": "0x14b550a013c7380000",
    "0x4b3a7cc3a7d7b00ed5282221a60259f25bf6538a": "0x3635c9adc5dea00000",
    "0x4b3aab335ebbfaa870cc4d605e7d2e74c668369f": "0xcb49b44ba602d800000",
    "0x4b3c7388cc76da3d62d40067dabccd7ef0433d23": "0x56cd55fc64dfe0000",
    "0x4b3dfbdb454be5279a3b8addfd0ed1cd37a9420d": "0x6c6b935b8bbd400000",
    "0x4b470f7ba030bc7cfcf338d4bf0432a91e2ea5ff": "0x6c6b935b8bbd400000",
    "0x4b53ae59c784b6b5c43616b9a0809558e684e10c": "0x410d586a20a4c00000",
    "0x4b58101f44f7e389e12d471d1635b71614fdd605": "0x8ac7230489e800000",
    "0x4b5cdb1e428c91dd7cb54a6aed4571da054bfe52": "0x4c53ecdc18a600000",
    "0x4b60a3e253bf38c8d5662010bb93a473c965c3e5": "0x50c5e761a444080000",
    "0x4b74f5e58e2edf76daf70151964a0b8f1de0663c": "0x1190ae4944ba120000",
    "0x4b762166dd1118e84369f804c75f9cd657bf730c": "0x1b1ae4d6e2ef500000",
    "0x4b792e29683eb586e394bb33526c6001b397999e": "0x2086ac351052600000",
    "0x4b904e934bd0cc8b20705f879e905b93ea0ccc30": "0x6c6b935b8bbd400000",
    "0x4b9206ba6b549a1a7f969e1d5dba867539d1fa67": "0x1ab2cf7c9f87e200000",
    "0x4b984ef26c576e815a2eaed2f5177f07dbb1c476": "0x54915956c409600000",
    "0x4b9e068fc4680976e61504912985fd5ce94bab0d": "0x243d4d18229ca20000",
    "0x4ba0d9e89601772b496847a2bb4340186787d265": "0x3635c9adc5dea00000",
    "0x4ba53ab549e2016dfa223c9ed5a38fad91288d07": "0x4be4e7267b6ae00000",
    "0x4ba8e0117fc0b6a3e56b24a3a58fe6cef442ff98": "0x131beb925ffd3200000",
    "0x4bac846af4169f1d95431b341d8800b22180af1a": "0x1158e460913d00000",
    "0x4bb6d86b8314c22d8d37ea516d0019f156aae12d": "0x3635c9adc5dea00000",
    "0x4bb9655cfb2a36ea7c637a7b859b4a3154e26ebe": "0x3635c9adc5dea000000",
    "0x4bbcbf38b3c90163a84b1cd2a93b58b2a3348d87": "0x1b1ae4d6e2ef5000000",
    "0x4bd6dd0cff23400e1730ba7b894504577d14e74a": "0x2ba0ccddd0df73b00000",
    "0x4be8628a8154874e048d80c142181022b180bcc1": "0x340aad21b3b700000",
    "0x4be90d412129d5a4d0424361d6649d4e47a62316": "0x3708baed3d68900000",
    "0x4bea288eea42c4955eb9faad2a9faf4783cbddac": "0x618be1663c4af490000",
    "0x4bf4479799ef82eea20943374f56a1bf54001e5e": "0xd5967be4fc3f100000",
    "0x4bf8bf1d35a231315764fc8001809a949294fc49": "0x39fbae8d042dd0000",
    "0x4bf8e26f4c2790da6533a2ac9abac3c69a199433": "0xad78ebc5ac6200000",
    "0x4c0aca508b3caf5ee028bc707dd1e800b838f453": "0xfc936392801c0000",
    "0x4c0b1515dfced7a13e13ee12c0f523ae504f032b": "0xa968163f0a57b400000",
    "0x4c13980c32dcf3920b78a4a7903312907c1b123f": "0x3410015faae0c0000",
    "0x4c1579af3312e4f88ae93c68e9449c2e9a68d9c4": "0x6c6b935b8bbd400000",
    "0x4c23b370fc992bb67cec06e26715b62f0b3a4ac3": "0x21e19e0c9bab2400000",
    "0x4c24b78baf2bafc7fcc69016426be973e20a50b2": "0xa2a15d09519be00000",
    "0x4c2f1afef7c5868c44832fc77cb03b55f89e6d6e": "0x43c33c1937564800000",
    "0x4c377bb03ab52c4cb79befa1dd114982924c4ae9": "0x631603ccd38dd70000",
    "0x4c3e95cc3957d252ce0bf0c87d5b4f2234672e70": "0x878678326eac900000",
    "0x4c423c76930d07f93c47a5cc4f615745c45a9d72": "0x56bc75e2d63100000",
    "0x4c45d4c9a725d11112bfcbca00bf31186ccaadb7": "0x15af1d78b58c400000",
    "0x4c4e6f13fb5e3f70c3760262a03e317982691d10": "0x56bc75e2d63100000",
    "0x4c5afe40f18ffc48d3a1aec41fc29de179f4d297": "0x6c6b935b8bbd400000",
    "0x4c5b3dc0e2b9360f91289b1fe13ce12c0fbda3e1": "0x6c6b935b8bbd400000",
    "0x4c666b86f1c5ee8ca41285f5bde4f79052081406": "0x1b1ae4d6e2ef500000",
    "0x4c696be99f3a690440c3436a59a7d7e937d6ba0d": "0xbb9125542263900000",
    "0x4c6a248fc97d705def495ca20759169ef0d36471": "0x29331e6558f0e00000",
    "0x4c6a9dc2cab10abb2e7c137006f08fecb5b779e1": "0x1b0d04202f47ec0000",
    "0x4c6b93a3bec16349540cbfcae96c9621d6645010": "0x6c6b935b8bbd400000",
    "0x4c759813ad1386bed27ffae9e4815e3630cca312": "0x6c6b935b8bbd400000",
    "0x4c760cd9e195ee4f2d6bce2500ff96da7c43ee91": "0xcb49b44ba602d800000",
    "0x4c767b65fd91161f4fbdcc6a69e2f6ad711bb918": "0x270801d946c9400000",
    "0x4c7e2e2b77ad0cd6f44acb2861f0fb8b28750ef9": "0x1158e460913d00000",
    "0x4c85ed362f24f6b9f04cdfccd022ae535147cbb9": "0x5150ae84a8cdf00000",
    "0x4c935bb250778b3c4c7f7e07fc251fa630314aab": "0x5150ae84a8cdf00000",
    "0x4c997992036c5b433ac33d25a8ea1dc3d4e4e6d8": "0x1953b3d4ab1680000",
    "0x4c99dae96481e807c1f99f8b7fbde29b7547c5bf": "0x821ab0d4414980000",
    "0x4c9a862ad115d6c8274ed0b944bdd6a5500510a7": "0x56bc75e2d63100000",
    "0x4ca783b556e5bf53aa13c8116613d65782c9b642": "0x5561840b4ad83c00000",
    "0x4ca7b717d9bc8793b04e051a8d23e1640f5ba5e3": "0x43b514549ecf620000",
    "0x4ca8db4a5efefc80f4cd9bbcccb03265931332b6": "0xad78ebc5ac6200000",
    "0x4cac91fb83a147d2f76c3267984b910a79933348": "0x75792a8abdef7c0000",
    "0x4cadf573ce4ceec78b8e1b21b0ed78eb113b2c0e": "0x6c6b935b8bbd400000",
    "0x4cb5c6cd713ca447b848ae2f56b761ca14d7ad57": "0xe7eeba3410b740000",
    "0x4cc22c9bc9ad05d875a397dbe847ed221c920c67": "0x6c6b935b8bbd400000",
    "0x4cd0b0a6436362595ceade052ebc9b929fb6c6c0": "0x6c6b935b8bbd400000",
    "0x4cda41dd533991290794e22ae324143e309b3d3d": "0x821ab0d44149800000",
    "0x4cee901b4ac8b156c5e2f8a6f1bef572a7dceb7e": "0x3635c9adc5dea00000",
    "0x4cefbe2398e47d52e78db4334c8b697675f193ae": "0xd96fce90cfabcc0000",
    "0x4cf5537b85842f89cfee359eae500fc449d2118f": "0x3635c9adc5dea00000",
    "0x4d08471d68007aff2ae279bc5e3fe4156fbbe3de": "0x878678326eac9000000",
    "0x4d200110124008d56f76981256420c946a6ff45c": "0xad6eedd17cf3b8000",
    "0x4d24b7ac47d2f27de90974ba3de5ead203544bcd": "0x56bc75e2d63100000",
    "0x4d29fc523a2c1629532121da9998e9b5ab9d1b45": "0xdb44e049bb2c0000",
    "0x4d38d90f83f4515c03cc78326a154d358bd882b7": "0xa076407d3f7440000",
    "0x4d4cf5807429615e30cdface1e5aae4dad3055e6": "0x2086ac351052600000",
    "0x4d57e716876c0c95ef5eaebd35c8f41b069b6bfe": "0x6c6b935b8bbd400000",
    "0x4d67f2ab8599fef5fc413999aa01fd7fce70b43d": "0x21e19e0c9bab2400000",
    "0x4d6e8fe109ccd2158e4db114132fe75fecc8be5b": "0x15b3557f1937f8000",
    "0x4d71a6eb3d7f327e1834278e280b039eddd31c2f": "0x14542ba12a337c00000",
    "0x4d7cfaa84cb33106800a8c802fb8aa463896c599": "0x61093d7c2c6d380000",
    "0x4d801093c19ca9b8f342e33cc9c77bbd4c8312cf": "0x12b3e7fb95cda48000",
    "0x4d828894752f6f25175daf2177094487954b6f9f": "0x4f212bc2c49c838000",
    "0x4d82d7700c123bb919419bbaf046799c6b0e2c66": "0x43c33c1937564800000",
    "0x4d836d9d3b0e2cbd4de050596faa490cffb60d5d": "0x1043561a8829300000",
    "0x4d8697af0fbf2ca36e8768f4af22133570685a60": "0x1158e460913d00000",
    "0x4d9279962029a8bd45639737e98b511eff074c21": "0x487a9a304539440000",
    "0x4d93696fa24859f5d2939aebfa54b4b51ae1dccc": "0x10910d4cdc9f60000",
    "0x4d9c77d0750c5e6fbc247f2fd79274686cb353d6": "0x1158e460913d00000",
    "0x4da5edc688b0cb62e1403d1700d9dcb99ffe3fd3": "0x6c6b935b8bbd400000",
    "0x4da8030769844bc34186b85cd4c7348849ff49e9": "0x21e19e0c9bab2400000",
    "0x4db1c43a0f834d7d0478b8960767ec1ac44c9aeb": "0x2f5181305627370000",
    "0x4db21284bcd4f787a7556500d6d7d8f36623cf35": "0x6928374f77a3630000",
    "0x4dc3da13b2b4afd44f5d0d3189f444d4ddf91b1b": "0x6c6b935b8bbd400000",
    "0x4dc4bf5e7589c47b28378d7503cf96488061dbbd": "0x5f68e8131ecf800000",
    "0x4dc9d5bb4b19cecd94f19ec25d200ea72f25d7ed": "0x6c6b935b8bbd400000",
    "0x4dcd11815818ae29b85d01367349a8a7fb12d06b": "0x1ac4286100191f00000",
    "0x4dcf62a3de3f061db91498fd61060f1f6398ff73": "0x6c6acc67d7b1d40000",
    "0x4dd131c74a068a37c90aded4f309c2409f6478d3": "0x15af39e4aab2740000",
    "0x4ddda7586b2237b053a7f3289cf460dc57d37a09": "0x21e19e0c9bab2400000",
    "0x4de3fe34a6fbf634c051997f47cc7f48791f5824": "0x6c5db2a4d815dc0000",
    "0x4df140ba796585dd5489315bca4bba680adbb818": "0x90f534608a72880000",
    "0x4e020779b5ddd3df228a00cb48c2fc979da6ae38": "0x6c6b935b8bbd400000",
    "0x4e0bd32473c4c51bf25654def69f797c6b29a232": "0x56c95de8e8ca1d0000",
    "0x4e2225a1bb59bc88a2316674d333b9b0afca6655": "0x8670e9ec6598c0000",
    "0x4e2310191ead8d3bc6489873a5f0c2ec6b87e1be": "0x3635c9adc5dea00000",
    "0x4e232d53b3e6be8f895361d31c34d4762b12c82e": "0x5f68e8131ecf800000",
    "0x4e2bfa4a466f82671b800eee426ad00c071ba170": "0xd8d726b7177a800000",
    "0x4e3edad4864dab64cae4c5417a76774053dc6432": "0x2008fb478cbfa98000",
    "0x4e4318f5e13e824a54edfe30a7ed4f26cd3da504": "0x6c6b935b8bbd400000",
    "0x4e5b77f9066159e615933f2dda7477fa4e47d648": "0xad78ebc5ac6200000",
    "0x4e6600806289454acda330a2a3556010dfacade6": "0x14542ba12a337c00000",
    "0x4e73cf2379f124860f73d6d91bf59acc5cfc845b": "0x22ca3587cf4eb0000",
    "0x4e7aa67e12183ef9d7468ea28ad239c2eef71b76": "0x10afc1ade3b4ed40000",
    "0x4e7b54474d01fefd388dfcd53b9f662624418a05": "0x1b1ae4d6e2ef5000000",
    "0x4e892e8081bf36e488fddb3b2630f3f1e8da30d2": "0x28aba30752451fc0000",
    "0x4e8a6d63489ccc10a57f885f96eb04ecbb546024": "0x3eae3130ecc96900000",
    "0x4e8e47ae3b1ef50c9d54a38e14208c1abd3603c2": "0x7928db1276660c0000",
    "0x4e90ccb13258acaa9f4febc0a34292f95991e230": "0xdb44e049bb2c0000",
    "0x4ea56e1112641c038d0565a9c296c463afefc17e": "0x9ddc1e3b901180000",
    "0x4ea70f04313fae65c3ff224a055c3d2dab28dddf": "0x43c30fb0884a96c0000",
    "0x4eb1454b573805c8aca37edec7149a41f61202f4": "0x1043561a8829300000",
    "0x4eb87ba8788eba0df87e5b9bd50a8e45368091c1": "0x1158e460913d00000",
    "0x4ebc5629f9a6a66b2cf3363ac4895c0348e8bf87": "0x3637096c4bcc690000",
    "0x4ec768295eeabafc42958415e22be216cde77618": "0x33b1dbc39c5480000",
    "0x4ecc19948dd9cd87b4c7201ab48e758f28e7cc76": "0x1b1dab61d3aa640000",
    "0x4ed14d81b60b23fb25054d8925dfa573dcae6168": "0x126e72a69a50d00000",
    "0x4ee13c0d41200b46d19dee5c4bcec71d82bb8e38": "0x1abee13ccbeefaf8000",
    "0x4eead40aad8c73ef08fc84bc0a92c9092f6a36bf": "0x1731790534df20000",
    "0x4eebe80cb6f3ae5904f6f4b28d907f907189fcab": "0x6c6acc67d7b1d40000",
    "0x4eebf1205d0cc20cee6c7f8ff3115f56d48fba26": "0x10d3aa536e2940000",
    "0x4ef1c214633ad9c0703b4e2374a2e33e3e429291": "0x487a9a304539440000",
    "0x4efcd9c79fb4334ca6247b0a33bd9cc33208e272": "0x487a9a304539440000",
    "0x4f06246b8d4bd29661f43e93762201d286935ab1": "0x105394ffc4636110000",
    "0x4f152b2fb8659d43776ebb1e81673aa84169be96": "0x6c6b935b8bbd400000",
    "0x4f177f9d56953ded71a5611f393322c30279895c": "0xd55ef90a2da180000",
    "0x4f1a2da54a4c6da19d142412e56e815741db2325": "0x56bc75e2d63100000",
    "0x4f23b6b817ffa5c664acdad79bb7b726d30af0f9": "0x5f68e8131ecf800000",
    "0x4f26690c992b7a312ab12e1385d94acd58288e7b": "0x2f6f10780d22cc00000",
    "0x4f2b47e2775a1fa7178dad92985a5bbe493ba6d6": "0xad78ebc5ac6200000",
    "0x4f3a4854911145ea01c644044bdb2e5a960a982f": "0xd8d726b7177a800000",
    "0x4f3f2c673069ac97c2023607152981f5cd6063a0": "0x2086ac351052600000",
    "0x4f4a9be10cd5d3fb5de48c17be296f895690645b": "0x878678326eac9000000",
    "0x4f52ad6170d25b2a2e850eadbb52413ff2303e7f": "0xa4cc799563c3800000",
    "0x4f5801b1eb30b712d8a0575a9a71ff965d4f34eb": "0x1043561a8829300000",
    "0x4f5df5b94357de948604c51b7893cddf6076baad": "0xcbd47b6eaa8cc00000",
    "0x4f64a85e8e9a40498c0c75fceb0337fb49083e5e": "0x3635c9adc5dea00000",
    "0x4f67396d2553f998785f704e07a639197dd1948d": "0x104472521ba7380000",
    "0x4f6d4737d7a940382487264886697cf7637f8015": "0x5a87e7d7f5f6580000",
    "0x4f7330096f79ed264ee0127f5d30d2f73c52b3d8": "0x1b1a7a420ba00d0000",
    "0x4f767bc8794aef9a0a38fea5c81f14694ff21a13": "0x1bc433f23f83140000",
    "0x4f85bc1fc5cbc9c001e8f1372e07505370d8c71f": "0x32f51edbaaa3300000",
    "0x4f88dfd01091a45a9e2676021e64286cd36b8d34": "0x3635c9adc5dea00000",
    "0x4f8972838f70c903c9b6c6c46162e99d6216d451": "0xf9e89a0f2c56c80000",
    "0x4f8ae80238e60008557075ab6afe0a7f2e74d729": "0x56bc75e2d63100000",
    "0x4f8e8d274fb22a3fd36a47fe72980471544b3434": "0xad78ebc5ac6200000",
    "0x4f9ce2af9b8c5e42c6808a3870ec576f313545d1": "0x21e19e0c9bab2400000",
    "0x4fa3f32ef4086448b344d5f0a9890d1ce4d617c3": "0x5150ae84a8cdf00000",
    "0x4fa554ab955c249217386a4d3263bbf72895434e": "0x1154e53217ddb0000",
    "0x4fa983bb5e3073a8edb557effeb4f9fb1d60ef86": "0x56b9af57e575ec0000",
    "0x4faf90b76ecfb9631bf9022176032d8b2c207009": "0x36363b5d9a77700000",
    "0x4fc46c396e674869ad9481638f0013630c87caac": "0x3635c9adc5dea00000",
    "0x4fcc19ea9f4c57dcbce893193cfb166aa914edc5": "0x17b8baa7f19546a0000",
    "0x4fce8429ba49caa0369d1e494db57e89eab2ad39": "0x2a5a058fc295ed000000",
    "0x4fdac1aa517007e0089430b3316a1badd12c01c7": "0x1b1ae4d6e2ef500000",
    "0x4fe56ab3bae1b0a44433458333c4b05a248f8241": "0x762d93d1dd6f900000",
    "0x4feb846be43041fd6b34202897943e3f21cb7f04": "0x482fe260cbca90000",
    "0x4fee50c5f988206b09a573469fb1d0b42ebb6dce": "0x6cee06ddbe15ec0000",
    "0x4ff676e27f681a982d8fd9d20e648b3dce05e945": "0x97c9ce4cf6d5c00000",
    "0x4ff67fb87f6efba9279930cfbd1b7a343c79fade": "0x15af1d78b58c400000",
    "0x5006fe4c22173980f00c74342b39cd231c653129": "0x6c6b935b8bbd400000",
    "0x500c16352e901d48ba8d04e2c767121772790b02": "0x1a3a6824973098000",
    "0x500c902958f6421594d1b6ded712490d52ed6c44": "0x6acb3df27e1f880000",
    "0x500e34cde5bd9e2b71bb92d7cf55eee188d5fa0c": "0x121ea68c114e5100000",
    "0x5032e4bcf7932b49fdba377b6f1499636513cfc3": "0x56bc75e2d63100000",
    "0x50378af7ef54043f892ab7ce97d647793511b108": "0x11164759ffb320000",
    "0x503bdbd8bc421c32a443032deb2e3e4cd5ba8b4e": "0x6c6b935b8bbd400000",
    "0x504666ce8931175e11a5ed11c1dcaa06e57f4e66": "0x27f3edfb34e6e400000",
    "0x50584d9206a46ce15c301117ee28f15c30e60e75": "0xb9f65d00f63c0000",
    "0x505a33a18634dd4800693c67f48a1d693d4833f8": "0x18921b79941dcd00000",
    "0x505e4f7c275588c533a20ebd2ac13b409bbdea3c": "0xf43fc2c04ee00000",
    "0x5062e5134c612f12694dbd0e131d4ce197d1b6a4": "0x3635c9adc5dea00000",
    "0x506411fd79003480f6f2b6aac26b7ba792f094b2": "0x1b1ae4d6e2ef500000",
    "0x5067f4549afbfe884c59cbc12b96934923d45db0": "0x3635c9adc5dea00000",
    "0x50763add868fd7361178342fc055eaa2b95f6846": "0x39f9046e0898f0000",
    "0x508cf19119db70aa86454253da764a2cb1b2be1a": "0x3635c9adc5dea00000",
    "0x509982f56237ee458951047e0a2230f804e2e895": "0x3b4ad496106b7f00000",
    "0x509a20bc48e72be1cdaf9569c711e8648d957334": "0x6c6b935b8bbd400000",
    "0x509c8668036d143fb8ae70b11995631f3dfcad87": "0x3635c9adc5dea00000",
    "0x50ad187ab21167c2b6e78be0153f44504a07945e": "0x56cd55fc64dfe0000",
    "0x50b9fef0a1329b02d16506255f5a2db71ec92d1f": "0x47da821564085c0000",
    "0x50bb67c8b8d8bd0f63c4760904f2d333f400aace": "0x6c6b935b8bbd400000",
    "0x50bef2756248f9a7a380f91b051ba3be28a649ed": "0x6c69f73e29134e0000",
    "0x50ca86b5eb1d01874df8e5f34945d49c6c1ab848": "0x3635c9adc5dea00000",
    "0x50cd97e9378b5cf18f173963236c9951ef7438a5": "0x4be4e7267b6ae00000",
    "0x50dcbc27bcad984093a212a9b4178eabe9017561": "0x7e362790b5ca40000",
    "0x50e13023bd9ca96ad4c53fdfd410cb6b1f420bdf": "0xad78ebc5ac6200000",
    "0x50e1c8ec98415bef442618708799437b86e6c205": "0x14542ba12a337c00000",
    "0x50f8fa4bb9e2677c990a4ee8ce70dd1523251e4f": "0x1693d23164f6b0000",
    "0x50fb36c27107ee2ca9a3236e2746cca19ace6b49": "0x6c6b935b8bbd400000",
    "0x50fef296955588caae74c62ec32a23a454e09ab8": "0x411dffabc507380000",
    "0x5102a4a42077e11c58df4773e3ac944623a66d9f": "0x6c7015fd52ed408000",
    "0x51039377eed0c573f986c5e8a95fb99a59e9330f": "0x6acb3df27e1f880000",
    "0x5103bc09933e9921fd53dc536f11f05d0d47107d": "0xd8d726b7177a800000",
    "0x5104ecc0e330dd1f81b58ac9dbb1a9fbf88a3c85": "0x152d02c7e14af6800000",
    "0x510d8159cc945768c7450790ba073ec0d9f89e30": "0x8ac7230489e8000000",
    "0x510eda5601499a0d5e1a006bfffd833672f2e267": "0x6c6b935b8bbd400000",
    "0x51126446ab3d8032557e8eba65597d75fadc815c": "0x1174a5cdf88bc80000",
    "0x5118557d600d05c2fcbf3806ffbd93d02025d730": "0x267d3ab6423f5800000",
    "0x511e0efb04ac4e3ff2e6550e498295bfcd56ffd5": "0x243d4d18229ca20000",
    "0x512116817ba9aaf843d1507c65a5ea640a7b9eec": "0x2b5e3af16b1880000",
    "0x5126460d692c71c9af6f05574d93998368a23799": "0x2d1a51c7e00500000",
    "0x51277fe7c81eebd252a03df69a6b9f326e272207": "0x3402e79cab44c8000",
    "0x51296f5044270d17707646129c86aad1645eadc1": "0x487c72b310d4648000",
    "0x512b91bbfaa9e581ef683fc90d9db22a8f49f48b": "0x41a522386d9b95c00000",
    "0x5135fb8757600cf474546252f74dc0746d06262c": "0x6c6b935b8bbd400000",
    "0x514632efbd642c04de6ca342315d40dd90a2dba6": "0x90f534608a72880000",
    "0x514b7512c9ae5ea63cbf11715b63f21e18d296c1": "0x6c6acc67d7b1d40000",
    "0x5153a0c3c8912881bf1c3501bf64b45649e48222": "0xd8d726b7177a800000",
    "0x515651d6db4faf9ecd103a921bbbbe6ae970fdd4": "0x43c33c1937564800000",
    "0x515f30bc90cdf4577ee47d65d785fbe2e837c6bc": "0x2271b5e018ba0580000",
    "0x5160ed612e1b48e73f3fc15bc4321b8f23b8a24b": "0x1e826b422865d80000",
    "0x5161fd49e847f67455f1c8bb7abb36e985260d03": "0x410d586a20a4c00000",
    "0x516954025fca2608f47da81c215eedfd844a09ff": "0x14b550a013c7380000",
    "0x5169c60aee4ceed1849ab36d664cff97061e8ea8": "0xa2a15d09519be00000",
    "0x517c75430de401c341032686112790f46d4d369e": "0x150894e849b3900000",
    "0x517cd7608e5d0d83a26b717f3603dac2277dc3a4": "0x6c6b935b8bbd400000",
    "0x51865db148881951f51251710e82b9be0d7eadb2": "0x6c6b935b8bbd400000",
    "0x51891b2ccdd2f5a44b2a8bc49a5d9bca6477251c": "0x10ce1d3d8cb3180000",
    "0x518cef27b10582b6d14f69483ddaa0dd3c87bb5c": "0x2086ac351052600000",
    "0x51a6d627f66a8923d88d6094c4715380d3057cb6": "0x3e73d27a35941e0000",
    "0x51a8c2163602a32ee24cf4aa97fd9ea414516941": "0x368f7e6b8672c0000",
    "0x51b4758e9e1450e7af4268c3c7b1e7bd6f5c7550": "0x3635c9adc5dea00000",
    "0x51ca8bd4dc644fac47af675563d5804a0da21eeb": "0x2ab7b260ff3fd00000",
    "0x51d24bc3736f88dd63b7222026886630b6eb878d": "0x6c6b935b8bbd400000",
    "0x51d78b178d707e396e8710965c4f41b1a1d9179d": "0x5fee222041e340000",
    "0x51e32f14f4ca5e287cdac057a7795ea9e0439953": "0x1b1ae4d6e2ef500000",
    "0x51e43fe0d25c782860af81ea89dd793c13f0cbb1": "0x340aad21b3b700000",
    "0x51e7b55c2f9820eed73884361b5066a59b6f45c6": "0x6c6b935b8bbd400000",
    "0x51ea1c0934e3d04022ed9c95a087a150ef705e81": "0x1547081e7224d200000",
    "0x51ee0cca3bcb10cd3e983722ced8493d926c0866": "0x36356633ebd8ea0000",
    "0x51f4663ab44ff79345f427a0f6f8a6c8a53ff234": "0x43c33c1937564800000",
    "0x51f55ef47e6456a418ab32b9221ed27dba6608ee": "0xe3aeb5737240a00000",
    "0x51f9c432a4e59ac86282d6adab4c2eb8919160eb": "0x703b5b89c3a6e7400000",
    "0x520f66a0e2657ff0ac4195f2f064cf2fa4b24250": "0x22b1c8c1227a00000",
    "0x52102354a6aca95d8a2e86d5debda6de69346076": "0x6c6b935b8bbd400000",
    "0x5213f459e078ad3ab95a0920239fcf1633dc04ca": "0x8cf2187c2afb188000",
    "0x5215183b8f80a9bc03d26ce91207832a0d39e620": "0x3635c9adc5dea00000",
    "0x52214378b54004056a7cc08c891327798ac6b248": "0x337fe5feaf2d1800000",
    "0x522323aad71dbc96d85af90f084b99c3f09decb7": "0x14542ba12a337c00000",
    "0x523e140dc811b186dee5d6c88bf68e90b8e096fd": "0x6c6b935b8bbd400000",
    "0x523f6d64690fdacd942853591bb0ff20d3656d95": "0x62a992e53a0af00000",
    "0x524fb210522c5e23bb67dfbf8c26aa616da49955": "0x363562a66d34238000",
    "0x5255dc69155a45b970c604d30047e2f530690e7f": "0x1158e460913d00000",
    "0x5260dc51ee07bddaababb9ee744b393c7f4793a6": "0x1d8665fa5fa4c0000",
    "0x5267f4d41292f370863c90d793296903843625c7": "0x4be4e7267b6ae00000",
    "0x526bb533b76e20c8ee1ebf123f1e9ff4148e40be": "0xaadec983fcff40000",
    "0x526cb09ce3ada3672eec1deb46205be89a4b563e": "0x85ca615bf9c0100000",
    "0x52738c90d860e04cb12f498d96fdb5bf36fc340e": "0x1a055690d9db80000",
    "0x527a8ca1268633a6c939c5de1b929aee92aeac8d": "0x30ca024f987b900000",
    "0x528101ce46b720a2214dcdae6618a53177ffa377": "0x1b9612b9dc01ae0000",
    "0x5281733473e00d87f11e9955e589b59f4ac28e7a": "0x8bd62ff4eec559200000",
    "0x5298ab182a19359ffcecafd7d1b5fa212dede6dd": "0x1158e460913d00000",
    "0x529aa002c6962a3a8545027fd8b05f22b5bf9564": "0x5a87e7d7f5f6580000",
    "0x529e824fa072582b4032683ac7eecc1c04b4cac1": "0x6c6b935b8bbd400000",
    "0x52a5e4de4393eeccf0581ac11b52c683c76ea15d": "0x43c30fb0884a96c0000",
    "0x52b4257cf41b6e28878d50d57b99914ffa89873a": "0xd50dc9aa2c41770000",
    "0x52b8a9592634f7300b7c5c59a3345b835f01b95c": "0x6c6b935b8bbd400000",
    "0x52bdd9af5978850bc24110718b3723759b437e59": "0x5dc892aa1131c80000",
    "0x52cd20403ba7eda6bc307a3d63b5911b817c1263": "0x1158e460913d00000",
    "0x52d380511df19d5ec2807bbcb676581b67fd37a3": "0xb9f65d00f63c0000",
    "0x52e1731350f983cc2c4189842fde0613fad50ce1": "0x277017338a30ae00000",
    "0x52e46783329a769301b175009d346768f4c87ee4": "0x6c6b935b8bbd400000",
    "0x52f058d46147e9006d29bf2c09304ad1cddd6e15": "0x5150ae84a8cdf00000",
    "0x52f15423323c24f19ae2ab673717229d3f747d9b": "0x37a034cbe8e3f38000",
    "0x52f8b509fee1a874ab6f9d87367fbeaf15ac137f": "0x3635c9adc5dea00000",
    "0x52fb46ac5d00c3518b2c3a1c177d442f8165555f": "0x5150ae84a8cdf00000",
    "0x530077c9f7b907ff9cec0c77a41a70e9029add4a": "0x6c6b935b8bbd400000",
    "0x530319db0a8f93e5bb7d4dbf4816314fbed8361b": "0x6c6b935b8bbd400000",
    "0x53047dc8ac9083d90672e8b3473c100ccd278323": "0x22b1c8c1227a00000",
    "0x530b61e42f39426d2408d40852b9e34ab5ebebc5": "0xe7eeba3410b740000",
    "0x530ffac3bc3412e2ec0ea47b7981c770f5bb2f35": "0x73f75d1a085ba0000",
    "0x5317ecb023052ca7f5652be2fa854cfe4563df4d": "0x1b1ab319f5ec750000",
    "0x53194d8afa3e883502767edbc30586af33b114d3": "0x6c6b935b8bbd400000",
    "0x532a7da0a5ad7407468d3be8e07e69c7dd64e861": "0x1b1ae4d6e2ef500000",
    "0x532d32b00f305bcc24dcef56817d622f34fb2c24": "0x6194049f30f7200000",
    "0x533444584082eba654e1ad30e149735c6f7ba922": "0x5dc892aa1131c80000",
    "0x5338ef70eac9dd9af5a0503b5efad1039e67e725": "0x90f534608a72880000",
    "0x53396f4a26c2b4604496306c5442e7fcba272e36": "0x43f2f08d40e5afc0000",
    "0x533a73a4a2228eee05c4ffd718bbf3f9c1b129a7": "0x14542ba12a337c00000",
    "0x533c06928f19d0a956cc28866bf6c8d8f4191a94": "0xfd8c14338e6300000",
    "0x534065361cb854fac42bfb5c9fcde0604ac919da": "0x6c6b935b8bbd400000",
    "0x53437fecf34ab9d435f4deb8ca181519e2592035": "0xa31062beeed700000",
    "0x535201a0a1d73422801f55ded4dfaee4fbaa6e3b": "0x226211f7915428000",
    "0x53608105ce4b9e11f86bf497ffca3b78967b5f96": "0x43c33c1937564800000",
    "0x536e4d8029b73f5579dca33e70b24eba89e11d7e": "0x6acb3df27e1f880000",
    "0x53700d53254d430f22781a4a76a463933b5d6b08": "0x6acb3df27e1f880000",
    "0x537f9d4d31ef70839d84b0d9cdb72b9afedbdf35": "0xed2b525841adfc00000",
    "0x5381448503c0c702542b1de7cc5fb5f6ab1cf6a5": "0x1b1ae4d6e2ef5000000",
    "0x53942e7949d6788bb780a7e8a0792781b1614b84": "0x35deb46684f10c80000",
    "0x5395a4455d95d178b4532aa4725b193ffe512961": "0x3635c9adc5dea00000",
    "0x53989ed330563fd57dfec9bd343c3760b0799390": "0x150894e849b39000000",
    "0x53a244672895480f4a2b1cdf7da5e5a242ec4dbc": "0x3635c9adc5dea00000",
    "0x53a714f99fa00fef758e23a2e746326dad247ca7": "0x50c5e761a444080000",
    "0x53af32c22fef99803f178cf90b802fb571c61cb9": "0xd255d112e103a00000",
    "0x53c0bb7fc88ea422d2ef7e540e2d8f28b1bb8183": "0x1158e460913d00000",
    "0x53c5fe0119e1e848640cee30adea96940f2a5d8b": "0x49ada5fa8c10c880000",
    "0x53c9eca40973f63bb5927be0bc6a8a8be1951f74": "0x6c6b935b8bbd400000",
    "0x53ce88e66c5af2f29bbd8f592a56a3d15f206c32": "0x7a28c31cc36040000",
    "0x53cec6c88092f756efe56f7db11228a2db45b122": "0xd8d726b7177a800000",
    "0x53e35b12231f19c3fd774c88fec8cbeedf1408b2": "0x1bc16d674ec8000000",
    "0x53e4d9696dcb3f4d7b3f70dcaa4eecb71782ff5c": "0xad78ebc5ac6200000",
    "0x53faf165be031ec18330d9fce5bd1281a1af08db": "0x796e3ea3f8ab00000",
    "0x540a1819bd7c35861e791804e5fbb3bc97c9abb1": "0x4ed7dac64230200000",
    "0x540c072802014ef0d561345aec481e8e11cb3570": "0x1b1ae4d6e2ef5000000",
    "0x540cf23dd95c4d558a279d778d2b3735b3164191": "0x21e19e0c9bab2400000",
    "0x541060fc58c750c40512f83369c0a63340c122b6": "0x6acb3df27e1f880000",
    "0x5413c97ffa4a6e2a7bba8961dc9fce8530a787d7": "0x3635c9adc5dea00000",
    "0x541db20a80cf3b17f1621f1b3ff79b882f50def3": "0x3635c9adc5dea00000",
    "0x542e8096bafb88162606002e8c8a3ed19814aeac": "0x6c6b935b8bbd400000",
    "0x54310b3aa88703a725dfa57de6e646935164802c": "0x678a932062e4180000",
    "0x5431b1d18751b98fc9e2888ac7759f1535a2db47": "0x6c6b935b8bbd400000",
    "0x5431ca427e6165a644bae326bd09750a178c650d": "0x6c6b935b8bbd400000",
    "0x5435c6c1793317d32ce13bba4c4ffeb973b78adc": "0xd8e6b1c1285ef0000",
    "0x543629c95cdef428ad37d453ca9538a9f90900ac": "0x92896529baddc880000",
    "0x54391b4d176d476cea164e5fb535c69700cb2535": "0x56cd55fc64dfe0000",
    "0x543a8c0efb8bcd15c543e2a6a4f807597631adef": "0x13f80e7e14f2d440000",
    "0x543f8c674e2462d8d5daa0e80195a8708e11a29e": "0x37758833b3a7a0000",
    "0x544b5b351d1bc82e9297439948cf4861dac9ae11": "0x4a89f54ef0121c00000",
    "0x544dda421dc1eb73bb24e3e56a248013b87c0f44": "0x6acb3df27e1f880000",
    "0x54575c3114751e3c631971da6a2a02fd3ffbfcc8": "0x692ae8897081d00000",
    "0x545bb070e781172eb1608af7fc2895d6cb87197e": "0x79a5c17ec748900000",
    "0x5475d7f174bdb1f789017c7c1705989646079d49": "0x1fd933494aa5fe00000",
    "0x548558d08cfcb101181dac1eb6094b4e1a896fa6": "0x6c6acc67d7b1d40000",
    "0x54939ff08921b467cf2946751d856378296c63ed": "0x3635c9adc5dea00000",
    "0x549b47649cfad993e4064d2636a4baa0623305cc": "0x209d922f5259c50000",
    "0x549d51af29f724c967f59423b85b2681e7b15136": "0xcbd47b6eaa8cc00000",
    "0x54a1370116fe22099e015d07cd2669dd291cc9d1": "0x1158e460913d00000",
    "0x54a62bf9233e146ffec3876e45f20ee8414adeba": "0x21e19e0c9bab2400000",
    "0x54b4429b182f0377be7e626939c5db6440f75d7a": "0x6acb3df27e1f880000",
    "0x54bcb8e7f73cda3d73f4d38b2d0847e600ba0df8": "0x3a70415882df180000",
    "0x54c93e03a9b2e8e4c3672835a9ee76f9615bc14e": "0x10d3aa536e2940000",
    "0x54ce88275956def5f9458e3b95decacd484021a0": "0x6c6b935b8bbd400000",
    "0x54db5e06b4815d31cb56a8719ba33af2d73e7252": "0x24521e2a3017b80000",
    "0x54e01283cc8b384538dd646770b357c960d6cacd": "0x10f0cf064dd59200000",
    "0x54ec7300b81ac84333ed1b033cd5d7a33972e234": "0xad78ebc5ac6200000",
    "0x54febcce20fe7a9098a755bd90988602a48c089e": "0x22b1c8c1227a000000",
    "0x550aadae1221b07afea39fba2ed62e05e5b7b5f9": "0x1158e460913d00000",
    "0x550c306f81ef5d9580c06cb1ab201b95c748a691": "0x2417d4c470bf140000",
    "0x551999ddd205563327b9b530785acff9bc73a4ba": "0x14542ba12a337c00000",
    "0x551e7784778ef8e048e495df49f2614f84a4f1dc": "0x2086ac351052600000",
    "0x5529830a61c1f13c197e550beddfd6bd195c9d02": "0x21e19e0c9bab2400000",
    "0x552987f0651b915b2e1e5328c121960d4bdd6af4": "0x61093d7c2c6d380000",
    "0x553b6b1c57050e88cf0c31067b8d4cd1ff80cb09": "0x15af1d78b58c400000",
    "0x553f37d92466550e9fd775ae74362df030179132": "0x6c6b935b8bbd400000",
    "0x554336ee4ea155f9f24f87bca9ca72e253e12cd2": "0x56bc75e2d63100000",
    "0x5543dd6d169eec8a213bbf7a8af9ffd15d4ff759": "0xfc936392801c0000",
    "0x5547fdb4ae11953e01292b7807fa9223d0e4606a": "0x55d117dcb1d260000",
    "0x5552f4b3ed3e1da79a2f78bb13e8ae5a68a9df3b": "0x3635c9adc5dea00000",
    "0x555ca9f05cc134ab54ae9bea1c3ff87aa85198ca": "0x56bc75e2d63100000",
    "0x555d8d3ce1798aca902754f164b8be2a02329c6c": "0x21e19e0c9bab2400000",
    "0x555df19390c16d01298772bae8bc3a1152199cbd": "0xad78ebc5ac6200000",
    "0x555ebe84daa42ba256ea789105cec4b693f12f18": "0x56bc75e2d63100000",
    "0x557f5e65e0da33998219ad4e99570545b2a9d511": "0x2559cbb985842400000",
    "0x558360206883dd1b6d4a59639e5629d0f0c675d0": "0x6c6b935b8bbd400000",
    "0x5584423050e3c2051f0bbd8f44bd6dbc27ecb62c": "0xa2a15d09519be00000",
    "0x55852943492970f8d629a15366cdda06a94f4513": "0x6c6b935b8bbd400000",
    "0x55866486ec168f79dbe0e1abb18864d98991ae2c": "0xdf6eb0b2d3ca0000",
    "0x558c54649a8a6e94722bd6d21d14714f71780534": "0x6c6b935b8bbd400000",
    "0x559194304f14b1b93afe444f0624e053c23a0009": "0x15af1d78b58c400000",
    "0x5593c9d4b664730fd93ca60151c25c2eaed93c3b": "0xad78ebc5ac6200000",
    "0x559706c332d20779c45f8a6d046a699159b74921": "0x149b442e85a3cf8000",
    "0x5598b3a79a48f32b1f5fc915b87b645d805d1afe": "0x1b1ae4d6e2ef500000",
    "0x55a3df57b7aaec16a162fd5316f35bec082821cf": "0x6acb3df27e1f880000",
    "0x55a4cac0cb8b582d9fef38c5c9fff9bd53093d1f": "0x6acb3df27e1f880000",
    "0x55a61b109480b5b2c4fcfdef92d90584160c0d35": "0x26c564d2b53f60000",
    "0x55aa5d313ebb084da0e7801091e29e92c5dec3aa": "0x6c6b935b8bbd400000",
    "0x55ab99b0e0e55d7bb874b7cfe834de631c97ec23": "0x37e98ce36899e40000",
    "0x55af092f94ba6a79918b0cf939eab3f01b3f51c7": "0x820d5e39576120000",
    "0x55c564664166a1edf3913e0169f1cd451fdb5d0c": "0x8217ea49508e6c0000",
    "0x55ca6abe79ea2497f46fdbb830346010fe469cbe": "0x1369fb96128ac480000",
    "0x55caff4bba04d220c9a5d2018672ec85e31ef83e": "0x6c6b935b8bbd400000",
    "0x55d057bcc04bd0f4af9642513aa5090bb3ff93fe": "0x3bfe452c8edd4c0000",
    "0x55d42eb495bf46a634997b5f2ea362814918e2b0": "0x5c0d265b5b2a80000",
    "0x55da9dcdca61cbfe1f133c7bcefc867b9c8122f9": "0x2fb474098f67c00000",
    "0x55e220876262c218af4f56784798c7e55da09e91": "0x73d99c15645d30000",
    "0x55fd08d18064bd202c0ec3d2cce0ce0b9d169c4d": "0x6acb3df27e1f880000",
    "0x5600730a55f6b20ebd24811faa3de96d1662abab": "0x65ea3db75546600000",
    "0x5603241eb8f08f721e348c9d9ad92f48e390aa24": "0xad78ebc5ac6200000",
    "0x560536794a9e2b0049d10233c41adc5f418a264a": "0x3635c9adc5dea00000",
    "0x5607590059a9fec1881149a44b36949aef85d560": "0x6c6b935b8bbd400000",
    "0x560becdf52b71f3d8827d927610f1a980f33716f": "0x17474d705f56d08000",
    "0x560da37e956d862f81a75fd580a7135c1b246352": "0x21e19e0c9bab2400000",
    "0x560fc08d079f047ed8d7df75551aa53501f57013": "0x19bff2ff57968c00000",
    "0x561be9299b3e6b3e63b79b09169d1a948ae6db01": "0x1b1ae4d6e2ef500000",
    "0x562020e3ed792d2f1835fe5f55417d5111460c6a": "0x43c33c1937564800000",
    "0x5620f46d1451c2353d6243a5d4b427130be2d407": "0x340aad21b3b700000",
    "0x562105e82b099735de49f62692cc87cd38a8edcd": "0x14542ba12a337c00000",
    "0x562a8dcbbeeef7b360685d27303bd69e094accf6": "0x21e19e0c9bab2400000",
    "0x562bced38ab2ab6c080f3b0541b8456e70824b3f": "0x22ca3587cf4eb00000",
    "0x562be95aba17c5371fe2ba828799b1f55d2177d6": "0x816d37e87b9d1e00000",
    "0x562f16d79abfcec3943e34b20f05f97bdfcda605": "0xd8d726b7177a800000",
    "0x56373daab46316fd7e1576c61e6affcb6559ddd7": "0xbac715d146c9e0000",
    "0x56397638bb3cebf1f62062794b5eb942f916171d": "0x6c6b935b8bbd400000",
    "0x563a03ab9c56b600f6d25b660c21e16335517a75": "0x3635c9adc5dea00000",
    "0x563cb8803c1d32a25b27b64114852bd04d9c20cd": "0xb149ead0ad9d80000",
    "0x56586391040c57eec6f5affd8cd4abde10b50acc": "0xd8d726b7177a800000",
    "0x566c10d638e8b88b47d6e6a414497afdd00600d4": "0x56b394263a40c0000",
    "0x566c28e34c3808d9766fe8421ebf4f2b1c4f7d77": "0x6acb3df27e1f880000",
    "0x568df31856699bb5acfc1fe1d680df9960ca4359": "0x4acf5552f3b2498000",
    "0x5691dd2f6745f20e22d2e1d1b955aa2903d65656": "0x6ac5c62d9486070000",
    "0x56a1d60d40f57f308eebf087dee3b37f1e7c2cba": "0x3edcaec82d06f80000",
    "0x56ac20d63bd803595cec036da7ed1dc66e0a9e07": "0x3772a53ccdc658000",
    "0x56b6c23dd2ec90b4728f3bb2e764c3c50c85f144": "0x3635c9adc5dea00000",
    "0x56df05bad46c3f00ae476ecf017bb8c877383ff1": "0xab15daaef70400000",
    "0x56ee197f4bbf9f1b0662e41c2bbd9aa1f799e846": "0x3635c9adc5dea00000",
    "0x56f493a3d108aaa2d18d98922f8efe1662cfb73d": "0x6d8121a194d1100000",
    "0x56fc1a7bad4047237ce116146296238e078f93ad": "0x9a63f08ea63880000",
    "0x56febf9e1003af15b1bd4907ec089a4a1b91d268": "0xad78ebc5ac6200000",
    "0x5717cc9301511d4a81b9f583148beed3d3cc8309": "0x8cf23f909c0fa00000",
    "0x5717f2d8f18ffcc0e5fe247d3a4219037c3a649c": "0xd8bb6549b02bb80000",
    "0x571950ea2c90c1427d939d61b4f2de4cf1cfbfb0": "0x1158e460913d00000",
    "0x5719f49b720da68856f4b9e708f25645bdbc4b41": "0x22b1c8c1227a000000",
    "0x572ac1aba0de23ae41a7cae1dc0842d8abfc103b": "0x678a932062e4180000",
    "0x572dd8cd3fe399d1d0ec281231b7cefc20b9e4bb": "0x233c8fe42703e800000",
    "0x574921838cc77d6c98b17d903a3ae0ee0da95bd0": "0xb5328178ad0f2a00000",
    "0x574ad9355390e4889ef42acd138b2a27e78c00ae": "0x5467b732a913340000",
    "0x574de1b3f38d915846ae3718564a5ada20c2f3ed": "0xd8d726b7177a800000",
    "0x575c00c2818210c28555a0ff29010289d3f82309": "0x21e19e0c9bab2400000",
    "0x5773b6026721a1dd04b7828cd62b591bfb34534c": "0x5b7ac4553de7ae00000",
    "0x5777441c83e03f0be8dd340bde636850847c620b": "0x21e19e0c9bab2400000",
    "0x5778ffdc9b94c5a59e224eb965b6de90f222d170": "0x122d7ff36603fc0000",
    "0x577aeee8d4bc08fc97ab156ed57fb970925366be": "0x120df1147258bf0000",
    "0x577b2d073c590c50306f5b1195a4b2ba9ecda625": "0x1440bdd49515f00000",
    "0x577bfe64e3a1e3800e94db1c6c184d8dc8aafc66": "0x5134ed17417f280000",
    "0x57825aeb09076caa477887fbc9ae37e8b27cc962": "0x56bc75e2d63100000",
    "0x57883010b4ac857fedac03eab2551723a8447ffb": "0x3635c9adc5dea00000",
    "0x5789d01db12c816ac268e9af19dc0dd6d99f15df": "0xad78ebc5ac6200000",
    "0x5792814f59a33a1843faa01baa089eb02ffb5cf1": "0x1b1ab319f5ec750000",
    "0x5793abe6f1533311fd51536891783b3f9625ef1c": "0x2cd8a656f23fda0000",
    "0x5797b60fd2894ab3c2f4aede86daf2e788d745ad": "0x14542ba12a337c00000",
    "0x57a852fdb9b1405bf53ccf9508f83299d3206c52": "0x6c6b935b8bbd400000",
    "0x57b23d6a1adc06c652a779c6a7fb6b95b9fead66": "0xad78ebc5ac6200000",
    "0x57bc20e2d62b3d19663cdb4c309d5b4f2fc2db8f": "0x56bc75e2d63100000",
    "0x57bddf078834009c89d88e6282759dc45335b470": "0x74717cfb6883100000",
    "0x57beea716cbd81700a73d67f9ff039529c2d9025": "0xad78ebc5ac6200000",
    "0x57d032a43d164e71aa2ef3ffd8491b0a4ef1ea5b": "0x6c6b935b8bbd400000",
    "0x57d3df804f2beee6ef53ab94cb3ee9cf524a18d3": "0x1556616b9606670000",
    "0x57d5fd0e3d3049330ffcdcd020456917657ba2da": "0x6bf20195f554d40000",
    "0x57dd9471cbfa262709f5f486bcb774c5f527b8f8": "0xaadec983fcff40000",
    "0x57df23bebdc65eb75feb9cb2fad1c073692b2baf": "0xd8d726b7177a800000",
    "0x5800cd8130839e94495d2d8415a8ea2c90e0c5cb": "0xad78ebc5ac6200000",
    "0x5803e68b34da121aef08b602badbafb4d12481ca": "0x3cfc82e37e9a7400000",
    "0x5816c2687777b6d7d2a2432d59a41fa059e3a406": "0x1c4fe43adb0a5e900000",
    "0x581a3af297efa4436a29af0072929abf9826f58b": "0x6c6b935b8bbd400000",
    "0x581b9fd6eae372f3501f42eb9619eec820b78a84": "0x42be2c00ca53b8d8000",
    "0x581bdf1bb276dbdd86aedcdb397a01efc0e00c5b": "0x3635c9adc5dea00000",
    "0x581f34b523e5b41c09c87c298e299cbc0e29d066": "0x3d5833aafd39758000",
    "0x5824a7e22838277134308c5f4b50dab65e43bb31": "0x14542ba12a337c00000",
    "0x582b70669c97aab7d68148d8d4e90411e2810d56": "0x36356633ebd8ea0000",
    "0x582e7cc46f1d7b4e6e9d95868bfd370573178f4c": "0x6c6b935b8bbd400000",
    "0x583e83ba55e67e13e0e76f8392d873cd21fbf798": "0x1158e460913d00000",
    "0x5869fb867d71f1387f863b698d09fdfb87c49b5c": "0xc6bbf858b316080000",
    "0x587d6849b168f6c3332b7abae7eb6c42c37f48bf": "0x2fb474098f67c00000",
    "0x5887dc6a33dfed5ac1edefe35ef91a216231ac96": "0xd8d726b7177a80000",
    "0x588ed990a2aff44a94105d58c305257735c868ac": "0x368c8623a8b4d100000",
    "0x58ae2ddc5f4c8ada97e06c0086171767c423f5d7": "0x57473d05dabae80000",
    "0x58aed6674affd9f64233272a578dd9386b99c263": "0xb8507a820728200000",
    "0x58b808a65b51e6338969afb95ec70735e451d526": "0x8784bc1b9837a380000",
    "0x58b8ae8f63ef35ed0762f0b6233d4ac14e64b64d": "0x6c6b935b8bbd400000",
    "0x58ba1569650e5bbbb21d35d3e175c0d6b0c651a9": "0x1b1ae4d6e2ef500000",
    "0x58c555bc293cdb16c6362ed97ae9550b92ea180e": "0x1158e460913d00000",
    "0x58c650ced40bb65641b8e8a924a039def46854df": "0x100bd33fb98ba0000",
    "0x58c90754d2f20a1cb1dd330625e04b45fa619d5c": "0x6c6b935b8bbd400000",
    "0x58e2f11223fc8237f69d99c6289c148c0604f742": "0x5150ae84a8cdf000000",
    "0x58e554af3d87629620da61d538c7f5b4b54c4afe": "0x46509d694534728000",
    "0x58e5c9e344c806650dacfc904d33edba5107b0de": "0x10910d4cdc9f60000",
    "0x58e661d0ba73d6cf24099a5562b808f7b3673b68": "0x6c6b935b8bbd400000",
    "0x58f05b262560503ca761c61890a4035f4c737280": "0x1b1ae4d6e2ef5000000",
    "0x58fb947364e7695765361ebb1e801ffb8b95e6d0": "0xad78ebc5ac6200000",
    "0x590181d445007bd0875aaf061c8d51153900836a": "0x6c6b935b8bbd400000",
    "0x5902e44af769a87246a21e079c08bf36b06efeb3": "0x3635c9adc5dea00000",
    "0x590acbda37290c0d3ec84fc2000d7697f9a4b15d": "0x1b1ae4d6e2ef500000",
    "0x590ccb5911cf78f6f622f535c474375f4a12cfcf": "0x43c33c1937564800000",
    "0x5910106debd291a1cd80b0fbbb8d8d9e93a7cc1e": "0x6c6b935b8bbd400000",
    "0x59161749fedcf1c721f2202d13ade2abcf460b3d": "0x6c6b935b8bbd400000",
    "0x591bef3171d1c5957717a4e98d17eb142c214e56": "0x43c33c1937564800000",
    "0x59203cc37599b648312a7cc9e06dacb589a9ae6a": "0x80f7971b6400e8000",
    "0x59268171b833e0aa13c54b52ccc0422e4fa03aeb": "0xa2a15d09519be00000",
    "0x592777261e3bd852c48eca95b3a44c5b7f2d422c": "0x43c33c1937564800000",
    "0x593044670faeff00a55b5ae051eb7be870b11694": "0x73f75d1a085ba0000",
    "0x593b45a1864ac5c7e8f0caaeba0d873cd5d113b2": "0x14542ba12a337c00000",
    "0x593c48935beaff0fde19b04d309cd530a28e52ce": "0xd8d726b7177a800000",
    "0x59473cd300fffae240f5785626c65dfec792b9af": "0x1158e460913d00000",
    "0x5948bc3650ed519bf891a572679fd992f8780c57": "0xaadec983fcff40000",
    "0x594a76f06935388dde5e234696a0668bc20d2ddc": "0x97c9ce4cf6d5c00000",
    "0x59569a21d28fba4bda37753405a081f2063da150": "0xd8d726b7177a800000",
    "0x5956b28ec7890b76fc061a1feb52d82ae81fb635": "0x6c6b935b8bbd400000",
    "0x595e23d788a2d4bb85a15df7136d264a635511b3": "0xd5967be4fc3f100000",
    "0x597038ff91a0900cbbab488af483c790e6ec00a0": "0x21e19e0c9bab2400000",
    "0x5970fb1b144dd751e4ce2eca7caa20e363dc4da3": "0x21e19e0c9bab2400000",
    "0x5975b9528f23af1f0e2ec08ac8ebaa786a2cb8e0": "0x12bf50503ae3038000",
    "0x5975d78d974ee5bb9e4d4ca2ae77c84b9c3b4b82": "0x4a4491bd6dcd280000",
    "0x5985c59a449dfc5da787d8244e746c6d70caa55f": "0x56bc75e2d63100000",
    "0x598aaabae9ed833d7bc222e91fcaa0647b77580b": "0x6194049f30f7200000",
    "0x5992624c54cdec60a5ae938033af8be0c50cbb0a": "0xc454e0f8870f2b0000",
    "0x599728a78618d1a17b9e34e0fed8e857d5c40622": "0x2f6f10780d22cc00000",
    "0x5997ffefb3c1d9d10f1ae2ac8ac3c8e2d2292783": "0x3635c9adc5dea00000",
    "0x59a087b9351ca42f58f36e021927a22988284f38": "0x100bd33fb98ba0000",
    "0x59a12df2e3ef857aceff9306b309f6a500f70134": "0x3635c9adc5dea00000",
    "0x59b96deb8784885d8d3b4a166143cc435d2555a1": "0x487a9a304539440000",
    "0x59b9e733cba4be00429b4bd9dfa64732053a7d55": "0x1158e460913d00000",
    "0x59c5d06b170ee4d26eb0a0eb46cb7d90c1c91019": "0x21e19e0c9bab2400000",
    "0x59c7f785c93160e5807ed34e5e534bc6188647a7": "0x22b1c8c1227a000000",
    "0x59d139e2e40c7b97239d23dfaca33858f602d22b": "0x6c6b935b8bbd400000",
    "0x59f6247b0d582aaa25e5114765e4bf3c774f43c2": "0x2b5e3af16b1880000",
    "0x59fe00696dbd87b7976b29d1156c8842a2e17914": "0x6c6b935b8bbd400000",
    "0x5a0d609aae2332b137ab3b2f26615a808f37e433": "0x21e19e0c9bab24000000",
    "0x5a192b964afd80773e5f5eda6a56f14e25e0c6f3": "0x1b1ae4d6e2ef500000",
    "0x5a1a336962d6e0c63031cc83c6a5c6a6f4478ecb": "0x3635c9adc5dea00000",
    "0x5a1d2d2d1d520304b6208849570437eb3091bb9f": "0x6acb3df27e1f880000",
    "0x5a267331facb262daaecd9dd63a9700c5f5259df": "0x56bc75e2d63100000",
    "0x5a285755391e914e58025faa48cc685f4fd4f5b8": "0x581767ba6189c400000",
    "0x5a2916b8d2e8cc12e207ab464d433e2370d823d9": "0x6c6b935b8bbd400000",
    "0x5a2b1c853aeb28c45539af76a00ac2d8a8242896": "0x15af1d78b58c40000",
    "0x5a2daab25c31a61a92a4c82c9925a1d2ef58585e": "0xc380da9c7950c0000",
    "0x5a30feac37ac9f72d7b4af0f2bc73952c74fd5c3": "0x6c6b935b8bbd400000",
    "0x5a5468fa5ca226c7532ecf06e1bc1c45225d7ec9": "0x678a932062e4180000",
    "0x5a565285374a49eedd504c957d510874d00455bc": "0x56bc75e2d63100000",
    "0x5a5ee8e9bb0e8ab2fecb4b33d29478be50bbd44b": "0x2a1129d09367200000",
    "0x5a5f8508da0ebebb90be9033bd4d9e274105ae00": "0x16a6502f15a1e540000",
    "0x5a6071bcebfcba4ab57f4db96fc7a68bece2ba5b": "0x6c6b935b8bbd400000",
    "0x5a60c924162873fc7ea4da7f972e350167376031": "0x487f277a885798000",
    "0x5a6686b0f17e07edfc59b759c77d5bef164d3879": "0x50c5e761a444080000",
    "0x5a70106f20d63f875265e48e0d35f00e17d02bc9": "0x1158e460913d00000",
    "0x5a74ba62e7c81a3474e27d894fed33dd24ad95fe": "0xfc936392801c0000",
    "0x5a7735007d70b06844da9901cdfadb11a2582c2f": "0x14542ba12a337c00000",
    "0x5a82f96cd4b7e2d93d10f3185dc8f43d4b75aa69": "0x6c633fbab98c040000",
    "0x5a87f034e6f68f4e74ffe60c64819436036cf7d7": "0x1158e460913d00000",
    "0x5a891155f50e42074374c739baadf7df2651153a": "0x102da6fd0f73a3c0000",
    "0x5a9c8b69fc614d69564999b00dcb42db67f97e90": "0xb9e615abad3a778000",
    "0x5aaf1c31254a6e005fba7f5ab0ec79d7fc2b630e": "0x14061b9d77a5e980000",
    "0x5ab1a5615348001c7c775dc75748669b8be4de14": "0x256a72fb29e69c0000",
    "0x5abfec25f74cd88437631a7731906932776356f9": "0x9d83cc0dfa11177ff8000",
    "0x5ac2908b0f398c0df5bac2cb13ca7314fba8fa3d": "0xad4c8316a0b0c0000",
    "0x5ac99ad7816ae9020ff8adf79fa9869b7cea6601": "0x472698b413b43200000",
    "0x5ad12c5ed4fa827e2150cfa0d68c0aa37b1769b8": "0x2b5e3af16b18800000",
    "0x5ad5e420755613886f35aa56ac403eebdfe4b0d0": "0x10f0cf064dd592000000",
    "0x5ade77fd81c25c0af713b10702768c1eb2f975e7": "0x1158e460913d00000",
    "0x5ae64e853ba0a51282cb8db52e41615e7c9f733f": "0x6c6b935b8bbd400000",
    "0x5aed0e6cfe95f9d680c76472a81a2b680a7f93e2": "0xaadec983fcff40000",
    "0x5aef16a226dd68071f2483e1da42598319f69b2c": "0x6c6b935b8bbd400000",
    "0x5af46a25ac09cb73616b53b14fb42ff0a51cddb2": "0xd8d726b7177a800000",
    "0x5af7c072b2c5acd71c76addcce535cf7f8f93585": "0x1158e460913d00000",
    "0x5afda9405c8e9736514574da928de67456010918": "0x145b8b0239a46920000",
    "0x5b06d1e6930c1054692b79e3dbe6ecce53966420": "0xb227f63be813c0000",
    "0x5b25cae86dcafa2a60e7723631fc5fa49c1ad87d": "0x870c58510e85200000",
    "0x5b287c7e734299e727626f93fb1187a60d5057fe": "0x57cd934a914cb0000",
    "0x5b290c01967c812e4dc4c90b174c1b4015bae71e": "0x820eb348d52b90000",
    "0x5b2b64e9c058e382a8b299224eecaa16e09c8d92": "0x8ba52e6fc45e40000",
    "0x5b2e2f1618552eab0db98add55637c2951f1fb19": "0x28a857425466f800000",
    "0x5b30608c678e1ac464a8994c3b33e5cdf3497112": "0x15af1d78b58c400000",
    "0x5b333696e04cca1692e71986579c920d6b2916f9": "0x1b1ae4d6e2ef500000",
    "0x5b430d779696a3653fc60e74fbcbacf6b9c2baf1": "0x2f6f10780d22cc00000",
    "0x5b437365ae3a9a2ff97c68e6f90a7620188c7d19": "0x6c8754c8f30c080000",
    "0x5b49afcd75447838f6e7ceda8d21777d4fc1c3c0": "0xd8d726b7177a800000",
    "0x5b4c0c60f10ed2894bdb42d9dd1d210587810a0d": "0x1b1ae4d6e2ef500000",
    "0x5b4ea16db6809b0352d4b6e81c3913f76a51bb32": "0x15af1d78b58c400000",
    "0x5b5be0d8c67276baabd8edb30d48ea75640b8b29": "0x2cb1f55fb7be100000",
    "0x5b5d517029321562111b43086d0b043591109a70": "0x8cf23f909c0fa00000",
    "0x5b5d8c8eed6c85ac215661de026676823faa0a0c": "0x43c33c1937564800000",
    "0x5b6d55f6712967405c659129f4b1de09acf2cb7b": "0xe7eeba3410b740000",
    "0x5b70c49cc98b3df3fbe2b1597f5c1b6347a388b7": "0x34957444b840e80000",
    "0x5b736eb18353629bde9676dadd165034ce5ecc68": "0x6acb3df27e1f880000",
    "0x5b759fa110a31c88469f54d44ba303d57dd3e10f": "0x5b46dd2f0ea3b80000",
    "0x5b7784caea01799ca30227827667ce207c5cbc76": "0x6c6b935b8bbd400000",
    "0x5b78eca27fbdea6f26befba8972b295e7814364b": "0x6c6b935b8bbd400000",
    "0x5b800bfd1b3ed4a57d875aed26d42f1a7708d72a": "0x15a82d1d5bb88e00000",
    "0x5b85e60e2af0544f2f01c64e2032900ebd38a3c7": "0x6c6b935b8bbd400000",
    "0x5ba2c6c35dfaec296826591904d544464aeabd5e": "0x1158e460913d00000",
    "0x5baf6d749620803e8348af3710e5c4fbf20fc894": "0x10f4002615dfe900000",
    "0x5bc1f95507b1018642e45cd9c0e22733b9b1a326": "0x56bc75e2d63100000",
    "0x5bd23547477f6d09d7b2a005c5ee650c510c56d7": "0x21e19e0c9bab2400000",
    "0x5bd24aac3612b20c609eb46779bf95698407c57c": "0x6acb3df27e1f880000",
    "0x5bd6862d517d4de4559d4eec0a06cad05e2f946e": "0xad78ebc5ac6200000",
    "0x5be045512a026e3f1cebfd5a7ec0cfc36f2dc16b": "0x68155a43676e00000",
    "0x5bf9f2226e5aeacf1d80ae0a59c6e38038bc8db5": "0x14542ba12a337c00000",
    "0x5bfafe97b1dd1d712be86d41df79895345875a87": "0x1b1ae4d6e2ef500000",
    "0x5c0f2e51378f6b0d7bab617331580b6e39ad3ca5": "0x2086ac3510526000000",
    "0x5c29f9e9a523c1f8669448b55c48cbd47c25e610": "0x3446a0dad04cb00000",
    "0x5c308bac4857d33baea074f3956d3621d9fa28e1": "0x10f08eda8e555098000",
    "0x5c312a56c784b122099b764d059c21ece95e84ca": "0x52663ccab1e1c0000",
    "0x5c31996dcac015f9be985b611f468730ef244d90": "0xad78ebc5ac6200000",
    "0x5c323457e187761a8276e359b7b7af3f3b6e3df6": "0x21e19e0c9bab2400000",
    "0x5c3c1c645b917543113b3e6c1c054da1fe742b9a": "0x2b5e3af16b18800000",
    "0x5c3d19441d196cb443662020fcad7fbb79b29e78": "0xc673ce3c40160000",
    "0x5c3f567faff7bad1b5120022e8cbcaa82b4917b3": "0x6c6b935b8bbd400000",
    "0x5c4368918ace6409c79eca80cdaae4391d2b624e": "0xd8d726b7177a800000",
    "0x5c464197791c8a3da3c925436f277ab13bf2faa2": "0x1b1ae4d6e2ef5000000",
    "0x5c4881165cb42bb82e97396c8ef44adbf173fb99": "0x5fee222041e340000",
    "0x5c4892907a0720df6fd3413e63ff767d6b398023": "0x2cb009fd3b5790f8000",
    "0x5c4f24e994ed8f850ea7818f471c8fac3bcf0452": "0x5d80688d9e31c00000",
    "0x5c5419565c3aad4e714e0739328e3521c98f05cc": "0x1c9f78d2893e400000",
    "0x5c6136e218de0a61a137b2b3962d2a6112b809d7": "0xff3dbb65ff4868000",
    "0x5c61ab79b408dd3229f662593705d72f1e147bb8": "0x4d0243d3498cd840000",
    "0x5c6d041da7af4487b9dc48e8e1f60766d0a56dbc": "0x4f070a003e9c740000",
    "0x5c6f36af90ab1a656c6ec8c7d521512762bba3e1": "0x6c68ccd09b022c0000",
    "0x5c7b9ec7a2438d1e3c7698b545b9c3fd77b7cd55": "0x3635c9adc5dea00000",
    "0x5c936f3b9d22c403db5e730ff177d74eef42dbbf": "0x410d586a20a4c0000",
    "0x5cb731160d2e8965670bde925d9de5510935347d": "0x22b1c8c1227a00000",
    "0x5cb953a0e42f5030812226217fffc3ce230457e4": "0x56bc75e2d63100000",
    "0x5cbd8daf27ddf704cdd0d909a789ba36ed4f37b2": "0xb9f65d00f63c0000",
    "0x5cc4cba621f220637742057f6055b80dffd77e13": "0x878477b7d253b660000",
    "0x5cc7d3066d45d27621f78bb4b339473e442a860f": "0x21e1899f0377aea0000",
    "0x5cccf1508bfd35c20530aa642500c10dee65eaed": "0x2e141ea081ca080000",
    "0x5cce72d068c7c3f55b1d2819545e77317cae8240": "0x692ae8897081d00000",
    "0x5cd0e475b54421bdfc0c12ea8e082bd7a5af0a6a": "0x332ca1b67940c0000",
    "0x5cd588a14ec648ccf64729f9167aa7bf8be6eb3d": "0x3635c9adc5dea00000",
    "0x5cd8af60de65f24dc3ce5730ba92653022dc5963": "0x61093d7c2c6d380000",
    "0x5cdc4708f14f40dcc15a795f7dc8cb0b7faa9e6e": "0x1d1c5f3eda20c40000",
    "0x5ce0b6862cce9162e87e0849e387cb5df4f9118c": "0x5a87e7d7f5f6580000",
    "0x5ce2e7ceaaa18af0f8aafa7fbad74cc89e3cd436": "0x43c33c1937564800000",
    "0x5ce44068b8f4a3fe799e6a8311dbfdeda29dee0e": "0x6c6b935b8bbd400000",
    "0x5cebe30b2a95f4aefda665651dc0cf7ef5758199": "0xfc936392801c0000",
    "0x5cf18fa7c8a7c0a2b3d5efd1990f64ddc569242c": "0x3635c9adc5dea00000",
    "0x5cf44e10540d65716423b1bcb542d21ff83a94cd": "0x21e19e0c9bab2400000",
    "0x5cf8c03eb3e872e50f7cfd0c2f8d3b3f2cb5183a": "0xad78ebc5ac6200000",
    "0x5cfa8d568575658ca4c1a593ac4c5d0e44c60745": "0xfc66fae3746ac0000",
    "0x5cfa9877f719c79d9e494a08d1e41cf103fc87c9": "0xad78ebc5ac6200000",
    "0x5d1dc3387b47b8451e55106c0cc67d6dc72b7f0b": "0x6c6b935b8bbd400000",
    "0x5d231a70c1dfeb360abd97f616e2d10d39f3cab5": "0x15af1d78b58c400000",
    "0x5d24bdbc1c47f0eb83d128cae48ac33c4817e91f": "0x3635c9adc5dea00000",
    "0x5d2819e8d57821922ee445650ccaec7d40544a8d": "0xad78ebc5ac6200000",
    "0x5d2f7f0b04ba4be161e19cb6f112ce7a5e7d7fe4": "0x1e87f85809dc00000",
    "0x5d32f6f86e787ff78e63d78b0ef95fe6071852b8": "0x15be6174e1912e0000",
    "0x5d39ef9ea6bdfff15d11fe91f561a6f9e31f5da5": "0x6c6b935b8bbd400000",
    "0x5d3f3b1f7130b0bb21a0fd32396239179a25657f": "0xd3ab8ea5e8fd9e80000",
    "0x5d5751819b4f3d26ed0c1ac571552735271dbefa": "0x3635c9adc5dea00000",
    "0x5d5c2c1099bbeefb267e74b58880b444d94449e0": "0xdbf0bd181e2e70000",
    "0x5d5cdbe25b2a044b7b9be383bcaa5807b06d3c6b": "0x6c6b935b8bbd400000",
    "0x5d5d6e821c6eef96810c83c491468560ef70bfb5": "0x6c6b935b8bbd400000",
    "0x5d68324bcb776d3ffd0bf9fea91d9f037fd6ab0f": "0x6c6b935b8bbd400000",
    "0x5d6ae8cbd6b3393c22d16254100d0238e808147c": "0x2707e56d51a30c0000",
    "0x5d6c5c720d66a6abca8397142e63d26818eaab54": "0x22b1c8c1227a00000",
    "0x5d6ccf806738091042ad97a6e095fe8c36aa79c5": "0xa31062beeed700000",
    "0x5d71799c8df3bccb7ee446df50b8312bc4eb71c5": "0xad78ebc5ac6200000",
    "0x5d822d9b3ef4b502627407da272f67814a6becd4": "0x1158e460913d00000",
    "0x5d83b21bd2712360436b67a597ee3378db3e7ae4": "0x6c6b935b8bbd400000",
    "0x5d872b122e994ef27c71d7deb457bf65429eca6c": "0x1b1aded81d394108000",
    "0x5d8d31faa864e22159cd6f5175ccecc53fa54d72": "0x5b696b70dd567100000",
    "0x5d958a9bd189c2985f86c58a8c69a7a78806e8da": "0x228f16f861578600000",
    "0x5da2a9a4c2c0a4a924cbe0a53ab9d0c627a1cfa0": "0x27bf38c6544df50000",
    "0x5da4ca88935c27f55c311048840e589e04a8a049": "0x4563918244f400000",
    "0x5da54785c9bd30575c89deb59d2041d20a39e17b": "0x6aa209f0b91d658000",
    "0x5db69fe93e6fb6fbd450966b97238b110ad8279a": "0x878678326eac9000000",
    "0x5db7bba1f9573f24115d8c8c62e9ce8895068e9f": "0x2b5aad72c65200000",
    "0x5db84400570069a9573cab04b4e6b69535e202b8": "0x20dd68aaf3289100000",
    "0x5dc36de5359450a1ec09cb0c44cf2bb42b3ae435": "0x3c946d893b33060000",
    "0x5dc6f45fef26b06e3302313f884daf48e2746fb9": "0x1b1ae4d6e2ef500000",
    "0x5dcdb6b87a503c6d8a3c65c2cf9a9aa883479a1e": "0x1f2bba5d84f99c00000",
    "0x5dd112f368c0e6ceff77a9df02a5481651a02fb7": "0x93472c85c6d540000",
    "0x5dd53ae897526b167d39f1744ef7c3da5b37a293": "0x1b1ae4d6e2ef5000000",
    "0x5dded049a6e1f329dc4b971e722c9c1f2ade83f0": "0x3635c9adc5dea00000",
    "0x5de598aba344378cab4431555b4f79992dc290c6": "0x487a9a304539440000",
    "0x5de9e7d5d1b667d095dd34099c85b0421a0bc681": "0x1158e460913d00000",
    "0x5df3277ca85936c7a0d2c0795605ad25095e7159": "0x6c6b935b8bbd400000",
    "0x5dff811dad819ece3ba602c383fb5dc64c0a3a48": "0xa1544be879ea80000",
    "0x5e031b0a724471d476f3bcd2eb078338bf67fbef": "0xfc936392801c0000",
    "0x5e0785532c7723e4c0af9357d5274b73bdddddde": "0x54b41ea9bdb61dc0000",
    "0x5e11ecf69d551d7f4f84df128046b3a13240a328": "0x1158e460913d00000",
    "0x5e1fbd4e58e2312b3c78d7aaaafa10bf9c3189e3": "0x878678326eac9000000",
    "0x5e32c72191b8392c55f510d8e3326e3a60501d62": "0x9513ea9de0243800000",
    "0x5e51b8a3bb09d303ea7c86051582fd600fb3dc1a": "0x1158e460913d00000",
    "0x5e58e255fc19870a04305ff2a04631f2ff294bb1": "0xf43fc2c04ee00000",
    "0x5e5a441974a83d74c687ebdc633fb1a49e7b1ad7": "0xa2a15d09519be00000",
    "0x5e65458be964ae449f71773704979766f8898761": "0x1ca7cc735b6f7c0000",
    "0x5e67df8969101adabd91accd6bb1991274af8df2": "0x1b1ae4d6e2ef500000",
    "0x5e6e9747e162f8b45c656e0f6cae7a84bac80e4e": "0x6c6b935b8bbd400000",
    "0x5e731b55ced452bb3f3fe871ddc3ed7ee6510a8f": "0xa2a15d09519be00000",
    "0x5e74ed80e9655788e1bb269752319667fe754e5a": "0x30927f74c9de00000",
    "0x5e772e27f28800c50dda973bb33e10762e6eea20": "0x61093d7c2c6d380000",
    "0x5e7b8c54dc57b0402062719dee7ef5e37ea35d62": "0x9bf9810fd05c840000",
    "0x5e7f70378775589fc66a81d3f653e954f55560eb": "0x83f289181d84c80000",
    "0x5e806e845730f8073e6cc9018ee90f5c05f909a3": "0x201e96dacceaf200000",
    "0x5e8e4df18cf0af770978a8df8dac90931510a679": "0x6c6b935b8bbd400000",
    "0x5e90c85877198756b0366c0e17b28e52b446505a": "0x144a4a18efeb680000",
    "0x5e95fe5ffcf998f9f9ac0e9a81dab83ead77003d": "0x1d42c20d32797f0000",
    "0x5ead29037a12896478b1296ab714e9cb95428c81": "0x3e043072d406e0000",
    "0x5eb371c407406c427b3b7de271ad3c1e04269579": "0xa2a15d09519be00000",
    "0x5ecdbaeab9106ffe5d7b519696609a05baeb85ad": "0x1158e460913d00000",
    "0x5ed0d6338559ef44dc7a61edeb893fa5d83fa1b5": "0xbed1d0263d9f00000",
    "0x5ed3bbc05240e0d399eb6ddfe60f62de4d9509af": "0x2914c02475f9d6d30000",
    "0x5ed3f1ebe2ae6756b5d8dc19cad02c419aa5778b": "0x0",
    "0x5ed56115bd6505a88273df5c56839470d24a2db7": "0x38e6591ee56668000",
    "0x5ef8c96186b37984cbfe04c598406e3b0ac3171f": "0x1fd933494aa5fe00000",
    "0x5efbdfe5389999633c26605a5bfc2c1bb5959393": "0x3c057c95cd9080000",
    "0x5f13154631466dcb1353c890932a7c97e0878e90": "0x14542ba12a337c00000",
    "0x5f167aa242bc4c189adecb3ac4a7c452cf192fcf": "0x6c6b4c4da6ddbe0000",
    "0x5f1c8a04c90d735b8a152909aeae636fb0ce1665": "0x17b7827618c5a370000",
    "0x5f23ba1f37a96c45bc490259538a54c28ba3b0d5": "0x410d586a20a4c00000",
    "0x5f26cf34599bc36ea67b9e7a9f9b4330c9d542a3": "0x3635c9adc5dea00000",
    "0x5f29c9de765dde25852af07d33f2ce468fd20982": "0x6c6b935b8bbd400000",
    "0x5f2f07d2d697e8c567fcfdfe020f49f360be2139": "0x6c6b935b8bbd400000",
    "0x5f321b3daaa296cadf29439f9dab062a4bffedd6": "0x47025903ea7ae0000",
    "0x5f333a3b2310765a0d1832b9be4c0a03704c1c09": "0x3635c9adc5dea00000",
    "0x5f344b01c7191a32d0762ac188f0ec2dd460911d": "0x3635c9adc5dea00000",
    "0x5f363e0ab747e02d1b3b66abb69ea53c7baf523a": "0x277017338a30ae00000",
    "0x5f375b86600c40cca8b2676b7a1a1d1644c5f52c": "0x44618d74c623f0000",
    "0x5f3e1e6739b0c62200e00a003691d9efb238d89f": "0xa2a15d09519be00000",
    "0x5f483ffb8f680aedf2a38f7833afdcde59b61e4b": "0x6c6b935b8bbd400000",
    "0x5f4ace4c1cc13391e01f00b198e1f20b5f91cbf5": "0x10f0fa8b9d3811a0000",
    "0x5f521282e9b278dc8c034c72af53ee29e5443d78": "0x161732d2f8f3ae00000",
    "0x5f68a24c7eb4117667737b33393fb3c2148a53b6": "0x2cede918d453c0000",
    "0x5f708eaf39d823946c51b3a3e9b7b3c003e26341": "0x62a992e53a0af00000",
    "0x5f742e487e3ab81af2f94afdbe1b9b8f5ccc81bc": "0x75c445d41163e60000",
    "0x5f74ed0e24ff80d9b2c4a44baa9975428cd6b935": "0xa18bcec34888100000",
    "0x5f76f0a306269c78306b3d650dc3e9c37084db61": "0x821ab0d44149800000",
    "0x5f77a107ab1226b3f95f10ee83aefc6c5dff3edc": "0x1b1ae4d6e2ef500000",
    "0x5f7b3bbac16dab831a4a0fc53b0c549dc36c31ca": "0x692ae8897081d00000",
    "0x5f93ff832774db5114c55bb4bf44ccf3b58f903f": "0x28a9c91a263458290000",
    "0x5f9616c47b4a67f406b95a14fe6fc268396f1721": "0xad78ebc5ac6200000",
    "0x5f981039fcf50225e2adf762752112d1cc26b6e3": "0x1b1a416a2153a50000",
    "0x5f99dc8e49e61d57daef606acdd91b4d7007326a": "0xa2a15d09519be00000",
    "0x5fa61f152de6123516c751242979285f796ac791": "0xb0f11972963b00000",
    "0x5fa7bfe043886127d4011d8356a47e947963aca8": "0x62a992e53a0af00000",
    "0x5fa8a54e68176c4fe2c01cf671c515bfbdd528a8": "0x45e155fa0110fa400000",
    "0x5fad960f6b2c84569c9f4d47bf1985fcb2c65da6": "0x36356633ebd8ea0000",
    "0x5fc6c11426b4a1eae7e51dd512ad1090c6f1a85b": "0x93fe5c57d710680000",
    "0x5fcd84546896dd081db1a320bd4d8c1dd1528c4c": "0x1158e460913d00000",
    "0x5fcda847aaf8d7fa8bca08029ca2849166aa15a3": "0x21cab81259a3bf0000",
    "0x5fd1c3e31778276cb42ea740f5eae9c641dbc701": "0xa844a7424d9c80000",
    "0x5fd3d6777ec2620ae83a05528ed425072d3ca8fd": "0x6c6b935b8bbd400000",
    "0x5fd973af366aa5157c54659bcfb27cbfa5ac15d6": "0xd8d726b7177a800000",
    "0x5fe77703808f823e6c399352108bdb2c527cb87c": "0x6a4076cf7995a00000",
    "0x5fec49c665e64ee89dd441ee74056e1f01e92870": "0x1569b9e733474c00000",
    "0x5ff326cd60fd136b245e29e9087a6ad3a6527f0d": "0x65ea3db75546600000",
    "0x5ff93de6ee054cad459b2d5eb0f6870389dfcb74": "0xbed1d0263d9f00000",
    "0x6006e36d929bf45d8f16231b126a011ae283d925": "0x98a7d9b8314c00000",
    "0x6021e85a8814fce1e82a41abd1d3b2dad2faefe0": "0x6c6b935b8bbd400000",
    "0x6038740ae28d66ba93b0be08482b3205a0f7a07b": "0x11216185c29f700000",
    "0x603f2fab7afb6e017b94766069a4b43b38964923": "0x59d2db2414da990000",
    "0x6042276df2983fe2bc4759dc1943e18fdbc34f77": "0x6acb3df27e1f880000",
    "0x6042c644bae2b96f25f94d31f678c90dc96690db": "0x6c6b935b8bbd400000",
    "0x604cdf18628dbfa8329194d478dd5201eecc4be7": "0x13f306a2409fc0000",
    "0x604e9477ebf4727c745bcabbedcb6ccf29994022": "0x36369ed7747d260000",
    "0x60676d1fa21fca052297e24bf96389c5b12a70d7": "0xd177c5a7a68d60000",
    "0x60676e92d18b000509c61de540e6c5ddb676d509": "0x410d586a20a4c00000",
    "0x606f177121f7855c21a5062330c8762264a97b31": "0xd8d726b7177a800000",
    "0x60864236930d04d8402b5dcbeb807f3caf611ea2": "0xd8d726b7177a800000",
    "0x60ab71cd26ea6d6e59a7a0f627ee079c885ebbf6": "0x1731790534df20000",
    "0x60af0ee118443c9b37d2fead77f5e521debe1573": "0x678a932062e4180000",
    "0x60b358cb3dbefa37f47df2d7365840da8e3bc98c": "0x1158e460913d00000",
    "0x60b8d6b73b79534fb08bb8cbcefac7f393c57bfe": "0x5f68e8131ecf800000",
    "0x60be6f953f2a4d25b6256ffd2423ac1438252e4e": "0x821ab0d4414980000",
    "0x60c3714fdddb634659e4a2b1ea42c4728cc7b8ba": "0xb98bc829a6f90000",
    "0x60cc3d445ebdf76a7d7ae571c6971dff68cc8585": "0x3635c9adc5dea00000",
    "0x60d5667140d12614b21c8e5e8a33082e32dfcf23": "0x43c33c1937564800000",
    "0x60de22a1507432a47b01cc68c52a0bf8a2e0d098": "0x10910d4cdc9f60000",
    "0x60e0bdd0a259bb9cb09d3f37e5cd8b9daceabf8a": "0x4a4491bd6dcd280000",
    "0x60e3cc43bcdb026aad759c7066f555bbf2ac66f5": "0x6c6b935b8bbd400000",
    "0x61042b80fd6095d1b87be2f00f109fabafd157a6": "0x56bc75e2d63100000",
    "0x6107d71dd6d0eefb11d4c916404cb98c753e117d": "0x6c6b935b8bbd400000",
    "0x610fd6ee4eebab10a8c55d0b4bd2e7d6ef817156": "0x1159561065d5d0000",
    "0x6114b0eae5576903f80bfb98842d24ed92237f1e": "0x56bc75e2d63100000",
    "0x6121af398a5b2da69f65c6381aec88ce9cc6441f": "0x22b1c8c1227a000000",
    "0x612667f172135b950b2cd1de10afdece6857b873": "0x3635c9adc5dea00000",
    "0x612ced8dc0dc9e899ee46f7962333315f3f55e44": "0x125e35f9cd3d9b0000",
    "0x6134d942f037f2cc3d424a230c603d67abd3edf7": "0x6c6b935b8bbd400000",
    "0x613ac53be565d46536b820715b9b8d3ae68a4b95": "0xcbd47b6eaa8cc00000",
    "0x613fab44b16bbe554d44afd178ab1d02f37aeaa5": "0x6c6b935b8bbd400000",
    "0x614e8bef3dd2c59b59a4145674401018351884ea": "0x1158e460913d00000",
    "0x61518464fdd8b73c1bb6ac6db600654938dbf17a": "0xad78ebc5ac6200000",
    "0x61547d376e5369bcf978fc162c3c56ae453547e8": "0xad78ebc5ac6200000",
    "0x6158e107c5eb54cb7604e0cd8dc1e07500d91c3c": "0x2b5e3af16b1880000",
    "0x615a6f36777f40d6617eb5819896186983fd3731": "0x14061b9d77a5e980000",
    "0x615f82365c5101f071e7d2cb6af14f7aad2c16c6": "0x1158e460913d00000",
    "0x6170dd0687bd55ca88b87adef51cfdc55c4dd458": "0x6cb32f5c34fe440000",
    "0x61733947fab820dbd351efd67855ea0e881373a0": "0x1158e460913d00000",
    "0x6179979907fe7f037e4c38029d60bcbab832b3d6": "0x57473d05dabae80000",
    "0x617f20894fa70e94a86a49cd74e03238f64d3cd9": "0x10f0dbae61009528000",
    "0x617ff2cc803e31c9082233b825d025be3f7b1056": "0x6acb3df27e1f880000",
    "0x6191ddc9b64a8e0890b4323709d7a07c48b92a64": "0x2a034919dfbfbc0000",
    "0x6196c3d3c0908d254366b7bca55745222d9d4db1": "0xd8d726b7177a800000",
    "0x619f171445d42b02e2e07004ad8afe694fa53d6a": "0x1158e460913d00000",
    "0x61adf5929a5e2981684ea243baa01f7d1f5e148a": "0x5fabf6c984f230000",
    "0x61b1b8c012cd4c78f698e470f90256e6a30f48dd": "0xad78ebc5ac6200000",
    "0x61b3df2e9e9fd968131f1e88f0a0eb5bd765464d": "0xd8d726b7177a800000",
    "0x61b902c5a673885826820d1fe14549e4865fbdc2": "0x1224efed2ae1918000",
    "0x61b905de663fc17386523b3a28e2f7d037a655cd": "0x1b1ae4d6e2ef500000",
    "0x61ba87c77e9b596de7ba0e326fddfeec2163ef66": "0xad78ebc5ac6200000",
    "0x61bf84d5ab026f58c873f86ff0dfca82b55733ae": "0x6c6b935b8bbd400000",
    "0x61c4ee7c864c4d6b5e37ea1331c203739e826b2f": "0x1a1353b382a918000",
    "0x61c830f1654718f075ccaba316faacb85b7d120b": "0x15af1d78b58c400000",
    "0x61c8f1fa43bf846999ecf47b2b324dfb6b63fe3a": "0x2b5e3af16b18800000",
    "0x61c9dce8b2981cb40e98b0402bc3eb28348f03ac": "0xaacacd9b9e22b0000",
    "0x61cea71fa464d62a07063f920b0cc917539733d8": "0x5a87e7d7f5f6580000",
    "0x61d101a033ee0e2ebb3100ede766df1ad0244954": "0x1b1ae4d6e2ef500000",
    "0x61ed5596c697207f3d55b2a51aa7d50f07fa09e8": "0x6c6b935b8bbd400000",
    "0x61ff8e67b34d9ee6f78eb36ffea1b9f7c15787af": "0x58e7926ee858a00000",
    "0x6205c2d5647470848a3840f3887e9b015d34755c": "0x6194049f30f7200000",
    "0x6228ade95e8bb17d1ae23bfb0518414d497e0eb8": "0x15af1d78b58c400000",
    "0x6229dcc203b1edccfdf06e87910c452a1f4d7a72": "0x6e1d41a8f9ec3500000",
    "0x622be4b45495fcd93143efc412d699d6cdc23dc5": "0xf015f25736420000",
    "0x62331df2a3cbee3520e911dea9f73e905f892505": "0x6c6b935b8bbd400000",
    "0x625644c95a873ef8c06cdb9e9f6d8d7680043d62": "0x6194049f30f7200000",
    "0x6265b2e7730f36b776b52d0c9d02ada55d8e3cb6": "0x3635c9adc5dea00000",
    "0x62680a15f8ccb8bdc02f7360c25ad8cfb57b8ccd": "0x3635c9adc5dea00000",
    "0x6294eae6e420a3d5600a39c4141f838ff8e7cc48": "0xa030dcebbd2f4c0000",
    "0x62971bf2634cee0be3c9890f51a56099dbb9519b": "0x238fd42c5cf0400000",
    "0x629be7ab126a5398edd6da9f18447e78c692a4fd": "0x6c6b935b8bbd400000",
    "0x62b4a9226e61683c72c183254690daf511b4117a": "0xe18398e7601900000",
    "0x62b9081e7710345e38e02e16449ace1b85bcfc4e": "0x3154c9729d05780000",
    "0x62c37c52b97f4b040b1aa391d6dec152893c4707": "0x3635c9adc5dea00000",
    "0x62c9b271ffd5b770a5eee4edc9787b5cdc709714": "0x6c6b935b8bbd400000",
    "0x62d5cc7117e18500ac2f9e3c26c86b0a94b0de15": "0x5b12aefafa8040000",
    "0x62dc72729024375fc37cbb9c7c2393d10233330f": "0x6c6b935b8bbd400000",
    "0x62e6b2f5eb94fa7a43831fc87e254a3fe3bf8f89": "0xd8d726b7177a80000",
    "0x62f2e5ccecd52cc4b95e0597df27cc079715608c": "0x7c0860e5a80dc0000",
    "0x62fb8bd1f0e66b90533e071e6cbe6111fef0bc63": "0x3ba1910bf341b000000",
    "0x630a913a9031c9492abd4c41dbb15054cfec4416": "0x13458db67af35e00000",
    "0x630c5273126d517ce67101811cab16b8534cf9a8": "0x1feccc62573bbd38000",
    "0x631030a5b27b07288a45696f189e1114f12a81c0": "0x1b1a7a420ba00d0000",
    "0x6310b020fd98044957995092090f17f04e52cdfd": "0x55a6e79ccd1d300000",
    "0x632b9149d70178a7333634275e82d5953f27967b": "0x25f273933db5700000",
    "0x632cecb10cfcf38ec986b43b8770adece9200221": "0x1158e460913d00000",
    "0x6331028cbb5a21485bc51b565142993bdb2582a9": "0x1cfdd7468216e80000",
    "0x63334fcf1745840e4b094a3bb40bb76f9604c04c": "0xd7a5d703a717e80000",
    "0x63340a57716bfa63eb6cd133721202575bf796f0": "0xb61e0a20c12718000",
    "0x634efc24371107b4cbf03f79a93dfd93e431d5fd": "0x423582e08edc5c8000",
    "0x635c00fdf035bca15fa3610df3384e0fb79068b1": "0x1e7e4171bf4d3a00000",
    "0x63612e7862c27b587cfb6daf9912cb051f030a9f": "0x25b19d4bfe8ed0000",
    "0x63666755bd41b5986997783c13043008242b3cb5": "0x1b1ae4d6e2ef500000",
    "0x637be71b3aa815ff453d5642f73074450b64c82a": "0x6c6b935b8bbd400000",
    "0x637d67d87f586f0a5a479e20ee13ea310a10b647": "0xa3a5926afa1e7300000",
    "0x637f5869d6e4695f0eb9e27311c4878aff333380": "0x6ac04e68aaec860000",
    "0x63977cad7d0dcdc52b9ac9f2ffa136e8642882b8": "0x410d586a20a4c0000",
    "0x63a61dc30a8e3b30a763c4213c801cbf98738178": "0x3635c9adc5dea00000",
    "0x63ac545c991243fa18aec41d4f6f598e555015dc": "0x2086ac351052600000",
    "0x63b9754d75d12d384039ec69063c0be210d5e0e3": "0x920b860cc8ecfd8000",
    "0x63bb664f9117037628594da7e3c5089fd618b5b5": "0x1158e460913d00000",
    "0x63c2a3d235e5eeabd0d4a6afdb89d94627396495": "0x434ef05b9d84820000",
    "0x63c8dfde0b8e01dadc2e748c824cc0369df090b3": "0xd255d112e103a00000",
    "0x63d55ad99b9137fd1b20cc2b4f03d42cbaddf334": "0x15af1d78b58c400000",
    "0x63d80048877596e0c28489e650cd4ac180096a49": "0xf2dc7d47f15600000",
    "0x63e414603e80d4e5a0f5c18774204642258208e4": "0x10f0cf064dd59200000",
    "0x63e88e2e539ffb450386b4e46789b223f5476c45": "0x155170a778e25d00000",
    "0x63ef2fbc3daf5edaf4a295629ccf31bcdf4038e5": "0x4f2591f896a6500000",
    "0x63f0e5a752f79f67124eed633ad3fd2705a397d4": "0xd5967be4fc3f100000",
    "0x63f5b53d79bf2e411489526530223845fac6f601": "0x65a4da25d3016c00000",
    "0x63fc93001305adfbc9b85d29d9291a05f8f1410b": "0x3635c9adc5dea00000",
    "0x63fe6bcc4b8a9850abbe75803730c932251f145b": "0xfc936392801c0000",
    "0x6403d062549690c8e8b63eae41d6c109476e2588": "0x6c6b935b8bbd400000",
    "0x64042ba68b12d4c151651ca2813b7352bd56f08e": "0x2086ac351052600000",
    "0x6405dd13e93abcff377e700e3c1a0086eca27d29": "0xfc936392801c0000",
    "0x640aba6de984d94517377803705eaea7095f4a11": "0x21e19e0c9bab2400000",
    "0x640bf87415e0cf407301e5599a68366da09bbac8": "0x1abc9f416098158000",
    "0x6420f8bcc8164a6152a99d6b99693005ccf7e053": "0x36356633ebd8ea0000",
    "0x64241a7844290e0ab855f1d4aa75b55345032224": "0x56bc75e2d631000000",
    "0x64264aedd52dcae918a012fbcd0c030ee6f71821": "0x3635c9adc5dea00000",
    "0x64370e87202645125a35b207af1231fb6072f9a7": "0xad78ebc5ac6200000",
    "0x643d9aeed4b180947ed2b9207cce4c3ddc55e1f7": "0xad78ebc5ac6200000",
    "0x6443b8ae639de91cf73c5ae763eeeed3ddbb9253": "0x6c6b935b8bbd400000",
    "0x64457fa33b0832506c4f7d1180dce48f46f3e0ff": "0x6c6b935b8bbd400000",
    "0x64464a6805b462412a901d2db8174b06c22deea6": "0x19c846a029c7c80000",
    "0x644ba6c61082e989109f5c11d4b40e991660d403": "0xd8d726b7177a800000",
    "0x64628c6fb8ec743adbd87ce5e018d531d9210437": "0x1731790534df20000",
    "0x6463f715d594a1a4ace4bb9c3b288a74decf294d": "0x6acb3df27e1f880000",
    "0x646628a53c2c4193da88359ce718dadd92b7a48d": "0xad8006c2f5ef00000",
    "0x64672da3ab052821a0243d1ce4b6e0a36517b8eb": "0xad78ebc5ac6200000",
    "0x646afba71d849e80c0ed59cac519b278e7f7abe4": "0x3635c9adc5dea00000",
    "0x646e043d0597a664948fbb0dc15475a3a4f3a6ed": "0x1158e460913d00000",
    "0x6470a4f92ec6b0fccd01234fa59023e9ff1f3aac": "0xa2a15d09519be00000",
    "0x647b85044df2cf0b4ed4882e88819fe22ae5f793": "0x36363b5d9a77700000",
    "0x6485470e61db110aebdbafd536769e3c599cc908": "0x2086ac351052600000",
    "0x648f5bd2a2ae8902db37847d1cb0db9390b06248": "0x1a535ecf0760a048000",
    "0x649a2b9879cd8fb736e6703b0c7747849796f10f": "0x18ee22da01ad34f0000",
    "0x649a85b93653075fa6562c409a565d087ba3e1ba": "0x6c6b935b8bbd400000",
    "0x64adcceec53dd9d9dd15c8cc1a9e736de4241d2c": "0x30927f74c9de00000",
    "0x64cf0935bf19d2cebbecd8780d27d2e2b2c34166": "0x6acb3df27e1f880000",
    "0x64d80c3b8ba68282290b75e65d8978a15a87782c": "0x6acb3df27e1f880000",
    "0x64dba2d6615b8bd7571836dc75bc79d314f5ecee": "0x21e19e0c9bab2400000",
    "0x64e0217a5b38aa40583625967fa9883690388b6f": "0xad78ebc5ac6200000",
    "0x64e02abb016cc23a2934f6bcddb681905021d563": "0x3635c9adc5dea00000",
    "0x64e03ef070a54703b7184e48276c5c0077ef4b34": "0x1158e460913d000000",
    "0x64e2de21200b1899c3a0c0653b5040136d0dc842": "0x43c33c1937564800000",
    "0x64ec8a5b743f3479e707dae9ee20ddaa4f40f1d9": "0xad78ebc5ac6200000",
    "0x6503860b191008c15583bfc88158099301762828": "0x3635c9adc5dea00000",
    "0x65053191319e067a25e6361d47f37f6318f83419": "0x155bd9307f9fe80000",
    "0x65093b239bbfba23c7775ca7da5a8648a9f54cf7": "0x15af1d78b58c400000",
    "0x6509eeb1347e842ffb413e37155e2cbc738273fd": "0x6c6b935b8bbd400000",
    "0x650b425555e4e4c51718146836a2c1ee77a5b421": "0x43c33c1937564800000",
    "0x650cf67db060cce17568d5f2a423687c49647609": "0x56bc75e2d63100000",
    "0x6510df42a599bcb0a519cca961b488759a6f6777": "0x6c6b935b8bbd400000",
    "0x653675b842d7d8b461f722b4117cb81dac8e639d": "0x1ae361fc1451c0000",
    "0x654b7e808799a83d7287c67706f2abf49a496404": "0x6acb3df27e1f880000",
    "0x654f524847b3a6acc0d3d5f1f362b603edf65f96": "0x1b1ae4d6e2ef5000000",
    "0x655934da8e744eaa3de34dbbc0894c4eda0b61f2": "0xad78ebc5ac6200000",
    "0x655d5cd7489629e2413c2105b5a172d933c27af8": "0xdb03186cd840a60000",
    "0x656018584130db83ab0591a8128d9381666a8d0e": "0x3779f912019fc0000",
    "0x6560941328ff587cbc56c38c78238a7bb5f442f6": "0x2861906b59c47a0000",
    "0x656579daedd29370d9b737ee3f5cd9d84bc2b342": "0x4d853c8f8908980000",
    "0x657473774f63ac3d6279fd0743d5790c4f161503": "0xad78ebc5ac6200000",
    "0x6580b1bc94390f04b397bd73e95d96ef11eaf3a8": "0x1158e460913d00000",
    "0x65849be1af20100eb8a3ba5a5be4d3ae8db5a70e": "0x15af1d78b58c400000",
    "0x659c0a72c767a3a65ced0e1ca885a4c51fd9b779": "0x6c6b935b8bbd400000",
    "0x65a52141f56bef98991724c6e7053381da8b5925": "0x3429c335d57fe0000",
    "0x65a9dad42e1632ba3e4e49623fab62a17e4d3611": "0x50c4cb2a10c600000",
    "0x65af8d8b5b1d1eedfa77bcbc96c1b133f83306df": "0x55005f0c614480000",
    "0x65af9087e05167715497c9a5a749189489004def": "0x2d43f3ebfafb2c0000",
    "0x65b42faecc1edfb14283ca979af545f63b30e60c": "0xfc936392801c0000",
    "0x65d33eb39cda6453b19e61c1fe4db93170ef9d34": "0xb98bc829a6f90000",
    "0x65d8dd4e251cbc021f05b010f2d5dc520c3872e0": "0x2d43579a36a90e0000",
    "0x65ea26eabbe2f64ccccfe06829c25d4637520225": "0x25f273933db5700000",
    "0x65ea67ad3fb56ad5fb94387dd38eb383001d7c68": "0x56bc75e2d63100000",
    "0x65ebaed27edb9dcc1957aee5f452ac2105a65c0e": "0x937dfadae25e29b8000",
    "0x65ee20b06d9ad589a7e7ce04b9f5f795f402aece": "0x6c6b935b8bbd400000",
    "0x65f534346d2ffb787fa9cf185d745ba42986bd6e": "0x1b1ae4d6e2ef500000",
    "0x65f5870f26bce089677dfc23b5001ee492483428": "0x112b1f155aa32a30000",
    "0x65fd02d704a12a4dace9471b0645f962a89671c8": "0x18d1ce6e427cd8000",
    "0x65ff874fafce4da318d6c93d57e2c38a0d73e820": "0x3638021cecdab00000",
    "0x660557bb43f4be3a1b8b85e7df7b3c5bcd548057": "0x14542ba12a337c00000",
    "0x66082c75a8de31a53913bbd44de3a0374f7faa41": "0x4f2591f896a6500000",
    "0x6611ce59a98b072ae959dc49ad511daaaaa19d6b": "0xad78ebc5ac6200000",
    "0x66201bd227ae6dc6bdfed5fbde811fecfe5e9dd9": "0x203e9e8492788c0000",
    "0x662334814724935b7931ddca6100e00d467727cd": "0x2288269d0783d40000",
    "0x66274fea82cd30b6c29b23350e4f4f3d310a5899": "0x70370550ab82980000",
    "0x662cfa038fab37a01745a364e1b98127c503746d": "0xd5967be4fc3f100000",
    "0x6635b46f711d2da6f0e16370cd8ee43efb2c2d52": "0x6c6b935b8bbd400000",
    "0x663604b0503046e624cd26a8b6fb4742dce02a6f": "0x38b9b797ef68c0000",
    "0x6636d7ac637a48f61d38b14cfd4865d36d142805": "0x1b1ae4d6e2ef500000",
    "0x6640ccf053555c130ae2b656647ea6e31637b9ab": "0x6acb3df27e1f880000",
    "0x66424bd8785b8cb461102a900283c35dfa07ef6a": "0x22e2db26666fc8000",
    "0x664cd67dccc9ac8228b45c55db8d76550b659cdc": "0x155bd9307f9fe80000",
    "0x664e43119870af107a448db1278b044838ffcdaf": "0x15af1d78b58c400000",
    "0x6651736fb59b91fee9c93aa0bd6ea2f7b2506180": "0x1b1ae4d6e2ef500000",
    "0x665b000f0b772750cc3c217a5ef429a92bf1ccbb": "0xd8d726b7177a800000",
    "0x66662006015c1f8e3ccfcaebc8ee6807ee196303": "0x1b1b3a1ac261ec0000",
    "0x666746fb93d1935c5a3c684e725010c4fad0b1d8": "0x1158e460913d00000",
    "0x666b4f37d55d63b7d056b615bb74c96b3b01991a": "0xd8d726b7177a800000",
    "0x66719c0682b2ac7f9e27abebec7edf8decf0ae0d": "0x1158e460913d00000",
    "0x6671b182c9f741a0cd3c356c73c23126d4f9e6f4": "0xad78ebc5ac6200000",
    "0x6679aeecd87a57a73f3356811d2cf49d0c4d96dc": "0x2086ac351052600000",
    "0x667b61c03bb937a9f5d0fc5a09f1ea3363c77035": "0xe664992288f2280000",
    "0x6685fd2e2544702c360b8bb9ee78f130dad16da5": "0x6c6b935b8bbd400000",
    "0x668b6ba8ab08eace39c502ef672bd5ccb6a67a20": "0x697d95d4201333c0000",
    "0x66925de3e43f4b41bf9dadde27d5488ef569ea0d": "0x222c8eb3ff6640000",
    "0x66b0c100c49149935d14c0dc202cce907cea1a3d": "0x6acb3df27e1f880000",
    "0x66b1a63da4dcd9f81fe54f5e3fcb4055ef7ec54f": "0xaeb272adf9cfa0000",
    "0x66b39837cb3cac8a802afe3f12a258bbca62dacd": "0x15af1d78b58c400000",
    "0x66c8331efe7198e98b2d32b938688e3241d0e24f": "0x2098051970e39d00000",
    "0x66cc8ab23c00d1b82acd7d73f38c99e0d05a4fa6": "0x56bc75e2d63100000",
    "0x66dcc5fb4ee7fee046e141819aa968799d644491": "0x487a9a304539440000",
    "0x66e09427c1e63deed7e12b8c55a6a19320ef4b6a": "0x93739534d28680000",
    "0x66ec16ee9caab411c55a6629e318de6ee216491d": "0x2ee449550898e40000",
    "0x66f50406eb1b11a946cab45927cca37470e5a208": "0x6c6b935b8bbd400000",
    "0x66fdc9fee351fa1538eb0d87d819fcf09e7c106a": "0x14627b5d93781b20000",
    "0x67048f3a12a4dd1f626c64264cb1d7971de2ca38": "0x9c2007651b2500000",
    "0x6704f169e0d0b36b57bbc39f3c45437b5ee3d28d": "0x155bd9307f9fe80000",
    "0x671015b97670b10d5e583f3d62a61c1c79c5143f": "0x15af1d78b58c400000",
    "0x6710c2c03c65992b2e774be52d3ab4a6ba217ef7": "0x274d656ac90e3400000",
    "0x671110d96aaff11523cc546bf9940eedffb2faf7": "0xd8d726b7177a800000",
    "0x6715c14035fb57bb3d667f7b707498c41074b855": "0x25f273933db5700000",
    "0x671bbca099ff899bab07ea1cf86965c3054c8960": "0x2b5e3af16b1880000",
    "0x6727daf5b9d68efcab489fedec96d7f7325dd423": "0x6c6b935b8bbd400000",
    "0x672cbca8440a8577097b19aff593a2ad9d28a756": "0x4563918244f400000",
    "0x672ec42faa8cd69aaa71b32cc7b404881d52ff91": "0x21e19e0c9bab2400000",
    "0x672fa0a019088db3166f6119438d07a99f8ba224": "0x2d4ca05e2b43ca80000",
    "0x673144f0ec142e770f4834fee0ee311832f3087b": "0x1b1b6bd7af64c70000",
    "0x67350b5331926f5e28f3c1e986f96443809c8b8c": "0x1314fb370629800000",
    "0x673706b1b0e4dc7a949a7a796258a5b83bb5aa83": "0x368c8623a8b4d100000",
    "0x6742a2cfce8d79a2c4a51b77747498912245cd6a": "0xdfd5b80b7e4680000",
    "0x674adb21df4c98c7a347ac4c3c24266757dd7039": "0x6c6b935b8bbd400000",
    "0x67518e5d02b205180f0463a32004471f753c523e": "0x6b918aac494b168000",
    "0x675d5caa609bf70a18aca580465d8fb7310d1bbb": "0x43c33c1937564800000",
    "0x67632046dcb25a54936928a96f423f3320cbed92": "0x6c6b935b8bbd400000",
    "0x6765df25280e8e4f38d4b1cf446fc5d7eb659e34": "0x56bc75e2d63100000",
    "0x6776e133d9dc354c12a951087b639650f539a433": "0x68155a43676e00000",
    "0x6785513cf732e47e87670770b5419be10cd1fc74": "0x6c6b935b8bbd400000",
    "0x679437eacf437878dc293d48a39c87b7421a216c": "0x37f81821db2680000",
    "0x679b9a109930517e8999099ccf2a914c4c8dd934": "0x340aad21b3b700000",
    "0x67a80e0190721f94390d6802729dd12c31a895ad": "0x6c6b1375bc91560000",
    "0x67b8a6e90fdf0a1cac441793301e8750a9fa7957": "0x30849ebe16369c0000",
    "0x67bc85e87dc34c4e80aafa066ba8d29dbb8e438e": "0x15d1cf4176aeba0000",
    "0x67c926093e9b8927933810d98222d62e2b8206bb": "0x678a932062e4180000",
    "0x67cfda6e70bf7657d39059b59790e5145afdbe61": "0x23050d095866580000",
    "0x67d682a282ef73fb8d6e9071e2614f47ab1d0f5e": "0x3635c9adc5dea00000",
    "0x67d6a8aa1bf8d6eaf7384e993dfdf10f0af68a61": "0xabcbb5718974b8000",
    "0x67da922effa472a6b124e84ea8f86b24e0f515aa": "0x1158e460913d00000",
    "0x67df242d240dd4b8071d72f8fcf35bb3809d71e8": "0xd8d726b7177a800000",
    "0x67ee406ea4a7ae6a3a381eb4edd2f09f174b4928": "0x3829635f0968b00000",
    "0x67f2bb78b8d3e11f7c458a10b5c8e0a1d374467d": "0x61093d7c2c6d380000",
    "0x67fc527dce1785f0fb8bc7e518b1c669f7ecdfb5": "0xd02ab486cedc00000",
    "0x68027d19558ed7339a08aee8de3559be063ec2ea": "0x6c6b935b8bbd400000",
    "0x680640838bd07a447b168d6d923b90cf6c43cdca": "0x5dc892aa1131c80000",
    "0x6807ddc88db489b033e6b2f9a81553571ab3c805": "0x19f8e7559924c0000",
    "0x680d5911ed8dd9eec45c060c223f89a7f620bbd5": "0x43c33c1937564800000",
    "0x6811b54cd19663b11b94da1de2448285cd9f68d9": "0x3ba1910bf341b00000",
    "0x68190ca885da4231874c1cfb42b1580a21737f38": "0xcf152640c5c8300000",
    "0x682897bc4f8e89029120fcffb787c01a93e64184": "0x21e19e0c9bab2400000",
    "0x68295e8ea5afd9093fc0a465d157922b5d2ae234": "0x1154e53217ddb0000",
    "0x682e96276f518d31d7e56e30dfb009c1218201bd": "0x1158e460913d00000",
    "0x6835c8e8b74a2ca2ae3f4a8d0f6b954a3e2a8392": "0x3429c335d57fe0000",
    "0x683633010a88686bea5a98ea53e87997cbf73e69": "0x56b394263a40c0000",
    "0x683dba36f7e94f40ea6aea0d79b8f521de55076e": "0x796e3ea3f8ab00000",
    "0x68419c6dd2d3ce6fcbb3c73e2fa079f06051bde6": "0x6acb3df27e1f880000",
    "0x68473b7a7d965904bedba556dfbc17136cd5d434": "0x56bc75e2d63100000",
    "0x6847825bdee8240e28042c83cad642f286a3bddc": "0x5150ae84a8cdf00000",
    "0x684a44c069339d08e19a75668bdba303be855332": "0xed2b525841adfc00000",
    "0x68531f4dda808f5320767a03113428ca0ce2f389": "0x10d3aa536e2940000",
    "0x687927e3048bb5162ae7c15cf76bd124f9497b9e": "0x6c6b935b8bbd400000",
    "0x68809af5d532a11c1a4d6e32aac75c4c52b08ead": "0x21e19e0c9bab2400000",
    "0x6886ada7bbb0617bda842191c68c922ea3a8ac82": "0x3ee23bde0e7d200000",
    "0x68883e152e5660fee59626e7e3b4f05110e6222f": "0xb94633be975a62a0000",
    "0x688a569e965524eb1d0ac3d3733eab909fb3d61e": "0x478eae0e571ba00000",
    "0x688eb3853bbcc50ecfee0fa87f0ab693cabdef02": "0x6b10a18400647c00000",
    "0x68a7425fe09eb28cf86eb1793e41b211e57bd68d": "0x243d4d18229ca20000",
    "0x68a86c402388fddc59028fec7021e98cbf830eac": "0x10910d4cdc9f60000",
    "0x68acdaa9fb17d3c309911a77b05f5391fa034ee9": "0x1e52e336cde22180000",
    "0x68addf019d6b9cab70acb13f0b3117999f062e12": "0x2b51212e6b7c88000",
    "0x68b31836a30a016ada157b638ac15da73f18cfde": "0x168d28e3f00280000",
    "0x68b6854788a7c6496cdbf5f84b9ec5ef392b78bb": "0x42bf06b78ed3b500000",
    "0x68c08490c89bf0d6b6f320b1aca95c8312c00608": "0xd8d726b7177a800000",
    "0x68c7d1711b011a33f16f1f55b5c902cce970bdd7": "0x83d6c7aab63600000",
    "0x68c8791dc342c373769ea61fb7b510f251d32088": "0x3635c9adc5dea00000",
    "0x68df947c495bebaeb8e889b3f953d533874bf106": "0x1d9945ab2b03480000",
    "0x68e8022740f4af29eb48db32bcecddfd148d3de3": "0x3635c9adc5dea00000",
    "0x68ec79d5be7155716c40941c79d78d17de9ef803": "0x1b233877b5208c0000",
    "0x68eec1e288ac31b6eaba7e1fbd4f04ad579a6b5d": "0x6c6b935b8bbd400000",
    "0x68f525921dc11c329b754fbf3e529fc723c834cd": "0x57473d05dabae80000",
    "0x68f719ae342bd7fef18a05cbb02f705ad38ed5b2": "0x38ebad5cdc90280000",
    "0x68f7573cd457e14c03fea43e302d30347c10705c": "0x10f0cf064dd59200000",
    "0x68f8f45155e98c5029a4ebc5b527a92e9fa83120": "0xf07b44b40793208000",
    "0x68fe1357218d095849cd579842c4aa02ff888d93": "0x6c6b935b8bbd400000",
    "0x690228e4bb12a8d4b5e0a797b0c5cf2a7509131e": "0x65ea3db75546600000",
    "0x690594d306613cd3e2fd24bca9994ad98a3d73f8": "0x6c6b935b8bbd400000",
    "0x69073269729e6414b26ec8dc0fd935c73b579f1e": "0x65a4da25d3016c00000",
    "0x6919dd5e5dfb1afa404703b9faea8cee35d00d70": "0x14061b9d77a5e980000",
    "0x693492a5c51396a482881669ccf6d8d779f00951": "0x12bf50503ae3038000",
    "0x693d83be09459ef8390b2e30d7f7c28de4b4284e": "0x6c6b935b8bbd400000",
    "0x69517083e303d4fbb6c2114514215d69bc46a299": "0x56bc75e2d63100000",
    "0x695550656cbf90b75d92ad9122d90d23ca68ca4d": "0x3635c9adc5dea00000",
    "0x6958f83bb2fdfb27ce0409cd03f9c5edbf4cbedd": "0x43c33c1937564800000",
    "0x695b0f5242753701b264a67071a2dc880836b8db": "0xe398811bec680000",
    "0x695b4cce085856d9e1f9ff3e79942023359e5fbc": "0x10f0cf064dd59200000",
    "0x6966063aa5de1db5c671f3dd699d5abe213ee902": "0x1b1ae4d6e2ef5000000",
    "0x6974c8a414ceaefd3c2e4dfdbef430568d9a960b": "0x121ea68c114e510000",
    "0x6978696d5150a9a263513f8f74c696f8b1397cab": "0x167f482d3c5b1c00000",
    "0x69797bfb12c9bed682b91fbc593591d5e4023728": "0x21e19e0c9bab2400000",
    "0x697f55536bf85ada51841f0287623a9f0ed09a17": "0x21e19e0c9bab2400000",
    "0x6982fe8a867e93eb4a0bd051589399f2ec9a5292": "0x6c6b935b8bbd400000",
    "0x698a8a6f01f9ab682f637c7969be885f6c5302bf": "0x10d3aa536e2940000",
    "0x698ab9a2f33381e07c0c47433d0d21d6f336b127": "0x1158e460913d00000",
    "0x6994fb3231d7e41d491a9d68d1fa4cae2cc15960": "0xd8d726b7177a800000",
    "0x699c9ee47195511f35f862ca4c22fd35ae8ffbf4": "0x4563918244f400000",
    "0x699fc6d68a4775573c1dcdaec830fefd50397c4e": "0x340aad21b3b700000",
    "0x69af28b0746cac0da17084b9398c5e36bb3a0df2": "0x3677036edf0af60000",
    "0x69b80ed90f84834afa3ff82eb964703b560977d6": "0x1731790534df20000",
    "0x69b81d5981141ec7a7141060dfcf8f3599ffc63e": "0x10f0cf064dd59200000",
    "0x69bcfc1d43b4ba19de7b274bdffb35139412d3d7": "0x35659ef93f0fc40000",
    "0x69bd25ade1a3346c59c4e930db2a9d715ef0a27a": "0xd8d726b7177a800000",
    "0x69c08d744754de709ce96e15ae0d1d395b3a2263": "0x3635c9adc5dea00000",
    "0x69c2d835f13ee90580408e6a3283c8cca6a434a2": "0x238fd42c5cf0400000",
    "0x69c94e07c4a9be3384d95dfa3cb9290051873b7b": "0x3cb71f51fc5580000",
    "0x69cb3e2153998d86e5ee20c1fcd1a6baeeb2863f": "0xd8d726b7177a800000",
    "0x69d39d510889e552a396135bfcdb06e37e387633": "0xd8d726b7177a800000",
    "0x69d98f38a3ba3dbc01fa5c2c1427d862832f2f70": "0x152d02c7e14af6800000",
    "0x69e2e2e704307ccc5b5ca3f164fece2ea7b2e512": "0x17b7883c06916600000",
    "0x69ff429074cb9b6c63bc914284bce5f0c8fbf7d0": "0x1b1ae4d6e2ef500000",
    "0x69ff8901b541763f817c5f2998f02dcfc1df2997": "0x22b1c8c1227a00000",
    "0x6a023af57d584d845e698736f130db9db40dfa9a": "0x55b201c8900980000",
    "0x6a04f5d53fc0f515be942b8f12a9cb7ab0f39778": "0xa9aab3459be1940000",
    "0x6a05b21c4f17f9d73f5fb2b0cb89ff5356a6cc7e": "0x5150ae84a8cdf00000",
    "0x6a0f056066c2d56628850273d7ecb7f8e6e9129e": "0x10f0d293cc7a5880000",
    "0x6a13d5e32c1fd26d7e91ff6e053160a89b2c8aad": "0x2e62f20a69be40000",
    "0x6a2e86469a5bf37cee82e88b4c3863895d28fcaf": "0x1c229266385bbc0000",
    "0x6a3694424c7cc6b8bcd9bccaba540cc1f5df18d7": "0x6c6b935b8bbd400000",
    "0x6a42ca971c6578d5ade295c3e7f4ad331dd3424e": "0x14542ba12a337c00000",
    "0x6a44af96b3f032ae641beb67f4b6c83342d37c5d": "0x19274b259f6540000",
    "0x6a4c8907b600248057b1e46354b19bdc859c991a": "0x1158e460913d00000",
    "0x6a514e6242f6b68c137e97fea1e78eb555a7e5f7": "0x1158e460913d00000",
    "0x6a53d41ae4a752b21abed5374649953a513de5e5": "0x6c6b935b8bbd400000",
    "0x6a6159074ab573e0ee581f0f3df2d6a594629b74": "0x10ce1d3d8cb3180000",
    "0x6a6337833f8f6a6bf10ca7ec21aa810ed444f4cb": "0x37bd24345ce8a40000",
    "0x6a6353b971589f18f2955cba28abe8acce6a5761": "0xa2a15d09519be00000",
    "0x6a63fc89abc7f36e282d80787b7b04afd6553e71": "0x8ac7230489e800000",
    "0x6a679e378fdce6bfd97fe62f043c6f6405d79e99": "0xd8d726b7177a800000",
    "0x6a686bf220b593deb9b7324615fb9144ded3f39d": "0x4f2591f896a6500000",
    "0x6a6b18a45a76467e2e5d5a2ef911c3e12929857b": "0x115d3a99a9614f400000",
    "0x6a74844d8e9cb5581c45079a2e94462a6cee8821": "0x3ab53a552dd4c90000",
    "0x6a7b2e0d88867ff15d207c222bebf94fa6ce8397": "0xcb49b44ba602d800000",
    "0x6a7c252042e7468a3ff773d6450bba85efa26391": "0x1b1ae4d6e2ef500000",
    "0x6a8a4317c45faa0554ccdb482548183e295a24b9": "0x3635c9adc5dea00000",
    "0x6a8cea2de84a8df997fd3f84e3083d93de57cda9": "0x56be03ca3e47d8000",
    "0x6a9758743b603eea3aa0524b42889723c4153948": "0x22385a827e815500000",
    "0x6aa5732f3b86fb8c81efbe6b5b47b563730b06c8": "0x3635c9adc5dea00000",
    "0x6ab323ae5056ed0a453072c5abe2e42fcf5d7139": "0x2fb474098f67c00000",
    "0x6ab5b4c41cddb829690c2fda7f20c85e629dd5d5": "0x64d4af714c32900000",
    "0x6ac40f532dfee5118117d2ad352da77d4f6da2c8": "0x15af1d78b58c400000",
    "0x6ac4d4be2db0d99da3faaaf7525af282051d6a90": "0x458ca58a962b28000",
    "0x6acddca3cd2b4990e25cd65c24149d0912099e79": "0xa2a1e07c9f6c908000",
    "0x6ad90be252d9cd464d998125fab693060ba8e429": "0xd8d726b7177a800000",
    "0x6add932193cd38494aa3f03aeccc4b7ab7fabca2": "0x4db73254763000000",
    "0x6ae57f27917c562a132a4d1bf7ec0ac785832926": "0x14542ba12a337c00000",
    "0x6aeb9f74742ea491813dbbf0d6fcde1a131d4db3": "0x17e554308aa0300000",
    "0x6af235d2bbe050e6291615b71ca5829658810142": "0xa2a15d09519be00000",
    "0x6af6c7ee99df271ba15bf384c0b764adcb4da182": "0x36356633ebd8ea0000",
    "0x6af8e55969682c715f48ad4fc0fbb67eb59795a3": "0x6c6b935b8bbd400000",
    "0x6af940f63ec9b8d876272aca96fef65cdacecdea": "0xa2a15d09519be00000",
    "0x6af9f0dfeeaebb5f64bf91ab771669bf05295553": "0x15af1d78b58c400000",
    "0x6aff1466c2623675e3cb0e75e423d37a25e442eb": "0x5dc892aa1131c80000",
    "0x6b0da25af267d7836c226bcae8d872d2ce52c941": "0x14542ba12a337c00000",
    "0x6b10f8f8b3e3b60de90aa12d155f9ff5ffb22c50": "0x6c6b935b8bbd400000",
    "0x6b17598a8ef54f797ae515ccb6517d1859bf8011": "0x56bc75e2d63100000",
    "0x6b20c080606a79c73bd8e75b11717a4e8db3f1c3": "0x103f735803f0140000",
    "0x6b2284440221ce16a8382de5ff0229472269deec": "0x3635c9adc5dea00000",
    "0x6b30f1823910b86d3acb5a6afc9defb6f3a30bf8": "0xe3aeb5737240a00000",
    "0x6b38de841fad7f53fe02da115bd86aaf662466bd": "0x5dc892aa1131c80000",
    "0x6b4b99cb3fa9f7b74ce3a48317b1cd13090a1a7a": "0x31b327e695de20000",
    "0x6b5ae7bf78ec75e90cb503c778ccd3b24b4f1aaf": "0x2b5e3af16b18800000",
    "0x6b63a2dfb2bcd0caec0022b88be30c1451ea56aa": "0x2bdb6bf91f7f4c8000",
    "0x6b6577f3909a4d6de0f411522d4570386400345c": "0x65ea3db75546600000",
    "0x6b72a8f061cfe6996ad447d3c72c28c0c08ab3a7": "0xe78c6ac79912620000",
    "0x6b760d4877e6a627c1c967bee451a8507ddddbab": "0x3154c9729d05780000",
    "0x6b83bae7b565244558555bcf4ba8da2011891c17": "0x6c6b935b8bbd400000",
    "0x6b925dd5d8ed6132ab6d0860b82c44e1a51f1fee": "0x503b203e9fba200000",
    "0x6b94615db750656ac38c7e1cf29a9d13677f4e15": "0x28a857425466f800000",
    "0x6b951a43274eeafc8a0903b0af2ec92bf1efc839": "0x56bc75e2d63100000",
    "0x6b992521ec852370848ad697cc2df64e63cc06ff": "0x3635c9adc5dea00000",
    "0x6ba8f7e25fc2d871618e24e40184199137f9f6aa": "0x15af64869a6bc20000",
    "0x6ba9b21b35106be159d1c1c2657ac56cd29ffd44": "0xf2dc7d47f156000000",
    "0x6baf7a2a02ae78801e8904ad7ac05108fc56cff6": "0x3635c9adc5dea00000",
    "0x6bb2aca23fa1626d18efd6777fb97db02d8e0ae4": "0x878678326eac9000000",
    "0x6bb4a661a33a71d424d49bb5df28622ed4dffcf4": "0x222c8eb3ff66400000",
    "0x6bb50813146a9add42ee22038c9f1f7469d47f47": "0xada55474b81340000",
    "0x6bbc3f358a668dd1a11f0380f3f73108426abd4a": "0xd8d726b7177a800000",
    "0x6bbd1e719390e6b91043f8b6b9df898ea8001b34": "0x6c6c4fa6c3da588000",
    "0x6bc85acd5928722ef5095331ee88f484b8cf8357": "0x9c2007651b2500000",
    "0x6bd3e59f239fafe4776bb9bddd6bee83ba5d9d9f": "0x3635c9adc5dea00000",
    "0x6bd457ade051795df3f2465c3839aed3c5dee978": "0x3634bf39ab98788000",
    "0x6be16313643ebc91ff9bb1a2e116b854ea933a45": "0x1b1ae4d6e2ef500000",
    "0x6be7595ea0f068489a2701ec4649158ddc43e178": "0x6c6b935b8bbd400000",
    "0x6be9030ee6e2fbc491aca3de4022d301772b7b7d": "0x1731790534df20000",
    "0x6bec311ad05008b4af353c958c40bd06739a3ff3": "0x377f62a0f0a62700000",
    "0x6bf7b3c065f2c1e7c6eb092ba0d15066f393d1b8": "0x15af1d78b58c400000",
    "0x6bf86f1e2f2b8032a95c4d7738a109d3d0ed8104": "0x62a992e53a0af00000",
    "0x6c05e34e5ef2f42ed09deff1026cd66bcb6960bb": "0x6c6b935b8bbd400000",
    "0x6c08a6dc0173c7342955d1d3f2c065d62f83aec7": "0x1158e460913d00000",
    "0x6c0ae9f043c834d44271f13406593dfe094f389f": "0x52442ae133b62a8000",
    "0x6c0cc917cbee7d7c099763f14e64df7d34e2bf09": "0xd8d726b7177a80000",
    "0x6c0e712f405c59725fe829e9774bf4df7f4dd965": "0xc2868889ca68a440000",
    "0x6c101205b323d77544d6dc52af37aca3cec6f7f1": "0x21e19e0c9bab2400000",
    "0x6c15ec3520bf8ebbc820bd0ff19778375494cf9d": "0x6cb7e74867d5e60000",
    "0x6c1ddd33c81966dc8621776071a4129482f2c65f": "0x878678326eac9000000",
    "0x6c25327f8dcbb2f45e561e86e35d8850e53ab059": "0x3bcdf9bafef2f00000",
    "0x6c2e9be6d4ab450fd12531f33f028c614674f197": "0xc2127af858da700000",
    "0x6c359e58a13d4578a9338e335c67e7639f5fb4d7": "0xbd15b94fc8b280000",
    "0x6c3d18704126aa99ee3342ce60f5d4c85f1867cd": "0x2b5e3af16b1880000",
    "0x6c474bc66a54780066aa4f512eefa773abf919c7": "0x5188315f776b80000",
    "0x6c4e426e8dc005dfa3516cb8a680b02eea95ae8e": "0x487a9a304539440000",
    "0x6c52cf0895bb35e656161e4dc46ae0e96dd3e62c": "0xd8d8583fa2d52f0000",
    "0x6c5422fb4b14e6d98b6091fdec71f1f08640419d": "0x15af1d78b58c400000",
    "0x6c5c3a54cda7c2f118edba434ed81e6ebb11dd7a": "0xad78ebc5ac6200000",
    "0x6c63f84556d290bfcd99e434ee9997bfd779577a": "0x6c6b935b8bbd400000",
    "0x6c63fc85029a2654d79b2bea4de349e4524577c5": "0x23c757072b8dd00000",
    "0x6c6564e5c9c24eaaa744c9c7c968c9e2c9f1fbae": "0x499b42a21139640000",
    "0x6c67d6db1d03516c128b8ff234bf3d49b26d2941": "0x152d02c7e14af6800000",
    "0x6c67e0d7b62e2a08506945a5dfe38263339f1f22": "0x6acb3df27e1f880000",
    "0x6c6aa0d30b64721990b9504a863fa0bfb5e57da7": "0x925e06eec972b00000",
    "0x6c714a58fff6e97d14b8a5e305eb244065688bbd": "0xd8d726b7177a800000",
    "0x6c800d4b49ba07250460f993b8cbe00b266a2553": "0x1ab2cf7c9f87e20000",
    "0x6c808cabb8ff5fbb6312d9c8e84af8cf12ef0875": "0xd8d8583fa2d52f0000",
    "0x6c822029218ac8e98a260c1e064029348839875b": "0x10f97b787e1e3080000",
    "0x6c84cba77c6db4f7f90ef13d5ee21e8cfc7f8314": "0x6c6b935b8bbd400000",
    "0x6c8687e3417710bb8a93559021a1469e6a86bc77": "0x25b2da278d96b7b8000",
    "0x6c882c27732cef5c7c13a686f0a2ea77555ac289": "0x152d02c7e14af6800000",
    "0x6ca5de00817de0cedce5fd000128dede12648b3c": "0x1158e460913d00000",
    "0x6ca6a132ce1cd288bee30ec7cfeffb85c1f50a54": "0x6c6b935b8bbd400000",
    "0x6cb11ecb32d3ce829601310636f5a10cf7cf9b5f": "0x43fe8949c3801f50000",
    "0x6cc1c878fa6cde8a9a0b8311247e741e4642fe6d": "0x35659ef93f0fc40000",
    "0x6ccb03acf7f53ce87aadcc21a9932de915f89804": "0x1b1ae4d6e2ef5000000",
    "0x6cd212aee04e013f3d2abad2a023606bfb5c6ac7": "0x6c6acc67d7b1d40000",
    "0x6cd228dc712169307fe27ceb7477b48cfc8272e5": "0x434ea94db8a500000",
    "0x6ce1b0f6adc47051e8ab38b39edb4186b03babcc": "0x41799794cd24cc0000",
    "0x6ceae3733d8fa43d6cd80c1a96e8eb93109c83b7": "0x102794ad20da680000",
    "0x6d0569e5558fc7df2766f2ba15dc8aeffc5beb75": "0xd8e6001e6c302b0000",
    "0x6d120f0caae44fd94bcafe55e2e279ef96ba5c7a": "0xd8d726b7177a800000",
    "0x6d1456fff0104ee844a3314737843338d24cd66c": "0x7b06ce87fdd680000",
    "0x6d20ef9704670a500bb269b5832e859802049f01": "0x70c1cc73b00c80000",
    "0x6d2f976734b9d0070d1883cf7acab8b3e4920fc1": "0x21e19e0c9bab2400000",
    "0x6d39a9e98f81f769d73aad2cead276ac1387babe": "0x155bd9307f9fe80000",
    "0x6d3b7836a2b9d899721a4d237b522385dce8dfcd": "0x3636c25e66ece70000",
    "0x6d3f2ba856ccbb0237fa7661156b14b013f21240": "0x3635c9adc5dea00000",
    "0x6d4008b4a888a826f248ee6a0b0dfde9f93210b9": "0x127fcb8afae20d00000",
    "0x6d40ca27826d97731b3e86effcd7b92a4161fe89": "0x6c6b935b8bbd400000",
    "0x6d44974a31d187eda16ddd47b9c7ec5002d61fbe": "0x32f51edbaaa3300000",
    "0x6d4b5c05d06a20957e1748ab6df206f343f92f01": "0x21f360699bf825f8000",
    "0x6d4cbf3d8284833ae99344303e08b4d614bfda3b": "0x28a857425466f800000",
    "0x6d59b21cd0e2748804d9abe064eac2bef0c95f27": "0x6c6b935b8bbd400000",
    "0x6d63d38ee8b90e0e6ed8f192eda051b2d6a58bfd": "0x1a055690d9db80000",
    "0x6d6634b5b8a40195d949027af4828802092ceeb6": "0xa2a15d09519be00000",
    "0x6d7d1c949511f88303808c60c5ea0640fcc02683": "0x21e19e0c9bab2400000",
    "0x6d846dc12657e91af25008519c3e857f51707dd6": "0xf8d30bc92342f80000",
    "0x6d9193996b194617211106d1635eb26cc4b66c6c": "0x15aa1e7e9dd51c0000",
    "0x6d9997509882027ea947231424bedede2965d0ba": "0x6c81c7b31195e00000",
    "0x6da0ed8f1d69339f059f2a0e02471cb44fb8c3bb": "0x32bc38bb63a8160000",
    "0x6db72bfd43fef465ca5632b45aab7261404e13bf": "0x6c6b935b8bbd400000",
    "0x6dbe8abfa1742806263981371bf3d35590806b6e": "0x43c33c1937564800000",
    "0x6dc3f92baa1d21dab7382b893261a0356fa7c187": "0x5dc892aa1131c80000",
    "0x6dc7053a718616cfc78bee6382ee51add0c70330": "0x6c6b935b8bbd400000",
    "0x6dcc7e64fcafcbc2dc6c0e5e662cb347bffcd702": "0x43c33c1937564800000",
    "0x6dda5f788a6c688ddf921fa3852eb6d6c6c62966": "0x22b1c8c1227a00000",
    "0x6ddb6092779d5842ead378e21e8120fd4c6bc132": "0x6c6b935b8bbd400000",
    "0x6ddfef639155daab0a5cb4953aa8c5afaa880453": "0x62a992e53a0af00000",
    "0x6de02f2dd67efdb7393402fa9eaacbcf589d2e56": "0x40138b917edfb80000",
    "0x6de4b581385cf7fc9fe8c77d131fe2ee7724c76a": "0x7d2997733dcce40000",
    "0x6de4d15219182faf3aa2c5d4d2595ff23091a727": "0x55a6e79ccd1d300000",
    "0x6dedf62e743f4d2c2a4b87a787f5424a7aeb393c": "0x9c2007651b2500000",
    "0x6df24f6685a62f791ba337bf3ff67e91f3d4bc3a": "0x756b49d40a48180000",
    "0x6df5c84f7b909aab3e61fe0ecb1b3bf260222ad2": "0xd8d726b7177a800000",
    "0x6dff90e6dc359d2590882b1483edbcf887c0e423": "0x3635c9adc5dea00000",
    "0x6e01e4ad569c95d007ada30d5e2db12888492294": "0xd8d726b7177a800000",
    "0x6e073b66d1b8c66744d88096a8dd99ec7e0228da": "0xd8d726b7177a800000",
    "0x6e0ee70612c976287d499ddfa6c0dcc12c06deea": "0x70bd5b95621460000",
    "0x6e12b51e225b4a4372e59ad7a2a1a13ea3d3a137": "0x30046c8cc775f040000",
    "0x6e1a046caf5b4a57f4fd4bc173622126b4e2fd86": "0x61093d7c2c6d380000",
    "0x6e1ea4b183e252c9bb7767a006d4b43696cb8ae9": "0xff3783c85eed08000",
    "0x6e255b700ae7138a4bacf22888a9e2c00a285eec": "0xd8d726b7177a800000",
    "0x6e270ad529f1f0b8d9cb6d2427ec1b7e2dc64a74": "0xad78ebc5ac6200000",
    "0x6e2eab85dc89fe29dc0aa1853247dab43a523d56": "0x4563918244f400000",
    "0x6e3a51db743d334d2fe88224b5fe7c008e80e624": "0x5bf0ba6634f680000",
    "0x6e4c2ab7db026939dbd3bc68384af660a61816b2": "0x90d972f32323c0000",
    "0x6e4d2e39c8836629e5b487b1918a669aebdd9536": "0x3635c9adc5dea00000",
    "0x6e5c2d9b1c546a86eefd5d0a5120c9e4e730190e": "0xad201a6794ff80000",
    "0x6e60aee1a78f8eda8b424c73e353354ae67c3042": "0xbd35a48d9919e60000",
    "0x6e64e6129f224e378c0e6e736a7e7a06c211e9ec": "0x3635c9adc5dea00000",
    "0x6e6d5bbbb9053b89d744a27316c2a7b8c09b547d": "0x3152710a023e6d8000",
    "0x6e72b2a1186a8e2916543b1cb36a68870ea5d197": "0xa1544be879ea80000",
    "0x6e761eaa0f345f777b5441b73a0fa5b56b85f22d": "0x6c6b935b8bbd400000",
    "0x6e79edd4845b076e4cd88d188b6e432dd93f35aa": "0x33c5499031720c0000",
    "0x6e8212b722afd408a7a73ed3e2395ee6454a0330": "0x89e917994f71c0000",
    "0x6e84876dbb95c40b6656e42ba9aea08a993b54dc": "0x3bbc60e3b6cbbe0000",
    "0x6e84c2fd18d8095714a96817189ca21cca62bab1": "0x127b6c702621cd8000",
    "0x6e866d032d405abdd65cf651411d803796c22311": "0x6c6b935b8bbd400000",
    "0x6e899e59a9b41ab7ea41df7517860f2acb59f4fd": "0x43c33c1937564800000",
    "0x6e89c51ea6de13e06cdc748b67c4410fe9bcab03": "0xd8d726b7177a800000",
    "0x6e8a26689f7a2fdefd009cbaaa5310253450daba": "0x6f213717bad8d30000",
    "0x6e96faeda3054302c45f58f161324c99a3eebb62": "0x1158e460913d00000",
    "0x6eb0a5a9ae96d22cf01d8fd6483b9f38f08c2c8b": "0xd8d726b7177a800000",
    "0x6eb3819617404058268f0c3cff3596bfe9148c1c": "0x5a87e7d7f5f6580000",
    "0x6eb5578a6bb7c32153195b0d8020a6914852c059": "0x8bc2abf40221f4800000",
    "0x6ebb5e6957aa821ef659b6018a393a504cae4450": "0x6c6b935b8bbd400000",
    "0x6ebcf9957f5fc5e985add475223b04b8c14a7aed": "0x5dc892aa1131c80000",
    "0x6ec3659571b11f889dd439bcd4d67510a25be57e": "0x6aaf7c8516d0c0000",
    "0x6ec89b39f9f5276a553e8da30e6ec17aa47eefc7": "0x18424f5f0b1b4e0000",
    "0x6ec96d13bdb24dc7a557293f029e02dd74b97a55": "0xd8d726b7177a800000",
    "0x6ecaefa6fc3ee534626db02c6f85a0c395571e77": "0x2086ac351052600000",
    "0x6ed2a12b02f8c688c7b5d3a6ea14d63687dab3b6": "0x6c6b935b8bbd400000",
    "0x6ed884459f809dfa1016e770edaf3e9fef46fa30": "0xb852d6782093f10000",
    "0x6edf7f5283725c953ee64317f66188af1184b033": "0x1b464311d45a6880000",
    "0x6ee8aad7e0a065d8852d7c3b9a6e5fdc4bf50c00": "0x1158e460913d00000",
    "0x6eefdc850e87b715c72791773c0316c3559b58a4": "0xd8d726b7177a800000",
    "0x6ef9e8c9b6217d56769af97dbb1c8e1b8be799d2": "0x9ddc1e3b901180000",
    "0x6efba8fb2ac5b6730729a972ec224426a287c3ad": "0xf5985fbcbe1680000",
    "0x6efd90b535e00bbd889fda7e9c3184f879a151db": "0x22385a827e815500000",
    "0x6f051666cb4f7bd2b1907221b829b555d7a3db74": "0x5f68e8131ecf800000",
    "0x6f0edd23bcd85f6015f9289c28841fe04c83efeb": "0x10910d4cdc9f60000",
    "0x6f137a71a6f197df2cbbf010dcbd3c444ef5c925": "0x6c6b935b8bbd400000",
    "0x6f176065e88e3c6fe626267d18a088aaa4db80bc": "0xbed1d0263d9f000000",
    "0x6f18ec767e320508195f1374500e3f2e125689ff": "0x3635c9adc5dea00000",
    "0x6f1f4907b8f61f0c51568d692806b382f50324f5": "0x6c6b935b8bbd400000",
    "0x6f24c9af2b763480515d1b0951bb77a540f1e3f9": "0x6acb3df27e1f880000",
    "0x6f2576da4de283bbe8e3ee69ddd66e5e711db3f5": "0x44591d67fecc800000",
    "0x6f29bb375be5ed34ed999bb830ee2957dde76d16": "0x6c6b935b8bbd400000",
    "0x6f2a31900e240395b19f159c1d00dfe4d898ebdf": "0x6c660645aa47180000",
    "0x6f2a42e6e033d01061131929f7a6ee1538021e52": "0x6c6b935b8bbd400000",
    "0x6f39cc37caaa2ddc9b610f6131e0619fae772a3c": "0x1b1ae4d6e2ef500000",
    "0x6f44ca09f0c6a8294cbd519cdc594ad42c67579f": "0x2b5e3af16b1880000",
    "0x6f50929777824c291a49c46dc854f379a6bea080": "0x138400eca364a00000",
    "0x6f6cf20649a9e973177ac67dbadee4ebe5c7bdda": "0x11363297d01a8600000",
    "0x6f791d359bc3536a315d6382b88311af8ed6da47": "0x4fcc1a89027f00000",
    "0x6f794dbdf623daa6e0d00774ad6962737c921ea4": "0x6c6b935b8bbd400000",
    "0x6f7ac681d45e418fce8b3a1db5bc3be6f06c9849": "0x6c6b935b8bbd400000",
    "0x6f81f3abb1f933b1df396b8e9cc723a89b7c9806": "0xf2dc7d47f15600000",
    "0x6f8f0d15cc96fb7fe94f1065bc6940f8d12957b2": "0x3635c9adc5dea00000",
    "0x6f92d6e4548c78996509ee684b2ee29ba3c532b4": "0x3635c9adc5dea00000",
    "0x6fa60df818a5446418b1bbd62826e0b9825e1318": "0x2cb92cc8f6714400000",
    "0x6fa6388d402b30afe59934c3b9e13d1186476018": "0x24521e2a3017b80000",
    "0x6fa72015fa78696efd9a86174f7f1f21019286b1": "0x487a9a304539440000",
    "0x6fc25e7e00ca4f60a9fe6f28d1fde3542e2d1079": "0x2aef353bcddd600000",
    "0x6fc53662371dca587b59850de78606e2359df383": "0x9c2007651b2500000",
    "0x6fcc2c732bdd934af6ccd16846fb26ef89b2aa9b": "0x21e2b1d42261d490000",
    "0x6fd4e0f3f32bee6d3767fdbc9d353a6d3aab7899": "0x25b064a875ea940000",
    "0x6fd947d5a73b175008ae6ee8228163da289b167d": "0x65a4da25d3016c00000",
    "0x6fd98e563d12ce0fd60f4f1f850ae396a9823c02": "0x445be3f2ef87940000",
    "0x6fddbd9bca66e28765c2162c8433548c1052ed11": "0x1184429b82a818800000",
    "0x6ff5d361b52ad0b68b1588607ec304ae5665fc98": "0x692ae8897081d00000",
    "0x6ff6cc90d649de4e96cffee1077a5b302a848dcb": "0x18ce79c78802c0000",
    "0x6ffe5cf82cc9ea5e36cad7c2974ce7249f3749e6": "0x692ae8897081d00000",
    "0x7005a772282b1f62afda63f89b5dc6ab64c84cb9": "0x3cfc82e37e9a7400000",
    "0x700711e311bb947355f755b579250ca7fd765a3e": "0x61093d7c2c6d380000",
    "0x7010be2df57bd0ab9ae8196cd50ab0c521aba9f9": "0x6acb3df27e1f880000",
    "0x7023c70956e04a92d70025aad297b539af355869": "0x6c6b935b8bbd400000",
    "0x7025965d2b88da197d4459be3dc9386344cc1f31": "0x6cb7e74867d5e60000",
    "0x702802f36d00250fab53adbcd696f0176f638a49": "0x6c6b935b8bbd400000",
    "0x704819d2e44d6ed1da25bfce84c49fcca25613e5": "0x15af1d78b58c400000",
    "0x704a6eb41ba34f13addde7d2db7df04915c7a221": "0x62a992e53a0af00000",
    "0x704ab1150d5e10f5e3499508f0bf70650f028d4b": "0xd8d726b7177a800000",
    "0x704ae21d762d6e1dde28c235d13104597236db1a": "0x6c6b935b8bbd400000",
    "0x704d243c2978e46c2c86adbecd246e3b295ff633": "0x6d121bebf795f00000",
    "0x704d5de4846d39b53cd21d1c49f096db5c19ba29": "0x83d6c7aab63600000",
    "0x705ddd38355482b8c7d3b515bda1500dd7d7a817": "0x15af1d78b58c400000",
    "0x70616e2892fa269705b2046b8fe3e72fa55816d3": "0x43c33c1937564800000",
    "0x70670fbb05d33014444b8d1e8e7700258b8caa6d": "0x6c6b935b8bbd400000",
    "0x7081fa6baad6cfb7f51b2cca16fb8970991a64ba": "0xcaec005f6c0f68000",
    "0x7085ae7e7e4d932197b5c7858c00a3674626b7a5": "0x14542ba12a337c00000",
    "0x7086b4bde3e35d4aeb24b825f1a215f99d85f745": "0x6c68ccd09b022c0000",
    "0x708a2af425ceb01e87ffc1be54c0f532b20eacd6": "0x745d483b1f5a18000",
    "0x708ea707bae4357f1ebea959c3a250acd6aa21b3": "0x1b1ae4d6e2ef500000",
    "0x708fa11fe33d85ad1befcbae3818acb71f6a7d7e": "0xfc936392801c0000",
    "0x7091303116d5f2389b23238b4d656a8596d984d3": "0x3b4e7e80aa58330000",
    "0x7099d12f6ec656899b049a7657065d62996892c8": "0x15af1d78b58c400000",
    "0x709fe9d2c1f1ce42207c9585044a60899f35942f": "0x6c6b935b8bbd400000",
    "0x70a03549aa6168e97e88a508330a5a0bea74711a": "0x487a9a304539440000",
    "0x70a4067d448cc25dc8e70e651cea7cf84e92109e": "0x98a7d9b8314c00000",
    "0x70ab34bc17b66f9c3b63f151274f2a727c539263": "0x6c6b935b8bbd400000",
    "0x70c213488a020c3cfb39014ef5ba6404724bcaa3": "0x692ae8897081d00000",
    "0x70d25ed2c8ada59c088cf70dd22bf2db93acc18a": "0x39474545e4adbc0000",
    "0x70e5e9da735ff077249dcb9aaf3db2a48d9498c0": "0x3635c9adc5dea00000",
    "0x70fee08b00c6c2c04a3c625c1ff77caf1c32df01": "0xad78ebc5ac6200000",
    "0x7101bd799e411cde14bdfac25b067ac890eab8e8": "0x4e9b8aae48de470000",
    "0x7109dd011d15f3122d9d3a27588c10d77744508b": "0x6c6b935b8bbd400000",
    "0x710b0274d712c77e08a5707d6f3e70c0ce3d92cf": "0x15af1d78b58c4000000",
    "0x710be8fd5e2918468be2aabea80d828435d79612": "0xf43fc2c04ee00000",
    "0x71135d8f05963c905a4a07922909235a896a52ea": "0xa2a15d09519be00000",
    "0x711ecf77d71b3d0ea95ce4758afecdb9c131079d": "0x29331e6558f0e00000",
    "0x71213fca313404204ecba87197741aa9dfe96338": "0x340aad21b3b700000",
    "0x712b76510214dc620f6c3a1dd29aa22bf6d214fb": "0x14542ba12a337c00000",
    "0x712ff7370a13ed360973fedc9ff5d2c93a505e9e": "0xd5967be4fc3f100000",
    "0x7133843a78d939c69d4486e10ebc7b602a349ff7": "0x11d5cacce21f840000",
    "0x7148aef33261d8031fac3f7182ff35928daf54d9": "0xde42ee1544dd900000",
    "0x7163758cbb6c4c525e0414a40a049dcccce919bb": "0xad78ebc5ac6200000",
    "0x7168b3bb8c167321d9bdb023a6e9fd11afc9afd9": "0x61093d7c2c6d380000",
    "0x7169724ee72271c534cad6420fb04ee644cb86fe": "0x163c2b40dba5520000",
    "0x716ad3c33a9b9a0a18967357969b94ee7d2abc10": "0x1a2117fe412a480000",
    "0x716ba01ead2a91270635f95f25bfaf2dd610ca23": "0x979e7012056aa780000",
    "0x716d50cca01e938500e6421cc070c3507c67d387": "0x6c6b935b8bbd400000",
    "0x71762c63678c18d1c6378ce068e666381315147e": "0x6c6b935b8bbd400000",
    "0x71784c105117c1f68935797fe159abc74e43d16a": "0x6c81c7b31195e00000",
    "0x7179726f5c71ae1b6d16a68428174e6b34b23646": "0x18ea250097cbaf60000",
    "0x717cf9beab3638308ded7e195e0c86132d163fed": "0x3326ee6f865f4220000",
    "0x7180b83ee5574317f21c8072b191d895d46153c3": "0x18efc84ad0c7b00000",
    "0x71946b7117fc915ed107385f42d99ddac63249c2": "0x6c6b935b8bbd400000",
    "0x719e891fbcc0a33e19c12dc0f02039ca05b801df": "0x14f5538463a1b540000",
    "0x71c7230a1d35bdd6819ed4b9a88e94a0eb0786dd": "0xeca08b353d24140000",
    "0x71d2cc6d02578c65f73c575e76ce8fbcfadcf356": "0x3ecc078688a480000",
    "0x71d9494e50c5dd59c599dba3810ba1755e6537f0": "0xd8d726b7177a800000",
    "0x71e38ff545f30fe14ca863d4f5297fd48c73a5ce": "0xc2127af858da700000",
    "0x71ea5b11ad8d29b1a4cb67bf58ca6c9f9c338c16": "0x56bc75e2d631000000",
    "0x71ec3aec3f8f9221f9149fede06903a0f9a232f2": "0xad78ebc5ac6200000",
    "0x71f2cdd1b046e2da2fbb5a26723422b8325e25a3": "0x56b394263a40c0000",
    "0x71fa22cc6d33206b7d701a163a0dab31ae4d31d6": "0x57473d05dabae80000",
    "0x7201d1c06920cd397ae8ad869bcda6e47ffb1b5a": "0x1158e460913d00000",
    "0x72072a0ef1cff3d567cdd260e708ddc11cbc9a31": "0x56bc75e2d63100000",
    "0x72094f3951ffc9771dced23ada080bcaf9c7cca7": "0x14542ba12a337c00000",
    "0x720994dbe56a3a95929774e20e1fe525cf3704e4": "0x1b1ae4d6e2ef5000000",
    "0x720e6b22bf430966fa32b6acb9a506eebf662c61": "0x83d6c7aab63600000",
    "0x721158be5762b119cc9b2035e88ee4ee78f29b82": "0x21e19e0c9bab2400000",
    "0x721f9d17e5a0e74205947aeb9bc6a7938961038f": "0x2d041d705a2c60000",
    "0x7222fec7711781d26eaa4e8485f7aa3fac442483": "0x18b84570022a200000",
    "0x72393d37b451effb9e1ff3b8552712e2a970d8c2": "0x35659ef93f0fc40000",
    "0x723d8baa2551d2addc43c21b45e8af4ca2bfb2c2": "0x5f68e8131ecf800000",
    "0x72402300e81d146c2e644e2bbda1da163ca3fb56": "0x17b7883c06916600000",
    "0x72480bede81ad96423f2228b5c61be44fb523100": "0x15af1d78b58c4000000",
    "0x724ce858857ec5481c86bd906e83a04882e5821d": "0xa2a15d09519be00000",
    "0x726a14c90e3f84144c765cffacba3e0df11b48be": "0x21e19e0c9bab2400000",
    "0x7283cd4675da58c496556151dafd80c7f995d318": "0x29331e6558f0e00000",
    "0x7286e89cd9de8f7a8a00c86ffdb53992dd9251d1": "0x692ae8897081d00000",
    "0x728f9ab080157db3073156dbca1a169ef3179407": "0x1b1ae4d6e2ef500000",
    "0x7294c918b1aefb4d25927ef9d799e71f93a28e85": "0xaadec983fcff40000",
    "0x7294ec9da310bc6b4bbdf543b0ef45abfc3e1b4d": "0x4a89f54ef0121c00000",
    "0x729aad4627744e53f5d66309aa74448b3acdf46f": "0x6c6b935b8bbd400000",
    "0x72a2fc8675feb972fa41b50dffdbbae7fa2adfb7": "0x9ab4fc67b528c80000",
    "0x72a8260826294726a75bf39cd9aa9e07a3ea14cd": "0x6c6b935b8bbd400000",
    "0x72b05962fb2ad589d65ad16a22559eba1458f387": "0x73f75d1a085ba0000",
    "0x72b5633fe477fe542e742facfd690c137854f216": "0x5a87e7d7f5f6580000",
    "0x72b7a03dda14ca9c661a1d469fd33736f673c8e8": "0x6c6b935b8bbd400000",
    "0x72b904440e90e720d6ac1c2ad79c321dcc1c1a86": "0x54069233bf7f780000",
    "0x72b90a4dc097239492c5b9777dcd1e52ba2be2c2": "0x14542ba12a337c00000",
    "0x72bb27cb99f3e2c2cf90a98f707d30e4a201a071": "0x58e7926ee858a00000",
    "0x72c083beadbdc227c5fb43881597e32e83c26056": "0x43c33c1937564800000",
    "0x72cd048a110574482983492dfb1bd27942a696ba": "0x6c6b935b8bbd400000",
    "0x72d03d4dfab3500cf89b86866f15d4528e14a195": "0xf34b82fd8e91200000",
    "0x72dabb5b6eed9e99be915888f6568056381608f8": "0xb4c96c52cb4fe8000",
    "0x72fb49c29d23a18950c4b2dc0ddf410f532d6f53": "0x6c6b935b8bbd400000",
    "0x72feaf124579523954645b7fafff0378d1c8242e": "0x3635c9adc5dea00000",
    "0x7301dc4cf26d7186f2a11bf8b08bf229463f64a3": "0x6c6b935b8bbd400000",
    "0x730447f97ce9b25f22ba1afb36df27f9586beb9b": "0x2c73c937742c500000",
    "0x7306de0e288b56cfdf987ef0d3cc29660793f6dd": "0x1b8abfb62ec8f60000",
    "0x730d8763c6a4fd824ab8b859161ef7e3a96a1200": "0x43c33c1937564800000",
    "0x73128173489528012e76b41a5e28c68ba4e3a9d4": "0x3635c9adc5dea00000",
    "0x7313461208455455465445a459b06c3773b0eb30": "0x6c6b935b8bbd400000",
    "0x732fead60f7bfdd6a9dec48125e3735db1b6654f": "0x1158e460913d00000",
    "0x734223d27ff23e5906caed22595701bb34830ca1": "0x6c6b935b8bbd400000",
    "0x73473e72115110d0c3f11708f86e77be2bb0983c": "0x1158e460913d00000",
    "0x7352586d021ad0cf77e0e928404a59f374ff4582": "0xb8507a820728200000",
    "0x73550beb732ba9ddafda7ae406e18f7feb0f8bb2": "0x97c9ce4cf6d5c00000",
    "0x735b97f2fc1bd24b12076efaf3d1288073d20c8c": "0x1158e460913d00000",
    "0x735e328666ed5637142b3306b77ccc5460e72c3d": "0x6ab8f37879c9910000",
    "0x7363cd90fbab5bb8c49ac20fc62c398fe6fb744c": "0x6c6b935b8bbd400000",
    "0x736b44503dd2f6dd5469ff4c5b2db8ea4fec65d0": "0x1104ee759f21e30000",
    "0x736bf1402c83800f893e583192582a134eb532e9": "0x21e19d293c01f260000",
    "0x738ca94db7ce8be1c3056cd6988eb376359f3353": "0x5665b96cf35acf00000",
    "0x73914b22fc2f131584247d82be4fecbf978ad4ba": "0x6c6b935b8bbd400000",
    "0x73932709a97f02c98e51b091312865122385ae8e": "0x4d853c8f8908980000",
    "0x7393cbe7f9ba2165e5a7553500b6e75da3c33abf": "0x56bc75e2d63100000",
    "0x73b4d499de3f38bf35aaf769a6e318bc6d123692": "0x6c6b935b8bbd400000",
    "0x73bedd6fda7ba3272185087b6351fc133d484e37": "0x11226bf9dce59780000",
    "0x73bfe7710f31cab949b7a2604fbf5239cee79015": "0x6c6b935b8bbd400000",
    "0x73cf80ae9688e1580e68e782cd0811f7aa494d2c": "0x1a4aba225c207400000",
    "0x73d7269ff06c9ffd33754ce588f74a966abbbbba": "0x165c96647b38a200000",
    "0x73d8fee3cb864dce22bb26ca9c2f086d5e95e63b": "0x3635c9adc5dea00000",
    "0x73df3c3e7955f4f2d859831be38000b1076b3884": "0x6acb3df27e1f880000",
    "0x73e4a2b60cf48e8baf2b777e175a5b1e4d0c2d8f": "0x56bc75e2d63100000",
    "0x740af1eefd3365d78ba7b12cb1a673e06a077246": "0x42bf06b78ed3b500000",
    "0x740bfd52e01667a3419b029a1b8e45576a86a2db": "0x38ebad5cdc902800000",
    "0x740f641614779dcfa88ed1d425d60db42a060ca6": "0x3622c6760810570000",
    "0x7412c9bc30b4df439f023100e63924066afd53af": "0x1b1ae4d6e2ef500000",
    "0x741693c30376508513082020cc2b63e9fa92131b": "0x410d586a20a4c00000",
    "0x7421ce5be381738ddc83f02621974ff0686c79b8": "0x58788cb94b1d800000",
    "0x74316adf25378c10f576d5b41a6f47fa98fce33d": "0x1238131e5c7ad50000",
    "0x743651b55ef8429df50cf81938c2508de5c8870f": "0x6c6b935b8bbd400000",
    "0x743de50026ca67c94df54f066260e1d14acc11ac": "0x6c6b935b8bbd400000",
    "0x7445202f0c74297a004eb3726aa6a82dd7c02fa1": "0x6c6b935b8bbd400000",
    "0x744b03bba8582ae5498e2dc22d19949467ab53fc": "0x1b1ae4d6e2ef500000",
    "0x744c0c77ba7f236920d1e434de5da33e48ebf02c": "0x6acb3df27e1f880000",
    "0x7450ff7f99eaa9116275deac68e428df5bbcd8b9": "0x6c6b935b8bbd400000",
    "0x7456c5b2c5436e3e571008933f1805ccfe34e9ec": "0x3635c9adc5dea00000",
    "0x745ad3abc6eeeb2471689b539e789ce2b8268306": "0x3d4194bea011928000",
    "0x745aecbaf9bb39b74a67ea1ce623de368481baa6": "0x21e19e0c9bab2400000",
    "0x745ccf2d819edbbddea8117b5c49ed3c2a066e93": "0xd8d726b7177a800000",
    "0x7462c89caa9d8d7891b2545def216f7464d5bb21": "0x5eaed54a28b310000",
    "0x74648caac748dd135cd91ea14c28e1bd4d7ff6ae": "0xa80d24677efef00000",
    "0x7471f72eeb300624eb282eab4d03723c649b1b58": "0x1b1ae4d6e2ef5000000",
    "0x747abc9649056d3926044d28c3ad09ed17b67d70": "0x10f0dbae61009528000",
    "0x747ff7943b71dc4dcdb1668078f83dd7cc4520c2": "0x340aad21b3b700000",
    "0x7480de62254f2ba82b578219c07ba5be430dc3cb": "0x17da3a04c7b3e000000",
    "0x7484d26becc1eea8c6315ec3ee0a450117dc86a0": "0x28a857425466f800000",
    "0x74863acec75d03d53e860e64002f2c165e538377": "0x3635c9adc5dea00000",
    "0x7489cc8abe75cda4ef0d01cef2605e47eda67ab1": "0x73f75d1a085ba0000",
    "0x748c285ef1233fe4d31c8fb1378333721c12e27a": "0x6c6b935b8bbd400000",
    "0x749087ac0f5a97c6fad021538bf1d6cda18e0daa": "0x3635c9adc5dea00000",
    "0x7495ae78c0d90261e2140ef2063104731a60d1ed": "0x1db50718925210000",
    "0x749a4a768b5f237248938a12c623847bd4e688dc": "0x3e733628714200000",
    "0x749ad6f2b5706bbe2f689a44c4b640b58e96b992": "0x56bc75e2d63100000",
    "0x74a17f064b344e84db6365da9591ff1628257643": "0x1158e460913d00000",
    "0x74aeec915de01cc69b2cb5a6356feea14658c6c5": "0xc9a95ee2986520000",
    "0x74afe54902d615782576f8baac13ac970c050f6e": "0x9a1aaa3a9fba70000",
    "0x74b7e0228baed65957aebb4d916d333aae164f0e": "0x6c6b935b8bbd400000",
    "0x74bc4a5e2045f4ff8db184cf3a9b0c065ad807d2": "0x6c6b935b8bbd400000",
    "0x74bce9ec38362d6c94ccac26d5c0e13a8b3b1d40": "0x363526410442f50000",
    "0x74bf7a5ab59293149b5c60cf364263e5ebf1aa0d": "0x6470c3e771e3c0000",
    "0x74c73c90528a157336f1e7ea20620ae53fd24728": "0x1e63a2e538f16e30000",
    "0x74d1a4d0c7524e018d4e06ed3b648092b5b6af2c": "0x2b5e3af16b1880000",
    "0x74d366b07b2f56477d7c7077ac6fe497e0eb6559": "0x10f0cf064dd59200000",
    "0x74d37a51747bf8b771bfbf43943933d100d21483": "0x3635c9adc5dea00000",
    "0x74d671d99cbea1ab57906375b63ff42b50451d17": "0x3635c9adc5dea00000",
    "0x74ebf4425646e6cf81b109ce7bf4a2a63d84815f": "0x22b1c8c1227a00000",
    "0x74ed33acf43f35b98c9230b9e6642ecb5330839e": "0x24f6dffb498d280000",
    "0x74ef2869cbe608856045d8c2041118579f2236ea": "0x33cd64591956e0000",
    "0x74fc5a99c0c5460503a13b0509459da19ce7cd90": "0xad78ebc5ac6200000",
    "0x750bbb8c06bbbf240843cc75782ee02f08a97453": "0x2d43f3ebfafb2c0000",
    "0x7514adbdc63f483f304d8e94b67ff3309f180b82": "0x21c4a06e2d13598000",
    "0x7517f16c28d132bb40e3ba36c6aef131c462da17": "0xfc936392801c0000",
    "0x751a2ca34e7187c163d28e3618db28b13c196d26": "0x1b1ae4d6e2ef500000",
    "0x751abcb6cc033059911815c96fd191360ab0442d": "0x1b1ae4d6e2ef5000000",
    "0x7526e482529f0a14eec98871dddd0e721b0cd9a2": "0x1158e460913d00000",
    "0x7529f3797bb6a20f7ea6492419c84c867641d81c": "0x6c6b935b8bbd400000",
    "0x752a5ee232612cd3005fb26e5b597de19f776be6": "0x127fcb8afae20d00000",
    "0x752c9febf42f66c4787bfa7eb17cf5333bba5070": "0x6a99f2b54fdd580000",
    "0x7539333046deb1ef3c4daf50619993f444e1de68": "0x40138b917edfb80000",
    "0x7553aa23b68aa5f57e135fe39fdc235eaca8c98c": "0x3635c9adc5dea00000",
    "0x755a60bf522fbd8fff9723446b7e343a7068567e": "0x43c33c1937564800000",
    "0x755f587e5efff773a220726a13d0f2130d9f896b": "0x3635c9adc5dea00000",
    "0x75621865b6591365606ed378308c2d1def4f222c": "0xa80d24677efef00000",
    "0x75636cdb109050e43d5d6ec47e359e218e857eca": "0x4d8b2276c8962280000",
    "0x7566496162ba584377be040a4f87777a707acaeb": "0xd8d726b7177a800000",
    "0x756b84eb85fcc1f4fcdcc2b08db6a86e135fbc25": "0xae8e7a0bb575d00000",
    "0x756f45e3fa69347a9a973a725e3c98bc4db0b5a0": "0xad78ebc5ac6200000",
    "0x757b65876dbf29bf911d4f0692a2c9beb1139808": "0xdf93a59337d6dd8000",
    "0x757fa55446c460968bb74b5ebca96c4ef2c709c5": "0x3708baed3d68900000",
    "0x75804aac64b4199083982902994d9c5ed8828f11": "0x1e3d07b0a620e40000",
    "0x7592c69d067b51b6cc639d1164d5578c60d2d244": "0x1158e460913d00000",
    "0x75abe5270f3a78ce007cf37f8fbc045d489b7bb1": "0x6c6acc67d7b1d40000",
    "0x75ac547017134c04ae1e11d60e63ec04d18db4ef": "0x14542ba12a337c00000",
    "0x75b0e9c942a4f0f6f86d3f95ff998022fa67963b": "0x50c5e761a444080000",
    "0x75b95696e8ec4510d56868a7c1a735c68b244890": "0x15af1d78b58c4000000",
    "0x75be8ff65e5788aec6b2a52d5fa7b1e7a03ba675": "0x3abcdc5343d740000",
    "0x75c11d024d12ae486c1095b7a7b9c4af3e8edeb9": "0x1158e460913d00000",
    "0x75c1ad23d23f24b384d0c3149177e86697610d21": "0x15c5bcd6c288bbd0000",
    "0x75c2ffa1bef54919d2097f7a142d2e14f9b04a58": "0x90f358504032a10000",
    "0x75d67ce14e8d29e8c2ffe381917b930b1aff1a87": "0xa2a15d09519be00000",
    "0x75de7e9352e90b13a59a5878ffecc7831cac4d82": "0x9489237adb9a500000",
    "0x75f7539d309e9039989efe2e8b2dbd865a0df088": "0x855b5ba65c84f00000",
    "0x7608f437b31f18bc0b64d381ae86fd978ed7b31f": "0x2b5e3af16b1880000",
    "0x760ff3354e0fde938d0fb5b82cef5ba15c3d2916": "0x21e19e0c9bab2400000",
    "0x761a6e362c97fbbd7c5977acba2da74687365f49": "0x9f74ae1f953d00000",
    "0x761e6caec189c230a162ec006530193e67cf9d19": "0x6c6b935b8bbd400000",
    "0x761f8a3a2af0a8bdbe1da009321fb29764eb62a1": "0x21e19e0c9bab2400000",
    "0x762998e1d75227fced7a70be109a4c0b4ed86414": "0x1158e460913d00000",
    "0x762d6f30dab99135e4eca51d5243d6c8621102d5": "0xf498941e664280000",
    "0x76331e30796ce664b2700e0d4153700edc869777": "0x6c6b935b8bbd400000",
    "0x763886e333c56feff85be3951ab0b889ce262e95": "0x6c6b935b8bbd400000",
    "0x763a7cbab70d7a64d0a7e52980f681472593490c": "0x2086ac351052600000",
    "0x763eece0b08ac89e32bfa4bece769514d8cb5b85": "0xd8d726b7177a800000",
    "0x7640a37f8052981515bce078da93afa4789b5734": "0x6c6b935b8bbd400000",
    "0x7641f7d26a86cddb2be13081810e01c9c83c4b20": "0xb98bc829a6f90000",
    "0x764692cccb33405dd0ab0c3379b49caf8e6221ba": "0x1158e460913d00000",
    "0x764d5212263aff4a2a14f031f04ec749dc883e45": "0x6449e84e47a8a80000",
    "0x764fc46d428b6dbc228a0f5f55c9508c772eab9f": "0x581767ba6189c400000",
    "0x76506eb4a780c951c74a06b03d3b8362f0999d71": "0x1b1ae4d6e2ef500000",
    "0x765be2e12f629e6349b97d21b62a17b7c830edab": "0x14542ba12a337c00000",
    "0x76628150e2995b5b279fc83e0dd5f102a671dd1c": "0x878678326eac9000000",
    "0x766b3759e8794e926dac473d913a8fb61ad0c2c9": "0x4b06dbbb40f4a0000",
    "0x7670b02f2c3cf8fd4f4730f3381a71ea431c33c7": "0xe7eeba3410b740000",
    "0x767a03655af360841e810d83f5e61fb40f4cd113": "0x35659ef93f0fc40000",
    "0x767ac690791c2e23451089fe6c7083fe55deb62b": "0x2c73c937742c500000",
    "0x767fd7797d5169a05f7364321c19843a8c348e1e": "0x104e70464b1580000",
    "0x76846f0de03b5a76971ead298cdd08843a4bc6c6": "0xd71b0fe0a28e0000",
    "0x768498934e37e905f1d0e77b44b574bcf3ec4ae8": "0x43c33c1937564800000",
    "0x768ce0daa029b7ded022e5fc574d11cde3ecb517": "0x1174a5cdf88bc80000",
    "0x7693bdeb6fc82b5bca721355223175d47a084b4d": "0x4a89f54ef0121c00000",
    "0x76aaf8c1ac012f8752d4c09bb46607b6651d5ca8": "0x1158e460913d00000",
    "0x76ab87dd5a05ad839a4e2fc8c85aa6ba05641730": "0x6c6b935b8bbd400000",
    "0x76afc225f4fa307de484552bbe1d9d3f15074c4a": "0xa290b5c7ad39680000",
    "0x76becae4a31d36f3cb577f2a43594fb1abc1bb96": "0x543a9ce0e1332f00000",
    "0x76c27535bcb59ce1fa2d8c919cabeb4a6bba01d1": "0x6c6b935b8bbd400000",
    "0x76ca22bcb8799e5327c4aa2a7d0949a1fcce5f29": "0x52a03f228c5ae20000",
    "0x76cac488111a4fd595f568ae3a858770fc915d5f": "0xad78ebc5ac6200000",
    "0x76cb9c8b69f4387675c48253e234cb7e0d74a426": "0x190f4482eb91dae0000",
    "0x76f83ac3da30f7092628c7339f208bfc142cb1ee": "0x9a18ffe7427d640000",
    "0x76f9ad3d9bbd04ae055c1477c0c35e7592cb2a20": "0x8833f11e3458f200000",
    "0x76ffc157ad6bf8d56d9a1a7fddbc0fea010aabf4": "0x3635c9adc5dea00000",
    "0x77028e409cc43a3bd33d21a9fc53ec606e94910e": "0xd255d112e103a00000",
    "0x770c2fb2c4a81753ac0182ea460ec09c90a516f8": "0x1158e460913d00000",
    "0x770d98d31b4353fceee8560c4ccf803e88c0c4e0": "0x2086ac351052600000",
    "0x7713ab8037411c09ba687f6f9364f0d3239fac28": "0x21e19e0c9bab2400000",
    "0x771507aeee6a255dc2cd9df55154062d0897b297": "0x121ea68c114e510000",
    "0x7719888795ad745924c75760ddb1827dffd8cda8": "0x6c6b4c4da6ddbe0000",
    "0x7727af101f0aaba4d23a1cafe17c6eb5dab1c6dc": "0x6c6b935b8bbd400000",
    "0x772c297f0ad194482ee8c3f036bdeb01c201d5cc": "0xad78ebc5ac6200000",
    "0x77306ffe2e4a8f3ca826c1a249f7212da43aeffd": "0x43c33c1937564800000",
    "0x773141127d8cf318aebf88365add3d5527d85b6a": "0x3636d7af5ec98e0000",
    "0x7746b6c6699c8f34ca2768a820f1ffa4c207fe05": "0xd8d8583fa2d52f0000",
    "0x7751f363a0a7fd0533190809ddaf9340d8d11291": "0x1158e460913d00000",
    "0x7757a4b9cc3d0247ccaaeb9909a0e56e1dd6dcc2": "0x1158e460913d00000",
    "0x775c10c93e0db7205b2643458233c64fc33fd75b": "0x6c6b935b8bbd400000",
    "0x77617ebc4bebc5f5ddeb1b7a70cdeb6ae2ffa024": "0x6acb3df27e1f880000",
    "0x776943ffb2ef5cdd35b83c28bc046bd4f4677098": "0xa2a15d09519be00000",
    "0x77701e2c493da47c1b58f421b5495dee45bea39b": "0x148f649cf6142a58000",
    "0x77798f201257b9c35204957057b54674aefa51df": "0x813ca56906d340000",
    "0x778c43d11afe3b586ff374192d96a7f23d2b9b7f": "0x8bb4fcfa3b7d6b8000",
    "0x778c79f4de1953ebce98fe8006d53a81fb514012": "0x36330322d5238c0000",
    "0x779274bf1803a336e4d3b00ddd93f2d4f5f4a62e": "0x3635c9adc5dea00000",
    "0x77a17122fa31b98f1711d32a99f03ec326f33d08": "0x5c283d410394100000",
    "0x77a34907f305a54c85db09c363fde3c47e6ae21f": "0x35659ef93f0fc40000",
    "0x77a769fafdecf4a638762d5ba3969df63120a41d": "0x6c6b935b8bbd400000",
    "0x77be6b64d7c733a436adec5e14bf9ad7402b1b46": "0x3635c9adc5dea00000",
    "0x77bfe93ccda750847e41a1affee6b2da96e7214e": "0x1043561a8829300000",
    "0x77c4a697e603d42b12056cbba761e7f51d0443f5": "0x24dce54d34a1a00000",
    "0x77cc02f623a9cf98530997ea67d95c3b491859ae": "0x497303c36ea0c20000",
    "0x77d43fa7b481dbf3db530cfbf5fdced0e6571831": "0x6c6b935b8bbd400000",
    "0x77da5e6c72fb36bce1d9798f7bcdf1d18f459c2e": "0x13695bb6cf93e0000",
    "0x77f4e3bdf056883cc87280dbe640a18a0d02a207": "0xa81993a2bfb5b0000",
    "0x77f609ca8720a023262c55c46f2d26fb3930ac69": "0xf015f25736420000",
    "0x77f81b1b26fc84d6de97ef8b9fbd72a33130cc4a": "0x3635c9adc5dea00000",
    "0x7819b0458e314e2b53bfe00c38495fd4b9fdf8d6": "0x1158e460913d00000",
    "0x781b1501647a2e06c0ed43ff197fccec35e1700b": "0xa2a15d09519be00000",
    "0x782f52f0a676c77716d574c81ec4684f9a020a97": "0x2e14e206b730ad8000",
    "0x78355df0a230f83d032c703154414de3eedab557": "0x6c6b935b8bbd400000",
    "0x7836f7ef6bc7bd0ff3acaf449c84dd6b1e2c939f": "0xe08de7a92cd97c0000",
    "0x7837fcb876da00d1eb3b88feb3df3fa4042fac82": "0x5f68e8131ecf800000",
    "0x783eec8aa5dac77b2e6623ed5198a431abbaee07": "0x17da3a04c7b3e00000",
    "0x785c8ea774d73044a734fa790a1b1e743e77ed7c": "0xcf152640c5c830000",
    "0x7860a3de38df382ae4a4dce18c0c07b98bce3dfa": "0x3635c9adc5dea00000",
    "0x78634371e17304cbf339b1452a4ce438dc764cce": "0x21e19e0c9bab2400000",
    "0x7864dc999fe4f8e003c0f43decc39aae1522dc0f": "0x51e102bd8ece00000",
    "0x78746a958dced4c764f876508c414a68342cecb9": "0x2be374fe8e2c40000",
    "0x787d313fd36b053eeeaedbce74b9fb0678333289": "0x5c058b7842719600000",
    "0x78859c5b548b700d9284cee4b6633c2f52e529c2": "0xa030dcebbd2f4c0000",
    "0x788e809741a3b14a22a4b1d937c82cfea489eebe": "0x17b7883c06916600000",
    "0x78a1e254409fb1b55a7cb4dd8eba3b30c8bad9ef": "0x56bc75e2d63100000",
    "0x78a5e89900bd3f81dd71ba869d25fec65261df15": "0xafd812fee03d5700000",
    "0x78b978a9d7e91ee529ea4fc4b76feaf8762f698c": "0x6c6b935b8bbd4000000",
    "0x78ce3e3d474a8a047b92c41542242d0a08c70f99": "0x21e19e0c9bab2400000",
    "0x78cf8336b328db3d87813a472b9e89b75e0cf3bc": "0x3635c9adc5dea00000",
    "0x78d4f8c71c1e68a69a98f52fcb45da8af56ea1a0": "0x6c6b935b8bbd400000",
    "0x78df2681d6d602e22142d54116dea15d454957aa": "0x102794ad20da680000",
    "0x78e08bc533413c26e291b3143ffa7cc9afb97b78": "0xad78ebc5ac6200000",
    "0x78e83f80b3678c7a0a4e3e8c84dccde064426277": "0x61093d7c2c6d380000",
    "0x78f5c74785c5668a838072048bf8b453594ddaab": "0x15af1d78b58c400000",
    "0x790f91bd5d1c5cc4739ae91300db89e1c1303c93": "0x6c6b935b8bbd400000",
    "0x7917e5bd82a9790fd650d043cdd930f7799633db": "0xd8d4602c26bf6c0000",
    "0x7919e7627f9b7d54ea3b14bb4dd4649f4f39dee0": "0x5a87e7d7f5f6580000",
    "0x791f6040b4e3e50dcf3553f182cd97a90630b75d": "0xd8d726b7177a800000",
    "0x7930c2d9cbfa87f510f8f98777ff8a8448ca5629": "0xad6eedd17cf3b8000",
    "0x794529d09d017271359730027075b87ad83dae6e": "0x10ce1d3d8cb3180000",
    "0x794b51c39e53d9e762b0613b829a44b472f4fff3": "0x2435e0647841cc8000",
    "0x79551cede376f747e3716c8d79400d766d2e0195": "0x9cb37afa4ff78680000",
    "0x795ebc2626fc39b0c86294e0e837dcf523553090": "0x3635c9adc5dea00000",
    "0x796ebbf49b3e36d67694ad79f8ff36767ac6fab0": "0x34bc4fdde27c00000",
    "0x796f87ba617a2930b1670be92ed1281fb0b346e1": "0x6f5e86fb528280000",
    "0x797427e3dbf0feae7a2506f12df1dc40326e8505": "0x3635c9adc5dea00000",
    "0x797510e386f56393ced8f477378a444c484f7dad": "0x3635c9adc5dea00000",
    "0x797bb7f157d9feaa17f76da4f704b74dc1038341": "0xb50fcfafebecb00000",
    "0x7988901331e387f713faceb9005cb9b65136eb14": "0x6acb3df27e1f880000",
    "0x7989d09f3826c3e5af8c752a8115723a84d80970": "0x1686f8614cf0ad0000",
    "0x7995bd8ce2e0c67bf1c7a531d477bca1b2b97561": "0x14248d617829ece0000",
    "0x79aeb34566b974c35a5881dec020927da7df5d25": "0x6c6b935b8bbd400000",
    "0x79b120eb8806732321288f675a27a9225f1cd2eb": "0x85a0bf37dec9e40000",
    "0x79b48d2d6137c3854d611c01ea42427a0f597bb7": "0xa5aa85009e39c0000",
    "0x79b8aad879dd30567e8778d2d231c8f37ab8734e": "0x6c6b935b8bbd400000",
    "0x79bf2f7b6e328aaf26e0bb093fa22da29ef2f471": "0x61093d7c2c6d380000",
    "0x79c130c762b8765b19d2abc9a083ab8f3aad7940": "0xd5967be4fc3f100000",
    "0x79c1be19711f73bee4e6316ae7549459aacea2e0": "0x15af1d78b58c400000",
    "0x79c6002f8452ca157f1317e80a2faf24475559b7": "0x1158e460913d00000",
    "0x79cac6494f11ef2798748cb53285bd8e22f97cda": "0x6c6b935b8bbd400000",
    "0x79cfa9780ae6d87b2c31883f09276986c89a6735": "0x3635c9adc5dea00000",
    "0x79dba256472db4e058f2e4cdc3ea4e8a42773833": "0x4f2591f896a6500000",
    "0x79ed10cf1f6db48206b50919b9b697081fbdaaf3": "0x6c6b935b8bbd400000",
    "0x79f08e01ce0988e63c7f8f2908fade43c7f9f5c9": "0xfc936392801c0000",
    "0x79fd6d48315066c204f9651869c1096c14fc9781": "0x6c6b935b8bbd400000",
    "0x79ffb4ac13812a0b78c4a37b8275223e176bfda5": "0xf015f25736420000",
    "0x7a0589b143a8e5e107c9ac66a9f9f8597ab3e7ab": "0x51e932d76e8f7b0000",
    "0x7a0a78a9cc393f91c3d9e39a6b8c069f075e6bf5": "0x487a9a304539440000",
    "0x7a1370a742ec2687e761a19ac5a794329ee67404": "0xa2a1326761e2920000",
    "0x7a2dfc770e24368131b7847795f203f3d50d5b56": "0x269fec7f0361d200000",
    "0x7a33834e8583733e2d52aead589bd1affb1dd256": "0x3635c9adc5dea00000",
    "0x7a36aba5c31ea0ca7e277baa32ec46ce93cf7506": "0x43c33c1937564800000",
    "0x7a381122bada791a7ab1f6037dac80432753baad": "0x21e19e0c9bab2400000",
    "0x7a48d877b63a8f8f9383e9d01e53e80c528e955f": "0x1b1ae4d6e2ef5000000",
    "0x7a4f9b850690c7c94600dbee0ca4b0a411e9c221": "0x678a932062e4180000",
    "0x7a63869fc767a4c6b1cd0e0649f3634cb121d24b": "0x433874f632cc60000",
    "0x7a67dd043a504fc2f2fc7194e9becf484cecb1fb": "0xd8d726b7177a80000",
    "0x7a6b26f438d9a352449155b8876cbd17c9d99b64": "0x14542ba12a337c00000",
    "0x7a6d781c77c4ba1fcadf687341c1e31799e93d27": "0xeda838c4929080000",
    "0x7a7068e1c3375c0e599db1fbe6b2ea23b8f407d2": "0x6c6b935b8bbd400000",
    "0x7a74cee4fa0f6370a7894f116cd00c1147b83e59": "0x2b5e3af16b18800000",
    "0x7a79e30ff057f70a3d0191f7f53f761537af7dff": "0x15af1d78b58c400000",
    "0x7a7a4f807357a4bbe68e1aa806393210c411ccb3": "0x65a4da25d3016c00000",
    "0x7a8563867901206f3f2bf0fa3e1c8109cabccd85": "0x76d41c62494840000",
    "0x7a8797690ab77b5470bf7c0c1bba612508e1ac7d": "0x1e09296c3378de40000",
    "0x7a8c89c014509d56d7b68130668ff6a3ecec7370": "0x1043561a8829300000",
    "0x7a94b19992ceb8ce63bc92ee4b5aded10c4d9725": "0x38d1a8064bb64c80000",
    "0x7aa79ac04316cc8d08f20065baa6d4142897d54e": "0x4be4e7267b6ae00000",
    "0x7aad4dbcd3acf997df93586956f72b64d8ad94ee": "0xd8d726b7177a800000",
    "0x7ab256b204800af20137fabcc916a23258752501": "0x43c33c1937564800000",
    "0x7aba56f63a48bc0817d6b97039039a7ad62fae2e": "0x2086ac351052600000",
    "0x7abb10f5bd9bc33b8ec1a82d64b55b6b18777541": "0x43c33c1937564800000",
    "0x7ac48d40c664cc9a6d89f1c5f5c80a1c70e744e6": "0xa31062beeed7000000",
    "0x7ac58f6ffc4f8107ae6e30378e4e9f99c57fbb24": "0x22b1c8c1227a00000",
    "0x7ad3f307616f19dcb143e6444dab9c3c33611f52": "0x2b5e3af16b1880000",
    "0x7ad82caea1a8b4ed05319b9c9870173c814e06ee": "0x2164b7a04ac8a00000",
    "0x7ade5d66b944bb860c0efdc86276d58f4653f711": "0x6c6b935b8bbd400000",
    "0x7adfedb06d91f3cc7390450b85550270883c7bb7": "0x1178fa40515db40000",
    "0x7ae1c19e53c71cee4c73fae2d7fc73bf9ab5e392": "0x3635c9adc5dea00000",
    "0x7ae659eb3bc46852fa86fac4e21c768d50388945": "0xf810c1cb501b80000",
    "0x7aea25d42b2612286e99c53697c6bc4100e2dbbf": "0x6c6b935b8bbd400000",
    "0x7aef7b551f0b9c46e755c0f38e5b3a73fe1199f5": "0x50c5e761a444080000",
    "0x7b0b31ff6e24745ead8ed9bb85fc0bf2fe1d55d4": "0x2b5e3af16b18800000",
    "0x7b0fea1176d52159333a143c294943da36bbddb4": "0x1fc7da64ea14c100000",
    "0x7b11673cc019626b290cbdce26046f7e6d141e21": "0x1b1ae4d6e2ef500000",
    "0x7b122162c913e7146cad0b7ed37affc92a0bf27f": "0x51af096b2301d18000",
    "0x7b1bf53a9cbe83a7dea434579fe72aac8d2a0cd0": "0xad4c8316a0b0c0000",
    "0x7b1daf14891b8a1e1bd429d8b36b9a4aa1d9afbf": "0x1b1ae4d6e2ef500000",
    "0x7b1fe1ab4dfd0088cdd7f60163ef59ec2aee06f5": "0x6c6b935b8bbd400000",
    "0x7b25bb9ca8e702217e9333225250e53c36804d48": "0x65ea3db75546600000",
    "0x7b27d0d1f3dd3c140294d0488b783ebf4015277d": "0x15af1d78b58c400000",
    "0x7b4007c45e5a573fdbb6f8bd746bf94ad04a3c26": "0x33821f5135d259a0000",
    "0x7b43c7eea8d62355b0a8a81da081c6446b33e9e0": "0xd8d726b7177a800000",
    "0x7b4d2a38269069c18557770d591d24c5121f5e83": "0x25f273933db5700000",
    "0x7b6175ec9befc738249535ddde34688cd36edf25": "0x21e19e0c9bab2400000",
    "0x7b66126879844dfa34fe65c9f288117fefb449ad": "0x14542ba12a337c00000",
    "0x7b6a84718dd86e63338429ac811d7c8a860f21f1": "0x61093d7c2c6d380000",
    "0x7b712c7af11676006a66d2fc5c1ab4c479ce6037": "0x1b1ae4d6e2ef5000000",
    "0x7b73242d75ca9ad558d650290df17692d54cd8b8": "0x6c6e59e67c78540000",
    "0x7b761feb7fcfa7ded1f0eb058f4a600bf3a708cb": "0xf95dd2ec27cce00000",
    "0x7b827cae7ff4740918f2e030ab26cb98c4f46cf5": "0x194684c0b39de100000",
    "0x7b893286427e72db219a21fc4dcd5fbf59283c31": "0x21e19e0c9bab2400000",
    "0x7b9226d46fe751940bc416a798b69ccf0dfab667": "0xe3aeb5737240a00000",
    "0x7b98e23cb96beee80a168069ebba8f20edd55ccf": "0xba0c91587c14a0000",
    "0x7bb0fdf5a663b5fba28d9c902af0c811e252f298": "0xad78ebc5ac6200000",
    "0x7bb9571f394b0b1a8eba5664e9d8b5e840677bea": "0x11164759ffb320000",
    "0x7bb984c6dbb9e279966afafda59c01d02627c804": "0x1b464311d45a6880000",
    "0x7bbbec5e70bdead8bb32b42805988e9648c0aa97": "0x3636d7af5ec98e0000",
    "0x7bca1da6c80a66baa5db5ac98541c4be276b447d": "0x24cf049680fa3c0000",
    "0x7bddb2ee98de19ee4c91f661ee8e67a91d054b97": "0x3635c9adc5dea00000",
    "0x7be2f7680c802da6154c92c0194ae732517a7169": "0xfc936392801c0000",
    "0x7be7f2456971883b9a8dbe4c91dec08ac34e8862": "0xa2a15d09519be00000",
    "0x7be8ccb4f11b66ca6e1d57c0b5396221a31ba53a": "0x1158e460913d00000",
    "0x7beb81fb2f5e91526b2ac9795e76c69bcff04bc0": "0xeb22e794f0a8d600000",
    "0x7c0883054c2d02bc7a852b1f86c42777d0d5c856": "0x1b1ae4d6e2ef500000",
    "0x7c0f5e072043c9ee740242197e78cc4b98cdf960": "0xad78ebc5ac6200000",
    "0x7c1df24a4f7fb2c7b472e0bb006cb27dcd164156": "0x3635c9adc5dea00000",
    "0x7c29d47d57a733f56b9b217063b513dc3b315923": "0xd8d726b7177a800000",
    "0x7c2b9603884a4f2e464eceb97d17938d828bc02c": "0xa2a15d09519be00000",
    "0x7c382c0296612e4e97e440e02d3871273b55f53b": "0xab640391201300000",
    "0x7c3eb713c4c9e0381cd8154c7c9a7db8645cde17": "0xad78ebc5ac6200000",
    "0x7c4401ae98f12ef6de39ae24cf9fc51f80eba16b": "0xad78ebc5ac6200000",
    "0x7c45f0f8442a56dbd39dbf159995415c52ed479b": "0x6c6b935b8bbd400000",
    "0x7c532db9e0c06c26fd40acc56ac55c1ee92d3c3a": "0x3f870857a3e0e3800000",
    "0x7c60a05f7a4a5f8cf2784391362e755a8341ef59": "0x6694f0182a37ae0000",
    "0x7c60e51f0be228e4d56fdd2992c814da7740c6bc": "0xad78ebc5ac6200000",
    "0x7c6924d07c3ef5891966fe0a7856c87bef9d2034": "0x6c6b935b8bbd400000",
    "0x7c8bb65a6fbb49bd413396a9d7e31053bbb37aa9": "0x14542ba12a337c00000",
    "0x7c9a110cb11f2598b2b20e2ca400325e41e9db33": "0x581767ba6189c400000",
    "0x7cbca88fca6a0060b960985c9aa1b02534dc2208": "0x19127a1391ea2a0000",
    "0x7cbeb99932e97e6e02058cfc62d0b26bc7cca52b": "0x6c6b935b8bbd400000",
    "0x7cc24a6a958c20c7d1249660f7586226950b0d9a": "0x6acb3df27e1f880000",
    "0x7cd20eccb518b60cab095b720f571570caaa447e": "0x1b1ae4d6e2ef500000",
    "0x7cd5d81eab37e11e6276a3a1091251607e0d7e38": "0x3684d5ef981f40000",
    "0x7cdf74213945953db39ad0e8a9781add792e4d1d": "0x6c6b935b8bbd400000",
    "0x7ce4686446f1949ebed67215eb0d5a1dd72c11b8": "0x7839d321b81ab80000",
    "0x7cef4d43aa417f9ef8b787f8b99d53f1fea1ee88": "0x678a932062e4180000",
    "0x7d0350e40b338dda736661872be33f1f9752d755": "0x2b4f5a6f191948000",
    "0x7d04d2edc058a1afc761d9c99ae4fc5c85d4c8a6": "0x42a9c4675c9467d00000",
    "0x7d0b255efb57e10f7008aa22d40e9752dfcf0378": "0x19f8e7559924c0000",
    "0x7d13d6705884ab2157dd8dcc7046caf58ee94be4": "0x1d0da07cbb3ee9c00000",
    "0x7d273e637ef1eac481119413b91c989dc5eac122": "0x1b1ae4d6e2ef500000",
    "0x7d2a52a7cf0c8436a8e007976b6c26b7229d1e15": "0x17bf06b32a241c0000",
    "0x7d34803569e00bd6b59fff081dfa5c0ab4197a62": "0x5cd87cb7b9fb860000",
    "0x7d34ff59ae840a7413c6ba4c5bb2ba2c75eab018": "0xa2a15d09519be00000",
    "0x7d392852f3abd92ff4bb5bb26cb60874f2be6795": "0x3636c25e66ece70000",
    "0x7d445267c59ab8d2a2d9e709990e09682580c49f": "0x3635c9adc5dea00000",
    "0x7d551397f79a2988b064afd0efebee802c7721bc": "0x857e0d6f1da76a00000",
    "0x7d5aa33fc14b51841a06906edb2bb49c2a117269": "0x104400a2470e680000",
    "0x7d5d2f73949dadda0856b206989df0078d51a1e5": "0x23c757072b8dd000000",
    "0x7d6e990daa7105de2526339833f77b5c0b85d84f": "0x43c33c1937564800000",
    "0x7d73863038ccca22f96affda10496e51e1e6cd48": "0x1158e460913d00000",
    "0x7d7dd5ee614dbb6fbfbcd26305247a058c41faa1": "0x6c6b935b8bbd400000",
    "0x7d7e7c61779adb7706c94d32409a2bb4e994bf60": "0x2ef20d9fc71a140000",
    "0x7d82e523cc2dc591da3954e8b6bb2caf6461e69c": "0x7d8dc2efffb1a90000",
    "0x7d858493f07415e0912d05793c972113eae8ae88": "0x628dd177d2bc280000",
    "0x7d901b28bf7f88ef73d8f73cca97564913ea8a24": "0x33c5499031720c0000",
    "0x7d980f4b566bb045517e4c14c87750de9346744b": "0x487a9a304539440000",
    "0x7d9c59631e2ba2e8e82891f3979922aaa3b567a1": "0x1b1ae4d6e2ef5000000",
    "0x7d9d221a3df89ddd7b5f61c1468c6787d6b333e6": "0x77b227cd83be80000",
    "0x7da7613445a21299aa74f0ad71431ec43fbb1be9": "0x3afb087b876900000",
    "0x7db4c7d5b797e9296e6382f203693db409449d62": "0x15af1d78b58c400000",
    "0x7db9eacc52e429dc83b461c5f4d86010e5383a28": "0x3635c9adc5dea00000",
    "0x7dd46da677e161825e12e80dc446f58276e1127c": "0x2c73c937742c500000",
    "0x7dd8d7a1a34fa1f8e73ccb005fc2a03a15b8229c": "0xad78ebc5ac6200000",
    "0x7ddd57165c87a2707f025dcfc2508c09834759bc": "0x4be4e7267b6ae00000",
    "0x7de442c82386154d2e993cbd1280bb7ca6b12ada": "0xd8f2e8247ec9480000",
    "0x7de7fe419cc61f91f408d234cc80d5ca3d054d99": "0x1158e460913d00000",
    "0x7dece6998ae1900dd3770cf4b93812bad84f0322": "0x56bc75e2d63100000",
    "0x7dfc342dffcf45dfee74f84c0995397bd1a63172": "0xd8d726b7177a80000",
    "0x7dfd2962b575bcbeee97f49142d63c30ab009f66": "0xd8d726b7177a800000",
    "0x7e1e29721d6cb91057f6c4042d8a0bbc644afe73": "0x8a9aba557e36c0000",
    "0x7e236666b2d06e63ea4e2ab84357e2dfc977e50e": "0x36356633ebd8ea0000",
    "0x7e24d9e22ce1da3ce19f219ccee523376873f367": "0x13fd9079caa60ff0000",
    "0x7e24fbdad290175eb2df6d180a19b9a9f41370be": "0x3635c9adc5dea00000",
    "0x7e268f131ddf687cc325c412f78ba961205e9112": "0x36364ee7d301b3c0000",
    "0x7e29290038493559194e946d4e460b96fc38a156": "0x10c13c527763880000",
    "0x7e2ba86da52e785d8625334f3397ba1c4bf2e8d1": "0xaadec983fcff40000",
    "0x7e3f63e13129a221ba1ab06326342cd98b5126ae": "0x56a02659a523340000",
    "0x7e47637e97c14622882be057bea229386f4052e5": "0x17da3a04c7b3e00000",
    "0x7e4e9409704121d1d77997026ff06ea9b19a8b90": "0x8d16549ed58fa40000",
    "0x7e59dc60be8b2fc19abd0a5782c52c28400bce97": "0x3635c9adc5dea00000",
    "0x7e5b19ae1be94ff4dee635492a1b012d14db0213": "0x56bc75e2d63100000",
    "0x7e5d9993104e4cb545e179a2a3f971f744f98482": "0x6c6b935b8bbd400000",
    "0x7e71171f2949fa0c3ac254254b1f0440e5e6a038": "0x22b1c8c1227a00000",
    "0x7e7c1e9a61a08a83984835c70ec31d34d3eaa87f": "0xa5aa85009e39c0000",
    "0x7e7f18a02eccaa5d61ab8fbf030343c434a25ef7": "0x39fbae8d042dd0000",
    "0x7e81f6449a03374191f3b7cb05d938b72e090dff": "0x56bc75e2d63100000",
    "0x7e8649e690fc8c1bfda1b5e186581f649b50fe33": "0x556f64c1fe7fa0000",
    "0x7e87863ec43a481df04d017762edcb5caa629b5a": "0x222c8eb3ff6640000",
    "0x7e8f96cc29f57b0975120cb593b7dd833d606b53": "0xaadec983fcff40000",
    "0x7e972a8a7c2a44c93b21436c38d21b9252c345fe": "0x61093d7c2c6d380000",
    "0x7e99dfbe989d3ba529d19751b7f4317f8953a3e2": "0x15af1d78b58c400000",
    "0x7ea0f96ee0a573a330b56897761f3d4c0130a8e3": "0x487a9a304539440000",
    "0x7ea791ebab0445a00efdfc4e4a8e9a7e7565136d": "0xfc936392801c0000",
    "0x7eaba035e2af3793fd74674b102540cf190addb9": "0x45026c835b60440000",
    "0x7eb4b0185c92b6439a08e7322168cb353c8a774a": "0x227196ca04983ca0000",
    "0x7ebd95e9c470f7283583dc6e9d2c4dce0bea8f84": "0x2f6f10780d22cc00000",
    "0x7ed0a5a847bef9a9da7cba1d6411f5c316312619": "0x228eb37e8751d0000",
    "0x7edafba8984baf631a820b6b92bbc2c53655f6bd": "0x6c6b935b8bbd400000",
    "0x7edb02c61a227287611ad950696369cc4e647a68": "0xeda838c4929080000",
    "0x7ee5ca805dce23af89c2d444e7e40766c54c7404": "0xd0bd412edbd820000",
    "0x7ee604c7a9dc2909ce321de6b9b24f5767577555": "0x12bf9c7985cf62d8000",
    "0x7ef16fd8d15b378a0fba306b8d03dd98fc92619f": "0x25f273933db5700000",
    "0x7ef98b52bee953bef992f305fda027f8911c5851": "0x1be722206996bc8000",
    "0x7efc90766a00bc52372cac97fabd8a3c831f8ecd": "0x890b0c2e14fb80000",
    "0x7efec0c6253caf397f71287c1c07f6c9582b5b86": "0x1a2cbcb84f30d58000",
    "0x7f01dc7c3747ca608f983dfc8c9b39e755a3b914": "0xb386cad5f7a5a0000",
    "0x7f0662b410298c99f311d3a1454a1eedba2fea76": "0xad78ebc5ac6200000",
    "0x7f06c89d59807fa60bc60136fcf814cbaf2543bd": "0x21e19e0c9bab2400000",
    "0x7f0b90a1fdd48f27b268feb38382e55ddb50ef0f": "0x32f51edbaaa3300000",
    "0x7f0ec3db804692d4d1ea3245365aab0590075bc4": "0xd8d726b7177a800000",
    "0x7f0f04fcf37a53a4e24ede6e93104e78be1d3c9e": "0x6c6b935b8bbd400000",
    "0x7f13d760498d7193ca6859bc95c901386423d76c": "0x10f0cf064dd59200000",
    "0x7f150afb1a77c2b45928c268c1e9bdb4641d47d8": "0x6c6b935b8bbd400000",
    "0x7f1619988f3715e94ff1d253262dc5581db3de1c": "0x30ca024f987b900000",
    "0x7f1c81ee1697fc144b7c0be5493b5615ae7fddca": "0x1b1dab61d3aa640000",
    "0x7f2382ffd8f83956467937f9ba72374623f11b38": "0x2086ac351052600000",
    "0x7f3709391f3fbeba3592d175c740e87a09541d02": "0x1a055690d9db800000",
    "0x7f389c12f3c6164f6446566c77669503c2792527": "0x556f64c1fe7fa0000",
    "0x7f3a1e45f67e92c880e573b43379d71ee089db54": "0x152d02c7e14af6800000",
    "0x7f3d7203c8a447f7bf36d88ae9b6062a5eee78ae": "0x14542ba12a337c00000",
    "0x7f46bb25460dd7dae4211ca7f15ad312fc7dc75c": "0x16a6502f15a1e540000",
    "0x7f49e7a4269882bd8722d4a6f566347629624079": "0x6c6b935b8bbd400000",
    "0x7f49f20726471ac1c7a83ef106e9775ceb662566": "0x14061b9d77a5e980000",
    "0x7f4b5e278578c046cceaf65730a0e068329ed5b6": "0x65ea3db75546600000",
    "0x7f4f593b618c330ba2c3d5f41eceeb92e27e426c": "0x966edc756b7cfc0000",
    "0x7f541491d2ac00d2612f94aa7f0bcb014651fbd4": "0x14620c57dddae00000",
    "0x7f5ae05ae0f8cbe5dfe721f044d7a7bef4c27997": "0x340aad21b3b700000",
    "0x7f603aec1759ea5f07c7f8d41a1428fbbaf9e762": "0x1158e460913d00000",
    "0x7f616c6f008adfa082f34da7d0650460368075fb": "0x3635c9adc5dea00000",
    "0x7f61fa6cf5f898b440dac5abd8600d6d691fdef9": "0xf2dc7d47f15600000",
    "0x7f655c6789eddf455cb4b88099720639389eebac": "0x14542ba12a337c00000",
    "0x7f6b28c88421e4857e459281d78461692489d3fb": "0x6c6b935b8bbd400000",
    "0x7f6efb6f4318876d2ee624e27595f44446f68e93": "0x54069233bf7f780000",
    "0x7f7192c0df1c7db6d9ed65d71184d8e4155a17ba": "0x453728d33942c0000",
    "0x7f7a3a21b3f5a65d81e0fcb7d52dd00a1aa36dba": "0x56bc75e2d63100000",
    "0x7f8dbce180ed9c563635aad2d97b4cbc428906d9": "0x90f534608a72880000",
    "0x7f993ddb7e02c282b898f6155f680ef5b9aff907": "0x43c33c1937564800000",
    "0x7f9f9b56e4289dfb58e70fd5f12a97b56d35c6a5": "0x6acb3df27e1f880000",
    "0x7fa37ed67887751a471f0eb306be44e0dbcd6089": "0x3976747fe11a100000",
    "0x7faa30c31519b584e97250ed2a3cf3385ed5fd50": "0x6c6b935b8bbd400000",
    "0x7fcf5ba6666f966c5448c17bf1cb0bbcd8019b06": "0x56bc3d0aebe498000",
    "0x7fd679e5fb0da2a5d116194dcb508318edc580f3": "0x1639e49bba162800000",
    "0x7fdba031c78f9c096d62d05a369eeab0bccc55e5": "0x97c9ce4cf6d5c00000",
    "0x7fdbc3a844e40d96b2f3a635322e6065f4ca0e84": "0x6c6b935b8bbd400000",
    "0x7fdfc88d78bf1b285ac64f1adb35dc11fcb03951": "0x7c06fda02fb0360000",
    "0x7fea1962e35d62059768c749bedd96cab930d378": "0x6c6b935b8bbd400000",
    "0x7fef8c38779fb307ec6f044bebe47f3cfae796f1": "0x92340f86cf09e8000",
    "0x7ff0c63f70241bece19b737e5341b12b109031d8": "0x12c1b6eed03d280000",
    "0x7ffabfbc390cbe43ce89188f0868b27dcb0f0cad": "0x1595182224b26480000",
    "0x7ffd02ed370c7060b2ae53c078c8012190dfbb75": "0x21e19e0c9bab2400000",
    "0x80022a1207e910911fc92849b069ab0cdad043d3": "0xb98bc829a6f90000",
    "0x8009a7cbd192b3aed4adb983d5284552c16c7451": "0xd8d726b7177a800000",
    "0x800e7d631c6e573a90332f17f71f5fd19b528cb9": "0x83d6c7aab63600000",
    "0x80156d10efa8b230c99410630d37e269d4093cea": "0x6c6b935b8bbd400000",
    "0x801732a481c380e57ed62d6c29de998af3fa3b13": "0x56bc75e2d63100000",
    "0x801d65c518b11d0e3f4f470221417013c8e53ec5": "0xd8d726b7177a800000",
    "0x8026435aac728d497b19b3e7e57c28c563954f2b": "0x5dc892aa1131c80000",
    "0x802dc3c4ff2d7d925ee2859f4a06d7ba60f1308c": "0x550940c8fd34c0000",
    "0x8030b111c6983f0485ddaca76224c6180634789f": "0x4563918244f400000",
    "0x8035bcffaefdeeea35830c497d14289d362023de": "0x1043561a8829300000",
    "0x8035fe4e6b6af27ae492a578515e9d39fa6fa65b": "0xd8d726b7177a800000",
    "0x8043ed22f997e5a2a4c16e364486ae64975692c4": "0x3d4904ffc9112e8000",
    "0x8043fdd0bc4c973d1663d55fc135508ec5d4f4fa": "0x1158e460913d00000",
    "0x804ca94972634f633a51f3560b1d06c0b293b3b1": "0xad78ebc5ac6200000",
    "0x80522ddf944ec52e27d724ed4c93e1f7be6083d6": "0xad78ebc5ac6200000",
    "0x80591a42179f34e64d9df75dcd463b28686f5574": "0x43c33c1937564800000",
    "0x805ce51297a0793b812067f017b3e7b2df9bb1f9": "0x56bc75e2d63100000",
    "0x805d846fb0bc02a7337226d685be9ee773b9198a": "0x43c30fb0884a96c0000",
    "0x8063379a7bf2cb923a84c5093e68dac7f75481c5": "0x1176102e6e32df0000",
    "0x806854588ecce541495f81c28a290373df0274b2": "0x1f8cdf5c6e8d580000",
    "0x806f44bdeb688037015e84ff218049e382332a33": "0x6c5db2a4d815dc0000",
    "0x80744618de396a543197ee4894abd06398dd7c27": "0x6c6b935b8bbd400000",
    "0x8077c3e4c445586e094ce102937fa05b737b568c": "0x56bc75e2d63100000",
    "0x80907f593148b57c46c177e23d25abc4aae18361": "0x56bc75e2d63100000",
    "0x80977316944e5942e79b0e3abad38da746086519": "0x21a754a6dc5280000",
    "0x80a0f6cc186cf6201400736e065a391f52a9df4a": "0x21e19e0c9bab2400000",
    "0x80abec5aa36e5c9d098f1b942881bd5acac6963d": "0x6c6b935b8bbd400000",
    "0x80b23d380b825c46e0393899a85556462da0e18c": "0x6c6b935b8bbd400000",
    "0x80b42de170dbd723f454e88f7716452d92985092": "0x104623c0762dd10000",
    "0x80b79f338390d1ba1b3737a29a0257e5d91e0731": "0x1158e460913d00000",
    "0x80bf995ed8ba92701d10fec49f9e7d014dbee026": "0x1f0437ca1a7e128000",
    "0x80c04efd310f440483c73f744b5b9e64599ce3ec": "0x410d586a20a4c00000",
    "0x80c3a9f695b16db1597286d1b3a8b7696c39fa27": "0x56bc75e2d63100000",
    "0x80c53ee7e3357f94ce0d7868009c208b4a130125": "0x6c6b935b8bbd400000",
    "0x80cc21bd99f39005c58fe4a448909220218f66cb": "0x3636c9796436740000",
    "0x80d5c40c59c7f54ea3a55fcfd175471ea35099b3": "0x3635c9adc5dea00000",
    "0x80da2fdda29a9e27f9e115975e69ae9cfbf3f27e": "0xad78ebc5ac6200000",
    "0x80e7b3205230a566a1f061d922819bb4d4d2a0e1": "0x2f6f10780d22cc00000",
    "0x80ea1acc136eca4b68c842a95adf6b7fee7eb8a2": "0xd8d726b7177a800000",
    "0x80f07ac09e7b2c3c0a3d1e9413a544c73a41becb": "0x1158e460913d00000",
    "0x810db25675f45ea4c7f3177f37ce29e22d67999c": "0xad78ebc5ac6200000",
    "0x81139bfdcca656c430203f72958c543b6580d40c": "0x6c6b935b8bbd400000",
    "0x811461a2b0ca90badac06a9ea16e787b33b196cc": "0x8e3f50b173c100000",
    "0x81164deb10814ae08391f32c08667b6248c27d7a": "0x155bd9307f9fe80000",
    "0x81186931184137d1192ac88cd3e1e5d0fdb86a74": "0x9d3595ab2438d00000",
    "0x812a55c43caedc597218379000ce510d548836fd": "0xfc936392801c0000",
    "0x812ea7a3b2c86eed32ff4f2c73514cc63bacfbce": "0x3635c9adc5dea00000",
    "0x8134dd1c9df0d6c8a5812426bb55c761ca831f08": "0x6a2160bb57ccc0000",
    "0x814135da8f9811075783bf1ab67062af8d3e9f40": "0x1158e460913d00000",
    "0x81498ca07b0f2f17e8bbc7e61a7f4ae7be66b78b": "0x581fbb5b33bb00000",
    "0x81556db27349ab8b27004944ed50a46e941a0f5f": "0xd8bb6549b02bb80000",
    "0x8155fa6c51eb31d808412d748aa086105018122f": "0x65ea3db75546600000",
    "0x8156360bbd370961ceca6b6691d75006ad204cf2": "0x878678326eac9000000",
    "0x8161d940c3760100b9080529f8a60325030f6edc": "0x1043561a8829300000",
    "0x8164e78314ae16b28926cc553d2ccb16f356270d": "0x1ca134e95fb32c80000",
    "0x8165cab0eafb5a328fc41ac64dae715b2eef2c65": "0x3635c9adc5dea00000",
    "0x8168edce7f2961cf295b9fcd5a45c06cdeda6ef5": "0xad78ebc5ac6200000",
    "0x816d9772cf11399116cc1e72c26c6774c9edd739": "0xad78ebc5ac6200000",
    "0x8173c835646a672e0152be10ffe84162dd256e4c": "0x1aabdf2145b4300000",
    "0x817493cd9bc623702a24a56f9f82e3fd48f3cd31": "0x9e4b23f12d4ca00000",
    "0x8179c80970182cc5b7d82a4df06ea94db63a25f3": "0x276f259de66bf40000",
    "0x817ac33bd8f847567372951f4a10d7a91ce3f430": "0xad7c406c66dc18000",
    "0x818ffe271fc3973565c303f213f6d2da89897ebd": "0x136e05342fee1b98000",
    "0x8197948121732e63d9c148194ecad46e30b749c8": "0xd8d726b7177a800000",
    "0x819af9a1c27332b1c369bbda1b3de1c6e933d640": "0x1109e654b98f7a0000",
    "0x819cdaa5303678ef7cec59d48c82163acc60b952": "0x31351545f79816c0000",
    "0x819eb4990b5aba5547093da12b6b3c1093df6d46": "0x3635c9adc5dea00000",
    "0x81a88196fac5f23c3e12a69dec4b880eb7d97310": "0x6c6b935b8bbd400000",
    "0x81bccbff8f44347eb7fca95b27ce7c952492aaad": "0x840c12165dd780000",
    "0x81bd75abd865e0c3f04a0b4fdbcb74d34082fbb7": "0xd8d726b7177a800000",
    "0x81c18c2a238ddc4cba230a072dd7dc101e620273": "0x487a9a304539440000",
    "0x81c9e1aee2d3365d53bcfdcd96c7c538b0fd7eec": "0x62a992e53a0af00000",
    "0x81cfad760913d3c322fcc77b49c2ae3907e74f6e": "0xaadec983fcff40000",
    "0x81d619ff5726f2405f12904c72eb1e24a0aaee4f": "0x43c33c1937564800000",
    "0x81efe296ae76c860d1c5fbd33d47e8ce9996d157": "0x3635c9adc5dea00000",
    "0x81f8de2c283d5fd4afbda85dedf9760eabbbb572": "0xa2a15d09519be00000",
    "0x820c19291196505b65059d9914b7090be1db87de": "0x796e3ea3f8ab00000",
    "0x821cb5cd05c7ef909fe1be60733d8963d760dc41": "0xd8d726b7177a800000",
    "0x821d798af19989c3ae5b84a7a7283cd7fda1fabe": "0x43c33c1937564800000",
    "0x821eb90994a2fbf94bdc3233910296f76f9bf6e7": "0x21e19e0c9bab2400000",
    "0x82249fe70f61c6b16f19a324840fdc020231bb02": "0x20336b08a93635b0000",
    "0x8228ebc087480fd64547ca281f5eace3041453b9": "0x6acb3df27e1f880000",
    "0x8229ceb9f0d70839498d44e6abed93c5ca059f5d": "0x1a1c1b3c989a20100000",
    "0x822edff636563a6106e52e9a2598f7e6d0ef2782": "0x1f4f9693d42d38000",
    "0x823219a25976bb2aa4af8bad41ac3526b493361f": "0x6c6b935b8bbd400000",
    "0x8232d1f9742edf8dd927da353b2ae7b4cbce7592": "0x243d4d18229ca20000",
    "0x8234f463d18485501f8f85ace4972c9b632dbccc": "0x6c6b935b8bbd400000",
    "0x823768746737ce6da312d53e54534e106f967cf3": "0x1158e460913d00000",
    "0x823ba7647238d113bce9964a43d0a098118bfe4d": "0xad78ebc5ac6200000",
    "0x824074312806da4748434266ee002140e3819ac2": "0x51b1d3839261ac0000",
    "0x82438fd2b32a9bdd674b49d8cc5fa2eff9781847": "0x1158e460913d00000",
    "0x82485728d0e281563758c75ab27ed9e882a0002d": "0x7f808e9291e6c0000",
    "0x824b3c3c443e19295d7ef6faa7f374a4798486a8": "0x1158e460913d00000",
    "0x8251358ca4e060ddb559ca58bc0bddbeb4070203": "0x6c6b935b8bbd400000",
    "0x825135b1a7fc1605614c8aa4d0ac6dbad08f480e": "0x4d853c8f8908980000",
    "0x825309a7d45d1812f51e6e8df5a7b96f6c908887": "0x8034f7d9b166d40000",
    "0x825a7f4e10949cb6f8964268f1fa5f57e712b4c4": "0x1158e460913d00000",
    "0x8261fa230c901d43ff579f4780d399f31e6076bc": "0x6c6b935b8bbd400000",
    "0x8262169b615870134eb4ac6c5f471c6bf2f789fc": "0x19127a1391ea2a0000",
    "0x8263ece5d709e0d7ae71cca868ed37cd2fef807b": "0x35ab028ac154b80000",
    "0x826ce5790532e0548c6102a30d3eac836bd6388f": "0x3cfc82e37e9a7400000",
    "0x826eb7cd7319b82dd07a1f3b409071d96e39677f": "0x3635c9adc5dea00000",
    "0x827531a6c5817ae35f82b00b9754fcf74c55e232": "0xc328093e61ee400000",
    "0x8275cd684c3679d5887d03664e338345dc3cdde1": "0xdb44e049bb2c0000",
    "0x8284923b62e68bbf7c2b9f3414d13ef6c812a904": "0xd255d112e103a00000",
    "0x828ba651cb930ed9787156299a3de44cd08b7212": "0x487a9a304539440000",
    "0x82a15cef1d6c8260eaf159ea3f0180d8677dce1c": "0x6c6b935b8bbd400000",
    "0x82a8b96b6c9e13ebec1e9f18ac02a60ea88a48ff": "0x6c6b8c408e73b30000",
    "0x82a8cbbfdff02b2e38ae4bbfca15f1f0e83b1aea": "0x49b991c27ef6d8000",
    "0x82e4461eb9d849f0041c1404219e4272c4900ab4": "0x6c6b935b8bbd400000",
    "0x82e577b515cb2b0860aafe1ce09a59e09fe7d040": "0x2086ac351052600000",
    "0x82ea01e3bf2e83836e71704e22a2719377efd9c3": "0xa4cc799563c3800000",
    "0x82f2e991fd324c5f5d17768e9f61335db6319d6c": "0x1b1ae4d6e2ef500000",
    "0x82f39b2758ae42277b86d69f75e628d958ebcab0": "0x878678326eac9000000",
    "0x82f854c9c2f087dffa985ac8201e626ca5467686": "0x152d02c7e14af6800000",
    "0x82ff716fdf033ec7e942c909d9831867b8b6e2ef": "0x61093d7c2c6d380000",
    "0x8308ed0af7f8a3c1751fafc877b5a42af7d35882": "0x3635c9adc5dea00000",
    "0x831c44b3084047184b2ad218680640903750c45d": "0x6acb3df27e1f880000",
    "0x83210583c16a4e1e1dac84ebd37e3d0f7c57eba4": "0x6c6b935b8bbd400000",
    "0x832c54176bdf43d2c9bcd7b808b89556b89cbf31": "0xad78ebc5ac6200000",
    "0x833316985d47742bfed410604a91953c05fb12b0": "0x6c6b935b8bbd400000",
    "0x8334764b7b397a4e578f50364d60ce44899bff94": "0x503b203e9fba20000",
    "0x833b6a8ec8da408186ac8a7d2a6dd61523e7ce84": "0x3635c9adc5dea000000",
    "0x833d3fae542ad5f8b50ce19bde2bec579180c88c": "0x12c1b6eed03d280000",
    "0x833db42c14163c7be4cab86ac593e06266d699d5": "0x24e40d2b6943ef900000",
    "0x83563bc364ed81a0c6da3b56ff49bbf267827a9c": "0x3ab91d17b20de500000",
    "0x837a645dc95c49549f899c4e8bcf875324b2f57c": "0x208c394af1c8880000",
    "0x838bd565f99fde48053f7917fe333cf84ad548ab": "0xad78ebc5ac6200000",
    "0x83908aa7478a6d1c9b9b0281148f8f9f242b9fdc": "0x6c6b935b8bbd400000",
    "0x8392e53776713578015bff4940cf43849d7dcba1": "0x84df0355d56170000",
    "0x8397a1bc47acd647418159b99cea57e1e6532d6e": "0x1f10fa827b550b40000",
    "0x8398e07ebcb4f75ff2116de77c1c2a99f303a4cf": "0x1b1ae4d6e2ef500000",
    "0x83a3148833d9644984f7c475a7850716efb480ff": "0xb8507a820728200000",
    "0x83a402438e0519773d5448326bfb61f8b20cf52d": "0x52663ccab1e1c00000",
    "0x83a93b5ba41bf88720e415790cdc0b67b4af34c4": "0xad78ebc5ac6200000",
    "0x83c23d8a502124ee150f08d71dc6727410a0f901": "0x7331f3bfe661b180000",
    "0x83c897a84b695eebe46679f7da19d776621c2694": "0x1b1ae4d6e2ef500000",
    "0x83d532d38d6dee3f60adc68b936133c7a2a1b0dd": "0x1b1ae4d6e2ef500000",
    "0x83dbf8a12853b40ac61996f8bf1dc8fdbaddd329": "0x34957444b840e80000",
    "0x83dbfd8eda01d0de8e158b16d0935fc2380a5dc7": "0x2086ac351052600000",
    "0x83e48055327c28b5936fd9f4447e73bdb2dd3376": "0x90f534608a72880000",
    "0x83fe5a1b328bae440711beaf6aad6026eda6d220": "0x43c33c1937564800000",
    "0x84008a72f8036f3feba542e35078c057f32a8825": "0x56bc75e2d63100000",
    "0x840ec83ea93621f034e7bb3762bb8e29ded4c479": "0x878678326eac900000",
    "0x841145b44840c946e21dbc190264b8e0d5029369": "0x3f870857a3e0e3800000",
    "0x84232107932b12e03186583525ce023a703ef8d9": "0x6c6b935b8bbd400000",
    "0x84244fc95a6957ed7c1504e49f30b8c35eca4b79": "0x6c6b935b8bbd400000",
    "0x8431277d7bdd10457dc017408c8dbbbd414a8df3": "0x222c8eb3ff6640000",
    "0x84375afbf59b3a1d61a1be32d075e0e15a4fbca5": "0xad78ebc5ac6200000",
    "0x843bd3502f45f8bc4da370b323bdac3fcf5f19a6": "0x50039d63d11c900000",
    "0x84503334630d77f74147f68b2e086613c8f1ade9": "0x56bc75e2d631000000",
    "0x845203750f7148a9aa262921e86d43bf641974fd": "0x56bc75e2d63100000",
    "0x8461ecc4a6a45eb1a5b947fb86b88069b91fcd6f": "0x6c6b935b8bbd400000",
    "0x84675e9177726d45eaa46b3992a340ba7f710c95": "0x3635c9adc5dea00000",
    "0x84686c7bad762c54b667d59f90943cd14d117a26": "0x1158e460913d00000",
    "0x8489f6ad1d9a94a297789156899db64154f1dbb5": "0x137407c03c8c268000",
    "0x848c994a79003fe7b7c26cc63212e1fc2f9c19eb": "0x6c6b935b8bbd400000",
    "0x848fbd29d67cf4a013cb02a4b176ef244e9ee68d": "0x1172a636bbdc20000",
    "0x84949dba559a63bfc845ded06e9f2d9b7f11ef24": "0x6c6b935b8bbd400000",
    "0x849ab80790b28ff1ffd6ba394efc7463105c36f7": "0x1e02be4ae6c840000",
    "0x849b116f596301c5d8bb62e0e97a8248126e39f3": "0x1043561a8829300000",
    "0x84a74ceecff65cb93b2f949d773ef1ad7fb4a245": "0x50a9b444685c70000",
    "0x84aac7fa197ff85c30e03b7a5382b957f41f3afb": "0x88b23acffd9900000",
    "0x84af1b157342d54368260d17876230a534b54b0e": "0x35659ef93f0fc40000",
    "0x84b0ee6bb837d3a4c4c5011c3a228c0edab4634a": "0x1158e460913d00000",
    "0x84b4b74e6623ba9d1583e0cfbe49643f16384149": "0x1158e460913d00000",
    "0x84b6b6adbe2f5b3e2d682c66af1bc4905340c3ed": "0x2192f8d22215008000",
    "0x84b91e2e2902d05e2b591b41083bd7beb2d52c74": "0x215e5128b4504648000",
    "0x84bcbf22c09607ac84341d2edbc03bfb1739d744": "0x1b1ae4d6e2ef500000",
    "0x84bfcef0491a0ae0694b37ceac024584f2aa0467": "0x6c6acc67d7b1d40000",
    "0x84cb7da0502df45cf561817bbd2362f451be02da": "0x487a9a304539440000",
    "0x84cc7878da605fdb019fab9b4ccfc157709cdda5": "0x48798513af04c90000",
    "0x84db1459bb00812ea67ecb3dc189b72187d9c501": "0x811b8fbda85ab8000",
    "0x84e9949680bece6841b9a7e5250d08acd87d16cd": "0xad78ebc5ac6200000",
    "0x84e9cf8166c36abfa49053b7a1ad4036202681ef": "0x6c6b935b8bbd400000",
    "0x84ec06f24700fe42414cb9897c154c88de2f6132": "0x487a9a304539440000",
    "0x84f522f0520eba52dd18ad21fa4b829f2b89cb97": "0x10c5106d5134f130000",
    "0x850b9db18ff84bf0c7da49ea3781d92090ad7e64": "0x8cf23f909c0fa00000",
    "0x8510ee934f0cbc900e1007eb38a21e2a5101b8b2": "0x5bf0ba6634f680000",
    "0x8516fcaf77c893970fcd1a958ba9a00e49044019": "0xaa3eb1691bce58000",
    "0x851aa91c82f42fad5dd8e8bb5ea69c8f3a5977d1": "0x80e561f2578798000",
    "0x851c0d62be4635d4777e8035e37e4ba8517c6132": "0x1b1ae4d6e2ef500000",
    "0x851dc38adb4593729a76f33a8616dab6f5f59a77": "0x56bc75e2d63100000",
    "0x8532490897bbb4ce8b7f6b837e4cba848fbe9976": "0x56bc75e2d63100000",
    "0x853e6abaf44469c72f151d4e223819aced4e3728": "0x6c6b935b8bbd400000",
    "0x854691ce714f325ced55ce5928ce9ba12facd1b8": "0xed70b5e9c3f2f00000",
    "0x854c0c469c246b83b5d1b3eca443b39af5ee128a": "0x56bc75e2d631000000",
    "0x855d9aef2c39c6230d09c99ef6494989abe68785": "0x8ba52e6fc45e40000",
    "0x8563c49361b625e768771c96151dbfbd1c906976": "0x6c6b935b8bbd400000",
    "0x8566610901aace38b83244f3a9c831306a67b9dc": "0xb08213bcf8ffe00000",
    "0x856aa23c82d7215bec8d57f60ad75ef14fa35f44": "0x43c33c1937564800000",
    "0x856e5ab3f64c9ab56b009393b01664fc0324050e": "0x61093d7c2c6d380000",
    "0x856eb204241a87830fb229031343dc30854f581a": "0x3635c9adc5dea00000",
    "0x85732c065cbd64119941aed430ac59670b6c51c4": "0x27a57362ab0a0e8000",
    "0x8578e10212ca14ff0732a8241e37467db85632a9": "0x14542ba12a337c00000",
    "0x8579dadf1a395a3471e20b6f763d9a0ff19a3f6f": "0xd8d726b7177a800000",
    "0x857f100b1a5930225efc7e9020d78327b41c02cb": "0x6c6b935b8bbd400000",
    "0x85946d56a4d371a93368539690b60ec825107454": "0x5dc892aa1131c80000",
    "0x8599cbd5a6a9dcd4b966be387d69775da5e33c6f": "0xc51f1b1d52622900000",
    "0x859c600cf13d1d0273d5d1da3cd789e495899f27": "0x90f534608a72880000",
    "0x85a2f6ea94d05e8c1d9ae2f4910338a358e98ded": "0x6c6b935b8bbd400000",
    "0x85b16f0b8b34dff3804f69e2168a4f7b24d1042b": "0x112f423c7646d40000",
    "0x85b2998d0c73302cb2ba13f489313301e053be15": "0x21e19e0c9bab2400000",
    "0x85bb51bc3bfe9a1b2a2f6b1cda95bca8b38c8d5e": "0x11712da04ba1ef0000",
    "0x85c8f3cc7a354feac99a5e7bfe7cdfa351cfe355": "0x15af1d78b58c400000",
    "0x85ca1e727e9d1a87991cc2c41840ebb9edf21d1b": "0xb98bc829a6f90000",
    "0x85ca8bc6da2803d0725f5e1a456c89f9bc774e2f": "0x2086ac351052600000",
    "0x85d0d88754ac84b8b21ba93dd2bfec72626faba8": "0x3635c9adc5dea00000",
    "0x85eb256b51c819d60ea61a82d12c9358d59c1cae": "0x18efc84ad0c7b00000",
    "0x85f0e7c1e3aff805a627a2aaf2cff6b4c0dbe9cb": "0x1158e460913d00000",
    "0x86026cad3fe4ea1ce7fca260d3d45eb09ea6a364": "0xad78ebc5ac6200000",
    "0x860f5ffc10de767ded807f71e861d647dfd219b1": "0x21e19e0c9bab2400000",
    "0x86153063a1ae7f02f1a88136d4d69c7c5e3e4327": "0x3635c9adc5dea00000",
    "0x86245f596691093ece3f3d3ca2263eace81941d9": "0xa31062beeed700000",
    "0x862569211e8c6327b5415e3a67e5738b15baaf6e": "0x796e3ea3f8ab00000",
    "0x86297d730fe0f7a9ee24e08fb1087b31adb306a7": "0x6c6b935b8bbd400000",
    "0x8644cc281be332ccced36da483fb2a0746d9ba2e": "0x15af1d78b58c400000",
    "0x86499a1228ff2d7ee307759364506f8e8c8307a5": "0x6acb3df27e1f880000",
    "0x864bec5069f855a4fd5892a6c4491db07c88ff7c": "0x3635c9adc5dea00000",
    "0x86570ab259c9b1c32c9729202f77f590c07dd612": "0xad78ebc5ac6200000",
    "0x8663a241a0a89e70e182c845e2105c8ad7264bcf": "0x323b13d8398f3238000",
    "0x8667fa1155fed732cfb8dca5a0d765ce0d0705ed": "0x46ec965c393b10000",
    "0x8668af868a1e98885f937f2615ded6751804eb2d": "0x1158e460913d00000",
    "0x86740a46648e845a5d96461b18091ff57be8a16f": "0x14c0973485bf39400000",
    "0x867eba56748a5904350d2ca2a5ce9ca00b670a9b": "0x43c33c1937564800000",
    "0x86806474c358047d9406e6a07f40945bc8328e67": "0x1752eb0f7013d100000",
    "0x86883d54cd3915e549095530f9ab1805e8c5432d": "0xd8d726b7177a800000",
    "0x868c23be873466d4c74c220a19b245d1787e807f": "0x4a13bbbd92c88e8000",
    "0x86924fb211aad23cf5ce600e0aae806396444087": "0x21e19e0c9bab2400000",
    "0x8693e9b8be94425eef7969bc69f9d42f7cad671e": "0x3637096c4bcc690000",
    "0x869f1aa30e4455beb1822091de5cadec79a8f946": "0x1b1ae4d6e2ef5000000",
    "0x86a1eadeeb30461345d9ef6bd05216fa247c0d0c": "0x6c6b935b8bbd400000",
    "0x86a5f8259ed5b09e188ce346ee92d34aa5dd93fa": "0xad78ebc5ac6200000",
    "0x86b7bd563ceab686f96244f9ddc02ad7b0b14bc2": "0x21e19e0c9bab2400000",
    "0x86c28b5678af37d727ec05e4447790f15f71f2ea": "0xad78ebc5ac6200000",
    "0x86c4ce06d9ac185bb148d96f7b7abe73f441006d": "0x21e19e0c9bab2400000",
    "0x86c8d0d982b539f48f9830f9891f9d607a942659": "0x2ced37761824fb00000",
    "0x86c934e38e53be3b33f274d0539cfca159a4d0d1": "0x34957444b840e80000",
    "0x86ca0145957e6b0dfe36875fbe7a0dec55e17a28": "0x21e19e0c9bab2400000",
    "0x86caafacf32aa0317c032ac36babed974791dc03": "0x878678326eac9000000",
    "0x86cdb7e51ac44772be3690f61d0e59766e8bfc18": "0xd8d726b7177a800000",
    "0x86df73bd377f2c09de63c45d67f283eaefa0f4ab": "0x3635c9adc5dea00000",
    "0x86e3fe86e93da486b14266eadf056cbfa4d91443": "0x6c6b935b8bbd400000",
    "0x86e8670e27598ea09c3899ab7711d3b9fe901c17": "0xad78ebc5ac6200000",
    "0x86ef6426211949cc37f4c75e7850369d0cf5f479": "0x2d65f32ea045af60000",
    "0x86f05d19063e9369c6004eb3f123943a7cff4eab": "0x6c6acc67d7b1d40000",
    "0x86f23e9c0aafc78b9c404dcd60339a925bffa266": "0x15af1d78b58c400000",
    "0x86f4f40ad984fbb80933ae626e0e42f9333fdd41": "0x3635c9adc5dea00000",
    "0x86f95c5b11a293940e35c0b898d8b75f08aab06d": "0x644e3e875fccf740000",
    "0x86fff220e59305c09f483860d6f94e96fbe32f57": "0x2535b6ab4c0420000",
    "0x870796abc0db84af82da52a0ed68734de7e636f5": "0x1043561a8829300000",
    "0x870f15e5df8b0eabd02569537a8ef93b56785c42": "0x150894e849b3900000",
    "0x87183160d172d2e084d327b86bcb7c1d8e6784ef": "0xd8d8583fa2d52f0000",
    "0x871b8a8b51dea1989a5921f13ec1a955a515ad47": "0x1b1ae4d6e2ef5000000",
    "0x8725e8c753b3acbfdca55f3c62dfe1a59454968a": "0x3637096c4bcc690000",
    "0x8737dae671823a8d5917e0157ace9c43468d946b": "0x6c6acc67d7b1d40000",
    "0x873b7f786d3c99ff012c4a7cae2677270240b9c5": "0x5dc892aa1131c80000",
    "0x873c6f70efb6b1d0f2bbc57eebcd70617c6ce662": "0x36f0d5275d09570000",
    "0x873e49135c3391991060290aa7f6ccb8f85a78db": "0x1158e460913d00000",
    "0x875061ee12e820041a01942cb0e65bb427b00060": "0x97c9ce4cf6d5c00000",
    "0x87584a3f613bd4fac74c1e780b86d6caeb890cb2": "0x5c283d410394100000",
    "0x8764d02722000996ecd475b433298e9f540b05bf": "0xad78ebc5ac6200000",
    "0x876c3f218b4776df3ca9dbfb270de152d94ed252": "0x56bc75e2d63100000",
    "0x8775a610c502b9f1e6ad4cdadb8ce29bff75f6e4": "0x2086ac351052600000",
    "0x87764e3677eef604cbc59aed24abdc566b09fc25": "0xa2a15d09519be00000",
    "0x8787d12677a5ec291e57e31ffbfad105c3324b87": "0x2a24eb53208f3128000",
    "0x8794bf47d54540ece5c72237a1ffb511ddb74762": "0x6c6b935b8bbd400000",
    "0x87a53ea39f59a35bada8352521645594a1a714cb": "0x678a932062e4180000",
    "0x87a7c508ef71582dd9a54372f89cb01f252fb180": "0xad78ebc5ac6200000",
    "0x87af25d3f6f8eea15313d5fe4557e810c524c083": "0x42bf06b78ed3b500000",
    "0x87b10f9c280098179a2b76e9ce90be61fc844d0d": "0x487a9a304539440000",
    "0x87bf7cd5d8a929e1c785f9e5449106ac232463c9": "0x437b11fcc45640000",
    "0x87c498170934b8233d1ad1e769317d5c475f2f40": "0x3708baed3d68900000",
    "0x87cf36ad03c9eae9053abb5242de9117bb0f2a0b": "0x1b1ae4d6e2ef500000",
    "0x87d7ac0653ccc67aa9c3469eef4352193f7dbb86": "0x2a5a058fc295ed000000",
    "0x87e3062b2321e9dfb0875ce3849c9b2e3522d50a": "0x21e19e0c9bab2400000",
    "0x87e6034ecf23f8b5639d5f0ea70a22538a920423": "0x11c7ea162e78200000",
    "0x87ef6d8b6a7cbf9b5c8c97f67ee2adc2a73b3f77": "0xadd1bd23c3c480000",
    "0x87fb26c31e48644d693134205cae43b21f18614b": "0x4a4491bd6dcd280000",
    "0x87fc4635263944ce14a46c75fa4a821f39ce7f72": "0x1158e460913d00000",
    "0x87fcbe7c4193ffcb08143779c9bec83fe7fda9fc": "0x56f985d38644b8000",
    "0x88015d7203c5e0224aeda286ed12f1a51b789333": "0x10f08eda8e555098000",
    "0x88106c27d20b74b4b98ca62b232bd5c97411171f": "0xaadec983fcff40000",
    "0x881230047c211d2d5b00d8de4c5139de5e3227c7": "0x21e19e0c9bab2400000",
    "0x882aa798bf41df179f85520130f15ccdf59b5e58": "0x6c6b935b8bbd400000",
    "0x882bd3a2e9d74110b24961c53777f22f1f46dc5d": "0x2d4ca05e2b43ca80000",
    "0x882c8f81872c79fed521cb5f950d8b032322ea69": "0x878678326eac9000000",
    "0x882f75708386653c80171d0663bfe30b017ed0ad": "0x6c6b935b8bbd400000",
    "0x88344909644c7ad4930fd873ca1c0da2d434c07f": "0x727739fcb004d0000",
    "0x8834b2453471f324fb26be5b25166b5b5726025d": "0x1f0ff8f01daad40000",
    "0x883a78aeabaa50d8ddd8570bcd34265f14b19363": "0xd25522fda379a18000",
    "0x8845e9f90e96336bac3c616be9d88402683e004c": "0x6c6b935b8bbd400000",
    "0x8846928d683289a2d11df8db7a9474988ef01348": "0x21e19e0c9bab2400000",
    "0x884980eb4565c1048317a8f47fdbb461965be481": "0xd8d6119a8146050000",
    "0x884a7a39d0916e05f1c242df55607f37df8c5fda": "0x4f4843c157c8ca00000",
    "0x885493bda36a0432976546c1ddce71c3f4570021": "0xbbf510ddfcb260000",
    "0x88609e0a465b6e99fce907166d57e9da0814f5c8": "0x43c33c1937564800000",
    "0x886d0a9e17c9c095af2ea2358b89ec705212ee94": "0x18493fba64ef00000",
    "0x88797e58675ed5cc4c19980783dbd0c956085153": "0x6c6b935b8bbd400000",
    "0x887cac41cd706f3345f2d34ac34e01752a6e5909": "0x20465cee9da1370000",
    "0x88888a57bd9687cbf950aeeacf9740dcc4d1ef59": "0x62a992e53a0af00000",
    "0x8889448316ccf14ed86df8e2f478dc63c4338340": "0xd2f13f7789f00000",
    "0x888c16144933197cac26504dd76e06fd6600c789": "0x56bc75e2d63100000",
    "0x888e94917083d152202b53163939869d271175b4": "0xd8d726b7177a800000",
    "0x889087f66ff284f8b5efbd29493b706733ab1447": "0x215f835bc769da80000",
    "0x8895eb726226edc3f78cc6a515077b3296fdb95e": "0xd5967be4fc3f100000",
    "0x88975a5f1ef2528c300b83c0c607b8e87dd69315": "0x486cb9799191e0000",
    "0x889da40fb1b60f9ea9bd7a453e584cf7b1b4d9f7": "0x22b1c8c1227a00000",
    "0x889da662eb4a0a2a069d2bc24b05b4ee2e92c41b": "0x5a2c8c5456c9f28000",
    "0x88a122a2382c523931fb51a0ccad3beb5b7259c3": "0x6c6b935b8bbd400000",
    "0x88a2154430c0e41147d3c1fee3b3b006f851edbd": "0x36356633ebd8ea0000",
    "0x88b217ccb786a254cf4dc57f5d9ac3c455a30483": "0x3224f42723d4540000",
    "0x88bc43012edb0ea9f062ac437843250a39b78fbb": "0x43c33c1937564800000",
    "0x88c2516a7cdb09a6276d7297d30f5a4db1e84b86": "0xd8d726b7177a800000",
    "0x88c361640d6b69373b081ce0c433bd590287d5ec": "0xa968163f0a57b400000",
    "0x88d541c840ce43cefbaf6d19af6b9859b573c145": "0x93739534d28680000",
    "0x88de13b09931877c910d593165c364c8a1641bd3": "0xa2a15d09519be00000",
    "0x88dec5bd3f4eba2d18b8aacefa7b721548c319ba": "0x4a4491bd6dcd280000",
    "0x88e6f9b247f988f6c0fc14c56f1de53ec69d43cc": "0x56bc75e2d63100000",
    "0x88ee7f0efc8f778c6b687ec32be9e7d6f020b674": "0x6c6b935b8bbd400000",
    "0x88f1045f19f2d3191816b1df18bb6e1435ad1b38": "0xd02ab486cedc00000",
    "0x89009e3c6488bd5e570d1da34eabe28ed024de1b": "0x43c33c1937564800000",
    "0x89054430dcdc28ac15fa635ef87c105e602bf70c": "0x5dacd13ca9e300000",
    "0x8908760cd39b9c1e8184e6a752ee888e3f0b7045": "0x14542ba12a337c00000",
    "0x890fe11f3c24db8732d6c2e772e2297c7e65f139": "0xd5627137da8b5900000",
    "0x8914a680a5aec5226d4baaec2e5552b44dd7c874": "0x56cd55fc64dfe0000",
    "0x891cb8238c88e93a1bcf61db49bd82b47a7f4f84": "0x914878a8c05ee00000",
    "0x8925da4549e15155e57a628522cea9dddf627d81": "0x3636c25e66ece70000",
    "0x893017ff1adad499aa065401b4236ce6e92b625a": "0x6c6acc67d7b1d40000",
    "0x8933491760c8f0b4df8caac78ed835caee21046d": "0x43c33c1937564800000",
    "0x893608751d68d046e85802926673cdf2f57f7cb8": "0x11164759ffb320000",
    "0x8938d1b4daee55a54d738cf17e4477f6794e46f7": "0xfc936392801c0000",
    "0x893a6c2eb8b40ab096b4f67e74a897b840746e86": "0x5dc892aa1131c80000",
    "0x893cdddf5377f3c751bf2e541120045a47cba101": "0x56bc75e2d63100000",
    "0x895613236f3584216ad75c5d3e07e3fa6863a778": "0x6c6b935b8bbd400000",
    "0x8957727e72cf629020f4e05edf799aa7458062d0": "0x77432217e683600000",
    "0x895d694e880b13ccd0848a86c5ce411f88476bbf": "0xad6eedd17cf3b8000",
    "0x895ec5545644e0b78330fffab8ddeac9e833156c": "0x2086ac351052600000",
    "0x896009526a2c7b0c09a6f63a80bdf29d9c87de9c": "0xbbb86b8223edeb0000",
    "0x8967d7b9bdb7b4aed22e65a15dc803cb7a213f10": "0x15af1d78b58c400000",
    "0x896e335ca47af57962fa0f4dbf3e45e688cba584": "0x4a2fc0ab6052120000",
    "0x8973aefd5efaee96095d9e288f6a046c97374b43": "0x7a4c4a0f332140000",
    "0x898c72dd736558ef9e4be9fdc34fef54d7fc7e08": "0x3635c9adc5dea00000",
    "0x899b3c249f0c4b81df75d212004d3d6d952fd223": "0x6c6b935b8bbd400000",
    "0x89ab13ee266d779c35e8bb04cd8a90cc2103a95b": "0xcb49b44ba602d800000",
    "0x89c433d601fad714da6369308fd26c1dc9942bbf": "0x6c6b935b8bbd400000",
    "0x89d75b8e0831e46f80bc174188184e006fde0eae": "0x3635c9adc5dea00000",
    "0x89e3b59a15864737d493c1d23cc53dbf8dcb1362": "0xd8d726b7177a800000",
    "0x89fc8e4d386b0d0bb4a707edf3bd560df1ad8f4e": "0xa030dcebbd2f4c0000",
    "0x89fee30d1728d96cecc1dab3da2e771afbcfaa41": "0x6c6acc67d7b1d40000",
    "0x8a1cc5ac111c49bfcfd848f37dd768aa65c88802": "0x21e19e0c9bab2400000",
    "0x8a20e5b5cee7cd1f5515bace3bf4f77ffde5cc07": "0x4563918244f400000",
    "0x8a217db38bc35f215fd92906be42436fe7e6ed19": "0x14542ba12a337c00000",
    "0x8a243a0a9fea49b839547745ff2d11af3f4b0522": "0x35659ef93f0fc40000",
    "0x8a247d186510809f71cffc4559471c3910858121": "0x61093d7c2c6d380000",
    "0x8a3470282d5e2a2aefd7a75094c822c4f5aeef8a": "0xd28bc606478a58000",
    "0x8a36869ad478997cbf6d8924d20a3c8018e9855b": "0x1158e460913d00000",
    "0x8a4314fb61cd938fc33e15e816b113f2ac89a7fb": "0x17764e7aed65100000",
    "0x8a4f4a7f52a355ba105fca2072d3065fc8f7944b": "0x1b1ae4d6e2ef500000",
    "0x8a5831282ce14a657a730dc18826f7f9b99db968": "0xeabe8a5b41c1360000",
    "0x8a5fb75793d043f1bcd43885e037bd30a528c927": "0x13536e6d2e9ac20000",
    "0x8a66abbc2d30ce21a833b0db8e561d5105e0a72c": "0x25f1de5c76acdf0000",
    "0x8a746c5d67064711bfca685b95a4fe291a27028e": "0x22b1c8c1227a00000",
    "0x8a780ab87a9145fe10ed60fa476a740af4cab1d2": "0x121b2e5e6464780000",
    "0x8a7a06be199a3a58019d846ac9cbd4d95dd757de": "0xa2a423944256f40000",
    "0x8a810114b2025db9fbb50099a6e0cb9e2efa6bdc": "0x678a932062e4180000",
    "0x8a86e4a51c013b1fb4c76bcf30667c78d52eedef": "0x6c6b935b8bbd400000",
    "0x8a9eca9c5aba8e139f8003edf1163afb70aa3aa9": "0x23c757072b8dd00000",
    "0x8ab839aeaf2ad37cb78bacbbb633bcc5c099dc46": "0x6c6b935b8bbd400000",
    "0x8ac89bd9b8301e6b0677fa25fcf0f58f0cc7b611": "0x1158e460913d00000",
    "0x8adc53ef8c18ed3051785d88e996f3e4b20ecd51": "0x8e4d316827686400000",
    "0x8ae6f80b70e1f23c91fbd5a966b0e499d95df832": "0xaadec983fcff40000",
    "0x8ae9ef8c8a8adfa6ab798ab2cdc405082a1bbb70": "0x6c6b935b8bbd400000",
    "0x8af626a5f327d7506589eeb7010ff9c9446020d2": "0x4be4e7267b6ae00000",
    "0x8b01da34d470c1d115acf4d8113c4dd8a8c338e4": "0x5572dcefab697900000",
    "0x8b07d050754dc9ba230db01c310afdb5395aa1b3": "0x666b06e62a6200000",
    "0x8b20ad3b94656dbdc0dd21a393d8a7d9e02138cb": "0xa2a15d09519be00000",
    "0x8b27392206b958cd375d7ef8af2cf8ef0598c0bc": "0x3635c9adc5dea00000",
    "0x8b30c04098d7a7e6420c357ea7bfa49bac9a8a18": "0x1b1b113f91fb0140000",
    "0x8b338411f26ccf37658cc75521d77629099e467d": "0x6c6b935b8bbd400000",
    "0x8b36224c7356e751f0c066c35e3b44860364bfc2": "0x3627bac7a3d9278000",
    "0x8b3696f3c60de32432a2e4c395ef0303b7e81e75": "0x65a4da25d3016c00000",
    "0x8b393fb0813ee101db1e14ecc7d322c72b8c0473": "0x18b26a313e8ae90000",
    "0x8b48e19d39dd35b66e6e1bb6b9c657cb2cf59d04": "0x3c755ac9c024a018000",
    "0x8b505e2871f7deb7a63895208e8227dcaa1bff05": "0xcf68efc308d79bc0000",
    "0x8b57b2bc83cc8d4de331204e893f2f3b1db1079a": "0x22b1c8c1227a00000",
    "0x8b5c914b128bf1695c088923fa467e7911f351fa": "0x556f64c1fe7fa0000",
    "0x8b5f29cc2faa262cdef30ef554f50eb488146eac": "0x13b68705c9720810000",
    "0x8b7056f6abf3b118d026e944d5c073433ca451d7": "0x3635c6204739d98000",
    "0x8b714522fa2839620470edcf0c4401b713663df1": "0xad78ebc5ac6200000",
    "0x8b74a7cb1bb8c58fce267466a30358adaf527f61": "0x2e257784e25b4500000",
    "0x8b7e9f6f05f7e36476a16e3e7100c9031cf404af": "0x3635c9adc5dea00000",
    "0x8b81156e698639943c01a75272ad3d35851ab282": "0x12b3165f65d3e50000",
    "0x8b9577920053b1a00189304d888010d9ef2cb4bf": "0x1b1ae4d6e2ef500000",
    "0x8b9841862e77fbbe919470935583a93cf027e450": "0x6c6c5334427f1f0000",
    "0x8b997dbc078ad02961355da0a159f2927ed43d64": "0xaadec983fcff40000",
    "0x8b9fda7d981fe9d64287f85c94d83f9074849fcc": "0x2f6f10780d22cc00000",
    "0x8bb0212f3295e029cab1d961b04133a1809e7b91": "0x6c6b935b8bbd400000",
    "0x8bbeacfc29cfe93402db3c41d99ab759662e73ec": "0x6c6b935b8bbd400000",
    "0x8bc1ff8714828bf286ff7e8a7709106548ed1b18": "0x21e19e0c9bab2400000",
    "0x8bd0b65a50ef5cef84fec420be7b89ed1470ceb9": "0x28a77936e92c81c0000",
    "0x8bd6b1c6d74d010d1008dba6ef835d4430b35c32": "0x2b5e3af16b1880000",
    "0x8bd8d4c4e943f6c8073921dc17e3e8d7a0761627": "0x9f04219d8d34950000",
    "0x8bdfda6c215720eda2136f91052321af4e936c1f": "0x3635e619bb04d40000",
    "0x8bea40379347a5c891d59a6363315640f5a7e07a": "0x6c6b76ef96970c0000",
    "0x8bf02bd748690e1fd1c76d270833048b66b25fd3": "0x27fade568eba9600000",
    "0x8bf297f8f453523ed66a1acb7676856337b93bf0": "0xd8d726b7177a800000",
    "0x8bf373d076814cbc57e1c6d16a82c5be13c73d37": "0xad78ebc5ac6200000",
    "0x8c1023fde1574db8bb54f1739670157ca47da652": "0x179cf9ac3a1b1770000",
    "0x8c1fbe5f0aea359c5aa1fa08c8895412ca8e05a6": "0x3635c9adc5dea00000",
    "0x8c22426055b76f11f0a2de1a7f819a619685fe60": "0x6b56051582a9700000",
    "0x8c2b7d8b608d28b77f5caa9cd645242a823e4cd9": "0x62a992e53a0af00000",
    "0x8c2fbeee8eacc5c5d77c16abd462ee9c8145f34b": "0x692ae8897081d00000",
    "0x8c3a9ee71f729f236cba3867b4d79d8ceee25dbc": "0x56bc75e2d63100000",
    "0x8c50aa2a9212bcde56418ae261f0b35e7a9dbb82": "0x15af1d78b58c400000",
    "0x8c54c7f8b9896e75d7d5f5c760258699957142ad": "0x22b1c8c1227a00000",
    "0x8c5d16ed65e3ed7e8b96ca972bc86173e3500b03": "0x6c6b935b8bbd400000",
    "0x8c6aa882ee322ca848578c06cb0fa911d3608305": "0x2086ac351052600000",
    "0x8c6ae7a05a1de57582ae2768204276c0ff47ed03": "0x2c0bb3dd30c4e2000000",
    "0x8c6f9f4e5b7ae276bf58497bd7bf2a7d25245f64": "0x93fe5c57d710680000",
    "0x8c75956e8fed50f5a7dd7cfd27da200f6746aea6": "0x3635c9adc5dea00000",
    "0x8c7cb4e48b25031aa1c4f92925d631a8c3edc761": "0x3635c9adc5dea00000",
    "0x8c7fa5cae82fedb69ab189d3ff27ae209293fb93": "0x15af880d8cdb830000",
    "0x8c81410ea8354cc5c65c41be8bd5de733c0b111d": "0x205b4dfa1ee74780000",
    "0x8c83d424a3cf24d51f01923dd54a18d6b6fede7b": "0xd8d726b7177a800000",
    "0x8c900a8236b08c2b65405d39d75f20062a7561fd": "0x58e7926ee858a00000",
    "0x8c93c3c6db9d37717de165c3a1b4fe51952c08de": "0x15af1d78b58c400000",
    "0x8c999591fd72ef7111efca7a9e97a2356b3b000a": "0xdd64e2aa0a67500000",
    "0x8ca6989746b06e32e2487461b1ce996a273acfd7": "0x1158e460913d00000",
    "0x8cb3aa3fcd212854d7578fcc30fdede6742a312a": "0x1043561a8829300000",
    "0x8cc0d7c016fa7aa950114aa1db094882eda274ea": "0x8a9aba557e36c0000",
    "0x8cc652dd13e7fe14dabbb36d5d320db9ffee8a54": "0x61093d7c2c6d380000",
    "0x8ccabf25077f3aa41545344d53be1b2b9c339000": "0x5be866c562c5440000",
    "0x8ccf3aa21ab742576ad8c422f71bb188591dea8a": "0x3635c9adc5dea00000",
    "0x8cd0cd22e620eda79c0461e896c93c44837e2968": "0x6c6b935b8bbd400000",
    "0x8cde8b732e6023878eb23ed16229124b5f7afbec": "0x73f75d1a085ba0000",
    "0x8ce22f9fa372449a420610b47ae0c8d565481232": "0x6c6b935b8bbd400000",
    "0x8ce4949d8a16542d423c17984e6739fa72ceb177": "0x54b405926f4a63d8000",
    "0x8ce5e3b5f591d5eca38abf228f2e3c35134bdac0": "0x7dc35b84897c380000",
    "0x8cee38d6595788a56e3fb94634b3ffe1fbdb26d6": "0x43c33c1937564800000",
    "0x8ceea15eec3bdad8023f98ecf25b2b8fef27db29": "0x6c6b935b8bbd400000",
    "0x8cf3546fd1cda33d58845fc8fcfecabca7c5642a": "0x1f1e39932cb3278000",
    "0x8cf6da0204dbc4860b46ad973fc111008d9e0c46": "0xad78ebc5ac6200000",
    "0x8cfedef198db0a9143f09129b3fd64dcbb9b4956": "0x6c6b935b8bbd400000",
    "0x8d04a5ebfb5db409db0617c9fa5631c192861f4a": "0x34957444b840e80000",
    "0x8d06e464245cad614939e0af0845e6d730e20374": "0xadc8a28f3d87d8000",
    "0x8d07d42d831c2d7c838aa1872b3ad5d277176823": "0x12ee1f9ddbee680000",
    "0x8d0b9ea53fd263415eac11391f7ce9123c447062": "0x6c6b935b8bbd400000",
    "0x8d1794da509cb297053661a14aa892333231e3c1": "0xad201a6794ff80000",
    "0x8d1abd897dacd4312e18080c88fb9647eab44052": "0xbb59a27953c600000",
    "0x8d2303341e1e1eb5e8189bde03f73a60a2a54861": "0x56bc75e2d63100000",
    "0x8d238e036596987643d73173c37b0ad06055b96c": "0x7148bf0a2af0660000",
    "0x8d2e31b08803b2c5f13d398ecad88528209f6057": "0x21db8bbcad11e840000",
    "0x8d378f0edc0bb0f0686d6a20be6a7692c4fa24b8": "0x56bc75e2d63100000",
    "0x8d4b603c5dd4570c34669515fdcc665890840c77": "0xfc936392801c0000",
    "0x8d51a4cc62011322c696fd725b9fb8f53feaaa07": "0x3635c9adc5dea00000",
    "0x8d544c32c07fd0842c761d53a897d6c950bb7599": "0xad78ebc5ac6200000",
    "0x8d5ef172bf77315ea64e85d0061986c794c6f519": "0xd5967be4fc3f100000",
    "0x8d616b1eee77eef6f176e0698db3c0c141b2fc8f": "0x1b1ae4d6e2ef500000",
    "0x8d6170ff66978e773bb621bf72b1ba7be3a7f87e": "0xad78ebc5ac6200000",
    "0x8d620bde17228f6cbba74df6be87264d985cc179": "0x56bc75e2d63100000",
    "0x8d629c20608135491b5013f1002586a0383130e5": "0x4a4491bd6dcd280000",
    "0x8d6657f59711b1f803c6ebef682f915b62f92dc9": "0x6c6b935b8bbd400000",
    "0x8d667637e29eca05b6bfbef1f96d460eefbf9984": "0xd8d726b7177a800000",
    "0x8d6df209484d7b94702b03a53e56b9fb0660f6f0": "0x6c6b935b8bbd400000",
    "0x8d795c5f4a5689ad62da961671f028065286d554": "0x6f05b59d3b20000000",
    "0x8d7f3e61299c2db9b9c0487cf627519ed00a9123": "0x5e74a8505e80a00000",
    "0x8d89170b92b2be2c08d57c48a7b190a2f146720f": "0x42bf06b78ed3b500000",
    "0x8d93dac785f88f1a84bf927d53652b45a154ccdd": "0x890b0c2e14fb80000",
    "0x8d9952d0bb4ebfa0efd01a3aa9e8e87f0525742e": "0xbb9125542263900000",
    "0x8d9a0c70d2262042df1017d6c303132024772712": "0x6c6b935b8bbd400000",
    "0x8d9ed7f4553058c26f7836a3802d3064eb1b363d": "0x4e1003b28d9280000",
    "0x8da1178f55d97772bb1d24111a404a4f8715b95d": "0x2f9ac3f6de00808000",
    "0x8da1d359ba6cb4bcc57d7a437720d55db2f01c72": "0x4563918244f400000",
    "0x8dab948ae81da301d972e3f617a912e5a753712e": "0x15af1d78b58c400000",
    "0x8daddf52efbd74da95b969a5476f4fbbb563bfd2": "0x2d43f3ebfafb2c0000",
    "0x8db185fe1b70a94a6a080e7e23a8bedc4acbf34b": "0x4be4e7267b6ae00000",
    "0x8db58e406e202df9bc703c480bd8ed248d52a032": "0x6c6b935b8bbd400000",
    "0x8dbc3e6cb433e194f40f82b40faadb1f8b856116": "0x678a932062e4180000",
    "0x8dc1d5111d09af25fdfcac455c7cec283e6d6775": "0x6c6b935b8bbd400000",
    "0x8dd484ff8a307364eb66c525a571aac701c5c318": "0xd8d726b7177a800000",
    "0x8dd6a9bae57f518549ada677466fea8ab04fd9b4": "0xd8d726b7177a800000",
    "0x8dde3cb8118568ef4503fe998ccdf536bf19a098": "0xd8d726b7177a800000",
    "0x8dde60eb08a099d7daa356daaab2470d7b025a6b": "0xaadec983fcff40000",
    "0x8df339214b6ad1b24663ce716034749d6ef838d9": "0x2544faa778090e00000",
    "0x8df53d96191471e059de51c718b983e4a51d2afd": "0x6c6b935b8bbd4000000",
    "0x8dfbafbc0e5b5c86cd1ad697feea04f43188de96": "0x15252b7f5fa0de0000",
    "0x8e073bad25e42218615f4a0e6b2ea8f8de2230c0": "0x823d629d026bfa0000",
    "0x8e0fee38685a94aabcd7ce857b6b1409824f75b8": "0x1b1ae4d6e2ef500000",
    "0x8e23facd12c765c36ab81a6dd34d8aa9e68918ae": "0x911e4868dba9b0000",
    "0x8e2f9034c9254719c38e50c9aa64305ed696df1e": "0x1004e2e45fb7ee00000",
    "0x8e3240b0810e1cf407a500804740cf8d616432a4": "0x22f6655ef0b388000",
    "0x8e486a0442d171c8605be348fee57eb5085eff0d": "0xd8d726b7177a800000",
    "0x8e6156336be2cdbe32140df08a2ba55fd0a58463": "0x4099e1d6357180000",
    "0x8e670815fb67aeaea57b86534edc00cdf564fee5": "0xb2e4b323d9c5100000",
    "0x8e6d7485cbe990acc1ad0ee9e8ccf39c0c93440e": "0x33c5499031720c0000",
    "0x8e74e0d1b77ebc823aca03f119854cb12027f6d7": "0x16b352da5e0ed3000000",
    "0x8e78f351457d016f4ad2755ec7424e5c21ba6d51": "0x7ea28327577080000",
    "0x8e7936d592008fdc7aa04edeeb755ab513dbb89d": "0x1158e460913d00000",
    "0x8e7fd23848f4db07906a7d10c04b21803bb08227": "0x3635c9adc5dea00000",
    "0x8e92aba38e72a098170b92959246537a2e5556c0": "0xe7eeba3410b740000",
    "0x8e98766524b0cf2747c50dd43b9567594d9731de": "0x6c44b7c26182280000",
    "0x8e9b35ad4a0a86f758446fffde34269d940ceacd": "0xd8d726b7177a800000",
    "0x8e9c08f738661f9676236eff82ba6261dd3f4822": "0x56bc75e2d63100000",
    "0x8e9c429266df057efa78dd1d5f77fc40742ad466": "0x10442ed1b56c7c8000",
    "0x8ea656e71ec651bfa17c5a5759d86031cc359977": "0x56bc75e2d63100000",
    "0x8eae29435598ba8f1c93428cdb3e2b4d31078e00": "0x6c6b935b8bbd400000",
    "0x8eb1fbe4e5d3019cd7d30dae9c0d5b4c76fb6331": "0x6c6b935b8bbd400000",
    "0x8eb51774af206b966b8909c45aa6722748802c0c": "0x1b1ae4d6e2ef500000",
    "0x8eb8c71982a00fb84275293253f8044544b66b49": "0x15af1d78b58c400000",
    "0x8ecbcfacbfafe9f00c3922a24e2cf0026756ca20": "0x131beb925ffd3200000",
    "0x8eceb2e124536c5b5ffc640ed14ff15ed9a8cb71": "0x6c6b935b8bbd400000",
    "0x8ed0af11ff2870da0681004afe18b013f7bd3882": "0xd8d726b7177a800000",
    "0x8ed143701f2f72280fd04a7b4164281979ea87c9": "0xc249fdd327780000",
    "0x8ed1528b447ed4297902f639c514d0944a88f8c8": "0xac6e77ab663a80000",
    "0x8ed4284c0f47449c15b8d9b3245de8beb6ce80bf": "0x2b5e3af16b18800000",
    "0x8ede7e3dc50749c6c50e2e28168478c34db81946": "0x43c30fb0884a96c0000",
    "0x8ee584337ddbc80f9e3498df55f0a21eacb57fb1": "0x1158e460913d00000",
    "0x8eebec1a62c08b05a7d1d59180af9ff0d18e3f36": "0x1b1ae4d6e2ef500000",
    "0x8ef4d8a2c23c5279187b64e96f741404085385f3": "0x103dc1e9a9697b0000",
    "0x8ef711e43a13918f1303e81d0ea78c9eefd67eb2": "0xd8d726b7177a800000",
    "0x8efec058cc546157766a632775404a334aaada87": "0x6c5db2a4d815dc0000",
    "0x8f02bda6c36922a6be6a509be51906d393f7b99b": "0x37490dc12ebe7f8000",
    "0x8f0538ed71da1155e0f3bde5667ceb84318a1a87": "0x692ae8897081d00000",
    "0x8f067c7c1bbd57780b7b9eeb9ec0032f90d0dcf9": "0x43c33c1937564800000",
    "0x8f0ab894bd3f4e697dbcfb859d497a9ba195994a": "0x85d638b65472aa20000",
    "0x8f0af37566d152802f1ae8f928b25af9b139b448": "0xad78ebc5ac6200000",
    "0x8f1952eed1c548d9ee9b97d0169a07933be69f63": "0x3635c9adc5dea00000",
    "0x8f1fcc3c51e252b693bc5b0ec3f63529fe69281e": "0x14542ba12a337c00000",
    "0x8f226096c184ebb40105e08dac4d22e1c2d54d30": "0x109e437bd1618c0000",
    "0x8f29a14a845ad458f2d108b568d813166bcdf477": "0x21e19e0c9bab2400000",
    "0x8f31c7005197ec997a87e69bec48649ab94bb2a5": "0xd8d726b7177a800000",
    "0x8f41b1fbf54298f5d0bc2d122f4eb95da4e5cd3d": "0x1333832f5e335c0000",
    "0x8f47328ee03201c9d35ed2b5412b25decc859362": "0x6c6b935b8bbd400000",
    "0x8f473d0ab876ddaa15608621d7013e6ff714b675": "0x19801c83b6c7c00000",
    "0x8f4d1d41693e462cf982fd81d0aa701d3a5374c9": "0xd8d726b7177a800000",
    "0x8f4d1e7e4561284a34fef9673c0d34e12af4aa03": "0x6c6b935b8bbd400000",
    "0x8f4fb1aea7cd0f570ea5e61b40a4f4510b6264e4": "0xd8d726b7177a800000",
    "0x8f561b41b209f248c8a99f858788376250609cf3": "0x5c283d410394100000",
    "0x8f58d8348fc1dc4e0dd8343b6543c857045ee940": "0x2e3038df47303280000",
    "0x8f60895fbebbb5017fcbff3cdda397292bf25ba6": "0x174406ff9f6fd28000",
    "0x8f64b9c1246d857831643107d355b5c75fef5d4f": "0x6c6acc67d7b1d40000",
    "0x8f660f8b2e4c7cc2b4ac9c47ed28508d5f8f8650": "0x43c33c1937564800000",
    "0x8f69eafd0233cadb4059ab779c46edf2a0506e48": "0x60f06620a849450000",
    "0x8f717ec1552f4c440084fba1154a81dc003ebdc0": "0x21e19e0c9bab2400000",
    "0x8f8acb107607388479f64baaabea8ff007ada97d": "0x5c6f3080ad423f40000",
    "0x8f8cd26e82e7c6defd02dfad07979021cbf7150c": "0xa2a15d09519be00000",
    "0x8f8f37d0ad8f335d2a7101b41156b688a81a9cbe": "0x3cb71f51fc5580000",
    "0x8f92844f282a92999ee5b4a8d773d06b694dbd9f": "0x692ae8897081d00000",
    "0x8fac748f784a0fed68dba43319b42a75b4649c6e": "0x3154c9729d05780000",
    "0x8fd9a5c33a7d9edce0997bdf77ab306424a11ea9": "0x6c6b935b8bbd400000",
    "0x8feffadb387a1547fb284da9b8147f3e7c6dc6da": "0x2d627be45305080000",
    "0x8ff46045687723dc33e4d099a06904f1ebb584dc": "0x6c6b935b8bbd400000",
    "0x8ffa062122ac307418821adb9311075a3703bfa3": "0x3635c9adc5dea00000",
    "0x8ffe322997b8e404422d19c54aadb18f5bc8e9b7": "0xd5967be4fc3f100000",
    "0x900194c4b1074305d19de405b0ac78280ecaf967": "0x3635c9adc5dea00000",
    "0x9003d270891ba2df643da8341583193545e3e000": "0xd8d726b7177a800000",
    "0x90057af9aa66307ec9f033b29724d3b2f41eb6f9": "0x19d1d6aadb2c52e80000",
    "0x900f0b8e35b668f81ef252b13855aa5007d012e7": "0x170a0f5040e5040000",
    "0x9018cc1f48d2308e252ab6089fb99a7c1d569410": "0xad78ebc5ac6200000",
    "0x901d99b699e5c6911519cb2076b4c76330c54d22": "0x6c6b935b8bbd400000",
    "0x902d74a157f7d2b9a3378b1f56703730e03a1719": "0xd8d726b7177a800000",
    "0x903413878aea3bc1086309a3fe768b65559e8cab": "0x1b1ae4d6e2ef5000000",
    "0x904966cc2213b5b8cb5bd6089ef9cddbef7edfcc": "0x6c6b935b8bbd400000",
    "0x904caa429c619d940f8e6741826a0db692b19728": "0x3635c9adc5dea00000",
    "0x9052f2e4a3e3c12dd1c71bf78a4ec3043dc88b7e": "0xe7eeba3410b740000",
    "0x905526568ac123afc0e84aa715124febe83dc87c": "0xf8699329677e0000",
    "0x9092918707c621fdbd1d90fb80eb787fd26f7350": "0x855b5ba65c84f00000",
    "0x909b5e763a39dcc795223d73a1dbb7d94ca75ac8": "0x6c6b935b8bbd400000",
    "0x90acced7e48c08c6b934646dfa0adf29dc94074f": "0x30b4b157bbd490000",
    "0x90b1f370f9c1eb0be0fb8e2b8ad96a416371dd8a": "0x30ca024f987b900000",
    "0x90b62f131a5f29b45571513ee7a74a8f0b232202": "0x890b0c2e14fb80000",
    "0x90bd62a050845261fa4a9f7cf241ea630b05efb8": "0x1b1ae4d6e2ef500000",
    "0x90c41eba008e20cbe927f346603fc88698125969": "0x246ddf97976680000",
    "0x90d2809ae1d1ffd8f63eda01de49dd552df3d1bc": "0xd8bb6549b02bb80000",
    "0x90dc09f717fc2a5b69fd60ba08ebf40bf4e8246c": "0xd8d8583fa2d52f0000",
    "0x90e300ac71451e401f887f6e7728851647a80e07": "0x15af1d78b58c400000",
    "0x90e35aabb2deef408bb9b5acef714457dfde6272": "0x56cd55fc64dfe0000",
    "0x90e7070f4d033fe6910c9efe5a278e1fc6234def": "0x571380819b3040000",
    "0x90e93e4dc17121487952333614002be42356498e": "0x678a932062e4180000",
    "0x90e9a9a82edaa814c284d232b6e9ba90701d4952": "0x56be03ca3e47d8000",
    "0x90f774c9147dde90853ddc43f08f16d455178b8c": "0xd8d726b7177a800000",
    "0x90fc537b210658660a83baa9ac4a8402f65746a8": "0x65ea3db75546600000",
    "0x91050a5cffadedb4bb6eaafbc9e5013428e96c80": "0x5c283d410394100000",
    "0x91051764af6b808e4212c77e30a5572eaa317070": "0x3635c9adc5dea00000",
    "0x910b7d577a7e39aa23acf62ad7f1ef342934b968": "0x21e19e0c9bab2400000",
    "0x910e996543344c6815fb97cda7af4b8698765a5b": "0x59af69829cf640000",
    "0x911feea61fe0ed50c5b9e5a0d66071399d28bdc6": "0x340aad21b3b700000",
    "0x911ff233e1a211c0172c92b46cf997030582c83a": "0x6acb3df27e1f880000",
    "0x9120e71173e1ba19ba8f9f4fdbdcaa34e1d6bb78": "0x6c6b935b8bbd400000",
    "0x91211712719f2b084d3b3875a85069f466363141": "0x3635c9adc5dea00000",
    "0x912304118b80473d9e9fe3ee458fbe610ffda2bb": "0xad78ebc5ac6200000",
    "0x91546b79ecf69f936b5a561508b0d7e50cc5992f": "0xe7eeba3410b740000",
    "0x9156d18029350e470408f15f1aa3be9f040a67c6": "0x3635c9adc5dea00000",
    "0x91620f3eb304e813d28b0297556d65dc4e5de5aa": "0xcf152640c5c8300000",
    "0x916bf7e3c545921d3206d900c24f14127cbd5e70": "0x3d0ddbc7df2bb100000",
    "0x916cf17d71412805f4afc3444a0b8dd1d9339d16": "0xc673ce3c40160000",
    "0x917b8f9f3a8d09e9202c52c29e724196b897d35e": "0x8ba52e6fc45e40000",
    "0x918967918cd897dd0005e36dc6c883ef438fc8c7": "0x796e3ea3f8ab00000",
    "0x91898eab8c05c0222883cd4db23b7795e1a24ad7": "0x6c6b935b8bbd400000",
    "0x9191f94698210516cf6321a142070e20597674ed": "0xee9d5be6fc110000",
    "0x91a4149a2c7b1b3a67ea28aff34725e0bf8d7524": "0x692ae8897081d00000",
    "0x91a787bc5196f34857fe0c372f4df376aaa76613": "0x6c6b935b8bbd400000",
    "0x91a8baaed012ea2e63803b593d0d0c2aab4c5b0a": "0x5150ae84a8cdf00000",
    "0x91ac5cfe67c54aa7ebfba448666c461a3b1fe2e1": "0x15c93492bf9dfc0000",
    "0x91bb3f79022bf3c453f4ff256e269b15cf2c9cbd": "0x52585c13fe3a5c0000",
    "0x91c75e3cb4aa89f34619a164e2a47898f5674d9c": "0x6c6b935b8bbd400000",
    "0x91c80caa081b38351d2a0e0e00f80a34e56474c1": "0x3635c9adc5dea00000",
    "0x91cc46aa379f856a6640dccd5a648a7902f849d9": "0xad78ebc5ac6200000",
    "0x91d2a9ee1a6db20f5317cca7fbe2313895db8ef8": "0x1ccc3a52f306e280000",
    "0x91d66ea6288faa4b3d606c2aa45c7b6b8a252739": "0x6c6b935b8bbd400000",
    "0x91dbb6aaad149585be47375c5d6de5ff09191518": "0x43c33c1937564800000",
    "0x91e8810652e8e6161525d63bb7751dc20f676076": "0x274d656ac90e340000",
    "0x91f516146cda20281719978060c6be4149067c88": "0x6c6b935b8bbd400000",
    "0x91f624b24a1fa5a056fe571229e7379db14b9a1e": "0x28a8517c669b3570000",
    "0x91fe8a4c6164df8fa606995d6ba7adcaf1c893ce": "0x39992648a23c8a00000",
    "0x921f5261f4f612760706892625c75e7bce96b708": "0x6c6b935b8bbd400000",
    "0x9221c9ce01232665741096ac07235903ad1fe2fc": "0x6db63335522628000",
    "0x9225983860a1cb4623c72480ac16272b0c95e5f5": "0x6c6b935b8bbd400000",
    "0x9225d46a5a80943924a39e5b84b96da0ac450581": "0x878678326eac9000000",
    "0x922a20c79a1d3a26dd3829677bf1d45c8f672bb6": "0xd8d726b7177a800000",
    "0x92438e5203b6346ff886d7c36288aacccc78ceca": "0x3635c9adc5dea00000",
    "0x9243d7762d77287b12638688b9854e88a769b271": "0x3635c9adc5dea00000",
    "0x924bce7a853c970bb5ec7bb759baeb9c7410857b": "0xbe202d6a0eda0000",
    "0x924efa6db595b79313277e88319625076b580a10": "0x6c6b935b8bbd400000",
    "0x92558226b384626cad48e09d966bf1395ee7ea5d": "0x121ea68c114e510000",
    "0x926082cb7eed4b1993ad245a477267e1c33cd568": "0x144a74badfa4b60000",
    "0x926209b7fda54e8ddb9d9e4d3d19ebdc8e88c29f": "0x6c6b935b8bbd400000",
    "0x9268d62646563611dc3b832a30aa2394c64613e3": "0x6c6b935b8bbd400000",
    "0x92698e345378c62d8eda184d94366a144b0c105b": "0x4be4e7267b6ae00000",
    "0x92793ac5b37268774a7130de2bbd330405661773": "0x22ca3587cf4eb0000",
    "0x9279b2228cec8f7b4dda3f320e9a0466c2f585ca": "0x10f0cf064dd59200000",
    "0x927cb7dc187036b5427bc7e200c5ec450c1d27d4": "0xbb59a27953c600000",
    "0x927cc2bfda0e088d02eff70b38b08aa53cc30941": "0x646f60a1f986360000",
    "0x9284f96ddb47b5186ee558aa31324df5361c0f73": "0x3635c9adc5dea000000",
    "0x929d368eb46a2d1fbdc8ffa0607ede4ba88f59ad": "0x6c6b935b8bbd400000",
    "0x92a7c5a64362e9f842a23deca21035857f889800": "0x6c6acc67d7b1d40000",
    "0x92a898d46f19719c38126a8a3c27867ae2cee596": "0x6c6b935b8bbd400000",
    "0x92a971a739799f8cb48ea8475d72b2d2474172e6": "0xd5967be4fc3f100000",
    "0x92aae59768eddff83cfe60bb512e730a05a161d7": "0x5c9778410c76d18000",
    "0x92ad1b3d75fba67d54663da9fc848a8ade10fa67": "0x6c6b935b8bbd400000",
    "0x92ae5b7c7eb492ff1ffa16dd42ad9cad40b7f8dc": "0x2ee449550898e40000",
    "0x92c0f573eccf62c54810ee6ba8d1f113542b301b": "0xb7726f16ccb1e00000",
    "0x92c13fe0d6ce87fd50e03def9fa6400509bd7073": "0x22b1c8c1227a00000",
    "0x92c94c2820dfcf7156e6f13088ece7958b3676fd": "0x52d542804f1ce0000",
    "0x92cfd60188efdfb2f8c2e7b1698abb9526c1511f": "0x6c6b935b8bbd400000",
    "0x92d8ad9a4d61683b80d4a6672e84c20d62421e80": "0x1158e460913d00000",
    "0x92dca5e102b3b81b60f1a504634947c374a88ccb": "0x6c6b935b8bbd400000",
    "0x92e435340e9d253c00256389f52b067d55974e76": "0xe873f44133cb00000",
    "0x92e4392816e5f2ef5fb65837cec2c2325cc64922": "0x21e19e0c9bab2400000",
    "0x92e6581e1da1f9b846e09347333dc818e2d2ac66": "0xc55325ca7415e00000",
    "0x931df34d1225bcd4224e63680d5c4c09bce735a6": "0x3afb087b876900000",
    "0x931fe712f64207a2fd5022728843548bfb8cbb05": "0x6c6b935b8bbd400000",
    "0x93235f340d2863e18d2f4c52996516138d220267": "0x4002e44fda7d40000",
    "0x93258255b37c7f58f4b10673a932dd3afd90f4f2": "0x3635c9adc5dea00000",
    "0x9328d55ccb3fce531f199382339f0e576ee840a3": "0xd8d726b7177a800000",
    "0x9329ffdc268babde8874b366406c81445b9b2d35": "0x16e62f8c730ca18000",
    "0x932b9c04d40d2ac83083d94298169dae81ab2ed0": "0x6c6b935b8bbd400000",
    "0x933436c8472655f64c3afaaf7c4c621c83a62b38": "0x3635c9adc5dea00000",
    "0x933bf33f8299702b3a902642c33e0bfaea5c1ca3": "0xd2f13f7789f00000",
    "0x9340345ca6a3eabdb77363f2586043f29438ce0b": "0x1cc805da0dfff10000",
    "0x9340b5f678e45ee05eb708bb7abb6ec8f08f1b6b": "0x14542ba12a337c00000",
    "0x934af21b7ebfa467e2ced65aa34edd3a0ec71332": "0x7801f3e80cc0ff00000",
    "0x935069444a6a984de2084e46692ab99f671fc727": "0x1e7e4171bf4d3a00000",
    "0x93507e9e8119cbceda8ab087e7ecb071383d6981": "0x2f6f10780d22cc00000",
    "0x93678a3c57151aeb68efdc43ef4d36cb59a009f3": "0x1a12a92bc3c3e0000",
    "0x936dcf000194e3bff50ac5b4243a3ba014d661d8": "0x21e19e0c9bab2400000",
    "0x936f3813f5f6a13b8e4ffec83fe7f826186a71cd": "0x1c30731cec03200000",
    "0x9374869d4a9911ee1eaf558bc4c2b63ec63acfdd": "0x3635c9adc5dea00000",
    "0x937563d8a80fd5a537b0e66d20a02525d5d88660": "0x878678326eac900000",
    "0x9376dce2af2ec8dcda741b7e7345664681d93668": "0x3635c9adc5dea00000",
    "0x93868ddb2a794d02ebda2fa4807c76e3609858dc": "0x6dee15fc7c24a78000",
    "0x939c4313d2280edf5e071bced846063f0a975d54": "0x1969368974c05b000000",
    "0x93a6b3ab423010f981a7489d4aad25e2625c5741": "0x44680fe6a1ede4e8000",
    "0x93aa8f92ebfff991fc055e906e651ac768d32bc8": "0x32f51edbaaa3300000",
    "0x93b4bf3fdff6de3f4e56ba6d7799dc4b93a6548f": "0x10910d4cdc9f60000",
    "0x93bc7d9a4abd44c8bbb8fe8ba804c61ad8d6576c": "0xd8d6119a8146050000",
    "0x93c2e64e5de5589ed25006e843196ee9b1cf0b3e": "0x5a87e7d7f5f6580000",
    "0x93c88e2d88621e30f58a9586bed4098999eb67dd": "0x69b5afac750bb800000",
    "0x93e0f37ecdfb0086e3e862a97034447b1e4dec1a": "0x1a055690d9db80000",
    "0x93e303411afaf6c107a44101c9ac5b36e9d6538b": "0xdf9ddfecd0365400000",
    "0x93f18cd2526040761488c513174d1e7963768b2c": "0x82ffac9ad593720000",
    "0x940f715140509ffabf974546fab39022a41952d2": "0x4be4e7267b6ae00000",
    "0x942c6b8c955bc0d88812678a236725b32739d947": "0x54069233bf7f780000",
    "0x943d37864a4a537d35c8d99723cd6406ce2562e6": "0x6c6b935b8bbd400000",
    "0x94439ca9cc169a79d4a09cae5e67764a6f871a21": "0xd02ab486cedc00000",
    "0x94449c01b32a7fa55af8104f42cdd844aa8cbc40": "0x38111a1f4f03c100000",
    "0x9445ba5c30e98961b8602461d0385d40fbd80311": "0x21e19e0c9bab2400000",
    "0x944f07b96f90c5f0d7c0c580533149f3f585a078": "0x402f4cfee62e80000",
    "0x9454b3a8bff9709fd0e190877e6cb6c89974dbd6": "0x90f534608a72880000",
    "0x945d96ea573e8df7262bbfa572229b4b16016b0f": "0xb589ef914c1420000",
    "0x945e18769d7ee727c7013f92de24d117967ff317": "0x6c6b935b8bbd400000",
    "0x94612781033b57b146ee74e753c672017f5385e4": "0xc328093e61ee400000",
    "0x94644ad116a41ce2ca7fbec609bdef738a2ac7c7": "0x10f0cf064dd59200000",
    "0x9470cc36594586821821c5c996b6edc83b6d5a32": "0x14d1120d7b1600000",
    "0x9475c510ec9a26979247744c3d8c3b0e0b5f44d3": "0x21e19e0c9bab2400000",
    "0x947e11e5ea290d6fc3b38048979e0cd44ec7c17f": "0x6c6b935b8bbd400000",
    "0x9483d98f14a33fdc118d403955c29935edfc5f70": "0x18ea3b34ef51880000",
    "0x949131f28943925cfc97d41e0cea0b262973a730": "0x97c9ce4cf6d5c00000",
    "0x949f84f0b1d7c4a7cf49ee7f8b2c4a134de32878": "0x252248deb6e6940000",
    "0x949f8c107bc7f0aceaa0f17052aadbd2f9732b2e": "0x6c6b935b8bbd400000",
    "0x94a7cda8f481f9d89d42c303ae1632b3b709db1d": "0x1043561a8829300000",
    "0x94a9a71691317c2064271b51c9353fbded3501a8": "0xb50fcfafebecb00000",
    "0x94ad4bad824bd0eb9ea49c58cebcc0ff5e08346b": "0x692ae8897081d00000",
    "0x94bbc67d13f89ebca594be94bc5170920c30d9f3": "0x458ffa3150a540000",
    "0x94be3ae54f62d663b0d4cc9e1ea8fe9556ea9ebf": "0x143132ca843180000",
    "0x94c055e858357aaa30cf2041fa9059ce164a1f91": "0x43c25e0dcc1bd1c0000",
    "0x94c742fd7a8b7906b3bfe4f8904fc0be5c768033": "0x43c33c1937564800000",
    "0x94ca56de777fd453177f5e0694c478e66aff8a84": "0x1b1ae4d6e2ef500000",
    "0x94d81074db5ae197d2bb1373ab80a87d121c4bd3": "0x1fd933494aa5fe00000",
    "0x94db807873860aac3d5aea1e885e52bff2869954": "0xae8e7a0bb575d00000",
    "0x94e1f5cb9b8abace03a1a6428256553b690c2355": "0x1158e460913d00000",
    "0x94ef8be45077c7d4c5652740de946a62624f713f": "0x56cf5593a18f88000",
    "0x94f13f9f0836a3ee2437a84922d2984dc0f7d53b": "0xa2a0329bc38abe0000",
    "0x94f8f057db7e60e675ad940f155885d1a477348e": "0x15be6174e1912e0000",
    "0x94fcceadfe5c109c5eaeaf462d43873142c88e22": "0x1043561a88293000000",
    "0x95034e1621865137cd4739b346dc17da3a27c34e": "0x55a6e79ccd1d300000",
    "0x950c68a40988154d2393fff8da7ccda99614f72c": "0xf94146fd8dcde58000",
    "0x950fe9c6cad50c18f11a9ed9c45740a6180612d0": "0x1b1ae4d6e2ef5000000",
    "0x952183cfd38e352e579d36decec5b18450f7fba0": "0x6c6b935b8bbd400000",
    "0x95278b08dee7c0f2c8c0f722f9fcbbb9a5241fda": "0x829309f64f0db00000",
    "0x952c57d2fb195107d4cd5ca300774119dfad2f78": "0x6c6b935b8bbd400000",
    "0x953572f0ea6df9b197cae40e4b8ecc056c4371c5": "0x3635c9adc5dea00000",
    "0x953ef652e7b769f53d6e786a58952fa93ee6abe7": "0x9b0a791f1211300000",
    "0x95447046313b2f3a5e19b948fd3b8bedc82c717c": "0x1b1ae4d6e2ef500000",
    "0x955db3b74360b9a268677e73cea821668af6face": "0x65a4da25d3016c00000",
    "0x9560e8ac6718a6a1cdcff189d603c9063e413da6": "0xd8d726b7177a800000",
    "0x9567a0de811de6ff095b7ee64e7f1b83c2615b80": "0xe7eeba3410b740000",
    "0x95681cdae69b2049ce101e325c759892cac3f811": "0x9ae92a9bc94c400000",
    "0x9568b7de755628af359a84543de23504e15e41e6": "0x878678326eac9000000",
    "0x9569c63a9284a805626db3a32e9d236393476151": "0x6acb3df27e1f880000",
    "0x95809e8da3fbe4b7f281f0b8b1715f420f7d7d63": "0x6c6b935b8bbd400000",
    "0x959f57fded6ae37913d900b81e5f48a79322c627": "0xddb26104749118000",
    "0x959ff17f1d51b473b44010052755a7fa8c75bd54": "0x6acb3df27e1f880000",
    "0x95a577dc2eb3ae6cb9dfc77af697d7efdfe89a01": "0x75f610f70ed200000",
    "0x95cb6d8a6379f94aba8b885669562c4d448e56a7": "0x6c6b935b8bbd400000",
    "0x95d550427b5a514c751d73a0f6d29fb65d22ed10": "0x1043561a8829300000",
    "0x95d98d0c1069908f067a52acac2b8b534da37afd": "0x6f59b630a929708000",
    "0x95df4e3445d7662624c48eba74cf9e0a53e9f732": "0xbdbc41e0348b3000000",
    "0x95e6a54b2d5f67a24a4875af75107ca7ea9fd2fa": "0x487a9a304539440000",
    "0x95e6f93dac228bc7585a25735ac2d076cc3a4017": "0x14542ba12a337c00000",
    "0x95e7616424cd0961a71727247437f0069272280e": "0x15af1d78b58c400000",
    "0x95e80a82c20cbe3d2060242cb92d735810d034a2": "0x1c32e463fd4b98000",
    "0x95f62d0243ede61dad9a3165f53905270d54e242": "0x57473d05dabae80000",
    "0x95fb5afb14c1ef9ab7d179c5c300503fd66a5ee2": "0x1daf7a02b0dbe8000",
    "0x9610592202c282ab9bd8a884518b3e0bd4758137": "0xe873f44133cb00000",
    "0x961c59adc74505d1864d1ecfcb8afa0412593c93": "0x878678326eac9000000",
    "0x962c0dec8a3d464bf39b1215eafd26480ae490cd": "0x6c82e3eaa513e80000",
    "0x962cd22a8edf1e4f4e55b4b15ddbfb5d9d541971": "0x6c6b935b8bbd400000",
    "0x96334bfe04fffa590213eab36514f338b864b736": "0x15af1d78b58c400000",
    "0x9637dc12723d9c78588542eab082664f3f038d9d": "0x3635c9adc5dea00000",
    "0x964eab4b276b4cd8983e15ca72b106900fe41fce": "0x1b1ae4d6e2ef500000",
    "0x9662ee021926682b31c5f200ce457abea76c6ce9": "0x24590e8589eb6a0000",
    "0x966c04781cb5e67dde3235d7f8620e1ab663a9a5": "0x100d2050da6351600000",
    "0x967076a877b18ec15a415bb116f06ef32645dba3": "0x6c6b935b8bbd400000",
    "0x967bfaf76243cdb9403c67d2ceefdee90a3feb73": "0x349d87f2a2dc2f0000",
    "0x967d4142af770515dd7062af93498dbfdff29f20": "0x11854d0f9cee40000",
    "0x968b14648f018333687cd213fa640aec04ce6323": "0x3635c9adc5dea00000",
    "0x968dea60df3e09ae3c8d3505e9c080454be0e819": "0x14542ba12a337c00000",
    "0x96924191b7df655b3319dc6d6137f481a73a0ff3": "0xd9ecb4fd208e500000",
    "0x9696052138338c722f1140815cf7749d0d3b3a74": "0x1b1ae4d6e2ef500000",
    "0x96a55f00dff405dc4de5e58c57f6f6f0cac55d2f": "0x6a6616379c87b58000",
    "0x96aa573fed2f233410dbae5180145b23c31a02f0": "0x5dc892aa1131c80000",
    "0x96ad579bbfa8db8ebec9d286a72e4661eed8e356": "0x3a0ba42bec61830000",
    "0x96b434fe0657e42acc8212b6865139dede15979c": "0xd8d726b7177a800000",
    "0x96b906ea729f4655afe3e57d35277c967dfa1577": "0x3635c9adc5dea00000",
    "0x96d62dfd46087f62409d93dd606188e70e381257": "0x6c6b935b8bbd400000",
    "0x96d9cca8f55eea0040ec6eb348a1774b95d93ef4": "0xd8d726b7177a800000",
    "0x96e7c0c9d5bf10821bf140c558a145b7cac21397": "0x393ef1a5127c800000",
    "0x96ea6ac89a2bac95347b51dba63d8bd5ebdedce1": "0x6c6b935b8bbd400000",
    "0x96eafbf2fb6f4db9a436a74c45b5654452e23819": "0x1158e460913d00000",
    "0x96eb523e832f500a017de13ec27f5d366c560eff": "0x10acceba43ee280000",
    "0x96f0462ae6f8b96088f7e9c68c74b9d8ad34b347": "0x61093d7c2c6d380000",
    "0x96f820500b70f4a3e3239d619cff8f222075b135": "0xad78ebc5ac6200000",
    "0x96fe59c3dbb3aa7cc8cb62480c65e56e6204a7e2": "0x43c33c1937564800000",
    "0x96ff6f509968f36cb42cba48db32f21f5676abf8": "0x6acb3df27e1f880000",
    "0x970938522afb5e8f994873c9fbdc26e3b37e314c": "0x3635c9adc5dea00000",
    "0x970abd53a54fca4a6429207c182d4d57bb39d4a0": "0x6c6b935b8bbd400000",
    "0x970d8b8a0016d143054f149fb3b8e550dc0797c7": "0x3635c9adc5dea00000",
    "0x972c2f96aa00cf8a2f205abcf8937c0c75f5d8d9": "0xad78ebc5ac6200000",
    "0x973f4e361fe5decd989d4c8f7d7cc97990385daf": "0x150f8543a387420000",
    "0x974d0541ab4a47ec7f75369c0069b64a1b817710": "0x15af1d78b58c400000",
    "0x974d2f17895f2902049deaaecf09c3046507402d": "0xcc19c29437ab8000",
    "0x9752d14f5e1093f071711c1adbc4e3eb1e5c57f3": "0x6c6b935b8bbd400000",
    "0x9756e176c9ef693ee1eec6b9f8b151d313beb099": "0x410d586a20a4c00000",
    "0x975f3764e97bbccf767cbd3b795ba86d8ba9840e": "0x12c1b6eed03d280000",
    "0x976a18536af41874426308871bcd1512a775c9f8": "0x21e19e0c9bab2400000",
    "0x976e3ceaf3f1af51f8c29aff5d7fa21f0386d8ee": "0xd02ab486cedc00000",
    "0x9777cc61cf756be3b3c20cd4491c69d275e7a120": "0x21e19e0c9bab2400000",
    "0x97810bafc37e84306332aacb35e92ad911d23d24": "0x3635c9adc5dea00000",
    "0x978c430ce4359b06bc2cdf5c2985fc950e50d5c8": "0x1a055690d9db800000",
    "0x9795f64319fc17dd0f8261f9d206fb66b64cd0c9": "0xad78ebc5ac6200000",
    "0x9799ca21dbcf69bfa1b3f72bac51b9e3ca587cf9": "0x5c283d410394100000",
    "0x979cbf21dfec8ace3f1c196d82df962534df394f": "0x9991d478dd4d160000",
    "0x979d681c617da16f21bcaca101ed16ed015ab696": "0x65ea3db75546600000",
    "0x979f30158b574b999aab348107b9eed85b1ff8c1": "0x34957444b840e80000",
    "0x97a86f01ce3f7cfd4441330e1c9b19e1b10606ef": "0x6c6b935b8bbd400000",
    "0x97b91efe7350c2d57e7e406bab18f3617bcde14a": "0x21e1999bbd5d2be0000",
    "0x97d0d9725e3b70e675843173938ed371b62c7fac": "0x93739534d28680000",
    "0x97d9e46a7604d7b5a4ea4ee61a42b3d2350fc3ed": "0x6c6b935b8bbd400000",
    "0x97dc26ec670a31e0221d2a75bc5dc9f90c1f6fd4": "0x2b5e3af16b1880000",
    "0x97de21e421c37fe4b8025f9a51b7b390b5df7804": "0x10f0cf064dd592000000",
    "0x97e28973b860c567402800fbb63ce39a048a3d79": "0x542253a126ce40000",
    "0x97e5cc6127c4f885be02f44b42d1c8b0ac91e493": "0xad78ebc5ac6200000",
    "0x97f1fe4c8083e596212a187728dd5cf80a31bec5": "0x1158e460913d00000",
    "0x97f7760657c1e202759086963eb4211c5f8139b9": "0xa8a097fcb3d17680000",
    "0x97f99b6ba31346cd98a9fe4c308f87c5a58c5151": "0x14542ba12a337c00000",
    "0x980a84b686fc31bdc83c221058546a71b11f838a": "0x2a415548af86818000",
    "0x9810e34a94db6ed156d0389a0e2b80f4fd6b0a8a": "0x6c6b935b8bbd400000",
    "0x981ddf0404e4d22dda556a0726f00b2d98ab9569": "0x36356633ebd8ea0000",
    "0x981f712775c0dad97518ffedcb47b9ad1d6c2762": "0x16a6502f15a1e540000",
    "0x9834682180b982d166badb9d9d1d9bbf016d87ee": "0x6c6b935b8bbd400000",
    "0x9836b4d30473641ab56aeee19242761d72725178": "0x6c6b935b8bbd400000",
    "0x98397342ec5f3d4cb877e54ef5d6f1d366731bd4": "0x14061b9d77a5e980000",
    "0x9846648836a307a057184fd51f628a5f8c12427c": "0x40b69bf43dce8f00000",
    "0x984a7985e3cc7eb5c93691f6f8cc7b8f245d01b2": "0x14542ba12a337c00000",
    "0x985d70d207892bed398590024e2421b1cc119359": "0x43c33c1937564800000",
    "0x986df47e76e4d7a789cdee913cc9831650936c9d": "0x10f0cf064dd59200000",
    "0x9874803fe1f3a0365e7922b14270eaeb032cc1b5": "0x3cf5928824c6c20000",
    "0x9875623495a46cdbf259530ff838a1799ec38991": "0x6c6b935b8bbd400000",
    "0x987618c85656207c7bac1507c0ffefa2fb64b092": "0x37dfe433189e38000",
    "0x987c9bcd6e3f3990a52be3eda4710c27518f4f72": "0x15af1d78b58c400000",
    "0x9882967cee68d2a839fad8ab4a7c3dddf6c0adc8": "0x4878be1ffaf95d0000",
    "0x98855c7dfbee335344904a12c40c731795b13a54": "0x39fbae8d042dd00000",
    "0x989c0ccff654da03aeb11af701054561d6297e1d": "0xd8d726b7177a800000",
    "0x98a0e54c6d9dc8be96276cebf4fec460f6235d85": "0x6ac882100952c78000",
    "0x98b769cc305cecfb629a00c907069d7ef9bc3a12": "0x168d28e3f00280000",
    "0x98ba4e9ca72fddc20c69b4396f76f8183f7a2a4e": "0x2b5e3af16b188000000",
    "0x98be696d51e390ff1c501b8a0f6331b628ddc5ad": "0x6c6b935b8bbd400000",
    "0x98bed3a72eccfbafb923489293e429e703c7e25b": "0x6c6b935b8bbd400000",
    "0x98bf4af3810b842387db70c14d46099626003d10": "0xd8d726b7177a800000",
    "0x98c10ebf2c4f97cba5a1ab3f2aafe1cac423f8cb": "0x1043561a8829300000",
    "0x98c19dba810ba611e68f2f83ee16f6e7744f0c1f": "0xad78ebc5ac6200000",
    "0x98c5494a03ac91a768dffc0ea1dde0acbf889019": "0x2a5a058fc295ed000000",
    "0x98d204f9085f8c8e7de23e589b64c6eff692cc63": "0x6c6b935b8bbd400000",
    "0x98d3731992d1d40e1211c7f735f2189afa0702e0": "0x1b1ae4d6e2ef5000000",
    "0x98e2b6d606fd2d6991c9d6d4077fdf3fdd4585da": "0x30df1a6f8ad6280000",
    "0x98e3e90b28fccaee828779b8d40a5568c4116e21": "0x22b1c8c1227a00000",
    "0x98e6f547db88e75f1f9c8ac2c5cf1627ba580b3e": "0x3635c9adc5dea00000",
    "0x98f4af3af0aede5fafdc42a081ecc1f89e3ccf20": "0x1fd933494aa5fe00000",
    "0x98f6b8e6213dbc9a5581f4cce6655f95252bdb07": "0x115872b0bca4300000",
    "0x9909650dd5b1397b8b8b0eb69499b291b0ad1213": "0xad78ebc5ac6200000",
    "0x991173601947c2084a62d639527e961512579af9": "0x2086ac351052600000",
    "0x99129d5b3c0cde47ea0def4dfc070d1f4a599527": "0x6c6b935b8bbd400000",
    "0x9917d68d4af341d651e7f0075c6de6d7144e7409": "0x132d4476c08e6f00000",
    "0x991ac7ca7097115f26205eee0ef7d41eb4e311ae": "0x1158e460913d00000",
    "0x992365d764c5ce354039ddfc912e023a75b8e168": "0xfc936392801c0000",
    "0x992646ac1acaabf5ddaba8f9429aa6a94e7496a7": "0x3637507a30abeb0000",
    "0x99268327c373332e06c3f6164287d455b9d5fa4b": "0x6c6b935b8bbd400000",
    "0x9928ff715afc3a2b60f8eb4cc4ba4ee8dab6e59d": "0x17da3a04c7b3e00000",
    "0x9932ef1c85b75a9b2a80057d508734c51085becc": "0x2b83fa5301d590000",
    "0x993f146178605e66d517be782ef0b3c61a4e1925": "0x17c1f0535d7a5830000",
    "0x99413704b1a32e70f3bc0d69dd881c38566b54cb": "0x5cc6b694631f7120000",
    "0x994152fc95d5c1ca8b88113abbad4d710e40def6": "0x1b1ae4d6e2ef500000",
    "0x9944fee9d34a4a880023c78932c00b59d5c82a82": "0x28a8a56b3690070000",
    "0x994cc2b5227ec3cf048512467c41b7b7b748909f": "0x6c6b935b8bbd400000",
    "0x9971df60f0ae66dce9e8c84e17149f09f9c52f64": "0xad78ebc5ac6200000",
    "0x9976947eff5f6ae5da08dd541192f378b428ff94": "0x1b1ae4d6e2ef5000000",
    "0x997d6592a31589acc31b9901fbeb3cc3d65b3215": "0x6c6b935b8bbd400000",
    "0x9982a5890ffb5406d3aca8d2bfc1dd70aaa80ae0": "0x6c6b935b8bbd400000",
    "0x99878f9d6e0a7ed9aec78297b73879a80195afe0": "0xd7c198710e66b00000",
    "0x998c1f93bcdb6ff23c10d0dc924728b73be2ff9f": "0x365bf3a433eaf30000",
    "0x9991614c5baa47dd6c96874645f97add2c3d8380": "0x6acb3df27e1f880000",
    "0x99924a9816bb7ddf3fec1844828e9ad7d06bf4e6": "0x5f68e8131ecf800000",
    "0x99997668f7c1a4ff9e31f9977ae3224bcb887a85": "0xfc936392801c00000",
    "0x999c49c174ca13bc836c1e0a92bff48b271543ca": "0xb1cf24ddd0b1400000",
    "0x99a4de19ded79008cfdcd45d014d2e584b8914a8": "0x5150ae84a8cdf00000",
    "0x99a96bf2242ea1b39ece6fcc0d18aed00c0179f3": "0x1043561a8829300000",
    "0x99b018932bcad355b6792b255db6702dec8ce5dd": "0xd8d8583fa2d52f0000",
    "0x99b743d1d9eff90d9a1934b4db21d519d89b4a38": "0x56bc75e2d63100000",
    "0x99b8c824869de9ed24f3bff6854cb6dd45cc3f9f": "0x65ea3db75546600000",
    "0x99c0174cf84e0783c220b4eb6ae18fe703854ad3": "0x7079a2573d0c780000",
    "0x99c1d9f40c6ab7f8a92fce2fdce47a54a586c53f": "0x35659ef93f0fc40000",
    "0x99c236141daec837ece04fdaee1d90cf8bbdc104": "0x766516acac0d200000",
    "0x99c31fe748583787cdd3e525b281b218961739e3": "0x3708baed3d68900000",
    "0x99c475bf02e8b9214ada5fad02fdfd15ba365c0c": "0x2009c5c8bf6fdc0000",
    "0x99c883258546cc7e4e971f522e389918da5ea63a": "0xd8d726b7177a800000",
    "0x99c9f93e45fe3c1418c353e4c5ac3894eef8121e": "0x585baf145050b0000",
    "0x99d1579cd42682b7644e1d4f7128441eeffe339d": "0x43c33c1937564800000",
    "0x99d1b585965f406a42a49a1ca70f769e765a3f98": "0x3894f0e6f9b9f700000",
    "0x99dfd0504c06c743e46534fd7b55f1f9c7ec3329": "0x6c6b935b8bbd400000",
    "0x99f4147ccc6bcb80cc842e69f6d00e30fa4133d9": "0x15af1d78b58c400000",
    "0x99f77f998b20e0bcdcd9fc838641526cf25918ef": "0x61093d7c2c6d380000",
    "0x99fad50038d0d9d4c3fbb4bce05606ecadcd5121": "0x6c6b935b8bbd400000",
    "0x99fe0d201228a753145655d428eb9fd94985d36d": "0x6920bff3515a3a0000",
    "0x9a079c92a629ca15c8cafa2eb28d5bc17af82811": "0x1b1ae4d6e2ef500000",
    "0x9a0d3cee3d9892ea3b3700a27ff84140d9025493": "0x340aad21b3b700000",
    "0x9a24ce8d485cc4c86e49deb39022f92c7430e67e": "0x46791fc84e07d00000",
    "0x9a2ce43b5d89d6936b8e8c354791b8afff962425": "0x6c6b935b8bbd400000",
    "0x9a390162535e398877e416787d6239e0754e937c": "0x3635c9adc5dea00000",
    "0x9a3da65023a13020d22145cfc18bab10bd19ce4e": "0x18bf6ea3464a3a0000",
    "0x9a3e2b1bf346dd070b027357feac44a4b2c97db8": "0x21e19e0c9bab2400000",
    "0x9a4ca8b82117894e43db72b9fa78f0b9b93ace09": "0x2b5e3af16b1880000",
    "0x9a522e52c195bfb7cf5ffaaedb91a3ba7468161d": "0x3635c9adc5dea00000",
    "0x9a5af31c7e06339ac8b4628d7c4db0ce0f45c8a4": "0x1b1ae4d6e2ef500000",
    "0x9a633fcd112cceeb765fe0418170732a9705e79c": "0xfc936392801c0000",
    "0x9a63d185a79129fdab19b58bb631ea36a420544e": "0x246ddf97976680000",
    "0x9a6708ddb8903c289f83fe889c1edcd61f854423": "0x3635c9adc5dea00000",
    "0x9a6ff5f6a7af7b7ae0ed9c20ecec5023d281b786": "0x8a12b9bd6a67ec0000",
    "0x9a82826d3c29481dcc2bd2950047e8b60486c338": "0x43c33c1937564800000",
    "0x9a8eca4189ff4aa8ff7ed4b6b7039f0902219b15": "0x1158e460913d00000",
    "0x9a953b5bcc709379fcb559d7b916afdaa50cadcc": "0x56bc75e2d63100000",
    "0x9a990b8aeb588d7ee7ec2ed8c2e64f7382a9fee2": "0x1d127db69fd8b0000",
    "0x9a9d1dc0baa77d6e20c3d849c78862dd1c054c87": "0x2fb474098f67c00000",
    "0x9aa48c66e4fb4ad099934e32022e827427f277ba": "0x21e19e0c9bab2400000",
    "0x9aa8308f42910e5ade09c1a5e282d6d91710bdbf": "0xad78ebc5ac6200000",
    "0x9aaafa0067647ed999066b7a4ca5b4b3f3feaa6f": "0x3635c9adc5dea00000",
    "0x9ab988b505cfee1dbe9cd18e9b5473b9a2d4f536": "0x1158e460913d000000",
    "0x9ab98d6dbb1eaae16d45a04568541ad3d8fe06cc": "0xec50464fe23f38000",
    "0x9aba2b5e27ff78baaab5cdc988b7be855cebbdce": "0x21e0c0013070adc0000",
    "0x9ac4da51d27822d1e208c96ea64a1e5b55299723": "0x56c5579f722140000",
    "0x9ac85397792a69d78f286b86432a07aeceb60e64": "0xc673ce3c40160000",
    "0x9ac907ee85e6f3e223459992e256a43fa08fa8b2": "0x21e19e0c9bab2400000",
    "0x9ad47fdcf9cd942d28effd5b84115b31a658a13e": "0xb259ec00d53b280000",
    "0x9adbd3bc7b0afc05d1d2eda49ff863939c48db46": "0xad6eedd17cf3b8000",
    "0x9adf458bff3599eee1a26398853c575bc38c6313": "0xf2dc7d47f15600000",
    "0x9ae13bd882f2576575921a94974cbea861ba0d35": "0xab4dcf399a3a600000",
    "0x9ae9476bfecd3591964dd325cf8c2a24faed82c1": "0xd8d726b7177a800000",
    "0x9af100cc3dae83a33402051ce4496b16615483f6": "0x6c6b935b8bbd400000",
    "0x9af11399511c213181bfda3a8b264c05fc81b3ce": "0x2f6f10780d22cc00000",
    "0x9af5c9894c33e42c2c518e3ac670ea9505d1b53e": "0xfc936392801c0000",
    "0x9af9dbe47422d177f945bdead7e6d82930356230": "0xd5967be4fc3f100000",
    "0x9afa536b4c66bc38d875c4b30099d9261fdb38eb": "0xb2a8f842a77bc8000",
    "0x9b06ad841dffbe4ccf46f1039fc386f3c321446e": "0x6c6b935b8bbd400000",
    "0x9b1168de8ab64b47552f3389800a9cc08b4666cf": "0x5dc892aa1131c80000",
    "0x9b1811c3051f46e664ae4bc9c824d18592c4574a": "0xad6eedd17cf3b8000",
    "0x9b18478655a4851cc906e660feac61f7f4c8bffc": "0xe2478d38907d840000",
    "0x9b22a80d5c7b3374a05b446081f97d0a34079e7f": "0xa2a15d09519be00000",
    "0x9b2be7f56754f505e3441a10f7f0e20fd3ddf849": "0x126e72a69a50d00000",
    "0x9b32cf4f5115f4b34a00a64c617de06387354323": "0x5b81ed888207c8000",
    "0x9b43dcb95fde318075a567f1e6b57617055ef9e8": "0xd5967be4fc3f100000",
    "0x9b444fd337e5d75293adcfff70e1ea01db023222": "0x56bc75e2d63100000",
    "0x9b4824ff9fb2abda554dee4fb8cf549165570631": "0x1158e460913d00000",
    "0x9b4c2715780ca4e99e60ebf219f1590c8cad500a": "0x56bc75e2d631000000",
    "0x9b59eb213b1e7565e45047e04ea0374f10762d16": "0x6c6b935b8bbd400000",
    "0x9b5c39f7e0ac168c8ed0ed340477117d1b682ee9": "0x55005f0c614480000",
    "0x9b5ec18e8313887df461d2902e81e67a8f113bb1": "0x56bc75e2d63100000",
    "0x9b64d3cd8d2b73f66841b5c46bb695b88a9ab75d": "0x1203a4f760c168000",
    "0x9b658fb361e046d4fcaa8aef6d02a99111223625": "0x6c6b935b8bbd400000",
    "0x9b6641b13e172fc072ca4b8327a3bc28a15b66a9": "0x68155a43676e00000",
    "0x9b68f67416a63bf4451a31164c92f672a68759e9": "0xcb49b44ba602d800000",
    "0x9b773669e87d76018c090f8255e54409b9dca8b2": "0x1158e460913d00000",
    "0x9b77ebced7e215f0920e8c2b870024f6ecb2ff31": "0x3635c9adc5dea00000",
    "0x9b7c8810cc7cc89e804e6d3e38121850472877fe": "0x6c6b935b8bbd400000",
    "0x9ba53dc8c95e9a472feba2c4e32c1dc4dd7bab46": "0x487a9a304539440000",
    "0x9bacd3d40f3b82ac91a264d9d88d908eac8664b9": "0x43c33c1937564800000",
    "0x9bb760d5c289a3e1db18db095345ca413b9a43c2": "0xaadec983fcff40000",
    "0x9bb76204186af2f63be79168601687fc9bad661f": "0x1043561a8829300000",
    "0x9bb9b02a26bfe1ccc3f0c6219e261c397fc5ca78": "0x487a9a304539440000",
    "0x9bc573bcda23b8b26f9073d90c230e8e71e0270b": "0x362f75a4305d0c0000",
    "0x9bd7c38a4210304a4d653edeff1b3ce45fce7843": "0xf498941e664280000",
    "0x9bd88068e13075f3a8cac464a5f949d6d818c0f6": "0x14542ba12a337c00000",
    "0x9bd905f1719fc7acd0159d4dc1f8db2f21472338": "0x3635c9adc5dea00000",
    "0x9bdbdc9b973431d13c89a3f9757e9b3b6275bfc7": "0x1b1a7dcf8a44d38000",
    "0x9be3c329b62a28b8b0886cbd8b99f8bc930ce3e6": "0x409e52b48369a0000",
    "0x9bf58efbea0784eb068adecfa0bb215084c73a35": "0x13a6b2b564871a00000",
    "0x9bf672d979b36652fc5282547a6a6bc212ae4368": "0x238fd42c5cf0400000",
    "0x9bf703b41c3624e15f4054962390bcba3052f0fd": "0x1483e01533c2e3c0000",
    "0x9bf71f7fb537ac54f4e514947fa7ff6728f16d2f": "0x1cf84a30a0a0c0000",
    "0x9bf9b3b2f23cf461eb591f28340bc719931c8364": "0x3635c9adc5dea00000",
    "0x9bfc659c9c601ea42a6b21b8f17084ec87d70212": "0x21e19e0c9bab2400000",
    "0x9bfff50db36a785555f07652a153b0c42b1b8b76": "0x6c6b935b8bbd400000",
    "0x9c05e9d0f0758e795303717e31da213ca157e686": "0x3635c9adc5dea00000",
    "0x9c1b771f09af882af0643083de2aa79dc097c40e": "0x8670e9ec6598c00000",
    "0x9c28a2c4086091cb5da226a657ce3248e8ea7b6f": "0xf2dc7d47f15600000",
    "0x9c2fd54089af665df5971d73b804616039647375": "0x3635c9adc5dea00000",
    "0x9c344098ba615a398f11d009905b177c44a7b602": "0x3635c9adc5dea00000",
    "0x9c3d0692ceeef80aa4965ceed262ffc7f069f2dc": "0xad78ebc5ac6200000",
    "0x9c405cf697956138065e11c5f7559e67245bd1a5": "0xad78ebc5ac6200000",
    "0x9c45202a25f6ad0011f115a5a72204f2f2198866": "0x10fcf3a62b080980000",
    "0x9c49deff47085fc09704caa2dca8c287a9a137da": "0x1b1ae4d6e2ef5000000",
    "0x9c4bbcd5f1644a6f075824ddfe85c571d6abf69c": "0x6194049f30f7200000",
    "0x9c526a140683edf1431cfaa128a935e2b614d88b": "0x6046f37e5945c0000",
    "0x9c54e4ed479a856829c6bb42da9f0b692a75f728": "0x197a8f6dd5519800000",
    "0x9c581a60b61028d934167929b22d70b313c34fd0": "0xa968163f0a57b400000",
    "0x9c5cc111092c122116f1a85f4ee31408741a7d2f": "0x1ab2cf7c9f87e20000",
    "0x9c6bc9a46b03ae5404f043dfcf21883e4110cc33": "0xad78ebc5ac6200000",
    "0x9c78963fbc263c09bd72e4f8def74a9475f7055c": "0x2eb8eb1a172dcb80000",
    "0x9c78fbb4df769ce2c156920cfedfda033a0e254a": "0x6acb3df27e1f880000",
    "0x9c7b6dc5190fe2912963fcd579683ec7395116b0": "0x2a1129d09367200000",
    "0x9c80bc18e9f8d4968b185da8c79fa6e11ffc3e23": "0xd02ab486cedc00000",
    "0x9c98fdf1fdcd8ba8f4c5b04c3ae8587efdf0f6e6": "0x14542ba12a337c00000",
    "0x9c99a1da91d5920bc14e0cb914fdf62b94cb8358": "0x43c33c1937564800000",
    "0x9c99b62606281b5cefabf36156c8fe62839ef5f3": "0xd8d726b7177a800000",
    "0x9c9a07a8e57c3172a919ef64789474490f0d9f51": "0x21e19e0c9bab2400000",
    "0x9c9de44724a4054da0eaa605abcc802668778bea": "0xad7d5ca3fa5a20000",
    "0x9c9f3b8a811b21f3ff3fe20fe970051ce66a824f": "0x3ec2debc07d4be0000",
    "0x9c9f89a3910f6a2ae8a91047a17ab788bddec170": "0x21e19e0c9bab2400000",
    "0x9ca0429f874f8dcee2e9c062a9020a842a587ab9": "0x6c6b935b8bbd400000",
    "0x9ca42ee7a0b898f6a5cc60b5a5d7b1bfa3c33231": "0x6c6b935b8bbd400000",
    "0x9cb28ac1a20a106f7f373692c5ce4c73f13732a1": "0x3635c9adc5dea00000",
    "0x9ccddcb2cfc2b25b08729a0a98d9e6f0202ea2c1": "0x56bc75e2d63100000",
    "0x9ce27f245e02d1c312c1d500788c9def7690453b": "0xad78ebc5ac6200000",
    "0x9ce5363b13e8238aa4dd15acd0b2e8afe0873247": "0xad78ebc5ac6200000",
    "0x9cf2928beef09a40f9bfc953be06a251116182fb": "0x14542ba12a337c00000",
    "0x9d069197d1de50045a186f5ec744ac40e8af91c6": "0x6c6b935b8bbd400000",
    "0x9d0e7d92fb305853d798263bf15e97c72bf9d7e0": "0x3635c9adc5dea00000",
    "0x9d0f347e826b7dceaad279060a35c0061ecf334b": "0xd8d726b7177a800000",
    "0x9d207517422cc0d60de7c237097a4d4fce20940c": "0x1b1ae4d6e2ef500000",
    "0x9d250ae4f110d71cafc7b0adb52e8d9acb6679b8": "0x2156d6e997213c00000",
    "0x9d2bfc36106f038250c01801685785b16c86c60d": "0x5077d75df1b675800000",
    "0x9d30cb237bc096f17036fc80dd21ca68992ca2d9": "0x66ee7318fdc8f300000",
    "0x9d32962ea99700d93228e9dbdad2cc37bb99f07e": "0xb4632bedd4ded40000",
    "0x9d34dac25bd15828faefaaf28f710753b39e89dc": "0x3b1c56fed02df00000",
    "0x9d369165fb70b81a3a765f188fd60cbe5e7b0968": "0x6c6b935b8bbd400000",
    "0x9d40e012f60425a340d82d03a1c757bfabc706fb": "0x9346f3addc88d8000",
    "0x9d4174aa6af28476e229dadb46180808c67505c1": "0x421afda42ed6970000",
    "0x9d4213339a01551861764c87a93ce8f85f87959a": "0xad78ebc5ac6200000",
    "0x9d460c1b379ddb19a8c85b4c6747050ddf17a875": "0xb50fcfafebecb00000",
    "0x9d47ba5b4c8505ad8da42934280b61a0e1e8b971": "0x56bc75e2d63100000",
    "0x9d4d321177256ebd9afbda304135d517c3dc5693": "0x2164b7a04ac8a00000",
    "0x9d4ff989b7bed9ab109d10c8c7e55f02d76734ad": "0x3635c9adc5dea00000",
    "0x9d511543b3d9dc60d47f09d49d01b6c498d82078": "0x26197b9516fc3940000",
    "0x9d6ecfa03af2c6e144b7c4692a86951e902e9e1f": "0xa2a5aa60ad243f0000",
    "0x9d7655e9f3e5ba5d6e87e412aebe9ee0d49247ee": "0x8e09311c1d80fa0000",
    "0x9d7831e834c20b1baa697af1d8e0c621c5afff9a": "0x4b06dbbb40f4a0000",
    "0x9d78a975b7db5e4d8e28845cfbe7e31401be0dd9": "0x48a43c54602f700000",
    "0x9d799e943e306ba2e5b99c8a6858cbb52c0cf735": "0x1043561a8829300000",
    "0x9d7fda7070bf3ee9bbd9a41f55cad4854ae6c22c": "0x255cba3c46fcf120000",
    "0x9d81aea69aed6ad07089d61445348c17f34bfc5b": "0x1043561a8829300000",
    "0x9d911f3682f32fe0792e9fb6ff3cfc47f589fca5": "0xd8d726b7177a800000",
    "0x9d913b5d339c95d87745562563fea98b23c60cc4": "0x941302c7f4d230000",
    "0x9d93fab6e22845f8f45a07496f11de71530debc7": "0x6c4fd1ee246e780000",
    "0x9d99b189bbd9a48fc2e16e8fcda33bb99a317bbb": "0x3d16e10b6d8bb20000",
    "0x9d9c4efe9f433989e23be94049215329fa55b4cb": "0xde3b28903c6b58000",
    "0x9d9e57fde30e5068c03e49848edce343b7028358": "0x5dc892aa1131c80000",
    "0x9da3302240af0511c6fd1857e6ddb7394f77ab6b": "0xa80d24677efef00000",
    "0x9da4ec407077f4b9707b2d9d2ede5ea5282bf1df": "0xd8d726b7177a800000",
    "0x9da609fa3a7e6cf2cc0e70cdabe78dc4e382e11e": "0x410d586a20a4c00000",
    "0x9da61ccd62bf860656e0325d7157e2f160d93bb5": "0x10f0ca956f8799e0000",
    "0x9da6e075989c7419094cc9f6d2e49393bb199688": "0x259bb71d5adf3f00000",
    "0x9da8e22ca10e67fea44e525e4751eeac36a31194": "0xe18398e7601900000",
    "0x9db2e15ca681f4c66048f6f9b7941ed08b1ff506": "0xd8d726b7177a800000",
    "0x9dc10fa38f9fb06810e11f60173ec3d2fd6a751e": "0x6acb3df27e1f880000",
    "0x9dd2196624a1ddf14a9d375e5f07152baf22afa2": "0x41b05e2463a5438000",
    "0x9dd46b1c6d3f05e29e9c6f037eed9a595af4a9aa": "0x1b1ae4d6e2ef500000",
    "0x9ddd355e634ee9927e4b7f6c97e7bf3a2f1e687a": "0x2b5e3af16b1880000",
    "0x9de20ae76aa08263b205d5142461961e2408d266": "0xda933d8d8c6700000",
    "0x9de20bc37e7f48a80ffd7ad84ffbf1a1abe1738c": "0xad78ebc5ac6200000",
    "0x9de7386dde401ce4c67b71b6553f8aa34ea5a17d": "0x340aad21b3b700000",
    "0x9deb39027af877992b89f2ec4a1f822ecdf12693": "0x6c6b935b8bbd400000",
    "0x9defe56a0ff1a1947dba0923f7dd258d8f12fa45": "0x5b12aefafa804000000",
    "0x9df057cd03a4e27e8e032f857985fd7f01adc8d7": "0x6c6b935b8bbd400000",
    "0x9df32a501c0b781c0281022f42a1293ffd7b892a": "0x1e7e4171bf4d3a00000",
    "0x9e01765aff08bc220550aca5ea2e1ce8e5b09923": "0x3635c9adc5dea00000",
    "0x9e20e5fd361eabcf63891f5b87b09268b8eb3793": "0x56bc75e2d63100000",
    "0x9e232c08c14dc1a6ed0b8a3b2868977ba5c17d10": "0x1158e460913d00000",
    "0x9e23c5e4b782b00a5fadf1aead87dacf5b0367a1": "0x1158e460913d00000",
    "0x9e35399071a4a101e9194daa3f09f04a0b5f9870": "0xd8d726b7177a800000",
    "0x9e3eb509278fe0dcd8e0bbe78a194e06b6803943": "0x32f51edbaaa3300000",
    "0x9e427272516b3e67d4fcbf82f59390d04c8e28e5": "0xd8d726b7177a800000",
    "0x9e4cec353ac3e381835e3c0991f8faa5b7d0a8e6": "0x21e18b9e9ab45e48000",
    "0x9e5811b40be1e2a1e1d28c3b0774acde0a09603d": "0xa2a15d09519be00000",
    "0x9e5a311d9f69898a7c6a9d6360680438e67a7b2f": "0x50c5e761a444080000",
    "0x9e7c2050a227bbfd60937e268cea3e68fea8d1fe": "0x56bc75e2d63100000",
    "0x9e7f65a90e8508867bccc914256a1ea574cf07e3": "0x433874f632cc600000",
    "0x9e8144e08e89647811fe6b72d445d6a5f80ad244": "0x21e19e0c9bab2400000",
    "0x9e8f64ddcde9b8b451bafaa235a9bf511a25ac91": "0x90f534608a72880000",
    "0x9e951f6dc5e352afb8d04299d2478a451259bf56": "0x3e7419881a73a0000",
    "0x9e960dcd03d5ba99cb115d17ff4c09248ad4d0be": "0xad78ebc5ac6200000",
    "0x9eaf6a328a4076024efa6b67b48b21eedcc0f0b8": "0x890b0c2e14fb80000",
    "0x9eb1ff71798f28d6e989fa1ea0588e27ba86cb7d": "0x7a1fe160277000000",
    "0x9eb281c32719c40fdb3e216db0f37fbc73a026b7": "0x1158e460913d00000",
    "0x9eb3a7cb5e6726427a3a361cfa8d6164dbd0ba16": "0x2b95bdcc39b6100000",
    "0x9eb7834e171d41e069a77947fca87622f0ba4e48": "0x56bc75e2d63100000",
    "0x9ec03e02e587b7769def538413e97f7e55be71d8": "0x42bf06b78ed3b500000",
    "0x9ecbabb0b22782b3754429e1757aaba04b81189f": "0x2ca7bb061f5e998000",
    "0x9ece1400800936c7c6485fcdd3626017d09afbf6": "0x10ce1d3d8cb3180000",
    "0x9ed4e63f526542d44fddd34d59cd25388ffd6bda": "0xd29b34a46348940000",
    "0x9ed80eda7f55054db9fb5282451688f26bb374c1": "0x1043561a8829300000",
    "0x9edc90f4be210865214ab5b35e5a8dd77415279d": "0xd8d726b7177a800000",
    "0x9edeac4c026b93054dc5b1d6610c6f3960f2ad73": "0x410d586a20a4c00000",
    "0x9ee93f339e6726ec65eea44f8a4bfe10da3d3282": "0x6c6b935b8bbd400000",
    "0x9ee9760cc273d4706aa08375c3e46fa230aff3d5": "0x1e52e336cde22180000",
    "0x9eeb07bd2b7890195e7d46bdf2071b6617514ddb": "0x6c6b935b8bbd400000",
    "0x9eef442d291a447d74c5d253c49ef324eac1d8f0": "0xb96608c8103bf00000",
    "0x9ef1896b007c32a15114fb89d73dbd47f9122b69": "0xd8d726b7177a800000",
    "0x9f017706b830fb9c30efb0a09f506b9157457534": "0x6c6b935b8bbd400000",
    "0x9f10f2a0463b65ae30b070b3df18cf46f51e89bd": "0x678a932062e4180000",
    "0x9f19fac8a32437d80ac6837a0bb7841729f4972e": "0x233df3299f61720000",
    "0x9f1aa8fcfc89a1a5328cbd6344b71f278a2ca4a0": "0x1b1ae4d6e2ef500000",
    "0x9f21302ca5096bea7402b91b0fd506254f999a3d": "0x4397451a003dd80000",
    "0x9f271d285500d73846b18f733e25dd8b4f5d4a8b": "0x2723c346ae18080000",
    "0x9f3497f5ef5fe63095836c004eb9ce02e9013b4b": "0x2256861bf9cf080000",
    "0x9f3a74fd5e7edcc1162993171381cbb632b7cff0": "0x21e19e0c9bab2400000",
    "0x9f46e7c1e9078cae86305ac7060b01467d6685ee": "0x243d4d18229ca20000",
    "0x9f496cb2069563144d0811677ba0e4713a0a4143": "0x3cd2e0bf63a4480000",
    "0x9f4a7195ac7c151ca258cafda0cab083e049c602": "0x53538c32185cee0000",
    "0x9f4ac9c9e7e24cb2444a0454fa5b9ad9d92d3853": "0x2d43f3ebfafb2c0000",
    "0x9f5f44026b576a4adb41e95961561d41039ca391": "0xd8d726b7177a80000",
    "0x9f607b3f12469f446121cebf3475356b71b4328c": "0xd8d726b7177a800000",
    "0x9f61beb46f5e853d0a8521c7446e68e34c7d0973": "0x1e5b8fa8fe2ac00000",
    "0x9f64a8e8dacf4ade30d10f4d59b0a3d5abfdbf74": "0x36369ed7747d260000",
    "0x9f662e95274121f177566e636d23964cf1fd686f": "0x6c6b935b8bbd400000",
    "0x9f6a322a6d469981426ae844865d7ee0bb15c7b3": "0x2b5ee57929fdb8000",
    "0x9f7986924aeb02687cd64189189fb167ded2dd5c": "0x35659ef93f0fc40000",
    "0x9f7a0392f857732e3004a375e6b1068d49d83031": "0x6c6b935b8bbd400000",
    "0x9f8245c3ab7d173164861cd3991b94f1ba40a93a": "0x9b0a791f1211300000",
    "0x9f83a293c324d4106c18faa8888f64d299054ca0": "0xad78ebc5ac6200000",
    "0x9f86a066edb61fcb5856de93b75c8c791864b97b": "0x6c6b935b8bbd400000",
    "0x9f98eb34d46979b0a6de8b05aa533a89b825dcf1": "0x4b06dbbb40f4a0000",
    "0x9f9fe0c95f10fee87af1af207236c8f3614ef02f": "0x14542ba12a337c00000",
    "0x9faea13c733412dc4b490402bfef27a0397a9bc3": "0x10ce1d3d8cb3180000",
    "0x9fbe066de57236dc830725d32a02aef9246c6c5e": "0x6c6b935b8bbd400000",
    "0x9fd1052a60506bd1a9ef003afd9d033c267d8e99": "0x3635c9adc5dea00000",
    "0x9fd64373f2fbcd9c0faca60547cad62e26d9851f": "0x3635c9adc5dea00000",
    "0x9fe501aa57ead79278937cd6308c5cfa7a5629fe": "0x2b5ee57929fdb8000",
    "0x9ffc5fe06f33f5a480b75aa94eb8556d997a16c0": "0x1158e460913d00000",
    "0x9ffcf5ef46d933a519d1d16c6ba3189b27496224": "0x3635c9adc5dea00000",
    "0x9ffedcc36b7cc312ad2a9ede431a514fccb49ba3": "0x244f579f3f5ca40000",
    "0xa006268446643ec5e81e7acb3f17f1c351ee2ed9": "0xd8d726b7177a800000",
    "0xa008019863c1a77c1499eb39bbd7bf2dd7a31cb9": "0x76d41c62494840000",
    "0xa009bf076f1ba3fa57d2a7217218bed5565a7a7a": "0x3635c9adc5dea00000",
    "0xa01e9476df84431825c836e8803a97e22fa5a0cd": "0x14542ba12a337c00000",
    "0xa01f12d70f44aa7b113b285c22dcdb45873454a7": "0xfc936392801c0000",
    "0xa01fd1906a908506dedae1e208128872b56ee792": "0xa2a15d09519be00000",
    "0xa0228240f99e1de9cb32d82c0f2fa9a3d44b0bf3": "0x56bc75e2d631000000",
    "0xa02bde6461686e19ac650c970d0672e76dcb4fc2": "0x1e09296c3378de40000",
    "0xa02c1e34064f0475f7fa831ccb25014c3aa31ca2": "0x340aad21b3b700000",
    "0xa02dc6aa328b880de99eac546823fccf774047fb": "0x6acb3df27e1f880000",
    "0xa02e3f8f5959a7aab7418612129b701ca1b80010": "0x1158e460913d00000",
    "0xa0347f0a98776390165c166d32963bf74dcd0a2f": "0x3635c9adc5dea00000",
    "0xa035a3652478f82dbd6d115faa8ca946ec9e681d": "0x5f4e42dd4afec0000",
    "0xa03a3dc7c533d1744295be955d61af3f52b51af5": "0x22b1c8c1227a00000",
    "0xa0459ef3693aacd1647cd5d8929839204cef53be": "0x3635c9adc5dea00000",
    "0xa04f2ae02add14c12faf65cb259022d0830a8e26": "0x152d02c7e14af6800000",
    "0xa06cd1f396396c0a64464651d7c205efaf387ca3": "0x6c6acc67d7b1d40000",
    "0xa072691c8dd7cd4237ff72a75c1a9506d0ce5b9e": "0x140ec80fa7ee880000",
    "0xa072cebe62a9e9f61cc3fbf88a9efbfe3e9a8d70": "0x15af1d78b58c400000",
    "0xa07682000b1bcf3002f85c80c0fa2949bd1e82fd": "0xd8d726b7177a800000",
    "0xa07aa16d74aee8a9a3288d52db1551d593883297": "0x2086ac351052600000",
    "0xa08d215b5b6aac4861a281ac7e400b78fef04cbf": "0x1158e460913d00000",
    "0xa0951970dfd0832fb83bda12c23545e79041756c": "0x2086ac351052600000",
    "0xa09f4d5eaa65a2f4cb750a49923401dae59090af": "0x796e3ea3f8ab00000",
    "0xa0a0e65204541fca9b2fb282cd95138fae16f809": "0x21e19e0c9bab2400000",
    "0xa0aa5f0201f04d3bbeb898132f7c11679466d901": "0x1fbed5215bb4c0000",
    "0xa0aadbd9509722705f6d2358a5c79f37970f00f6": "0xad78ebc5ac6200000",
    "0xa0b771951ce1deee363ae2b771b73e07c4b5e800": "0x4be4e7267b6ae00000",
    "0xa0de5c601e696635c698b7ae9ca4539fc7b941ec": "0x12c3cbd704c9770000",
    "0xa0e8ba661b48154cf843d4c2a5c0f792d528ee29": "0x15af1d78b58c400000",
    "0xa0fc7e53c5ebd27a2abdac45261f84ab3b51aefb": "0xa313daec9bc0d90000",
    "0xa0ff5b4cf016027e8323497d4428d3e5a83b8795": "0x16598d3c83ec0420000",
    "0xa106465bbd19e1b6bce50d1b1157dc59095a3630": "0x6c6b935b8bbd400000",
    "0xa106e6923edd53ca8ed650968a9108d6ccfd9670": "0x202fe1505afec898000",
    "0xa109e18bb0a39c9ef82fa19597fc5ed8e9eb6d58": "0x58e7926ee858a00000",
    "0xa11a03c4bb26d21eff677d5d555c80b25453ee7a": "0x3cb2759bc410f8000",
    "0xa11effab6cf0f5972cffe4d56596e98968144a8f": "0x5a87e7d7f5f6580000",
    "0xa1204dad5f560728a35c0d8fc79481057bf77386": "0x3635c9adc5dea00000",
    "0xa12623e629df93096704b16084be2cd89d562da4": "0x1ccc9324511e4500000",
    "0xa12a6c2d985daf0e4f5f207ae851aaf729b332cd": "0x152d02c7e14af6800000",
    "0xa1336dfb96b6bcbe4b3edf3205be5723c90fad52": "0x10f0cf064dd59200000",
    "0xa13b9d82a99b3c9bba5ae72ef2199edc7d3bb36c": "0x6c6acc67d7b1d40000",
    "0xa13cfe826d6d1841dcae443be8c387518136b5e8": "0x1da56a4b0835bf800000",
    "0xa1432ed2c6b7777a88e8d46d388e70477f208ca5": "0x1b1a7e413a196c50000",
    "0xa144f6b60f72d64a21e330dadb62d8990ade2b09": "0x3635c9adc5dea00000",
    "0xa15025f595acdbf3110f77c5bf24477e6548f9e8": "0x6c6b935b8bbd400000",
    "0xa158148a2e0f3e92dc2ce38febc20107e3253c96": "0x6c6b935b8bbd400000",
    "0xa16160851d2b9c349b92e46f829abfb210943595": "0x61093d7c2c6d380000",
    "0xa166f911c644ac3213d29e0e1ae010f794d5ad26": "0x6c6b935b8bbd400000",
    "0xa16d9e3d63986159a800b46837f45e8bb980ee0b": "0x6e1175da7ad1200000",
    "0xa17070c2e9c5a940a4ec0e4954c4d7d643be8f49": "0x6c6b17033b361c8000",
    "0xa17c9e4323069518189d5207a0728dcb92306a3f": "0x3635c9adc5dea00000",
    "0xa18360e985f2062e8f8efe02ad2cbc91ad9a5aad": "0xa2a15d09519be00000",
    "0xa1911405cf6e999ed011f0ddcd2a4ff7c28f2526": "0x22b1c8c1227a00000",
    "0xa192698007cc11aa603d221d5feea076bcf7c30d": "0x6c6b935b8bbd400000",
    "0xa192f06ab052d5fd7f94eea8318e827815fe677a": "0x71f8a93d01e540000",
    "0xa1998144968a5c70a6415554cefec2824690c4a5": "0x1158e460913d00000",
    "0xa1a1f0fa6d20b50a794f02ef52085c9d036aa6ca": "0x3635c9adc5dea00000",
    "0xa1ae8d4540d4db6fdde7146f415b431eb55c7983": "0xaadec983fcff40000",
    "0xa1b47c4d0ed6018842e6cfc8630ac3a3142e5e6b": "0x1158e460913d00000",
    "0xa1c4f45a82e1c478d845082eb18875c4ea6539ab": "0x2a5a058fc295ed000000",
    "0xa1dcd0e5b05a977c9623e5ae2f59b9ada2f33e31": "0x56bc75e2d63100000",
    "0xa1e4380a3b1f749673e270229993ee55f35663b4": "0x6c6b935b8bbd400000",
    "0xa1f193a0592f1feb9fdfc90aa813784eb80471c9": "0x4be4e7267b6ae00000",
    "0xa1f2854050f872658ed82e52b0ad7bbc1cb921f6": "0x6d0317e2b326f70000",
    "0xa1f5b840140d5a9acef402ac3cc3886a68cad248": "0x6c6b935b8bbd400000",
    "0xa1f765c44fe45f790677944844be4f2d42165fbd": "0xc7e9cfde768ec70000",
    "0xa1f7dde1d738d8cd679ea1ee965bee224be7d04d": "0x3d184450e5e93c0000",
    "0xa1f8d8bcf90e777f19b3a649759ad95027abdfc3": "0xad78ebc5ac6200000",
    "0xa202547242806f6e70e74058d6e5292defc8c8d4": "0x6c8754c8f30c080000",
    "0xa20d071b1b003063497d7990e1249dabf36c35f7": "0x3635c9adc5dea00000",
    "0xa20d8ff60caae31d02e0b665fa435d76f77c9442": "0x1a8a909dfcef400000",
    "0xa211da03cc0e31ecce5309998718515528a090df": "0xad78ebc5ac6200000",
    "0xa21442ab05340ade68c915f3c3399b9955f3f7eb": "0x2a034919dfbfbc0000",
    "0xa2222259dd9c3e3ded127084f808e92a1887302c": "0x8c8339dafed480000",
    "0xa22ade0ddb5c6ef8d0cd8de94d82b11082cb2e91": "0x374b57f3cef2700000",
    "0xa24c3ab62181e9a15b78c4621e4c7c588127be26": "0x8cde43a83d3310000",
    "0xa257ad594bd88328a7d90fc0a907df95eecae316": "0x1c3786ff3846930000",
    "0xa25b086437fd2192d0a0f64f6ed044f38ef3da32": "0x12290f15180bdc0000",
    "0xa276b058cb98d88beedb67e543506c9a0d9470d8": "0x90aafc76e02fbe0000",
    "0xa282e969cac9f7a0e1c0cd90f5d0c438ac570da3": "0x2207eb89fc27380000",
    "0xa291e9c7990d552dd1ae16cebc3fca342cbaf1d1": "0x43c33c1937564800000",
    "0xa29319e81069e5d60df00f3de5adee3505ecd5fb": "0x6c6b935b8bbd400000",
    "0xa2968fc1c64bac0b7ae0d68ba949874d6db253f4": "0x43c33c1937564800000",
    "0xa29d5bda74e003474872bd5894b88533ff64c2b5": "0x21e19e0c9bab2400000",
    "0xa29d661a6376f66d0b74e2fe9d8f26c0247ec84c": "0xdf3304079c13d20000",
    "0xa2a435de44a01bd0ecb29e44e47644e46a0cdffb": "0x1b1d445a7affe78000",
    "0xa2ace4c993bb1e5383f8ac74e179066e814f0591": "0x56bc75e2d63100000",
    "0xa2b701f9f5cdd09e4ba62baebae3a88257105885": "0x3635c9adc5dea00000",
    "0xa2c5854ff1599f98892c5725d262be1da98aadac": "0x1109ff333010e78000",
    "0xa2c7eaffdc2c9d937345206c909a52dfb14c478f": "0x7c0860e5a80dc0000",
    "0xa2d2aa626b09d6d4e4b13f7ffc5a88bd7ad36742": "0xfb8078507553830000",
    "0xa2d38de1c73906f6a7ca6efeb97cf6f69cc421be": "0x3635c9adc5dea00000",
    "0xa2dc65ee256b59a5bd7929774f904b358df3ada1": "0x483bce28beb09f80000",
    "0xa2e0683a805de6a05edb2ffbb5e96f0570b637c3": "0x1158e460913d00000",
    "0xa2e1b8aa900e9c139b3fa122354f6156d92a18b1": "0x1b1ae4d6e2ef500000",
    "0xa2e2b5941e0c01944bfe1d5fb4e8a34b922ccfb1": "0xad78ebc5ac6200000",
    "0xa2e460a989cb15565f9ecca7d121a18e4eb405b6": "0x6c6b935b8bbd400000",
    "0xa2ecce2c49f72a0995a0bda57aacf1e9f001e22a": "0xd8d726b7177a800000",
    "0xa2f472fe4f22b77db489219ea4023d11582a9329": "0x878678326eac9000000",
    "0xa2f798e077b07d86124e1407df32890dbb4b6379": "0xad78ebc5ac6200000",
    "0xa2f86bc061884e9eef05640edd51a2f7c0596c69": "0x6c6c44fe47ec050000",
    "0xa2fa17c0fb506ce494008b9557841c3f641b8cae": "0x1158e460913d00000",
    "0xa304588f0d850cd8d38f76e9e83c1bf63e333ede": "0x2285601216c8c0000",
    "0xa3058c51737a4e96c55f2ef6bd7bb358167ec2a7": "0x20db3ae4481ad48000",
    "0xa309df54cabce70c95ec3033149cd6678a6fd4cf": "0xc1f12c75101580000",
    "0xa30a45520e5206d9004070e6af3e7bb2e8dd5313": "0x15af1d78b58c400000",
    "0xa30e0acb534c9b3084e8501da090b4eb16a2c0cd": "0x6c6b935b8bbd400000",
    "0xa3203095edb7028e6871ce0a84f548459f83300a": "0xd8d726b7177a800000",
    "0xa321091d3018064279db399d2b2a88a6f440ae24": "0xad78ebc5ac62000000",
    "0xa3232d068d50064903c9ebc563b515acc8b7b097": "0x6c8754c8f30c080000",
    "0xa3241d890a92baf52908dc4aa049726be426ebd3": "0x43c2da661ca2f540000",
    "0xa3294626ec2984c43b43da4d5d8e4669b11d4b59": "0x36a4cf636319c00000",
    "0xa32cf7dde20c3dd5679ff5e325845c70c5962662": "0x1158e460913d00000",
    "0xa339a3d8ca280e27d2415b26d1fc793228b66043": "0x36f28695b78ff00000",
    "0xa33cb450f95bb46e25afb50fe05feee6fb8cc8ea": "0x2a1129d09367200000",
    "0xa33f70da7275ef057104dfa7db64f472e9f5d553": "0x45946b0f9e9d60000",
    "0xa34076f84bd917f20f8342c98ba79e6fb08ecd31": "0xe3aeb5737240a00000",
    "0xa3430e1f647f321ed34739562323c7d623410b56": "0x3634fb9f1489a70000",
    "0xa34f9d568bf7afd94c2a5b8a5ff55c66c4087999": "0x847d503b220eb00000",
    "0xa35606d51220ee7f2146d411582ee4ee4a45596e": "0xd8aabe080bc9400000",
    "0xa356551bb77d4f45a6d7e09f0a089e79cca249cb": "0x126e72a69a50d00000",
    "0xa35c19132cac1935576abfed6c0495fb07881ba0": "0x6c6b935b8bbd400000",
    "0xa365918bfe3f2627b9f3a86775d8756e0fd8a94b": "0x15af1d78b58c400000",
    "0xa36e0d94b95364a82671b608cb2d373245612909": "0x821d221b5291f8000",
    "0xa375b4bc24a24e1f797593cc302b2f331063fa5c": "0xad78ebc5ac6200000",
    "0xa37622ac9bbdc4d82b75015d745b9f8de65a28ec": "0x9dc05cce28c2b80000",
    "0xa379a5070c503d2fac89b8b3afa080fd45ed4bec": "0x42bf06b78ed3b500000",
    "0xa3802d8a659e89a2c47e905430b2a827978950a7": "0x3635c9adc5dea00000",
    "0xa38306cb70baa8e49186bd68aa70a83d242f2907": "0x6c6b935b8bbd400000",
    "0xa38476691d34942eea6b2f76889223047db4617a": "0x6c6b935b8bbd400000",
    "0xa387ce4e961a7847f560075c64e1596b5641d21c": "0x243d4d18229ca20000",
    "0xa387ecde0ee4c8079499fd8e03473bd88ad7522a": "0x6acb3df27e1f880000",
    "0xa3883a24f7f166205f1a6a9949076c26a76e7178": "0x62a992e53a0af00000",
    "0xa38b5bd81a9db9d2b21d5ec7c60552cd02ed561b": "0x14542ba12a337c00000",
    "0xa390ca122b8501ee3e5e07a8ca4b419f7e4dae15": "0x56bc75e2d63100000",
    "0xa3932a31d6ff75fb3b1271ace7caa7d5e1ff1051": "0x43c33c1937564800000",
    "0xa394ad4fd9e6530e6f5c53faecbede81cb172da1": "0x12f939c99edab800000",
    "0xa3979a92760a135adf69d72f75e167755f1cb8c3": "0x56bc75e2d63100000",
    "0xa39bfee4aec9bd75bd22c6b672898ca9a1e95d32": "0x21e19e0c9bab2400000",
    "0xa3a262afd2936819230892fde84f2d5a594ab283": "0x65ea3db75546600000",
    "0xa3a2e319e7d3a1448b5aa2468953160c2dbcba71": "0x6c6b935b8bbd400000",
    "0xa3a57b0716132804d60aac281197ff2b3d237b01": "0x4be4e7267b6ae00000",
    "0xa3a93ef9dbea2636263d06d8492f6a41de907c22": "0x340aad21b3b700000",
    "0xa3ae1879007d801cb5f352716a4dd8ba2721de3d": "0x2a5a058fc295ed000000",
    "0xa3ba0d3a3617b1e31b4e422ce269e873828d5d69": "0x2e141ea081ca080000",
    "0xa3bc979b7080092fa1f92f6e0fb347e28d995045": "0x97c9ce4cf6d5c00000",
    "0xa3bff1dfa9971668360c0d82828432e27bf54e67": "0xad78ebc5ac6200000",
    "0xa3c14ace28b192cbb062145fcbbd5869c67271f6": "0x1b1ae4d6e2ef5000000",
    "0xa3c33afc8cb4704e23153de2049d35ae71332472": "0x2b58addb89a2580000",
    "0xa3d0b03cffbb269f796ac29d80bfb07dc7c6ad06": "0x6c6b935b8bbd400000",
    "0xa3d583a7b65b23f60b7905f3e4aa62aac87f4227": "0x38befa126d5a9f8000",
    "0xa3db364a332d884ba93b2617ae4d85a1489bea47": "0x5c283d410394100000",
    "0xa3e051fb744aa3410c3b88f899f5d57f168df12d": "0xa030dcebbd2f4c0000",
    "0xa3e3a6ea509573e21bd0239ece0523a7b7d89b2f": "0x6acb3df27e1f880000",
    "0xa3f4ad14e0bb44e2ce2c14359c75b8e732d37054": "0xad78ebc5ac6200000",
    "0xa3facc50195c0b4933c85897fecc5bbd995c34b8": "0x1158e460913d00000",
    "0xa4035ab1e5180821f0f380f1131b7387c8d981cd": "0x1158e460913d00000",
    "0xa40aa2bbce0c72b4d0dfffcc42715b2b54b01bfa": "0x3635c9adc5dea00000",
    "0xa419a984142363267575566089340eea0ea20819": "0x6c6acc67d7b1d40000",
    "0xa421dbb89b3a07419084ad10c3c15dfe9b32d0c2": "0x43c33c1937564800000",
    "0xa422e4bf0bf74147cc895bed8f16d3cef3426154": "0x12ef3f62ee11368000",
    "0xa4259f8345f7e3a8b72b0fec2cf75e321fda4dc2": "0x678a932062e4180000",
    "0xa42908e7fe53980a9abf4044e957a54b70e99cbe": "0x6c6b935b8bbd400000",
    "0xa429fa88731fdd350e8ecd6ea54296b6484fe695": "0x6ac5c62d9486070000",
    "0xa430995ddb185b9865dbe62539ad90d22e4b73c2": "0x21e19e0c9bab2400000",
    "0xa436c75453ccca4a1f1b62e5c4a30d86dde4be68": "0x6c6b935b8bbd400000",
    "0xa437fe6ec103ca8d158f63b334224eccac5b3ea3": "0x1b1ae4d6e2ef5000000",
    "0xa43b6da6cb7aac571dff27f09d39f846f53769b1": "0x14998f32ac78700000",
    "0xa43b81f99356c0af141a03010d77bd042c71c1ee": "0x6c6b935b8bbd400000",
    "0xa43e1947a9242b355561c30a829dfeeca2815af8": "0xd23d99969fd6918000",
    "0xa4489a50ead5d5445a7bee4d2d5536c2a76c41f8": "0xad78ebc5ac6200000",
    "0xa44fe800d96fcad73b7170d0f610cb8c0682d6ce": "0xd8d726b7177a800000",
    "0xa45432a6f2ac9d56577b938a37fabac8cc7c461c": "0x3635c9adc5dea00000",
    "0xa466d770d898d8c9d405e4a0e551efafcde53cf9": "0x1ab2cf7c9f87e20000",
    "0xa4670731175893bbcff4fa85ce97d94fc51c4ba8": "0x1b1ae4d6e2ef5000000",
    "0xa46b4387fb4dcce011e76e4d73547d4481e09be5": "0x487a9a304539440000",
    "0xa46cd237b63eea438c8e3b6585f679e4860832ac": "0x3635c9adc5dea00000",
    "0xa47779d8bc1c7bce0f011ccb39ef68b854f8de8f": "0x6c6b935b8bbd400000",
    "0xa4826b6c3882fad0ed5c8fbb25cc40cc4f33759f": "0x701b43e34433d00000",
    "0xa4875928458ec2005dbb578c5cd33580f0cf1452": "0x3635c9adc5dea00000",
    "0xa49f523aa51364cbc7d995163d34eb590ded2f08": "0x9027421b2a9fbc0000",
    "0xa4a49f0bc8688cc9e6dc04e1e08d521026e65574": "0xad78ebc5ac6200000",
    "0xa4a7d306f510cd58359428c0d2f7c3609d5674d7": "0xb58cb61c3ccf340000",
    "0xa4a83a0738799b971bf2de708c2ebf911ca79eb2": "0x2086ac351052600000",
    "0xa4b09de6e713dc69546e76ef0acf40b94f0241e6": "0x117dc0627ec8700000",
    "0xa4d2b429f1ad5349e31704969edc5f25ee8aca10": "0x21e19e0c9bab2400000",
    "0xa4d6c82eddae5947fbe9cdfbd548ae33d91a7191": "0x1b1ae4d6e2ef5000000",
    "0xa4da34450d22ec0ffcede0004b02f7872ee0b73a": "0x50f616673f0830000",
    "0xa4dd59ab5e517d398e49fa537f899fed4c15e95d": "0x43c33c1937564800000",
    "0xa4e623451e7e94e7e89ba5ed95c8a83a62ffc4ea": "0x1158e460913d00000",
    "0xa4ed11b072d89fb136759fc69b428c48aa5d4ced": "0xe3f1527a03ca80000",
    "0xa4fb14409a67b45688a8593e5cc2cf596ced6f11": "0x61093d7c2c6d380000",
    "0xa514d00edd7108a6be839a638db2415418174196": "0x65a4da25d3016c00000",
    "0xa522de7eb6ae1250522a513133a93bd42849475c": "0x43c33c1937564800000",
    "0xa524a8cccc49518d170a328270a2f88133fbaf5d": "0xff7022dac108a0000",
    "0xa539b4a401b584dfe0f344b1b422c65543167e2e": "0xad78ebc5ac6200000",
    "0xa53ead54f7850af21438cbe07af686279a315b86": "0x21e19e0c9bab2400000",
    "0xa543a066fb32a8668aa0736a0c9cd40d78098727": "0x3635c9adc5dea00000",
    "0xa567770b6ae320bdde50f904d663e746a61dace6": "0x6c6b935b8bbd400000",
    "0xa568db4d57e4d67462d733c69a9e0fe26e218327": "0x3b6bff9266c0ae0000",
    "0xa5698035391e67a49013c0002079593114feb353": "0xd02ab486cedc00000",
    "0xa570223ae3caa851418a9843a1ac55db4824f4fd": "0xad78ebc5ac6200000",
    "0xa57360f002e0d64d2d74457d8ca4857ee00bcddf": "0x1233e232f618aa0000",
    "0xa575f2891dcfcda83c5cf01474af11ee01b72dc2": "0x56cd55fc64dfe0000",
    "0xa5783bf33432ff82ac498985d7d460ae67ec3673": "0x62a992e53a0af00000",
    "0xa5874d754635a762b381a5c4c792483af8f23d1d": "0x2b5e3af16b1880000",
    "0xa5a4227f6cf98825c0d5baff5315752ccc1a1391": "0x21e19e0c9bab2400000",
    "0xa5ab4bd3588f46cb272e56e93deed386ba8b753d": "0x4842f04105872c8000",
    "0xa5bad86509fbe0e0e3c0e93f6d381f1af6e9d481": "0x14542ba12a337c00000",
    "0xa5c336083b04f9471b8c6ed73679b74d66c363ec": "0xa3650a4c9d20e20000",
    "0xa5cd123992194b34c4781314303b03c54948f4b9": "0x6cfcc3d91da5630000",
    "0xa5d5b8b62d002def92413710d13b6ff8d4fc7dd3": "0x15af1d78b58c400000",
    "0xa5d96e697d46358d119af7819dc7087f6ae47fef": "0x317bee8af3315a78000",
    "0xa5de5e434fdcdd688f1c31b6fb512cb196724701": "0x2b5e3af16b18800000",
    "0xa5e0fc3c3affed3db6710947d1d6fb017f3e276d": "0x6c6b935b8bbd400000",
    "0xa5e93b49ea7c509de7c44d6cfeddef5910deaaf2": "0x6c6b935b8bbd400000",
    "0xa5e9cd4b74255d22b7d9b27ae8dd43ed6ed0252b": "0x298db2f54411d98000",
    "0xa5f0077b351f6c505cd515dfa6d2fa7f5c4cd287": "0x878678326eac9000000",
    "0xa5f075fd401335577b6683c281e6d101432dc6e0": "0x914878a8c05ee00000",
    "0xa5fe2ce97f0e8c3856be0de5f4dcb2ce5d389a16": "0x13db0b8b6863e0000",
    "0xa5ff62222d80c013cec1a0e8850ed4d354dac16d": "0xb41075c168b180000",
    "0xa609c26dd350c235e44b2b9c1dddccd0a9d9f837": "0x3635c9adc5dea00000",
    "0xa60c1209754f5d87b181da4f0817a81859ef9fd8": "0x2b5e3af16b1880000",
    "0xa6101c961e8e1c15798ffcd0e3201d7786ec373a": "0x14542ba12a337c00000",
    "0xa613456996408af1c2e93e177788ab55895e2b32": "0x15919ff477c88b80000",
    "0xa61887818f914a20e31077290b83715a6b2d6ef9": "0x65ea3db75546600000",
    "0xa61a54df784a44d71b771b87317509211381f200": "0x3635c9adc5dea00000",
    "0xa61cdbadf04b1e54c883de6005fcdf16beb8eb2f": "0x6c6b935b8bbd400000",
    "0xa639acd96b31ba53b0d08763229e1f06fd105e9d": "0x1b1ae4d6e2ef5000000",
    "0xa642501004c90ea9c9ed1998ba140a4cd62c6f5f": "0xd94fb8b10f8b18000",
    "0xa644ed922cc237a3e5c4979a995477f36e50bc62": "0x1fa73d845d7e960000",
    "0xa646a95c6d6f59f104c6541d7760757ab392b08c": "0xe3aeb5737240a00000",
    "0xa6484cc684c4c91db53eb68a4da45a6a6bda3067": "0x14542ba12a337c00000",
    "0xa64e5ffb704c2c9139d77ef61d8cdfa31d7a88e9": "0x7c0860e5a80dc0000",
    "0xa65426cff378ed23253513b19f496de45fa7e18f": "0x18650127cc3dc800000",
    "0xa66a4963b27f1ee1932b172be5964e0d3ae54b51": "0x960db77681e940000",
    "0xa67f38819565423aa85f3e3ab61bc763cbab89dd": "0x7377b022c6be080000",
    "0xa68c313445c22d919ee46cc2d0cdff043a755825": "0x41374fd21b0d88000",
    "0xa68e0c30cba3bc5a883e540320f999c7cd558e5c": "0x6192333762a58c8000",
    "0xa690f1a4b20ab7ba34628620de9ca040c43c1963": "0xd8d726b7177a800000",
    "0xa69d7cd17d4842fe03f62a90b2fbf8f6af7bb380": "0x56bc75e2d63100000",
    "0xa6a08252c8595177cc2e60fc27593e2379c81fb1": "0x11651ac3e7a758000",
    "0xa6a0de421ae54f6d17281308f5646d2f39f7775d": "0x6c6b935b8bbd400000",
    "0xa6b2d573297360102c07a18fc21df2e7499ff4eb": "0xd96fce90cfabcc0000",
    "0xa6c910ce4d494a919ccdaaa1fc3b82aa74ba06cf": "0x1b1ae4d6e2ef5000000",
    "0xa6e3baa38e104a1e27a4d82869afb1c0ae6eff8d": "0x11140eead8b710000",
    "0xa6eebbe464d39187bf80ca9c13d72027ec5ba8be": "0xa2a15d09519be00000",
    "0xa6f62b8a3d7f11220701ab9ffffcb327959a2785": "0x1b6e291f18dba80000",
    "0xa6f93307f8bce03195fece872043e8a03f7bd11a": "0x9c734bad5111580000",
    "0xa701df79f594901afe1444485e6b20c3bda2b9b3": "0x3635c9adc5dea00000",
    "0xa7024cfd742c1ec13c01fea18d3042e65f1d5dee": "0x263119a28abd0b08000",
    "0xa718aaad59bf395cba2b23e09b02fe0c89816247": "0x36303c97e468780000",
    "0xa7247c53d059eb7c9310f628d7fc6c6a0a773f08": "0x1b1ae4d6e2ef500000",
    "0xa7253763cf4a75df92ca1e766dc4ee8a2745147b": "0x2463770e90a8f500000",
    "0xa72ee666c4b35e82a506808b443cebd5c632c7dd": "0x2b5e3af16b18800000",
    "0xa74444f90fbb54e56f3ac9b6cfccaa4819e4614a": "0x1158e460913d00000",
    "0xa747439ad0d393b5a03861d77296326de8bb9db9": "0x3635c9adc5dea00000",
    "0xa7607b42573bb6f6b4d4f23c7e2a26b3a0f6b6f0": "0x57473d05dabae80000",
    "0xa76929890a7b47fb859196016c6fdd8289ceb755": "0x10f0cf064dd59200000",
    "0xa76b743f981b693072a131b22ba510965c2fefd7": "0xfc936392801c0000",
    "0xa76d3f156251b72c0ccf4b47a3393cbd6f49a9c5": "0x487a9a304539440000",
    "0xa77428bcb2a0db76fc8ef1e20e461a0a32c5ac15": "0x15be6174e1912e0000",
    "0xa7758cecb60e8f614cce96137ef72b4fbd07774a": "0x1b1ae4d6e2ef500000",
    "0xa7775e4af6a23afa201fb78b915e51a515b7a728": "0x68155a43676e00000",
    "0xa77f3ee19e9388bbbb2215c62397b96560132360": "0xad78ebc5ac6200000",
    "0xa7859fc07f756ea7dcebbccd42f05817582d973f": "0x21e19e0c9bab2400000",
    "0xa7966c489f4c748a7ae980aa27a574251767caf9": "0xa2a15d09519be00000",
    "0xa7a3bb6139b0ada00c1f7f1f9f56d994ba4d1fa8": "0x6c6b935b8bbd400000",
    "0xa7a3f153cdc38821c20c5d8c8241b294a3f82b24": "0x1b1ae4d6e2ef500000",
    "0xa7a517d7ad35820b09d497fa7e5540cde9495853": "0x6c6b935b8bbd400000",
    "0xa7c9d388ebd873e66b1713448397d0f37f8bd3a8": "0x10f0cf064dd59200000",
    "0xa7dcbba9b9bf6762c145416c506a71e3b497209c": "0x6c6acc67d7b1d40000",
    "0xa7e74f0bdb278ff0a805a648618ec52b166ff1be": "0x56bc75e2d63100000",
    "0xa7e83772bc200f9006aa2a260dbaa8483dc52b30": "0xb42d5366637e50000",
    "0xa7ef35ce87eda6c28df248785815053ec97a5045": "0x10f0ce949e00f930000",
    "0xa7f9220c8047826bd5d5183f4e676a6d77bfed36": "0x85068976be81c0000",
    "0xa807104f2703d679f8deafc442befe849e42950b": "0x6c6b935b8bbd400000",
    "0xa80cb1738bac08d4f9c08b4deff515545fa8584f": "0x1b1ae4d6e2ef500000",
    "0xa819d2ece122e028c8e8a04a064d02b9029b08b9": "0x3635c9adc5dea00000",
    "0xa825fd5abb7926a67cf36ba246a24bd27be6f6ed": "0xf43fc2c04ee00000",
    "0xa8285539869d88f8a961533755717d7eb65576ae": "0xad78ebc5ac6200000",
    "0xa83382b6e15267974a8550b98f7176c1a353f9be": "0xbffdaf2fc1b1a40000",
    "0xa8446c4781a737ac4328b1e15b8a0b3fbb0fd668": "0x48794d1f246192a0000",
    "0xa8455b411765d6901e311e726403091e42c56683": "0xb73aec3bfe14500000",
    "0xa86613e6c4a4c9c55f5c10bcda32175dcbb4af60": "0x243d6c2e36be6ae0000",
    "0xa86db07d9f812f4796622d40e03d135874a88a74": "0x1158e460913d00000",
    "0xa87f7abd6fa31194289678efb63cf584ee5e2a61": "0xd8d726b7177a800000",
    "0xa880e2a8bf88a1a82648b4013c49c4594c433cc8": "0x1004e2e45fb7ee00000",
    "0xa88577a073fbaf33c4cd202e00ea70ef711b4006": "0x6c6b935b8bbd400000",
    "0xa8914c95b560ec13f140577338c32bcbb77d3a7a": "0x9c2007651b2500000",
    "0xa89ac93b23370472daac337e9afdf642543f3e57": "0x21e19e0c9bab2400000",
    "0xa89df34859edd7c820db887740d8ff9e15157c7b": "0x6c6b935b8bbd400000",
    "0xa8a43c009100616cb4ae4e033f1fc5d7e0b6f152": "0xd588d078b43f4d8000",
    "0xa8a708e84f82db86a35502193b4c6ee9a76ebe8f": "0x3708baed3d68900000",
    "0xa8a7b68adab4e3eadff19ffa58e34a3fcec0d96a": "0x14542ba12a337c00000",
    "0xa8a8dbdd1a85d1beee2569e91ccc4d09ae7f6ea1": "0x13a6b2b564871a00000",
    "0xa8aca748f9d312ec747f8b6578142694c7e9f399": "0x6c6b935b8bbd400000",
    "0xa8b65ba3171a3f77a6350b9daf1f8d55b4d201eb": "0x2862f3b0d222040000",
    "0xa8beb91c2b99c8964aa95b6b4a184b1269fc3483": "0x15af1d78b58c400000",
    "0xa8c0b02faf02cb5519dda884de7bbc8c88a2da81": "0xe7c2518505060000",
    "0xa8c1d6aa41fe3d65f67bd01de2a866ed1ed9ae52": "0x1a055690d9db80000",
    "0xa8cafac32280d021020bf6f2a9782883d7aabe12": "0x56bc75e2d63100000",
    "0xa8db0b9b201453333c757f6ad9bcb555c02da93b": "0x7742b7830f341d0000",
    "0xa8e42a4e33d7526cca19d9a36dcd6e8040d0ea73": "0x3a8c02c5ea2de00000",
    "0xa8e7201ff619faffc332e6ad37ed41e301bf014a": "0x2086ac351052600000",
    "0xa8ee1df5d44b128469e913569ef6ac81eeda4fc8": "0x1b1ae4d6e2ef500000",
    "0xa8ef9ad274436042903e413c3b0c62f5f52ed584": "0x21e19e0c9bab2400000",
    "0xa8f37f0ab3a1d448a9e3ce40965f97a646083a34": "0x11e0e4f8a50bd40000",
    "0xa8f89dd5cc6e64d7b1eeace00702022cd7d2f03d": "0x25f273933db5700000",
    "0xa90476e2efdfee4f387b0f32a50678b0efb573b5": "0x21e19e0c9bab2400000",
    "0xa9145046fa3628cf5fd4c613927be531e6db1fdd": "0x6124fee993bc00000",
    "0xa914cdb571bfd93d64da66a4e108ea134e50d000": "0x4d8738994713798000",
    "0xa91a5a7b341f99c535144e20be9c6b3bb4c28e4d": "0x126753aa224a70b0000",
    "0xa9252551a624ae513719dabe5207fbefb2fd7749": "0x22b1c8c1227a00000",
    "0xa927d48bb6cb814bc609cbcaa9151f5d459a27e1": "0xeb935090064180000",
    "0xa929c8bd71db0c308dac06080a1747f21b1465aa": "0x1b1ae4d6e2ef500000",
    "0xa94bbb8214cf8da0c2f668a2ac73e86248528d4b": "0x340aad21b3b7000000",
    "0xa951b244ff50cfae591d5e1a148df6a938ef2a1a": "0x5e001584dfcf580000",
    "0xa960b1cadd3b5c1a8e6cb3abcaf52ee7c3d9fa88": "0x528bc3545e52680000",
    "0xa961171f5342b173dd70e7bfe5b5ca238b13bcdd": "0xb82794a9244f0c8000",
    "0xa975b077fcb4cc8efcbf838459b6fa243a4159d6": "0x22b1c8c1227a00000",
    "0xa97beb3a48c45f1528284cb6a95f7de453358ec6": "0x690836c0af5f5600000",
    "0xa97e072144499fe5ebbd354acc7e7efb58985d08": "0x90f534608a72880000",
    "0xa986762f7a4f294f2e0b173279ad2c81a2223458": "0x1158e460913d00000",
    "0xa98f109835f5eacd0543647c34a6b269e3802fac": "0x15af1d78b58c400000",
    "0xa997dfc7986a27050848fa1c64d7a7d6e07acca2": "0x7c0860e5a80dc0000",
    "0xa99991cebd98d9c838c25f7a7416d9e244ca250d": "0x3635c9adc5dea00000",
    "0xa9a1cdc33bfd376f1c0d76fb6c84b6b4ac274d68": "0x10f0cf064dd59200000",
    "0xa9a8eca11a23d64689a2aa3e417dbb3d336bb59a": "0xe3453cd3b67ba8000",
    "0xa9acf600081bb55bb6bfbab1815ffc4e17e85a95": "0xad78ebc5ac6200000",
    "0xa9ad1926bc66bdb331588ea8193788534d982c98": "0x65a4da25d3016c00000",
    "0xa9af21acbe482f8131896a228036ba51b19453c3": "0x2b5e021980cc18000",
    "0xa9b2d2e0494eab18e07d37bbb856d80e80f84cd3": "0x21e19e0c9bab2400000",
    "0xa9ba6f413b82fcddf3affbbdd09287dcf50415ca": "0xd8d726b7177a800000",
    "0xa9be88ad1e518b0bbb024ab1d8f0e73f790e0c76": "0x97c9ce4cf6d5c00000",
    "0xa9bfc410dddb20711e45c07387eab30a054e19ac": "0x3e99601edf4e530000",
    "0xa9d4a2bcbe5b9e0869d70f0fe2e1d6aacd45edc5": "0xac6e77ab663a80000",
    "0xa9d64b4f3bb7850722b58b478ba691375e224e42": "0x14542ba12a337c00000",
    "0xa9d6f871ca781a759a20ac3adb972cf12829a208": "0x3224f42723d4540000",
    "0xa9dc0424c6969d798358b393b1933a1f51bee00a": "0x43c33c1937564800000",
    "0xa9e194661aac704ee9dea043974e9692ded84a5d": "0x1a26a51422a0700000",
    "0xa9e28337e6357193d9e2cb236b01be44b81427df": "0x77432217e683600000",
    "0xa9e6e25e656b762558619f147a21985b8874edfe": "0x6c6b935b8bbd400000",
    "0xa9e9dbce7a2cb03694799897bed7c54d155fdaa8": "0xab5ae8fc99d658000",
    "0xa9ed377b7d6ec25971c1a597a3b0f3bead57c98f": "0x15af1d78b58c400000",
    "0xaa0200f1d17e9c54da0647bb96395d57a78538d8": "0x393ef1a5127c800000",
    "0xaa0ca3737337178a0caac3099c584b056c56301c": "0x2fb474098f67c00000",
    "0xaa136b47962bb8b4fb540db4ccf5fdd042ffb8cf": "0x1b1b6bd7af64c70000",
    "0xaa14422d6f0ae5a758194ed15780c838d67f1ee1": "0x60932056c449de80000",
    "0xaa16269aac9c0d803068d82fc79151dadd334b66": "0xd8d726b7177a800000",
    "0xaa167026d39ab7a85635944ed9edb2bfeba11850": "0x1c1d5e21b4fcf680000",
    "0xaa1b3768c16d821f580e76c8e4c8e86d7dc78853": "0x15af1d78b58c400000",
    "0xaa1df92e51dff70b1973e0e924c66287b494a178": "0x1cf84a30a0a0c00000",
    "0xaa2c670096d3f939305325427eb955a8a60db3c5": "0x6c95590699232d0000",
    "0xaa3135cb54f102cbefe09e96103a1a796718ff54": "0x32222d9c331940000",
    "0xaa321fdbd449180db8ddd34f0fe906ec18ee0914": "0x252248deb6e6940000",
    "0xaa3925dc220bb4ae2177b2883078b6dc346ca1b2": "0x1b1ae4d6e2ef5000000",
    "0xaa3f29601a1331745e05c42830a15e71938a6237": "0x5c283d410394100000",
    "0xaa47a4ffc979363232c99b99fada0f2734b0aeee": "0x1b8489df4dbff940000",
    "0xaa493d3f4fb866491cf8f800efb7e2324ed7cfe5": "0x5c283d410394100000",
    "0xaa56a65dc4abb72f11bae32b6fbb07444791d5c9": "0x2894e975bf496c0000",
    "0xaa5afcfd8309c2df9d15be5e6a504e7d706624c5": "0x13cf422e305a1378000",
    "0xaa8eb0823b07b0e6d20aadda0e95cf3835be192e": "0x1bc16d674ec800000",
    "0xaa91237e740d25a92f7fa146faa18ce56dc6e1f3": "0x3224f42723d4540000",
    "0xaa960e10c52391c54e15387cc67af827b5316dcc": "0x6c6b935b8bbd400000",
    "0xaa9bd4589535db27fa2bc903ca17d679dd654806": "0x6c6b935b8bbd400000",
    "0xaaa8defe11e3613f11067fb983625a08995a8dfc": "0xad78ebc5ac6200000",
    "0xaaaae68b321402c8ebc13468f341c63c0cf03fce": "0x52663ccab1e1c00000",
    "0xaaad1baade5af04e2b17439e935987bf8c2bb4b9": "0x6c6b935b8bbd400000",
    "0xaab00abf5828d7ebf26b47ceaccdb8ba03325166": "0x21e19e0c9bab2400000",
    "0xaabdb35c1514984a039213793f3345a168e81ff1": "0x10cac896d239000000",
    "0xaaca60d9d700e78596bbbbb1f1e2f70f4627f9d8": "0x3635bb77cb4b860000",
    "0xaaced8a9563b1bc311dbdffc1ae7f57519c4440c": "0x6c6b935b8bbd400000",
    "0xaad2b7f8106695078e6c138ec81a7486aaca1eb2": "0xad78ebc5ac6200000",
    "0xaae61e43cb0d0c96b30699f77e00d711d0a3979b": "0x3635c9adc5dea00000",
    "0xaae732eda65988c3a00c7f472f351c463b1c968e": "0x6c6b935b8bbd400000",
    "0xaaf023fef290a49bb78bb7abc95d669c50d528b0": "0xad78ebc5ac6200000",
    "0xaaf5b207b88b0de4ac40d747cee06e172df6e745": "0x6a7b71d7f51d0900000",
    "0xaaf9ee4b886c6d1e95496fd274235bf4ecfcb07d": "0x4be4e7267b6ae00000",
    "0xaafb7b013aa1f8541c7e327bf650adbd194c208f": "0x499e092d01f4780000",
    "0xab098633eeee0ccefdf632f9575456f6dd80fc86": "0x2a5a058fc295ed000000",
    "0xab0ced762e1661fae1a92afb1408889413794825": "0x678a932062e4180000",
    "0xab14d221e33d544629198cd096ed63dfa28d9f47": "0x14542ba12a337c00000",
    "0xab209fdca979d0a647010af9a8b52fc7d20d8cd1": "0x1eee2532c7c2d040000",
    "0xab27ba78c8e5e3daef31ad05aef0ff0325721e08": "0x195ece006e02d00000",
    "0xab2871e507c7be3965498e8fb462025a1a1c4264": "0x2a034919dfbfbc0000",
    "0xab3861226ffec1289187fb84a08ec3ed043264e8": "0x3635c9adc5dea00000",
    "0xab3d86bc82927e0cd421d146e07f919327cdf6f9": "0x678a932062e4180000",
    "0xab3e62e77a8b225e411592b1af300752fe412463": "0x215f835bc769da80000",
    "0xab3e78294ba886a0cfd5d3487fb3a3078d338d6e": "0x6acb3df27e1f880000",
    "0xab4004c0403f7eabb0ea586f212156c4203d67f1": "0x6c6acc67d7b1d40000",
    "0xab416fe30d58afe5d9454c7fce7f830bcc750356": "0x6353701c605db8000",
    "0xab4572fbb1d72b575d69ec6ad17333873e8552fc": "0x6c6ac54cda68470000",
    "0xab5a79016176320973e8cd38f6375530022531c0": "0x3635c9adc5dea00000",
    "0xab5dfc1ea21adc42cf8c3f6e361e243fd0da61e5": "0x1043561a8829300000",
    "0xab6b65eab8dfc917ec0251b9db0ecfa0fa032849": "0x1b1ae4d6e2ef500000",
    "0xab7091932e4bc39dbb552380ca934fd7166d1e6e": "0xb50fcfafebecb00000",
    "0xab7416ff32254951cbbc624ec7fb45fc7ecaa872": "0x126e72a69a50d00000",
    "0xab7c42c5e52d641a07ad75099c62928b7f86622f": "0x12361aa21d14ba0000",
    "0xab7d54c7c6570efca5b4b8ce70f52a5773e5d53b": "0xf283abe9d9f380000",
    "0xab7e0b83ed9a424c6d1e6a6f87a4dbf06409c7d6": "0x821ab0d44149800000",
    "0xab84a0f147ad265400002b85029a41fc9ce57f85": "0x3635c9adc5dea00000",
    "0xab93b26ece0a0aa21365afed1fa9aea31cd54468": "0x572b7b98736c200000",
    "0xab948a4ae3795cbca13126e19253bdc21d3a8514": "0xad78ebc5ac6200000",
    "0xab9ad36e5c74ce2e96399f57839431d0e79f96ab": "0x8e3f50b173c100000",
    "0xabb2e6a72a40ba6ed908cdbcec3c5612583132fe": "0x4f2591f896a6500000",
    "0xabc068b4979b0ea64a62d3b7aa897d73810dc533": "0x6acb3df27e1f880000",
    "0xabc45f84db7382dde54c5f7d8938c42f4f3a3bc4": "0xad78ebc5ac6200000",
    "0xabc4caeb474d4627cb6eb456ecba0ecd08ed8ae1": "0xd5967be4fc3f100000",
    "0xabc74706964960dfe0dca3dca79e9216056f1cf4": "0x878678326eac9000000",
    "0xabc9a99e8a2148a55a6d82bd51b98eb5391fdbaf": "0x14542ba12a337c00000",
    "0xabcdbc8f1dd13af578d4a4774a62182bedf9f9be": "0x1fcc27bc459d20000",
    "0xabd154903513b8da4f019f68284b0656a1d0169b": "0x3635c9adc5dea00000",
    "0xabd21eff954fc6a7de26912a7cbb303a6607804e": "0x523c9aa696eb940000",
    "0xabd4d6c1666358c0406fdf3af248f78ece830104": "0x727de34a24f9000000",
    "0xabd9605b3e91acfd777830d16463478ae0fc7720": "0x73f75d1a085ba0000",
    "0xabdc9f1bcf4d19ee96591030e772c334302f7d83": "0x87e5e11a81cb5f80000",
    "0xabde147b2af789eaa586547e66c4fa2664d328a4": "0xd6b6081f34c128000",
    "0xabe07ced6ac5ddf991eff6c3da226a741bd243fe": "0x21e19e0c9bab2400000",
    "0xabf12fa19e82f76c718f01bdca0003674523ef30": "0x6c6b935b8bbd400000",
    "0xabf728cf9312f22128024e7046c251f5dc5901ed": "0x641e8a13563d8f80000",
    "0xabf8ffe0708a99b528cc1ed4e9ce4b0d0630be8c": "0x7ab5c2aeeee6380000",
    "0xabfcf5f25091ce57875fc674dcf104e2a73dd2f2": "0x11164759ffb320000",
    "0xabfe936425dcc7b74b955082bbaaf2a11d78bc05": "0x4be4e7267b6ae00000",
    "0xac024f594f9558f04943618eb0e6b2ee501dc272": "0x6c6b935b8bbd400000",
    "0xac122a03cd058c122e5fe17b872f4877f9df9572": "0x6ac5c62d9486070000",
    "0xac142eda1157b9a9a64390df7e6ae694fac98905": "0xad78ebc5ac6200000",
    "0xac1dfc984b71a19929a81d81f04a7cbb14073703": "0x2086ac351052600000",
    "0xac21c1e5a3d7e0b50681679dd6c792dbca87decb": "0x152d02c7e14af6800000",
    "0xac2889b5966f0c7f9edb42895cb69d1c04f923a2": "0x10f0cf064dd59200000",
    "0xac28b5edea05b76f8c5f97084541277c96696a4c": "0x3635c9adc5dea00000",
    "0xac2c8e09d06493a63858437bd20be01962450365": "0x678a932062e4180000",
    "0xac2e766dac3f648f637ac6713fddb068e4a4f04d": "0xaadec983fcff40000",
    "0xac3900298dd14d7cc96d4abb428da1bae213ffed": "0x53ca12974851c010000",
    "0xac3da526cfce88297302f34c49ca520dc271f9b2": "0x2b5e3af16b18800000",
    "0xac4460a76e6db2b9fcd152d9c7718d9ac6ed8c6f": "0xad78ebc5ac6200000",
    "0xac4acfc36ed6094a27e118ecc911cd473e8fb91f": "0x61913e14403c0c0000",
    "0xac4cc256ae74d624ace80db078b2207f57198f6b": "0x6c7974123f64a40000",
    "0xac4ee9d502e7d2d2e99e59d8ca7d5f00c94b4dd6": "0x3635c9adc5dea00000",
    "0xac52b77e15664814f39e4f271be641308d91d6cc": "0xbed1d0263d9f00000",
    "0xac5999a89d2dd286d5a80c6dee7e86aad40f9e12": "0xd255d112e103a00000",
    "0xac5f627231480d0d95302e6d89fc32cb1d4fe7e3": "0xad78ebc5ac6200000",
    "0xac608e2bac9dd20728d2947effbbbf900a9ce94b": "0x1454b0db37568fc0000",
    "0xac6d02e9a46b379fac4ac9b1d7b5d47bc850ce16": "0x5f68e8131ecf800000",
    "0xac6f68e837cf1961cb14ab47446da168a16dde89": "0x487a9a304539440000",
    "0xac77bdf00fd5985b5db12bbef800380abc2a0677": "0x3635c9adc5dea00000",
    "0xac7e03702723cb16ee27e22dd0b815dc2d5cae9f": "0x3635c9adc5dea000000",
    "0xac8b509aefea1dbfaf2bb33500d6570b6fd96d51": "0x62a992e53a0af00000",
    "0xac8e87ddda5e78fcbcb9fa7fc3ce038f9f7d2e34": "0x6c6b935b8bbd400000",
    "0xac9fff68c61b011efbecf038ed72db97bb9e7281": "0x205b4dfa1ee74780000",
    "0xaca1e6bc64cc3180f620e94dc5b1bcfd8158e45d": "0x6c6b935b8bbd400000",
    "0xaca2a838330b17302da731d30db48a04f0f207c1": "0x487a9a304539440000",
    "0xacaaddcbf286cb0e215dda55598f7ff0f4ada5c6": "0x3635c9adc5dea00000",
    "0xacb94338554bc488cc88ae2d9d94080d6bdf8410": "0x3635c9adc5dea00000",
    "0xacbc2d19e06c3babbb5b6f052b6bf7fc37e07229": "0xad78ebc5ac6200000",
    "0xacbd185589f7a68a67aa4b1bd65077f8c64e4e21": "0xad78ebc5ac6200000",
    "0xacc062702c59615d3444ef6214b8862b009a02ed": "0x514fcb24ff9c500000",
    "0xacc0909fda2ea6b7b7a88db7a0aac868091ddbf6": "0x133765f1e26c78000",
    "0xacc1c78786ab4d2b3b277135b5ba123e0400486b": "0x44591d67fecc80000",
    "0xacc46a2a555c74ded4a2bd094e821b97843b40c0": "0x692ae8897081d00000",
    "0xacc59f3b30ceffc56461cc5b8df48902240e0e7b": "0x6c6b935b8bbd400000",
    "0xacce01e0a70610dc70bb91e9926fa9957f372fba": "0x1d1c5f3eda20c40000",
    "0xacd8dd91f714764c45677c63d852e56eb9eece2e": "0x6c6b935b8bbd400000",
    "0xace2abb63b0604409fbde3e716d2876d44e8e5dd": "0x83d6c7aab63600000",
    "0xacec91ef6941cf630ba9a3e787a012f4a2d91dd4": "0x10f0cf064dd592000000",
    "0xad0a4ae478e9636e88c604f242cf5439c6d45639": "0xbed1d0263d9f000000",
    "0xad1799aad7602b4540cd832f9db5f11150f1687a": "0x6c6b935b8bbd400000",
    "0xad1d68a038fd2586067ef6d135d9628e79c2c924": "0xfe09a5279e2abc0000",
    "0xad2a5c00f923aaf21ab9f3fb066efa0a03de2fb2": "0x3635bb77cb4b860000",
    "0xad3565d52b688added08168b2d3872d17d0a26ae": "0x56bc75e2d63100000",
    "0xad377cd25eb53e83ae091a0a1d2b4516f484afde": "0x692ae8897081d00000",
    "0xad414d29cb7ee973fec54e22a388491786cf5402": "0x2f6f10780d22cc00000",
    "0xad44357e017e244f476931c7b8189efee80a5d0a": "0x1043561a8829300000",
    "0xad57aa9d00d10c439b35efcc0becac2e3955c313": "0xad78ebc5ac6200000",
    "0xad59a78eb9a74a7fbdaefafa82eada8475f07f95": "0x1b1ae4d6e2ef500000",
    "0xad5a8d3c6478b69f657db3837a2575ef8e1df931": "0x20156e104c1b30000",
    "0xad660dec825522a9f62fcec3c5b731980dc286ea": "0xa2a15d09519be00000",
    "0xad6628352ed3390bafa86d923e56014cfcb360f4": "0x6c6b935b8bbd400000",
    "0xad728121873f0456d0518b80ab6580a203706595": "0x1b1ae4d6e2ef500000",
    "0xad732c976593eec4783b4e2ecd793979780bfedb": "0x6c6b935b8bbd400000",
    "0xad7dd053859edff1cb6f9d2acbed6dd5e332426f": "0x6acb3df27e1f880000",
    "0xad80d865b85c34d2e6494b2e7aefea6b9af184db": "0xd8d726b7177a800000",
    "0xad8bfef8c68a4816b3916f35cb7bfcd7d3040976": "0x878678326eac9000000",
    "0xad8e48a377695de014363a523a28b1a40c78f208": "0x3635c9adc5dea00000",
    "0xad910a23d6850613654af786337ad2a70868ac6d": "0x6c68ccd09b022c0000",
    "0xad927e03d1599a78ca2bf0cad2a183dceb71eac0": "0x6acb3df27e1f880000",
    "0xad92ca066edb7c711dfc5b166192d1edf8e77185": "0x79f905c6fd34e800000",
    "0xad94235fc3b3f47a2413af31e884914908ef0c45": "0x1b1b0142d815840000",
    "0xad9e97a0482f353a05c0f792b977b6c7e811fa5f": "0xad78ebc5ac6200000",
    "0xad9f4c890a3b511cee51dfe6cfd7f1093b76412c": "0x1b767cbfeb0ce40000",
    "0xadaa0e548c035affed64ca678a963fabe9a26bfd": "0x3cb71f51fc5580000",
    "0xadb948b1b6fefe207de65e9bbc2de98e605d0b57": "0x6c6b935b8bbd400000",
    "0xadc19ec835afe3e58d87dc93a8a9213c90451326": "0x6adbe5342282000000",
    "0xadc8228ef928e18b2a807d00fb3c6c79cd1d9e96": "0x13c69df334ee80000",
    "0xaddb26317227f45c87a2cb90dc4cfd02fb23caf8": "0x3635c9adc5dea00000",
    "0xade6f8163bf7c7bb4abe8e9893bd0cc112fe8872": "0x11c25d004d01f80000",
    "0xadeb204aa0c38e179e81a94ed8b3e7d53047c26b": "0x20f5b1eaad8d800000",
    "0xadeb52b604e5f77faaac88275b8d6b49e9f9f97f": "0x71426b00956ed20000",
    "0xadf1acfe99bc8c14b304c8d905ba27657b8a7bc4": "0x43c33c1937564800000",
    "0xadf85203c8376a5fde9815384a350c3879c4cb93": "0x3e31fc675815aa0000",
    "0xadff0d1d0b97471e76d789d2e49c8a74f9bd54ff": "0x65ea3db75546600000",
    "0xae062c448618643075de7a0030342dced63dbad7": "0x2cc6cd8cc282b30000",
    "0xae10e27a014f0d306baf266d4897c89aeee2e974": "0x43c33c1937564800000",
    "0xae126b382cf257fad7f0bc7d16297e54cc7267da": "0x1043561a8829300000",
    "0xae13a08511110f32e53be4127845c843a1a57c7b": "0x1b1ae4d6e2ef500000",
    "0xae179a460db66326743d24e67523a57b246daf7f": "0x10007ae7ce5bbe40000",
    "0xae222865799079aaf4f0674a0cdaab02a6d570ff": "0x6c6b935b8bbd400000",
    "0xae239acffd4ebe2e1ba5b4170572dc79cc6533ec": "0x28a857425466f800000",
    "0xae2f9c19ac76136594432393b0471d08902164d3": "0x25df05c6a897e40000",
    "0xae34861d342253194ffc6652dfde51ab44cad3fe": "0x194608686316bd8000",
    "0xae36f7452121913e800e0fcd1a65a5471c23846f": "0x8e3f50b173c100000",
    "0xae3f98a443efe00f3e711d525d9894dc9a61157b": "0x1004e2e45fb7ee0000",
    "0xae47e2609cfafe369d66d415d939de05081a9872": "0x5baecf025f9b6500000",
    "0xae4f122e35c0b1d1e4069291457c83c07f965fa3": "0x3635c9adc5dea00000",
    "0xae5055814cb8be0c117bb8b1c8d2b63b4698b728": "0x1bc932ec573a38000",
    "0xae538c73c5b38d8d584d7ebdadefb15cabe48357": "0x3627e8f712373c0000",
    "0xae57cc129a96a89981dac60d2ffb877d5dc5e432": "0x3c3a2394b396550000",
    "0xae5aa1e6c2b60f6fd3efe721bb4a719cbe3d6f5d": "0x2b24c6b55a5e620000",
    "0xae5c9bdad3c5c8a1220444aea5c229c1839f1d64": "0x19e2a4c818b9060000",
    "0xae5ce3355a7ba9b332760c0950c2bc45a85fa9a0": "0x15af1d78b58c400000",
    "0xae5d221afcd3d29355f508eadfca408ce33ca903": "0x152d02c7e14af6800000",
    "0xae635bf73831119d2d29c0d04ff8f8d8d0a57a46": "0x487a9a304539440000",
    "0xae648155a658370f929be384f7e001047e49dd46": "0x2df24ae32be20440000",
    "0xae6f0c73fdd77c489727512174d9b50296611c4c": "0x14542ba12a337c00000",
    "0xae70e69d2c4a0af818807b1a2705f79fd0b5dbc4": "0x35659ef93f0fc40000",
    "0xae7739124ed153052503fc101410d1ffd8cd13b7": "0x3634fb9f1489a70000",
    "0xae78bb849139a6ba38ae92a09a69601cc4cb62d1": "0x1b1ae4d6e2ef500000",
    "0xae842210f44d14c4a4db91fc9d3b3b50014f7bf7": "0xd8d726b7177a800000",
    "0xae842e81858ecfedf6506c686dc204ac15bf8b24": "0x22b1c8c1227a00000",
    "0xae8954f8d6166de507cf61297d0fc7ca6b9e7128": "0x1043561a8829300000",
    "0xae9ecd6bdd952ef497c0050ae0ab8a82a91898ce": "0x1a055690d9db80000",
    "0xae9f5c3fbbe0c9bcbf1af8ff74ea280b3a5d8b08": "0x5dc892aa1131c80000",
    "0xaead88d689416b1c91f2364421375b7d3c70fb2e": "0x6c6b935b8bbd400000",
    "0xaeadfcd0978edad74a32bd01a0a51d37f246e661": "0xe18398e7601900000",
    "0xaeb916ebf49d0f86c13f7331cef19e129937512d": "0x2085655b8d1b0a0000",
    "0xaebd4f205de799b64b3564b256d42a711d37ef99": "0x3fcf8b4574f84e0000",
    "0xaec27ce2133e82d052520afb5c576d9f7eb93ed2": "0xdd04120ba09cfe60000",
    "0xaec27ff5d7f9ddda91183f46f9d52543b6cd2b2f": "0x18650127cc3dc80000",
    "0xaee49d68adedb081fd43705a5f78c778fb90de48": "0x1158e460913d00000",
    "0xaef5b12258a18dec07d5ec2e316574919d79d6d6": "0x6c6b935b8bbd400000",
    "0xaefcfe88c826ccf131d54eb4ea9eb80e61e1ee25": "0x126e72a69a50d00000",
    "0xaf06f5fa6d1214ec43967d1bd4dde74ab814a938": "0x4c53ecdc18a600000",
    "0xaf1148ef6c8e103d7530efc91679c9ac27000993": "0xad78ebc5ac6200000",
    "0xaf203e229d7e6d419df4378ea98715515f631485": "0x6acb3df27e1f880000",
    "0xaf2058c7282cf67c8c3cf930133c89617ce75d29": "0x177224aa844c7200000",
    "0xaf26f7c6bf453e2078f08953e4b28004a2c1e209": "0x56bc75e2d63100000",
    "0xaf3087e62e04bf900d5a54dc3e946274da92423b": "0x1158e460913d00000",
    "0xaf3614dcb68a36e45a4e911e62796247222d595b": "0x7a81065f1103bc0000",
    "0xaf3615c789d0b1152ad4db25fe5dcf222804cf62": "0x3635c9adc5dea00000",
    "0xaf3cb5965933e7dad883693b9c3e15beb68a4873": "0x6c6b935b8bbd400000",
    "0xaf4493e8521ca89d95f5267c1ab63f9f45411e1b": "0xad78ebc5ac6200000",
    "0xaf4cf41785161f571d0ca69c94f8021f41294eca": "0x215f835bc769da80000",
    "0xaf529bdb459cc185bee5a1c58bf7e8cce25c150d": "0xaadec983fcff40000",
    "0xaf67fd3e127fd9dc36eb3fcd6a80c7be4f7532b2": "0x5a87e7d7f5f6580000",
    "0xaf771039345a343001bc0f8a5923b126b60d509c": "0x35659ef93f0fc40000",
    "0xaf7f79cb415a1fb8dbbd094607ee8d41fb7c5a3b": "0x21e19e0c9bab2400000",
    "0xaf87d2371ef378957fbd05ba2f1d66931b01e2b8": "0x25f273933db5700000",
    "0xaf880fc7567d5595cacce15c3fc14c8742c26c9e": "0x73f75d1a085ba0000",
    "0xaf8e1dcb314c950d3687434d309858e1a8739cd4": "0xe7eeba3410b740000",
    "0xaf992dd669c0883e5515d3f3112a13f617a4c367": "0x6c6b935b8bbd400000",
    "0xafa1d5ad38fed44759c05b8993c1aa0dace19f40": "0x4563918244f400000",
    "0xafa539586e4719174a3b46b9b3e663a7d1b5b987": "0x10f0cf064dd59200000",
    "0xafa6946effd5ff53154f82010253df47ae280ccc": "0x6acb3df27e1f880000",
    "0xafc8ebe8988bd4105acc4c018e546a1e8f9c7888": "0x1b1ae4d6e2ef500000",
    "0xafcc7dbb8356d842d43ae7e23c8422b022a30803": "0x66ffcbfd5e5a3000000",
    "0xafd019ff36a09155346b69974815a1c912c90aa4": "0x6c6b935b8bbd400000",
    "0xafdac5c1cb56e245bf70330066a817eaafac4cd1": "0x1158e460913d00000",
    "0xafdd1b786162b8317e20f0e979f4b2ce486d765d": "0x1158e460913d00000",
    "0xaff1045adf27a1aa329461b24de1bae9948a698b": "0x1cf84a30a0a0c0000",
    "0xaff107960b7ec34ed690b665024d60838c190f70": "0x1b1ae4d6e2ef500000",
    "0xaff11ccf699304d5f5862af86083451c26e79ae5": "0x6c5db2a4d815dc0000",
    "0xaff161740a6d909fe99c59a9b77945c91cc91448": "0x340aad21b3b700000",
    "0xaffc99d5ebb4a84fe7788d97dce274b038240438": "0x10f0cf064dd59200000",
    "0xaffea0473722cb7f0e0e86b9e11883bf428d8d54": "0x692ae8897081d00000",
    "0xb00996b0566ecb3e7243b8227988dcb352c21899": "0x28a857425466f800000",
    "0xb01e389b28a31d8e4995bdd7d7c81beeab1e4119": "0x3635c9adc5dea00000",
    "0xb02d062873334545cea29218e4057760590f7423": "0xacb6a1c7d93a880000",
    "0xb02fa29387ec12e37f6922ac4ce98c5b09e0b00f": "0x6c6b935b8bbd400000",
    "0xb036916bdacf94b69e5a8a65602975eb026104dd": "0x1158e460913d00000",
    "0xb041310fe9eed6864cedd4bee58df88eb4ed3cac": "0x21e19e0c9bab2400000",
    "0xb055af4cadfcfdb425cf65ba6431078f07ecd5ab": "0x56bc75e2d63100000",
    "0xb0571153db1c4ed7acaefe13ecdfdb72e7e4f06a": "0x110cff796ac195200000",
    "0xb06eab09a610c6a53d56a946b2c43487ac1d5b2d": "0x3635c9adc5dea00000",
    "0xb07249e055044a9155359a402937bbd954fe48b6": "0x56bc75e2d63100000",
    "0xb07618328a901307a1b7a0d058fcd5786e9e72fe": "0x667495d4a4330ce0000",
    "0xb079bb4d9866143a6da72ae7ac0022062981315c": "0x29331e6558f0e00000",
    "0xb07bcc085ab3f729f24400416837b69936ba8873": "0x6c6d84bccdd9ce0000",
    "0xb07bcf1cc5d4462e5124c965ecf0d70dc27aca75": "0x56bc75e2d631000000",
    "0xb07cb9c12405b711807543c4934465f87f98bd2d": "0x6c6b935b8bbd400000",
    "0xb07fdeaff91d4460fe6cd0e8a1b0bd8d22a62e87": "0x11d2529f3535ab00000",
    "0xb09fe6d4349b99bc37938054022d54fca366f7af": "0x2a5a058fc295ed000000",
    "0xb0aa00950c0e81fa3210173e729aaf163a27cd71": "0x878678326eac9000000",
    "0xb0ac4eff6680ee14169cdadbffdb30804f6d25f5": "0x6c6b935b8bbd400000",
    "0xb0b36af9aeeedf97b6b02280f114f13984ea3260": "0x35659ef93f0fc40000",
    "0xb0b779b94bfa3c2e1f587bcc9c7e21789222378f": "0x54069233bf7f780000",
    "0xb0baeb30e313776c4c6d247402ba4167afcda1cc": "0x6acb3df27e1f880000",
    "0xb0bb29a861ea1d424d45acd4bfc492fb8ed809b7": "0x4563918244f400000",
    "0xb0c1b177a220e41f7c74d07cde8569c21c75c2f9": "0x12f939c99edab800000",
    "0xb0c7ce4c0dc3c2bbb99cc1857b8a455f611711ce": "0xd8d726b7177a800000",
    "0xb0cef8e8fb8984a6019f01c679f272bbe68f5c77": "0x83d6c7aab63600000",
    "0xb0d32bd7e4e695b7b01aa3d0416f80557dba9903": "0x3739ff0f6e613300000",
    "0xb0d3c9872b85056ea0c0e6d1ecf7a77e3ce6ab85": "0x10f08eda8e555098000",
    "0xb0e469c886593815b3495638595daef0665fae62": "0x692ae8897081d00000",
    "0xb0e760bb07c081777345e0578e8bc898226d4e3b": "0x6c6b935b8bbd400000",
    "0xb1043004ec1941a8cf4f2b00b15700ddac6ff17e": "0x3635c9adc5dea00000",
    "0xb105dd3d987cffd813e9c8500a80a1ad257d56c6": "0x6c6acc67d7b1d40000",
    "0xb10fd2a647102f881f74c9fbc37da632949f2375": "0x22b1c8c1227a00000",
    "0xb115ee3ab7641e1aa6d000e41bfc1ec7210c2f32": "0x2c0bb3dd30c4e200000",
    "0xb1178ad47383c31c8134a1941cbcd474d06244e2": "0x3635c9adc5dea00000",
    "0xb1179589e19db9d41557bbec1cb24ccc2dec1c7f": "0x152d02c7e14af6800000",
    "0xb119e79aa9b916526581cbf521ef474ae84dcff4": "0x4fba1001e5befe0000",
    "0xb11fa7fb270abcdf5a2eab95aa30c4b53636efbf": "0x2b5e3af16b18800000",
    "0xb124bcb6ffa430fcae2e86b45f27e3f21e81ee08": "0x6c6b935b8bbd400000",
    "0xb129a5cb7105fe810bd895dc7206a991a4545488": "0x1a055690d9db80000",
    "0xb12ed07b8a38ad5506363fc07a0b6d799936bdaf": "0x21e19e0c9bab2400000",
    "0xb134c004391ab4992878337a51ec242f42285742": "0x6c6b935b8bbd400000",
    "0xb13f93af30e8d7667381b2b95bc1a699d5e3e129": "0x16c4abbebea0100000",
    "0xb1459285863ea2db3759e546ceb3fb3761f5909c": "0x3cd72a894087e08000",
    "0xb146a0b925553cf06fcaf54a1b4dfea621290757": "0x6c6e59e67c78540000",
    "0xb14a7aaa8f49f2fb9a8102d6bbe4c48ae7c06fb2": "0x1b1ae4d6e2ef5000000",
    "0xb14bbeff70720975dc6191b2a44ff49f2672873c": "0x7c0860e5a80dc0000",
    "0xb14cc8de33d6338236539a489020ce4655a32bc6": "0x1b1ae4d6e2ef5000000",
    "0xb14ddb0386fb606398b8cc47565afae00ff1d66a": "0xa12aff083e66f00000",
    "0xb153f828dd076d4a7c1c2574bb2dee1a44a318a8": "0x15af1d78b58c400000",
    "0xb1540e94cff3465cc3d187e7c8e3bdaf984659e2": "0xa215e44390e3330000",
    "0xb158db43fa62d30e65f3d09bf781c7b67372ebaa": "0x6c5db2a4d815dc0000",
    "0xb161725fdcedd17952d57b23ef285b7e4b1169e8": "0x2b6dfed3664958000",
    "0xb16479ba8e7df8f63e1b95d149cd8529d735c2da": "0x2de33a6aac32548000",
    "0xb166e37d2e501ae73c84142b5ffb5aa655dd5a99": "0x6c5db2a4d815dc0000",
    "0xb183ebee4fcb42c220e47774f59d6c54d5e32ab1": "0x56f7a9c33c04d10000",
    "0xb188078444027e386798a8ae68698919d5cc230d": "0xe7eeba3410b740000",
    "0xb1896a37e5d8825a2d01765ae5de629977de8352": "0xad78ebc5ac6200000",
    "0xb18e67a5050a1dc9fb190919a33da838ef445014": "0x1158e460913d00000",
    "0xb1a2b43a7433dd150bb82227ed519cd6b142d382": "0x946d620d744b880000",
    "0xb1c0d08b36e184f9952a4037e3e53a667d070a4e": "0x3635c9adc5dea00000",
    "0xb1c328fb98f2f19ab6646f0a7c8c566fda5a8540": "0x878678326eac900000",
    "0xb1c751786939bba0d671a677a158c6abe7265e46": "0x21e19e0c9bab2400000",
    "0xb1cd4bdfd104489a026ec99d597307a04279f173": "0x43c33c1937564800000",
    "0xb1cf94f8091505055f010ab4bac696e0ca0f67a1": "0x55a6e79ccd1d300000",
    "0xb1d6b01b94d854fe8b374aa65e895cf22aa2560e": "0x32f51edbaaa3300000",
    "0xb1dba5250ba9625755246e067967f2ad2f0791de": "0x10f0cf064dd592000000",
    "0xb1e2dd95e39ae9775c55aeb13f12c2fa233053ba": "0x6c6b935b8bbd400000",
    "0xb1e6e810c24ab0488de9e01e574837829f7c77d0": "0x15af1d78b58c400000",
    "0xb1e9c5f1d21e61757a6b2ee75913fc5a1a4101c3": "0x6c6b935b8bbd400000",
    "0xb203d29e6c56b92699c4b92d1f6f84648dc4cfbc": "0x15af1d78b58c400000",
    "0xb216dc59e27c3d7279f5cd5bb2becfb2606e14d9": "0x15af1d78b58c400000",
    "0xb21b7979bf7c5ca01fa82dd640b41c39e6c6bc75": "0x6c6acc67d7b1d40000",
    "0xb223bf1fbf80485ca2b5567d98db7bc3534dd669": "0xd8d726b7177a800000",
    "0xb22d5055d9623135961e6abd273c90deea16a3e7": "0x4be4e7267b6ae00000",
    "0xb22dadd7e1e05232a93237baed98e0df92b1869e": "0x6c6b935b8bbd400000",
    "0xb234035f7544463ce1e22bc553064684c513cd51": "0xd89fa3dc48dcf0000",
    "0xb247cf9c72ec482af3eaa759658f793d670a570c": "0x31708ae00454400000",
    "0xb2676841ee9f2d31c172e82303b0fe9bbf9f1e09": "0xad78ebc5ac6200000",
    "0xb279c7d355c2880392aad1aa21ee867c3b3507df": "0x445be3f2ef87940000",
    "0xb27c1a24204c1e118d75149dd109311e07c073ab": "0xa80d24677efef00000",
    "0xb28181a458a440f1c6bb1de8400281a3148f4c35": "0x14620c57dddae00000",
    "0xb28245037cb192f75785cb86cbfe7c930da258b0": "0x3635c9adc5dea000000",
    "0xb287f7f8d8c3872c1b586bcd7d0aedbf7e732732": "0x1158e460913d00000",
    "0xb28bb39f3466517cd46f979cf59653ee7d8f152e": "0x18650127cc3dc80000",
    "0xb28dbfc6499894f73a71faa00abe0f4bc9d19f2a": "0x56bc75e2d63100000",
    "0xb2968f7d35f208871631c6687b3f3daeabc6616c": "0x875c47f289f760000",
    "0xb29f5b7c1930d9f97a115e067066f0b54db44b3b": "0x3635c9adc5dea00000",
    "0xb2a144b1ea67b9510f2267f9da39d3f93de26642": "0x6c6b935b8bbd400000",
    "0xb2a2c2111612fb8bbb8e7dd9378d67f1a384f050": "0x1158e460913d00000",
    "0xb2a498f03bd7178bd8a789a00f5237af79a3e3f8": "0x41bad155e6512200000",
    "0xb2aa2f1f8e93e79713d92cea9ffce9a40af9c82d": "0x6c6b935b8bbd400000",
    "0xb2b516fdd19e7f3864b6d2cf1b252a4156f1b03b": "0x2e983c76115fc0000",
    "0xb2b7cdb4ff4b61d5b7ce0b2270bbb5269743ec04": "0x6c6b935b8bbd400000",
    "0xb2bdbedf95908476d7148a370cc693743628057f": "0xd8d726b7177a800000",
    "0xb2bfaa58b5196c5cb7f89de15f479d1838de713d": "0x1236efcbcbb340000",
    "0xb2c53efa33fe4a3a1a80205c73ec3b1dbcad0602": "0x6801dab35918938000",
    "0xb2d0360515f17daba90fcbac8205d569b915d6ac": "0x14542ba12a337c00000",
    "0xb2d1e99af91231858e7065dd1918330dc4c747d5": "0x3894f0e6f9b9f700000",
    "0xb2d9ab9664bcf6df203c346fc692fd9cbab9205e": "0x17be78976065180000",
    "0xb2ddb786d3794e270187d0451ad6c8b79e0e8745": "0x15af1d78b58c400000",
    "0xb2e085fddd1468ba07415b274e734e11237fb2a9": "0x56bc75e2d63100000",
    "0xb2e9d76bf50fc36bf7d3944b63e9ca889b699968": "0x9032ea62b74b100000",
    "0xb2f9c972c1e9737755b3ff1b3088738396395b26": "0x43c33c1937564800000",
    "0xb2fc84a3e50a50af02f94da0383ed59f71ff01d7": "0x65a4da25d3016c00000",
    "0xb3050beff9de33c80e1fa15225e28f2c413ae313": "0x25f273933db5700000",
    "0xb31196714a48dff726ea9433cd2912f1a414b3b3": "0x914878a8c05ee00000",
    "0xb3145b74506d1a8d047cdcdc55392a7b5350799a": "0x1b6229741c0d3d5d8000",
    "0xb320834836d1dbfda9e7a3184d1ad1fd4320ccc0": "0x3635c9adc5dea00000",
    "0xb323dcbf2eddc5382ee4bbbb201ca3931be8b438": "0x6c6b935b8bbd400000",
    "0xb32400fd13c5500917cb037b29fe22e7d5228f2d": "0x878678326eac9000000",
    "0xb325674c01e3f7290d5226339fbeac67d221279f": "0x97c9ce4cf6d5c00000",
    "0xb32825d5f3db249ef4e85cc4f33153958976e8bc": "0x1b2df9d219f5798000",
    "0xb32af3d3e8d075344926546f2e32887bf93b16bd": "0xad78ebc5ac6200000",
    "0xb32f1c2689a5ce79f1bc970b31584f1bcf2283e7": "0x1158e460913d00000",
    "0xb33c0323fbf9c26c1d8ac44ef74391d0804696da": "0x1158e460913d00000",
    "0xb34f04b8db65bba9c26efc4ce6efc50481f3d65d": "0x43c33c1937564800000",
    "0xb3557d39b5411b84445f5f54f38f62d2714d0087": "0x2086ac351052600000",
    "0xb358e97c70b605b1d7d729dfb640b43c5eafd1e7": "0x43c33c1937564800000",
    "0xb35e8a1c0dac7e0e66dbac736a592abd44012561": "0xcfce55aa12b30000",
    "0xb3667894b7863c068ad344873fcff4b5671e0689": "0x43c33c1937564800000",
    "0xb3717731dad65132da792d876030e46ac227bb8a": "0x3635c9adc5dea00000",
    "0xb3731b046c8ac695a127fd79d0a5d5fa6ae6d12e": "0x6c4fd1ee246e780000",
    "0xb37c2b9f50637bece0ca959208aefee6463ba720": "0x15af1d78b58c400000",
    "0xb388b5dfecd2c5e4b596577c642556dbfe277855": "0x1158e460913d00000",
    "0xb38c4e537b5df930d65a74d043831d6b485bbde4": "0x15af1d78b58c400000",
    "0xb39139576194a0866195151f33f2140ad1cc86cf": "0x152d02c7e14af6800000",
    "0xb39f4c00b2630cab7db7295ef43d47d501e17fd7": "0xd8d726b7177a800000",
    "0xb3a64b1176724f5409e1414a3523661baee74b4a": "0x16368ff4ff9c10000",
    "0xb3a6bd41f9d9c3201e050b87198fbda399342210": "0xc461e1dd1029b58000",
    "0xb3a8c2cb7d358e5739941d945ba9045a023a8bbb": "0x3635c9adc5dea00000",
    "0xb3ae54fba09d3ee1d6bdd1e957923919024c35fa": "0x38d2cee65b22a8000",
    "0xb3b7f493b44a2c8d80ec78b1cdc75a652b73b06c": "0x6c6b935b8bbd400000",
    "0xb3c228731d186d2ded5b5fbe004c666c8e469b86": "0x19274b259f6540000",
    "0xb3c260609b9df4095e6c5dff398eeb5e2df49985": "0xdc55fdb17647b0000",
    "0xb3c65b845aba6cd816fbaae983e0e46c82aa8622": "0x3635c9adc5dea00000",
    "0xb3c94811e7175b148b281c1a845bfc9bb6fbc115": "0xad78ebc5ac6200000",
    "0xb3e20eb4de18bd060221689894bee5aeb25351ee": "0x3fc80cce516598000",
    "0xb3e3c439069880156600c2892e448d4136c92d9b": "0x2e141ea081ca080000",
    "0xb3f82a87e59a39d0d2808f0751eb72c2329cdcc5": "0x10f0cf064dd59200000",
    "0xb3fc1d6881abfcb8becc0bb021b8b73b7233dd91": "0x2b5e3af16b1880000",
    "0xb40594c4f3664ef849cca6227b8a25aa690925ee": "0xd8d726b7177a800000",
    "0xb41eaf5d51a5ba1ba39bb418dbb54fab750efb1f": "0x3635c9adc5dea00000",
    "0xb424d68d9d0d00cec1938c854e15ffb880ba0170": "0xad78ebc5ac6200000",
    "0xb4256273962bf631d014555cc1da0dcc31616b49": "0x6c6b935b8bbd400000",
    "0xb43067fe70d9b55973ba58dc64dd7f311e554259": "0xad78ebc5ac6200000",
    "0xb43657a50eecbc3077e005d8f8d94f377876bad4": "0x1ec1b3a1ff75a0000",
    "0xb43c27f7a0a122084b98f483922541c8836cee2c": "0x26c29e47c4844c0000",
    "0xb4413576869c08f9512ad311fe925988a52d3414": "0x21e19e0c9bab2400000",
    "0xb44605552471a6eee4daab71ff3bb41326d473e0": "0x2d7e3d51ba53d00000",
    "0xb447571dacbb3ecbb6d1cf0b0c8f3838e52324e2": "0x1a318667fb4058000",
    "0xb44783c8e57b480793cbd69a45d90c7b4f0c48ac": "0x1158e460913d00000",
    "0xb44815a0f28e569d0e921a4ade8fb2642526497a": "0x302379bf2ca2e0000",
    "0xb4496ddb27799a222457d73979116728e8a1845b": "0x8d819ea65fa62f8000",
    "0xb4524c95a7860e21840296a616244019421c4aba": "0x1b1ae4d6e2ef5000000",
    "0xb45cca0d36826662683cf7d0b2fdac687f02d0c4": "0x3635c9adc5dea00000",
    "0xb46440c797a556e04c7d9104660491f96bb076bf": "0xcec76f0e71520000",
    "0xb46ace865e2c50ea4698d216ab455dff5a11cd72": "0x3635c9adc5dea00000",
    "0xb46d1182e5aacaff0d26b2fcf72f3c9ffbcdd97d": "0xaa2a603cdd7f2c0000",
    "0xb48921c9687d5510744584936e8886bdbf2df69b": "0x3635c9adc5dea00000",
    "0xb498bb0f520005b6216a4425b75aa9adc52d622b": "0xd8d726b7177a800000",
    "0xb4b11d109f608fa8edd3fea9f8c315649aeb3d11": "0x10f0cf064dd59200000",
    "0xb4b14bf45455d0ab0803358b7524a72be1a2045b": "0x1b1ae4d6e2ef500000",
    "0xb4b185d943ee2b58631e33dff5af6854c17993ac": "0x3635c9adc5dea00000",
    "0xb4bf24cb83686bc469869fefb044b909716993e2": "0x6c6b935b8bbd400000",
    "0xb4c20040ccd9a1a3283da4d4a2f365820843d7e2": "0x3635c9adc5dea00000",
    "0xb4c8170f7b2ab536d1d9a25bdd203ae1288dc3d5": "0xad78ebc5ac6200000",
    "0xb4d82f2e69943f7de0f5f7743879406fac2e9cec": "0x22b1c8c1227a00000",
    "0xb4dd460cd016725a64b22ea4f8e06e06674e033e": "0x1231bb8748547a80000",
    "0xb4dd5499daeb2507fb2de12297731d4c72b16bb0": "0x1158e460913d00000",
    "0xb5046cb3dc1dedbd364514a2848e44c1de4ed147": "0x37b7d9bb820405e0000",
    "0xb508f987b2de34ae4cf193de85bff61389621f88": "0x14542ba12a337c00000",
    "0xb50955aa6e341571986608bdc891c2139f540cdf": "0x6acb3df27e1f880000",
    "0xb50c149a1906fad2786ffb135aab501737e9e56f": "0x150894e849b3900000",
    "0xb50c9f5789ae44e2dce017c714caf00c830084c2": "0x155bd9307f9fe80000",
    "0xb514882c979bb642a80dd38754d5b8c8296d9a07": "0x33c5499031720c0000",
    "0xb51ddcb4dd4e8ae6be336dd9654971d9fec86b41": "0x16d464f83de2948000",
    "0xb51e558eb5512fbcfa81f8d0bd938c79ebb5242b": "0x26c29e47c4844c0000",
    "0xb523fff9749871b35388438837f7e6e0dea9cb6b": "0x6c6b935b8bbd400000",
    "0xb52dfb45de5d74e3df208332bc571c809b8dcf32": "0x14542ba12a337c00000",
    "0xb535f8db879fc67fec58824a5cbe6e5498aba692": "0x678a932062e4180000",
    "0xb537d36a70eeb8d3e5c80de815225c1158cb92c4": "0x5150ae84a8cdf00000",
    "0xb53bcb174c2518348b818aece020364596466ba3": "0x6c6b935b8bbd400000",
    "0xb5493ef173724445cf345c035d279ba759f28d51": "0x1158e460913d00000",
    "0xb553d25d6b5421e81c2ad05e0b8ba751f8f010e3": "0x6c6b935b8bbd400000",
    "0xb55474ba58f0f2f40e6cbabed4ea176e011fcad6": "0x6acb3df27e1f880000",
    "0xb555d00f9190cc3677aef314acd73fdc39399259": "0x6c6b935b8bbd400000",
    "0xb557ab9439ef50d237b553f02508364a466a5c03": "0xad78ebc5ac6200000",
    "0xb56a780028039c81caf37b6775c620e786954764": "0x6c6b935b8bbd400000",
    "0xb56ad2aec6c8c3f19e1515bbb7dd91285256b639": "0x3635c9adc5dea00000",
    "0xb57413060af3f14eb479065f1e9d19b3757ae8cc": "0x22b1c8c1227a00000",
    "0xb57549bfbc9bdd18f736b22650e48a73601fa65c": "0x182d7e4cfda0380000",
    "0xb577b6befa054e9c040461855094b002d7f57bd7": "0x1823f3cf621d23400000",
    "0xb57b04fa23d1203fae061eac4542cb60f3a57637": "0xa5aa85009e39c0000",
    "0xb5870ce342d43343333673038b4764a46e925f3e": "0x3635c9adc5dea00000",
    "0xb587b44a2ca79e4bc1dd8bfdd43a207150f2e7e0": "0x222c8eb3ff66400000",
    "0xb589676d15a04448344230d4ff27c95edf122c49": "0x3635c9adc5dea00000",
    "0xb58b52865ea55d8036f2fab26098b352ca837e18": "0xfc936392801c0000",
    "0xb5906b0ae9a28158e8ac550e39da086ee3157623": "0xad78ebc5ac6200000",
    "0xb5a4679685fa14196c2e9230c8c4e33bffbc10e2": "0x4be4e7267b6ae00000",
    "0xb5a589dd9f4071dbb6fba89b3f5d5dae7d96c163": "0x6c6b935b8bbd400000",
    "0xb5a606f4ddcbb9471ec67f658caf2b00ee73025e": "0xea756ea92afc740000",
    "0xb5ad5157dda921e6bafacd9086ae73ae1f611d3f": "0x6c6b935b8bbd400000",
    "0xb5add1e7809f7d03069bfe883b0a932210be8712": "0x3635c9adc5dea00000",
    "0xb5ba29917c78a1d9e5c5c713666c1e411d7f693a": "0xa80d24677efef00000",
    "0xb5c816a8283ca4df68a1a73d63bd80260488df08": "0xad78ebc5ac6200000",
    "0xb5cac5ed03477d390bb267d4ebd46101fbc2c3da": "0xaadec983fcff40000",
    "0xb5cdbc4115406f52e5aa85d0fea170d2979cc7ba": "0x487a9a304539440000",
    "0xb5d9934d7b292bcf603b2880741eb760288383a0": "0xe7c2518505060000",
    "0xb5dd50a15da34968890a53b4f13fe1af081baaaa": "0xd8d726b7177a800000",
    "0xb5fa8184e43ed3e0b8ab91216461b3528d84fd09": "0x914878a8c05ee00000",
    "0xb5fb7ea2ddc1598b667a9d57dd39e85a38f35d56": "0x1b1ae4d6e2ef500000",
    "0xb600429752f399c80d0734744bae0a022eca67c6": "0x1158e460913d00000",
    "0xb600feab4aa96c537504d96057223141692c193a": "0x15af1d78b58c400000",
    "0xb6047cdf932db3e4045f4976122341537ed5961e": "0x1158e460913d00000",
    "0xb615e940143eb57f875893bc98a61b3d618c1e8c": "0x1158e460913d00000",
    "0xb61c34fcacda701a5aa8702459deb0e4ae838df8": "0x7695a92c20d6fe00000",
    "0xb63064bd3355e6e07e2d377024125a33776c4afa": "0x8375a2abcca24400000",
    "0xb635a4bc71fb28fdd5d2c322983a56c284426e69": "0x93739534d28680000",
    "0xb646df98b49442746b61525c81a3b04ba3106250": "0x6acb3df27e1f880000",
    "0xb65941d44c50d24666670d364766e991c02e11c2": "0x2086ac351052600000",
    "0xb65bd780c7434115162027565223f44e5498ff8c": "0x43c30fb0884a96c0000",
    "0xb66411e3a02dedb726fa79107dc90bc1cae64d48": "0x6c6b935b8bbd400000",
    "0xb66675142e3111a1c2ea1eb2419cfa42aaf7a234": "0x3635c9adc5dea00000",
    "0xb66f92124b5e63035859e390628869dbdea9485e": "0x215f835bc769da80000",
    "0xb672734afcc224e2e609fc51d4f059732744c948": "0x1004e2e45fb7ee0000",
    "0xb6771b0bf3427f9ae7a93e7c2e61ee63941fdb08": "0x3fb26692954bfc00000",
    "0xb67a80f170197d96cdcc4ab6cba627b4afa6e12c": "0x821ab0d44149800000",
    "0xb68899e7610d4c93a23535bcc448945ba1666f1c": "0xad78ebc5ac6200000",
    "0xb6a82933c9eadabd981e5d6d60a6818ff806e36b": "0x15af1d78b58c400000",
    "0xb6aacb8cb30bab2ae4a2424626e6e12b02d04605": "0x1b1ae4d6e2ef5000000",
    "0xb6b34a263f10c3d2eceb0acc559a7b2ab85ce565": "0xd8d726b7177a800000",
    "0xb6bfe1c3ef94e1846fb9e3acfe9b50c3e9069233": "0x6c6acc67d7b1d40000",
    "0xb6cd7432d5161be79768ad45de3e447a07982063": "0xd8d726b7177a800000",
    "0xb6ce4dc560fc73dc69fb7a62e388db7e72ea764f": "0x345df169e9a3580000",
    "0xb6decf82969819ba02de29b9b593f21b64eeda0f": "0x281d901f4fdd100000",
    "0xb6e6c3222b6b6f9be2875d2a89f127fb64100fe2": "0x1b21d5323cc30200000",
    "0xb6e8afd93dfa9af27f39b4df06076710bee3dfab": "0x15af1d78b58c40000",
    "0xb6f78da4f4d041b3bc14bc5ba519a5ba0c32f128": "0x247dd32c3fe195048000",
    "0xb6fb39786250081426a342c70d47ee521e5bc563": "0x32d26d12e980b600000",
    "0xb70dba9391682b4a364e77fe99256301a6c0bf1f": "0xad78ebc5ac6200000",
    "0xb71623f35107cf7431a83fb3d204b29ee0b1a7f4": "0x11164759ffb320000",
    "0xb71a13ba8e95167b80331b52d69e37054fe7a826": "0xad78ebc5ac6200000",
    "0xb71b62f4b448c02b1201cb5e394ae627b0a560ee": "0x1b1ae4d6e2ef500000",
    "0xb72220ade364d0369f2d2da783ca474d7b9b34ce": "0x1b1ab319f5ec750000",
    "0xb7230d1d1ff2aca366963914a79df9f7c5ea2c98": "0x1b1ae4d6e2ef5000000",
    "0xb7240af2af90b33c08ae9764103e35dce3638428": "0x1cadd2fe9686e638000",
    "0xb727a9fc82e1cffc5c175fa1485a9befa2cdbdd1": "0x3627e8f712373c0000",
    "0xb72c2a011c0df50fbb6e28b20ae1aad217886790": "0xd8d726b7177a800000",
    "0xb7382d37db0398ac72410cf9813de9f8e1ec8dad": "0x3636c25e66ece70000",
    "0xb73b4ff99eb88fd89b0b6d57a9bc338e886fa06a": "0x1bc16d674ec800000",
    "0xb73d6a77559c86cf6574242903394bacf96e3570": "0x4f1a77ccd3ba00000",
    "0xb74372dbfa181dc9242f39bf1d3731dffe2bdacf": "0x6c6b935b8bbd400000",
    "0xb7479dab5022c4d5dbaaf8de171b4e951dd1a457": "0x4563918244f400000",
    "0xb749b54e04d5b19bdcedfb84da7701ab478c27ae": "0x914878a8c05ee00000",
    "0xb74ed2666001c16333cf7af59e4a3d4860363b9c": "0xa7ebd5e4363a00000",
    "0xb75149e185f6e3927057739073a1822ae1cf0df2": "0xd8d8583fa2d52f0000",
    "0xb753a75f9ed10b21643a0a3dc0517ac96b1a4068": "0x15c8185b2c1ff40000",
    "0xb756ad52f3bf74a7d24c67471e0887436936504c": "0x43c33c1937564800000",
    "0xb7576e9d314df41ec5506494293afb1bd5d3f65d": "0x1158e460913d00000",
    "0xb758896f1baa864f17ebed16d953886fee68aae6": "0x3635c9adc5dea00000",
    "0xb768b5234eba3a9968b34d6ddb481c8419b3655d": "0xcfce55aa12b30000",
    "0xb782bfd1e2de70f467646f9bc09ea5b1fcf450af": "0xe7eeba3410b740000",
    "0xb7a2c103728b7305b5ae6e961c94ee99c9fe8e2b": "0xa968163f0a57b400000",
    "0xb7a31a7c38f3db09322eae11d2272141ea229902": "0x6c6b935b8bbd400000",
    "0xb7a6791c16eb4e2162f14b6537a02b3d63bfc602": "0x2a526391ac93760000",
    "0xb7a7f77c348f92a9f1100c6bd829a8ac6d7fcf91": "0x62a992e53a0af00000",
    "0xb7c077946674ba9341fb4c747a5d50f5d2da6415": "0x3635c9adc5dea00000",
    "0xb7c0d0cc0b4d342d4062bac624ccc3c70cc6da3f": "0xd8d726b7177a800000",
    "0xb7c9f12b038e73436d17e1c12ffe1aeccdb3f58c": "0x1d460162f516f00000",
    "0xb7cc6b1acc32d8b295df68ed9d5e60b8f64cb67b": "0x1043561a8829300000",
    "0xb7ce684b09abda53389a875369f71958aeac3bdd": "0x6c6b935b8bbd400000",
    "0xb7d12e84a2e4c4a6345af1dd1da9f2504a2a996e": "0xad78ebc5ac6200000",
    "0xb7d252ee9402b0eef144295f0e69f0db586c0871": "0x23c757072b8dd00000",
    "0xb7d581fe0af1ec383f3b3c416783f385146a7612": "0x43c33c1937564800000",
    "0xb7f67314cb832e32e63b15a40ce0d7ffbdb26985": "0x398279264a818d0000",
    "0xb8040536958d5998ce4bec0cfc9c2204989848e9": "0x52ea70d498fd50a0000",
    "0xb8310a16cc6abc465007694b930f978ece1930bd": "0x281d901f4fdd100000",
    "0xb834acf3015322c58382eeb2b79638906e88b6de": "0x5150ae84a8cdf000000",
    "0xb84b53d0bb125656cddc52eb852ab71d7259f3d5": "0x3635c9adc5dea000000",
    "0xb84c8b9fd33ece00af9199f3cf5fe0cce28cd14a": "0xcf152640c5c8300000",
    "0xb85218f342f8012eda9f274e63ce2152b2dcfdab": "0xa80d24677efef00000",
    "0xb8555010776e3c5cb311a5adeefe9e92bb9a64b9": "0xd8d726b7177a800000",
    "0xb85f26dd0e72d9c29ebaf697a8af77472c2b58b5": "0x28519acc7190c700000",
    "0xb85ff03e7b5fc422981fae5e9941dacbdaba7584": "0x487a9a304539440000",
    "0xb86607021b62d340cf2652f3f95fd2dc67698bdf": "0x10f0cf064dd59200000",
    "0xb87de1bcd29269d521b8761cc39cfb4319d2ead5": "0x3635c9adc5dea00000",
    "0xb87f5376c2de0b6cc3c179c06087aa473d6b4674": "0x487a9a304539440000",
    "0xb884add88d83dc564ab8e0e02cbdb63919aea844": "0x6c6b935b8bbd400000",
    "0xb88a37c27f78a617d5c091b7d5b73a3761e65f2a": "0x6c6b935b8bbd400000",
    "0xb8947822d5ace7a6ad8326e95496221e0be6b73d": "0x1158e460913d00000",
    "0xb89c036ed7c492879921be41e10ca1698198a74c": "0x62a992e53a0af00000",
    "0xb89f4632df5909e58b2a9964f74feb9a3b01e0c5": "0x48875bcc6e7cbeb8000",
    "0xb8a79c84945e47a9c3438683d6b5842cff7684b1": "0x6c6b935b8bbd400000",
    "0xb8a979352759ba09e35aa5935df175bff678a108": "0x1158e460913d00000",
    "0xb8ab39805bd821184f6cbd3d2473347b12bf175c": "0x6685ac1bfe32c0000",
    "0xb8ac117d9f0dba80901445823c4c9d4fa3fedc6e": "0x3564c4427a8fc7d8000",
    "0xb8bc9bca7f71b4ed12e620438d620f53c114342f": "0x1b1ae4d6e2ef500000",
    "0xb8bedd576a4b4c2027da735a5bc3f533252a1808": "0x6c6b935b8bbd400000",
    "0xb8c2703d8c3f2f44c584bc10e7c0a6b64c1c097e": "0x12cddb8ead6f9f80000",
    "0xb8cc0f060aad92d4eb8b36b3b95ce9e90eb383d7": "0x1fc3842bd1f071c00000",
    "0xb8d2ddc66f308c0158ae3ccb7b869f7d199d7b32": "0x2dcbf4840eca000000",
    "0xb8d389e624a3a7aebce4d3e5dbdf6cdc29932aed": "0xad78ebc5ac6200000",
    "0xb8d531a964bcea13829620c0ced72422dadb4cca": "0x93715cc5ab8a70000",
    "0xb8d5c324a8209d7c8049d0d4aede02ba80ab578b": "0x393928629fff75e8000",
    "0xb8f20005b61352ffa7699a1b52f01f5ab39167f1": "0x21e19e0c9bab2400000",
    "0xb8f30758faa808dbc919aa7b425ec922b93b8129": "0x3636d7af5ec98e0000",
    "0xb9013c51bd078a098fae05bf2ace0849c6be17a5": "0x4563918244f400000",
    "0xb9144b677c2dc614ceefdf50985f1183208ea64c": "0x6c6b935b8bbd400000",
    "0xb916b1a01cdc4e56e7657715ea37e2a0f087d106": "0x826e3181e027068000",
    "0xb91d9e916cd40d193db60e79202778a0087716fc": "0x15f1ba7f4716200000",
    "0xb9231eb26e5f9e4b4d288f03906704fab96c87d6": "0x42bf06b78ed3b500000",
    "0xb92427ad7578b4bfe20a9f63a7c5506d5ca12dc8": "0x6c6b935b8bbd400000",
    "0xb927abd2d28aaaa24db31778d27419df8e1b04bb": "0x17e11c2a26f478000",
    "0xb94d47b3c052a5e50e4261ae06a20f45d8eee297": "0x6c6b935b8bbd400000",
    "0xb95396daaa490df2569324fcc6623be052f132ca": "0x6c6b935b8bbd400000",
    "0xb959dce02e91d9db02b1bd8b7d17a9c41a97af09": "0x1b1ae4d6e2ef5000000",
    "0xb95c9b10aa981cf4a67a71cc52c504dee8cf58bd": "0xd8d726b7177a800000",
    "0xb95cfda8465ba9c2661b249fc3ab661bdfa35ff0": "0x114a4e79a2c2108000",
    "0xb96841cabbc7dbd69ef0cf8f81dff3c8a5e21570": "0x28a857425466f800000",
    "0xb97a6733cd5fe99864b3b33460d1672434d5cafd": "0x6c65bbaa46c2cf8000",
    "0xb981ad5e6b7793a23fc6c1e8692eb2965d18d0da": "0x21e18d2c821c7520000",
    "0xb98ca31785ef06be49a1e47e864f60d076ca472e": "0xd8d726b7177a800000",
    "0xb9920fd0e2c735c256463caa240fb7ac86a93dfa": "0x5f68e8131ecf800000",
    "0xb992a967308c02b98af91ee760fd3b6b4824ab0e": "0x6c6b935b8bbd400000",
    "0xb9a985501ee950829b17fae1c9cf348c3156542c": "0xff17517ca9a620000",
    "0xb9b0a3219a3288d9b35b091b14650b8fe23dce2b": "0x2f6f10780d22cc00000",
    "0xb9cf71b226583e3a921103a5316f855a65779d1b": "0x5150ae84a8cdf000000",
    "0xb9e90c1192b3d5d3e3ab0700f1bf655f5dd4347a": "0x1b19e50b44977c0000",
    "0xb9fd3833e88e7cf1fa9879bdf55af4b99cd5ce3f": "0x3635c9adc5dea00000",
    "0xba0249e01d945bef93ee5ec61925e03c5ca509fd": "0xd8d726b7177a800000",
    "0xba0f39023bdb29eb1862a9f9059cab5d306e662f": "0x6c6b935b8bbd400000",
    "0xba10f2764290f875434372f79dbf713801caac01": "0x33c5499031720c0000",
    "0xba1531fb9e791896bcf3a80558a359f6e7c144bd": "0xd5967be4fc3f100000",
    "0xba176dbe3249e345cd4fa967c0ed13b24c47e586": "0x15aef9f1c31c7f0000",
    "0xba1f0e03cb9aa021f4dcebfa94e5c889c9c7bc9e": "0x6d190c475169a200000",
    "0xba1fcaf223937ef89e85675503bdb7ca6a928b78": "0x22b1c8c1227a000000",
    "0xba24fc436753a739db2c8d40e6d4d04c528e86fa": "0x2c0bb3dd30c4e200000",
    "0xba42f9aace4c184504abf5425762aca26f71fbdc": "0x207077dd8a79c0000",
    "0xba469aa5c386b19295d4a1b5473b540353390c85": "0x6c6b935b8bbd400000",
    "0xba6440aeb3737b8ef0f1af9b0c15f4c214ffc7cf": "0x3635c9adc5dea00000",
    "0xba6d31b9a261d640b5dea51ef2162c3109f1eba8": "0x10f0cf064dd59200000",
    "0xba70e8b4759c0c3c82cc00ac4e9a94dd5bafb2b8": "0x3043fa33c412d70000",
    "0xba8a63f3f40de4a88388bc50212fea8e064fbb86": "0x6c6b935b8bbd400000",
    "0xba8e46d69d2e2343d86c60d82cf42c2041a0c1c2": "0x56bc75e2d63100000",
    "0xbaa4b64c2b15b79f5f204246fd70bcbd86e4a92a": "0x1b1ae4d6e2ef500000",
    "0xbac8922c4acc7d2cb6fd59a14eb45cf3e702214b": "0x2b5e3af16b18800000",
    "0xbad235d5085dc7b068a67c412677b03e1836884c": "0x6c6b935b8bbd400000",
    "0xbad4425e171c3e72975eb46ac0a015db315a5d8f": "0x6c6b935b8bbd400000",
    "0xbadc2aef9f5951a8d78a6b35c3d0b3a4e6e2e739": "0x14542ba12a337c00000",
    "0xbade43599e02f84f4c3014571c976b13a36c65ab": "0xd8d726b7177a800000",
    "0xbae9b82f7299631408659dd74e891cb8f3860fe5": "0x6acb3df27e1f880000",
    "0xbb0366a7cfbd3445a70db7fe5ae34885754fd468": "0x14def2c42ebd6400000",
    "0xbb076aac92208069ea318a31ff8eeb14b7e996e3": "0x813ca56906d340000",
    "0xbb0857f1c911b24b86c8a70681473fe6aaa1cce2": "0x56bc75e2d63100000",
    "0xbb19bf91cbad74cceb5f811db27e411bc2ea0656": "0xf43fc2c04ee00000",
    "0xbb27c6a7f91075475ab229619040f804c8ec7a6a": "0x21e19e0c9bab2400000",
    "0xbb371c72c9f0316cea2bd9c6fbb4079e775429ef": "0x5f68e8131ecf800000",
    "0xbb3b010b18e6e2be1135871026b7ba15ea0fde24": "0x2207c80309b77700000",
    "0xbb3b9005f46fd2ca3b30162599928c77d9f6b601": "0x1b1ae7f2b1bf7db0000",
    "0xbb3fc0a29c034d710812dcc775c8cab9d28d6975": "0x39d4e844d1cf5f0000",
    "0xbb48eaf516ce2dec3e41feb4c679e4957641164f": "0xcf152640c5c8300000",
    "0xbb4b4a4b548070ff41432c9e08a0ca6fa7bc9f76": "0x2e141ea081ca080000",
    "0xbb56a404723cff20d0685488b05a02cdc35aacaa": "0x1158e460913d00000",
    "0xbb618e25221ad9a740b299ed1406bc3934b0b16d": "0x3635c9adc5dea00000",
    "0xbb61a04bffd57c10470d45c39103f64650347616": "0x3635c9adc5dea00000",
    "0xbb6823a1bd819f13515538264a2de052b4442208": "0x16368ff4ff9c10000",
    "0xbb6c284aac8a69b75cddb00f28e145583b56bece": "0x6c6b935b8bbd400000",
    "0xbb75cb5051a0b0944b4673ca752a97037f7c8c15": "0xad78ebc5ac6200000",
    "0xbb993b96ee925ada7d99d786573d3f89180ce3aa": "0x6c6b935b8bbd400000",
    "0xbba3c68004248e489573abb2743677066b24c8a7": "0x6c6b935b8bbd400000",
    "0xbba4fac3c42039d828e742cde0efffe774941b39": "0x6c6ad382d4fb610000",
    "0xbba8ab22d2fedbcfc63f684c08afdf1c175090b5": "0x55f29f37e4e3b8000",
    "0xbba976f1a1215f7512871892d45f7048acd356c8": "0x6c6b935b8bbd400000",
    "0xbbab000b0408ed015a37c04747bc461ab14e151b": "0x14542ba12a337c00000",
    "0xbbabf6643beb4bd01c120bd0598a0987d82967d1": "0xb5328178ad0f2a0000",
    "0xbbb4ee1d82f2e156442cc93338a2fc286fa28864": "0x4a4491bd6dcd280000",
    "0xbbb5a0f4802c8648009e8a6998af352cde87544f": "0x52d542804f1ce0000",
    "0xbbb643d2187b364afc10a6fd368d7d55f50d1a3c": "0x3635c9adc5dea00000",
    "0xbbb8ffe43f98de8eae184623ae5264e424d0b8d7": "0x5d53ffde928080000",
    "0xbbbd6ecbb5752891b4ceb3cce73a8f477059376f": "0x1f399b1438a100000",
    "0xbbbf39b1b67995a42241504f9703d2a14a515696": "0x55a6e79ccd1d300000",
    "0xbbc8eaff637e94fcc58d913c7770c88f9b479277": "0xad78ebc5ac6200000",
    "0xbbc9d8112e5beb02dd29a2257b1fe69b3536a945": "0x6c6b935b8bbd400000",
    "0xbbca65b3266ea2fb73a03f921635f912c7bede00": "0x6acb3df27e1f880000",
    "0xbbf84292d954acd9e4072fb860b1504106e077ae": "0x5150ae84a8cdf00000",
    "0xbbf85aaaa683738f073baef44ac9dc34c4c779ea": "0x6c6b935b8bbd400000",
    "0xbbf8616d97724af3def165d0e28cda89b800009a": "0x62ef12e2b17618000",
    "0xbbfe0a830cace87b7293993a7e9496ce64f8e394": "0x14542ba12a337c00000",
    "0xbc0ca4f217e052753614d6b019948824d0d8688b": "0x15af1d78b58c400000",
    "0xbc0e8745c3a549445c2be900f52300804ab56289": "0x7029bf5dd4c53b28000",
    "0xbc0f98598f88056a26339620923b8f1eb074a9fd": "0xad78ebc5ac6200000",
    "0xbc1609d685b76b48ec909aa099219022f89b2ccd": "0x40138b917edfb80000",
    "0xbc171e53d17ac9b61241ae436deec7af452e7496": "0x121ea68c114e5100000",
    "0xbc1b021a78fde42d9b5226d6ec26e06aa3670090": "0x4563918244f400000",
    "0xbc1e80c181616342ebb3fb3992072f1b28b802c6": "0xd8d726b7177a800000",
    "0xbc237148d30c13836ffa2cad520ee4d2e5c4eeff": "0x6acb3df27e1f880000",
    "0xbc46d537cf2edd403565bde733b2e34b215001bd": "0x43c33c1937564800000",
    "0xbc4e471560c99c8a2a4b1b1ad0c36aa6502b7c4b": "0x28a857425466f800000",
    "0xbc62b3096a91e7dc11a1592a293dd2542150d751": "0x3635c9adc5dea00000",
    "0xbc69a0d2a31c3dbf7a9122116901b2bdfe9802a0": "0xa2a15d09519be00000",
    "0xbc6b58364bf7f1951c309e0cba0595201cd73f9a": "0x62401a457e45f80000",
    "0xbc73f7b1ca3b773b34249ada2e2c8a9274cc17c2": "0x6c6b935b8bbd400000",
    "0xbc7afc8477412274fc265df13c054473427d43c6": "0x70c95920ce3250000",
    "0xbc967fe4418c18b99858966d870678dca2b88879": "0x1d9cbdd8d7ed2100000",
    "0xbc999e385c5aebcac8d6f3f0d60d5aa725336d0d": "0x6c6b935b8bbd400000",
    "0xbc9c95dfab97a574cea2aa803b5caa197cef0cff": "0x16c4abbebea0100000",
    "0xbc9e0ec6788f7df4c7fc210aacd220c27e45c910": "0x1b1ae4d6e2ef500000",
    "0xbca3ffd4683fba0ad3bbc90734b611da9cfb457e": "0xad78ebc5ac6200000",
    "0xbcaed0acb6a76f113f7c613555a2c3b0f5bf34a5": "0xa7ebd5e4363a00000",
    "0xbcaf347918efb2d63dde03e39275bbe97d26df50": "0x56bc75e2d63100000",
    "0xbcb422dc4dd2aae94abae95ea45dd1731bb6b0ba": "0x18424f5f0b1b4e0000",
    "0xbcbd31252ec288f91e298cd812c92160e738331a": "0x6b1bc2cac09a590000",
    "0xbcbf6ba166e2340db052ea23d28029b0de6aa380": "0xd255d112e103a00000",
    "0xbcc84597b91e73d5c5b4d69c80ecf146860f779a": "0xed70b5e9c3f2f00000",
    "0xbcc9593b2da6df6a34d71b1aa38dacf876f95b88": "0x1158e460913d00000",
    "0xbcd95ef962462b6edfa10fda87d72242fe3edb5c": "0x121d06e12fff988000",
    "0xbcd99edc2160f210a05e3a1fa0b0434ced00439b": "0x6c6b935b8bbd400000",
    "0xbcdfacb9d9023c3417182e9100e8ea1d373393a3": "0x3342d60dff1960000",
    "0xbce13e22322acfb355cd21fd0df60cf93add26c6": "0xad78ebc5ac6200000",
    "0xbce40475d345b0712dee703d87cd7657fc7f3b62": "0x1a420db02bd7d580000",
    "0xbcedc4267ccb89b31bb764d7211171008d94d44d": "0xad78ebc5ac6200000",
    "0xbcfc98e5c82b6adb180a3fcb120b9a7690c86a3f": "0x6acb3df27e1f880000",
    "0xbd043b67c63e60f841ccca15b129cdfe6590c8e3": "0xad78ebc5ac6200000",
    "0xbd047ff1e69cc6b29ad26497a9a6f27a903fc4dd": "0x2ee449550898e40000",
    "0xbd08e0cddec097db7901ea819a3d1fd9de8951a2": "0x1158e460913d00000",
    "0xbd09126c891c4a83068059fe0e15796c4661a9f4": "0x2b5e3af16b18800000",
    "0xbd0c5cd799ebc48642ef97d74e8e429064fee492": "0x11ac28a8c729580000",
    "0xbd17eed82b9a2592019a1b1b3c0fbad45c408d22": "0xd8d726b7177a80000",
    "0xbd1803370bddb129d239fd16ea8526a6188ae58e": "0x1b1ae4d6e2ef500000",
    "0xbd2b70fecc37640f69514fc7f3404946aad86b11": "0x410d586a20a4c00000",
    "0xbd3097a79b3c0d2ebff0e6e86ab0edadbed47096": "0x5a87e7d7f5f6580000",
    "0xbd325d4029e0d8729f6d399c478224ae9e7ae41e": "0xd255d112e103a00000",
    "0xbd432a3916249b4724293af9146e49b8280a7f2a": "0xd8d726b7177a800000",
    "0xbd47f5f76e3b930fd9485209efa0d4763da07568": "0x3635c9adc5dea00000",
    "0xbd4b60faec740a21e3071391f96aa534f7c1f44e": "0x9ddc1e3b901180000",
    "0xbd4bd5b122d8ef7b7c8f0667450320db2116142e": "0x2086ac351052600000",
    "0xbd51ee2ea143d7b1d6b77e7e44bdd7da12f485ac": "0x477e06ccb2b9280000",
    "0xbd59094e074f8d79142ab1489f148e32151f2089": "0x1158e460913d00000",
    "0xbd5a8c94bd8be6470644f70c8f8a33a8a55c6341": "0xad78ebc5ac6200000",
    "0xbd5e473abce8f97a6932f77c2facaf9cc0a00514": "0x3c9258a106a6b70000",
    "0xbd5f46caab2c3d4b289396bbb07f203c4da82530": "0x4563918244f400000",
    "0xbd66ffedb530ea0b2e856dd12ac2296c31fe29e0": "0xad78ebc5ac6200000",
    "0xbd67d2e2f82da8861341bc96a2c0791fddf39e40": "0xad7c07947c8fb0000",
    "0xbd6a474d66345bcdd707594adb63b30c7822af54": "0xd8d726b7177a800000",
    "0xbd723b289a7367b6ece2455ed61edb49670ab9c4": "0x10f0cdea164213f8000",
    "0xbd73c3cbc26a175062ea0320dd84b253bce64358": "0x155bd9307f9fe80000",
    "0xbd7419dc2a090a46e2873d7de6eaaad59e19c479": "0x170bcb671759f080000",
    "0xbd8765f41299c7f479923c4fd18f126d7229047d": "0xd8d726b7177a800000",
    "0xbd93e550403e2a06113ed4c3fba1a8913b19407e": "0x6c6b935b8bbd400000",
    "0xbd9e56e902f4be1fc8768d8038bac63e2acbbf8e": "0x36356633ebd8ea0000",
    "0xbda4be317e7e4bed84c0495eee32d607ec38ca52": "0x7d32277978ef4e8000",
    "0xbdb60b823a1173d45a0792245fb496f1fd3301cf": "0x6c6b935b8bbd400000",
    "0xbdbaf6434d40d6355b1e80e40cc4ab9c68d96116": "0x56bc75e2d63100000",
    "0xbdc02cd4330c93d6fbda4f6db2a85df22f43c233": "0x6c6b935b8bbd400000",
    "0xbdc461462b6322b462bdb33f22799e8108e2417d": "0x243d4d18229ca20000",
    "0xbdc739a699700b2e8e2c4a4c7b058a0e513ddebe": "0x6c6b935b8bbd400000",
    "0xbdc74873af922b9df474853b0fa7ff0bf8c82695": "0xd8c9460063d31c0000",
    "0xbdca2a0ff34588af625fa8e28fc3015ab5a3aa00": "0x7ed73f773552fc0000",
    "0xbdd3254e1b3a6dc6cc2c697d45711aca21d516b2": "0x6c6b935b8bbd400000",
    "0xbddfa34d0ebf1b04af53b99b82494a9e3d8aa100": "0x28a857425466f800000",
    "0xbde4c73f969b89e9ceae66a2b51844480e038e9a": "0x3635c9adc5dea00000",
    "0xbde9786a84e75b48f18e726dd78d70e4af3ed802": "0x1369fb96128ac480000",
    "0xbded11612fb5c6da99d1e30e320bc0995466141e": "0x15af1d78b58c400000",
    "0xbded7e07d0711e684de65ac8b2ab57c55c1a8645": "0x2009c5c8bf6fdc0000",
    "0xbdf693f833c3fe471753184788eb4bfe4adc3f96": "0x6acb3df27e1f880000",
    "0xbdf6e68c0cd7584080e847d72cbb23aad46aeb1d": "0x6acb3df27e1f880000",
    "0xbe0a2f385f09dbfce96732e12bb40ac349871ba8": "0x574c115e02b8be0000",
    "0xbe0c2a80b9de084b172894a76cf4737a4f529e1a": "0x6c6acc67d7b1d40000",
    "0xbe1cd7f4c472070968f3bde268366b21eeea8321": "0xe91a7cd19fa3b00000",
    "0xbe2346a27ff9b702044f500deff2e7ffe6824541": "0x1158e460913d00000",
    "0xbe2471a67f6047918772d0e36839255ed9d691ae": "0xd8d726b7177a800000",
    "0xbe2b2280523768ea8ac35cd9e888d60a719300d4": "0x6c6b935b8bbd400000",
    "0xbe2b326e78ed10e550fee8efa8f8070396522f5a": "0x857e0d6f1da76a00000",
    "0xbe305a796e33bbf7f9aeae6512959066efda1010": "0x24dce54d34a1a000000",
    "0xbe478e8e3dde6bd403bb2d1c657c4310ee192723": "0x1ab2cf7c9f87e20000",
    "0xbe4e7d983f2e2a636b1102ec7039efebc842e98d": "0x393ef1a5127c80000",
    "0xbe4fd073617022b67f5c13499b827f763639e4e3": "0x6c6b935b8bbd400000",
    "0xbe525a33ea916177f17283fca29e8b350b7f530b": "0x8f019aaf46e8780000",
    "0xbe53322f43fbb58494d7cce19dda272b2450e827": "0xad7ceaf425c150000",
    "0xbe538246dd4e6f0c20bf5ad1373c3b463a131e86": "0xad78ebc5ac6200000",
    "0xbe5a60689998639ad75bc105a371743eef0f7940": "0x1b327c73e1257a0000",
    "0xbe5cba8d37427986e8ca2600e858bb03c359520f": "0xa030dcebbd2f4c0000",
    "0xbe60037e90714a4b917e61f193d834906703b13a": "0x5c283d410394100000",
    "0xbe633a3737f68439bac7c90a52142058ee8e8a6f": "0x340aad21b3b7000000",
    "0xbe659d85e7c34f8833ea7f488de1fbb5d4149bef": "0x1ebd23ad9d5bb720000",
    "0xbe73274d8c5aa44a3cbefc8263c37ba121b20ad3": "0x1b1ae4d6e2ef500000",
    "0xbe86d0b0438419ceb1a038319237ba5206d72e46": "0x3634fb9f1489a70000",
    "0xbe8d7f18adfe5d6cc775394989e1930c979d007d": "0x3635c9adc5dea00000",
    "0xbe9186c34a52514abb9107860f674f97b821bd5b": "0x1ba01ee40603100000",
    "0xbe935793f45b70d8045d2654d8dd3ad24b5b6137": "0x2fb474098f67c00000",
    "0xbe98a77fd41097b34f59d7589baad021659ff712": "0x30ca024f987b900000",
    "0xbe9b8c34b78ee947ff81472eda7af9d204bc8466": "0x821ab0d4414980000",
    "0xbea00df17067a43a82bc1daecafb6c14300e89e6": "0x62a992e53a0af00000",
    "0xbea0afc93aae2108a3fac059623bf86fa582a75e": "0x5c283d410394100000",
    "0xbeb3358c50cf9f75ffc76d443c2c7f55075a0589": "0x90f534608a72880000",
    "0xbeb4fd315559436045dcb99d49dcec03f40c42dc": "0x6c6b935b8bbd400000",
    "0xbec2e6de39c07c2bae556acfbee2c4728b9982e3": "0x1f0ff8f01daad40000",
    "0xbec6640f4909b58cbf1e806342961d607595096c": "0x6c6acc67d7b1d40000",
    "0xbec8caf7ee49468fee552eff3ac5234eb9b17d42": "0x6c6b935b8bbd400000",
    "0xbecef61c1c442bef7ce04b73adb249a8ba047e00": "0x363b56c3a754c80000",
    "0xbed4649df646e2819229032d8868556fe1e053d3": "0xfc936392801c0000",
    "0xbed4c8f006a27c1e5f7ce205de75f516bfb9f764": "0x3635c9adc5dea000000",
    "0xbee8d0b008421954f92d000d390fb8f8e658eaee": "0x3635c9adc5dea00000",
    "0xbeecd6af900c8b064afcc6073f2d85d59af11956": "0x6c6b935b8bbd400000",
    "0xbeef94213879e02622142bea61290978939a60d7": "0x136857b32ad86048000",
    "0xbef07d97c3481f9d6aee1c98f9d91a180a32442b": "0x152d02c7e14af6800000",
    "0xbefb448c0c5f683fb67ee570baf0db5686599751": "0x6acb3df27e1f880000",
    "0xbf05070c2c34219311c4548b2614a438810ded6d": "0x6c6b935b8bbd400000",
    "0xbf05ff5ecf0df2df887759fb8274d93238ac267d": "0x2b5e3af16b18800000",
    "0xbf09d77048e270b662330e9486b38b43cd781495": "0x5c539b7bf4ff28800000",
    "0xbf17f397f8f46f1bae45d187148c06eeb959fa4d": "0x3649c59624bb300000",
    "0xbf183641edb886ce60b8190261e14f42d93cce01": "0x15b3557f1937f8000",
    "0xbf2aea5a1dcf6ed3b5e8323944e983fedfd1acfb": "0x55a6e79ccd1d300000",
    "0xbf4096bc547dbfc4e74809a31c039e7b389d5e17": "0xd5967be4fc3f100000",
    "0xbf49c14898316567d8b709c2e50594b366c6d38c": "0x27bf38c6544df50000",
    "0xbf4c73a7ede7b164fe072114843654e4d8781dde": "0x6c6b935b8bbd400000",
    "0xbf50ce2e264b9fe2b06830617aedf502b2351b45": "0x3635c9adc5dea00000",
    "0xbf59aee281fa43fe97194351a9857e01a3b897b2": "0x2086ac351052600000",
    "0xbf68d28aaf1eeefef646b65e8cc8d190f6c6da9c": "0x6c6b935b8bbd400000",
    "0xbf6925c00751008440a6739a02bf2b6cdaab5e3a": "0x3635c9adc5dea00000",
    "0xbf7701fc6225d5a17815438a8941d21ebc5d059d": "0x65ea3db75546600000",
    "0xbf8b8005d636a49664f74275ef42438acd65ac91": "0xad78ebc5ac6200000",
    "0xbf92418a0c6c31244d220260cb3e867dd7b4ef49": "0x56900d33ca7fc0000",
    "0xbf9acd4445d9c9554689cabbbab18800ff1741c2": "0x3635c9adc5dea00000",
    "0xbf9f271f7a7e12e36dd2fe9facebf385fe6142bd": "0x366f84f7bb7840000",
    "0xbfa8c858df102cb12421008b0a31c4c7190ad560": "0xad78ebc5ac6200000",
    "0xbfaeb91067617dcf8b44172b02af615674835dba": "0x8b59e884813088000",
    "0xbfb0ea02feb61dec9e22a5070959330299c43072": "0x43c33c1937564800000",
    "0xbfbca418d3529cb393081062032a6e1183c6b2dc": "0x1b1ae4d6e2ef5000000",
    "0xbfbe05e88c9cbbcc0e92a405fac1d85de248ee24": "0x56bc75e2d63100000",
    "0xbfbfbcb656c2992be8fcde8219fbc54aadd59f29": "0x21e18d2c821c7520000",
    "0xbfc57aa666fae28e9f107a49cb5089a4e22151dd": "0x3635c9adc5dea00000",
    "0xbfcb9730246304700da90b4153e71141622e1c41": "0x3635c9adc5dea00000",
    "0xbfd93c90c29c07bc5fb5fc49aeea55a40e134f35": "0x5ede20f01a459800000",
    "0xbfe3a1fc6e24c8f7b3250560991f93cba2cf8047": "0x10f0cf064dd592000000",
    "0xbfe6bcb0f0c07852643324aa5df5fd6225abc3ca": "0x409e52b48369a0000",
    "0xbff5df769934b8943ca9137d0efef2fe6ebbb34e": "0x56bc75e2d63100000",
    "0xbffb6929241f788693273e7022e60e3eab1fe84f": "0x6c6b935b8bbd400000",
    "0xc0064f1d9474ab915d56906c9fb320a2c7098c9b": "0x13683f7f3c15d80000",
    "0xc007f0bdb6e7009202b7af3ea90902697c721413": "0xa2a0e43e7fb9830000",
    "0xc00ab080b643e1c2bae363e0d195de2efffc1c44": "0x1b1ae4d6e2ef500000",
    "0xc02077449a134a7ad1ef7e4d927affeceeadb5ae": "0xfc936392801c0000",
    "0xc02471e3fc2ea0532615a7571d493289c13c36ef": "0x1158e460913d00000",
    "0xc02d6eadeacf1b78b3ca85035c637bb1ce01f490": "0xd8d726b7177a800000",
    "0xc033b1325a0af45472c25527853b1f1c21fa35de": "0x6c6b935b8bbd400000",
    "0xc033be10cb48613bd5ebcb33ed4902f38b583003": "0xa2a15d09519be00000",
    "0xc0345b33f49ce27fe82cf7c84d141c68f590ce76": "0x3635c9adc5dea00000",
    "0xc03de42a109b657a64e92224c08dc1275e80d9b2": "0x1158e460913d00000",
    "0xc04069dfb18b096c7867f8bee77a6dc7477ad062": "0x90f534608a72880000",
    "0xc0413f5a7c2d9a4b8108289ef6ecd271781524f4": "0xa968163f0a57b400000",
    "0xc043f2452dcb9602ef62bd360e033dd23971fe84": "0x6c6b935b8bbd400000",
    "0xc04f4bd4049f044685b883b62959ae631d667e35": "0x13b80b99c5185700000",
    "0xc056d4bd6bf3cbacac65f8f5a0e3980b852740ae": "0x56bc75e2d63100000",
    "0xc05b740620f173f16e52471dc38b9c514a0b1526": "0x796e3ea3f8ab00000",
    "0xc069ef0eb34299abd2e32dabc47944b272334824": "0x68155a43676e00000",
    "0xc06cebbbf7f5149a66f7eb976b3e47d56516da2f": "0x6c6b935b8bbd400000",
    "0xc0725ec2bdc33a1d826071dea29d62d4385a8c25": "0x8a08513463aa6100000",
    "0xc07e3867ada096807a051a6c9c34cc3b3f4ad34a": "0x60f06620a849450000",
    "0xc0895efd056d9a3a81c3da578ada311bfb9356cf": "0xad78ebc5ac6200000",
    "0xc090fe23dcd86b358c32e48d2af91024259f6566": "0xad78ebc5ac6200000",
    "0xc09a66172aea370d9a63da04ff71ffbbfcff7f94": "0x6c6b935b8bbd400000",
    "0xc09e3cfc19f605ff3ec9c9c70e2540d7ee974366": "0x1b1ae4d6e2ef500000",
    "0xc0a02ab94ebe56d045b41b629b98462e3a024a93": "0x56bc75e2d63100000",
    "0xc0a39308a80e9e84aaaf16ac01e3b01d74bd6b2d": "0x7664ddd4c1c0b8000",
    "0xc0a6cbad77692a3d88d141ef769a99bb9e3c9951": "0x56bc75e2d63100000",
    "0xc0a7e8435dff14c25577739db55c24d5bf57a3d9": "0xa6dd90cae5114480000",
    "0xc0ae14d724832e2fce2778de7f7b8daf7b12a93e": "0x1158e460913d00000",
    "0xc0afb7d8b79370cfd663c68cc6b9702a37cd9eff": "0x3635c9adc5dea00000",
    "0xc0b0b7a8a6e1acdd05e47f94c09688aa16c7ad8d": "0x37b6d02ac76710000",
    "0xc0b3f244bca7b7de5b48a53edb9cbeab0b6d88c0": "0x13b80b99c5185700000",
    "0xc0c04d0106810e3ec0e54a19f2ab8597e69a573d": "0x2b5e3af16b1880000",
    "0xc0ca3277942e7445874be31ceb902972714f1823": "0xd8d726b7177a80000",
    "0xc0cbad3ccdf654da22cbcf5c786597ca1955c115": "0x6c6b935b8bbd400000",
    "0xc0cbf6032fa39e7c46ff778a94f7d445fe22cf30": "0x10ce1d3d8cb3180000",
    "0xc0e0b903088e0c63f53dd069575452aff52410c3": "0xa2a15d09519be00000",
    "0xc0e457bd56ec36a1246bfa3230fff38e5926ef22": "0x692ae8897081d00000",
    "0xc0ed0d4ad10de03435b153a0fc25de3b93f45204": "0xab4dcf399a3a600000",
    "0xc0f29ed0076611b5e55e130547e68a48e26df5e4": "0xa2a15d09519be00000",
    "0xc1132878235c5ddba5d9f3228b5236e47020dc6f": "0x3635c9adc5dea00000",
    "0xc1170dbaadb3dee6198ea544baec93251860fda5": "0x410d586a20a4c00000",
    "0xc126573d87b0175a5295f1dd07c575cf8cfa15f2": "0x21e19e0c9bab2400000",
    "0xc127aab59065a28644a56ba3f15e2eac13da2995": "0x2086ac351052600000",
    "0xc12b7f40df9a2f7bf983661422ab84c9c1f50858": "0x1b1ae4d6e2ef5000000",
    "0xc12cfb7b3df70fceca0ede263500e27873f8ed16": "0x3635c9adc5dea00000",
    "0xc12f881fa112b8199ecbc73ec4185790e614a20f": "0x6c6b935b8bbd400000",
    "0xc1384c6e717ebe4b23014e51f31c9df7e4e25b31": "0x1b1ae4d6e2ef500000",
    "0xc1438c99dd51ef1ca8386af0a317e9b041457888": "0xc1daf81d8a3ce0000",
    "0xc1631228efbf2a2e3a4092ee8900c639ed34fbc8": "0x33c5499031720c0000",
    "0xc175be3194e669422d15fee81eb9f2c56c67d9c9": "0xad78ebc5ac6200000",
    "0xc1827686c0169485ec15b3a7c8c01517a2874de1": "0x22b1c8c1227a00000",
    "0xc18ab467feb5a0aadfff91230ff056464d78d800": "0x6c6b935b8bbd400000",
    "0xc1950543554d8a713003f662bb612c10ad4cdf21": "0xfc936392801c0000",
    "0xc1a41a5a27199226e4c7eb198b031b59196f9842": "0xa5aa85009e39c0000",
    "0xc1b2a0fb9cad45cd699192cd27540b88d3384279": "0x1b1ae4d6e2ef500000",
    "0xc1b2aa8cb2bf62cdc13a47ecc4657facaa995f98": "0x363793fa96e6a68000",
    "0xc1b500011cfba95d7cd636e95e6cbf6167464b25": "0xad78ebc5ac6200000",
    "0xc1b9a5704d351cfe983f79abeec3dbbbae3bb629": "0x1158e460913d00000",
    "0xc1cbd2e2332a524cf219b10d871ccc20af1fb0fa": "0x3635c9adc5dea00000",
    "0xc1cdc601f89c0428b31302d187e0dc08ad7d1c57": "0x14542ba12a337c00000",
    "0xc1d4af38e9ba799040894849b8a8219375f1ac78": "0x43c33c1937564800000",
    "0xc1e1409ca52c25435134d006c2a6a8542dfb7273": "0x1dd1e4bd8d1ee0000",
    "0xc1eba5684aa1b24cba63150263b7a9131aeec28d": "0x1158e460913d00000",
    "0xc1ec81dd123d4b7c2dd9b4d438a7072c11dc874c": "0x6c6b935b8bbd400000",
    "0xc1f39bd35dd9cec337b96f47c677818160df37b7": "0x1158e460913d00000",
    "0xc1ffad07db96138c4b2a530ec1c7de29b8a0592c": "0xf43fc2c04ee00000",
    "0xc21fa6643a1f14c02996ad7144b75926e87ecb4b": "0x43c33c1937564800000",
    "0xc2340a4ca94c9678b7494c3c852528ede5ee529f": "0x2a36b05a3fd7c8000",
    "0xc239abdfae3e9af5457f52ed2b91fd0ab4d9c700": "0x6c6b935b8bbd400000",
    "0xc23b2f921ce4a37a259ee4ad8b2158d15d664f59": "0x1608995e8bd3f8000",
    "0xc24399b4bf86f7338fbf645e3b22b0e0b7973912": "0x6c6b935b8bbd400000",
    "0xc24ccebc2344cce56417fb684cf81613f0f4b9bd": "0x54069233bf7f780000",
    "0xc25266c7676632f13ef29be455ed948add567792": "0x487a9a304539440000",
    "0xc25cf826550c8eaf10af2234fef904ddb95213be": "0x3635c9adc5dea00000",
    "0xc2663f8145dbfec6c646fc5c49961345de1c9f11": "0x2567ac70392b880000",
    "0xc270456885342b640b4cfc1b520e1a544ee0d571": "0x62a992e53a0af00000",
    "0xc27376f45d21e15ede3b26f2655fcee02ccc0f2a": "0x1158e460913d00000",
    "0xc2779771f0536d79a8708f6931abc44b3035e999": "0x43c4f8300dcb3480000",
    "0xc27f4e08099d8cf39ee11601838ef9fc06d7fc41": "0x61093d7c2c6d380000",
    "0xc282e6993fbe7a912ea047153ffd9274270e285b": "0x7960b331247638000",
    "0xc2836188d9a29253e0cbda6571b058c289a0bb32": "0x6c6b935b8bbd400000",
    "0xc2aa74847e86edfdd3f3db22f8a2152feee5b7f7": "0x6f118886b784a20000",
    "0xc2b2cbe65bc6c2ee7a3c75b2e47c189c062e8d8b": "0x43c33c1937564800000",
    "0xc2bae4a233c2d85724f0dabebda0249d833e37d3": "0x10f0cf064dd59200000",
    "0xc2c13e72d268e7150dc799e7c6cf03c88954ced7": "0x25f273933db5700000",
    "0xc2cb1ada5da9a0423873814793f16144ef36b2f3": "0x48557e3b7017df0000",
    "0xc2d1778ef6ee5fe488c145f3586b6ebbe3fbb445": "0x3e1ff1e03b55a80000",
    "0xc2d9eedbc9019263d9d16cc5ae072d1d3dd9db03": "0x43c33c1937564800000",
    "0xc2e0584a71348cc314b73b2029b6230b92dbb116": "0x6c6b935b8bbd400000",
    "0xc2e2d498f70dcd0859e50b023a710a6d4b2133bd": "0x383911f00cbce10000",
    "0xc2ed5ffdd1add855a2692fe062b5d618742360d4": "0x410d586a20a4c00000",
    "0xc2ee91d3ef58c9d1a589844ea1ae3125d6c5ba69": "0x34957444b840e80000",
    "0xc2fafdd30acb6d6706e9293cb02641f9edbe07b5": "0x5100860b430f480000",
    "0xc2fd0bf7c725ef3e047e5ae1c29fe18f12a7299c": "0x487a9a304539440000",
    "0xc2fe7d75731f636dcd09dbda0671393ba0c82a7d": "0x77432217e683600000",
    "0xc3107a9af3322d5238df0132419131629539577d": "0x1ab4e464d414310000",
    "0xc3110be01dc9734cfc6e1ce07f87d77d1345b7e1": "0x10f0ce949e00f930000",
    "0xc32038ca52aee19745be5c31fcdc54148bb2c4d0": "0x2b5aad72c65200000",
    "0xc325c352801ba883b3226c5feb0df9eae2d6e653": "0xd5967be4fc3f100000",
    "0xc32ec7e42ad16ce3e2555ad4c54306eda0b26758": "0x6c6b935b8bbd400000",
    "0xc332df50b13c013490a5d7c75dbfa366da87b6d6": "0xd8d726b7177a800000",
    "0xc33acdb3ba1aab27507b86b15d67faf91ecf6293": "0x6c6b935b8bbd400000",
    "0xc33ece935a8f4ef938ea7e1bac87cb925d8490ca": "0x7038c16781f78480000",
    "0xc340f9b91c26728c31d121d5d6fc3bb56d3d8624": "0x6c6b935b8bbd400000",
    "0xc346cb1fbce2ab285d8e5401f42dd7234d37e86d": "0x486cb9799191e0000",
    "0xc3483d6e88ac1f4ae73cc4408d6c03abe0e49dca": "0x39992648a23c8a00000",
    "0xc348fc5a461323b57be303cb89361b991913df28": "0x152d02c7e14af6800000",
    "0xc34e3ba1322ed0571183a24f94204ee49c186641": "0x327afefa4a7bc0000",
    "0xc35b95a2a3737cb8f0f596b34524872bd30da234": "0x198be85235e2d500000",
    "0xc3631c7698b6c5111989bf452727b3f9395a6dea": "0x243275896641dbe0000",
    "0xc36c0b63bfd75c2f8efb060883d868cccd6cbdb4": "0xa2a15d09519be00000",
    "0xc3756bcdcc7eec74ed896adfc335275930266e08": "0x14542ba12a337c00000",
    "0xc384ac6ee27c39e2f278c220bdfa5baed626d9d3": "0x2086ac351052600000",
    "0xc3a046e3d2b2bf681488826e32d9c061518cfe8c": "0x8cf23f909c0fa00000",
    "0xc3a9226ae275df2cab312b911040634a9c9c9ef6": "0xd8d726b7177a800000",
    "0xc3b928a76fad6578f04f0555e63952cd21d1520a": "0x6c6b935b8bbd400000",
    "0xc3c2297329a6fd99117e54fc6af379b4d556547e": "0x14542ba12a337c00000",
    "0xc3c3c2510d678020485a63735d1307ec4ca6302b": "0x3635c9adc5dea00000",
    "0xc3cb6b36af443f2c6e258b4a39553a818747811f": "0x57473d05dabae80000",
    "0xc3db5657bb72f10d58f231fddf11980aff678693": "0x14061b9d77a5e980000",
    "0xc3db9fb6f46c480af34465d79753b4e2b74a67ce": "0x43c33c1937564800000",
    "0xc3dd58903886303b928625257ae1a013d71ae216": "0x6c6b935b8bbd400000",
    "0xc3e0471c64ff35fa5232cc3121d1d38d1a0fb7de": "0x6c6b935b8bbd400000",
    "0xc3e20c96df8d4e38f50b265a98a906d61bc51a71": "0x6c6b935b8bbd400000",
    "0xc3e387b03ce95ccfd7fa51dd840183bc43532809": "0x6c6b935b8bbd400000",
    "0xc3f8f67295a5cd049364d05d23502623a3e52e84": "0x14542ba12a337c00000",
    "0xc401c427cccff10decb864202f36f5808322a0a8": "0xb47b51a69cd4020000",
    "0xc4088c025f3e85013f5439fb3440a17301e544fe": "0x7e09db4d9f3f340000",
    "0xc41461a3cfbd32c9865555a4813137c076312360": "0x3635c6204739d98000",
    "0xc420388fbee84ad656dd68cdc1fbaa9392780b34": "0xa2dca63aaf4c58000",
    "0xc42250b0fe42e6b7dcd5c890a6f0c88f5f5fb574": "0x81ee4825359840000",
    "0xc42d6aeb710e3a50bfb44d6c31092969a11aa7f3": "0x82263cafd8cea0000",
    "0xc440c7ca2f964b6972ef664a2261dde892619d9c": "0x43c33c1937564800000",
    "0xc44bdec8c36c5c68baa2ddf1d431693229726c43": "0x152d02c7e14af6800000",
    "0xc44f4ab5bc60397c737eb0683391b633f83c48fa": "0x3635c9adc5dea00000",
    "0xc452e0e4b3d6ae06b836f032ca09db409ddfe0fb": "0x2b5e3af16b18800000",
    "0xc45a1ca1036b95004187cdac44a36e33a94ab5c3": "0xdd00f720301880000",
    "0xc45d47ab0c9aa98a5bd62d16223ea2471b121ca4": "0x202e68f2c2aee40000",
    "0xc4681e73bb0e32f6b726204831ff69baa4877e32": "0x62a992e53a0af00000",
    "0xc46bbdef76d4ca60d316c07f5d1a780e3b165f7e": "0x6c6b935b8bbd400000",
    "0xc47d610b399250f70ecf1389bab6292c91264f23": "0xfa7e7b5df3cd00000",
    "0xc4803bb407c762f90b7596e6fde194931e769590": "0xd8d726b7177a800000",
    "0xc48651c1d9c16bff4c9554886c3f3f26431f6f68": "0x23ab9599c43f080000",
    "0xc489c83ffbb0252ac0dbe3521217630e0f491f14": "0xd8d726b7177a800000",
    "0xc48b693cacefdbd6cb5d7895a42e3196327e261c": "0x3635c9adc5dea00000",
    "0xc493489e56c3bdd829007dc2f956412906f76bfa": "0x2a791488e71540000",
    "0xc496cbb0459a6a01600fc589a55a32b454217f9d": "0xeda838c4929080000",
    "0xc49cfaa967f3afbf55031061fc4cef88f85da584": "0x6c6b935b8bbd400000",
    "0xc4b6e5f09cc1b90df07803ce3d4d13766a9c46f4": "0x14542ba12a337c00000",
    "0xc4bec96308a20f90cab18399c493fd3d065abf45": "0x2f6f10780d22cc00000",
    "0xc4c01afc3e0f045221da1284d7878574442fb9ac": "0x1923c688b73ab040000",
    "0xc4c15318d370c73318cc18bdd466dbaa4c6603bf": "0x11164759ffb320000",
    "0xc4c6cb723dd7afa7eb535615e53f3cef14f18118": "0x6c6b8fce0d18798000",
    "0xc4cc45a2b63c27c0b4429e58cd42da59be739bd6": "0x3635c9adc5dea00000",
    "0xc4cf930e5d116ab8d13b9f9a7ec4ab5003a6abde": "0x1158e460913d000000",
    "0xc4d916574e68c49f7ef9d3d82d1638b2b7ee0985": "0x55a6e79ccd1d300000",
    "0xc4dac5a8a0264fbc1055391c509cc3ee21a6e04c": "0x1606b7fa039ce740000",
    "0xc4dd048bfb840e2bc85cb53fcb75abc443c7e90f": "0xc971dc07c9c7900000",
    "0xc4f2913b265c430fa1ab8adf26c333fc1d9b66f2": "0x1158e460913d00000",
    "0xc4f7b13ac6d4eb4db3d4e6a252af8a07bd5957da": "0xad78ebc5ac6200000",
    "0xc4f7d2e2e22084c44f70feaab6c32105f3da376f": "0x6acb3df27e1f880000",
    "0xc4ff6fbb1f09bd9e102ba033d636ac1c4c0f5304": "0x3635c9adc5dea00000",
    "0xc4ffadaaf2823fbea7bff702021bffc4853eb5c9": "0x24a19c1bd6f128000",
    "0xc500b720734ed22938d78c5e48b2ba9367a575ba": "0x7129e1cdf373ee00000",
    "0xc50fe415a641b0856c4e75bf960515441afa358d": "0x6c6b935b8bbd400000",
    "0xc5134cfbb1df7a20b0ed7057622eeed280947dad": "0xcdff97fabcb4600000",
    "0xc517d0315c878813c717e18cafa1eab2654e01da": "0x21e19e0c9bab2400000",
    "0xc518799a5925576213e21896e0539abb85b05ae3": "0x3635c9adc5dea00000",
    "0xc522e20fbf04ed7f6b05a37b4718d6fce0142e1a": "0xd8d726b7177a800000",
    "0xc524086d46c8112b128b2faf6f7c7d8160a8386c": "0x15af1d78b58c400000",
    "0xc52d1a0c73c2a1be84915185f8b34faa0adf1de3": "0x4be4eab3fa0fa68000",
    "0xc53594c7cfb2a08f284cc9d7a63bbdfc0b319732": "0xa6b2328ff3a62c00000",
    "0xc5374928cdf193705443b14cc20da423473cd9cf": "0x77d10509bb3af8000",
    "0xc538a0ff282aaa5f4b75cfb62c70037ee67d4fb5": "0x6c6b935b8bbd400000",
    "0xc53b50fd3b2b72bc6c430baf194a515585d3986d": "0x1158e460913d00000",
    "0xc53d79f7cb9b70952fd30fce58d54b9f0b59f647": "0x113e2d6744345f80000",
    "0xc549df83c6f65eec0f1dc9a0934a5c5f3a50fd88": "0x9dc05cce28c2b80000",
    "0xc55005a6c37e8ca7e543ce259973a3cace961a4a": "0x6c6b935b8bbd400000",
    "0xc555b93156f09101233c6f7cf6eb3c4f196d3346": "0xa2a15d09519be00000",
    "0xc55a6b4761fd11e8c85f15174d74767cd8bd9a68": "0x73f75d1a085ba0000",
    "0xc56e6b62ba6e40e52aab167d21df025d0055754b": "0x6c6b935b8bbd400000",
    "0xc573e841fa08174a208b060ccb7b4c0d7697127f": "0x243d4d18229ca20000",
    "0xc57612de91110c482e6f505bcd23f3c5047d1d61": "0xc2127af858da700000",
    "0xc5843399d150066bf7979c34ba294620368ad7c0": "0xad78ebc5ac6200000",
    "0xc58b9cc61dedbb98c33f224d271f0e228b583433": "0xd255d112e103a00000",
    "0xc58f62fee9711e6a05dc0910b618420aa127f288": "0xd7c198710e66b00000",
    "0xc593b546b7698710a205ad468b2c13152219a342": "0x54069233bf7f780000",
    "0xc593d6e37d14b566643ac4135f243caa0787c182": "0x28a857425466f800000",
    "0xc5a3b98e4593fea0b38c4f455a5065f051a2f815": "0x44cf468af25bf770000",
    "0xc5a48a8500f9b4e22f0eb16c6f4649687674267d": "0x2c0ec50385043e8000",
    "0xc5a629a3962552cb8eded889636aafbd0c18ce65": "0x21e19e0c9bab2400000",
    "0xc5ae86b0c6c7e3900f1368105c56537faf8d743e": "0xa31062beeed700000",
    "0xc5b009baeaf788a276bd35813ad65b400b849f3b": "0x3635c9adc5dea00000",
    "0xc5b56cd234267c28e89c6f6b2266b086a12f970c": "0xd8d726b7177a800000",
    "0xc5c6a4998a33feb764437a8be929a73ba34a0764": "0xa968163f0a57b400000",
    "0xc5c73d61cce7c8fe4c8fce29f39092cd193e0fff": "0x1b1ae4d6e2ef5000000",
    "0xc5c7590b5621ecf8358588de9b6890f2626143f1": "0xa2a15d09519be00000",
    "0xc5cdcee0e85d117dabbf536a3f4069bf443f54e7": "0x6ac5c62d9486070000",
    "0xc5d48ca2db2f85d8c555cb0e9cfe826936783f9e": "0xad78ebc5ac6200000",
    "0xc5de1203d3cc2cea31c82ee2de5916880799eafd": "0x10f0cf064dd59200000",
    "0xc5e488cf2b5677933971f64cb8202dd05752a2c0": "0x3635c9adc5dea00000",
    "0xc5e812f76f15f2e1f2f9bc4823483c8804636f67": "0x3f514193abb840000",
    "0xc5e9939334f1252ed2ba26814487dfd2982b3128": "0x3cb71f51fc5580000",
    "0xc5eb42295e9cadeaf2af12dede8a8d53c579c469": "0xcf152640c5c8300000",
    "0xc5edbbd2ca0357654ad0ea4793f8c5cecd30e254": "0x14542ba12a337c00000",
    "0xc5f64babb7033142f20e46d7aa6201ed86f67103": "0x6c6b935b8bbd400000",
    "0xc5f687717246da8a200d20e5e9bcac60b67f3861": "0x18d993f34aef10000",
    "0xc6045b3c350b4ce9ca0c6b754fb41a69b97e9900": "0x3224f42723d4540000",
    "0xc60b04654e003b4683041f1cbd6bc38fda7cdbd6": "0x6c6b935b8bbd400000",
    "0xc61446b754c24e3b1642d9e51765b4d3e46b34b6": "0x6c6b935b8bbd400000",
    "0xc618521321abaf5b26513a4a9528086f220adc6f": "0x176b344f2a78c0000",
    "0xc6234657a807384126f8968ca1708bb07baa493c": "0x1158e460913d00000",
    "0xc625f8c98d27a09a1bcabd5128b1c2a94856af30": "0xad78ebc5ac6200000",
    "0xc6355ec4768c70a49af69513cd83a5bca7e3b9cd": "0x14542ba12a337c00000",
    "0xc63ac417992e9f9b60386ed953e6d7dff2b090e8": "0xd8d8583fa2d52f0000",
    "0xc63cd7882118b8a91e074d4c8f4ba91851303b9a": "0xe18398e7601900000",
    "0xc652871d192422c6bc235fa063b44a7e1d43e385": "0x8670e9ec6598c0000",
    "0xc667441e7f29799aba616451d53b3f489f9e0f48": "0x2f29ace68addd800000",
    "0xc66ae4cee87fb3353219f77f1d6486c580280332": "0x19a16b06ff8cb0000",
    "0xc674f28c8afd073f8b799691b2f0584df942e844": "0x6c6b935b8bbd400000",
    "0xc697b70477cab42e2b8b266681f4ae7375bb2541": "0x12e5732baba5c980000",
    "0xc69b855539ce1b04714728eec25a37f367951de7": "0x6c6b935b8bbd400000",
    "0xc69be440134d6280980144a9f64d84748a37f349": "0x26c29e47c4844c0000",
    "0xc69d663c8d60908391c8d236191533fdf7775613": "0x1a4aba225c20740000",
    "0xc6a286e065c85f3af74812ed8bd3a8ce5d25e21d": "0xfc936392801c0000",
    "0xc6a30ef5bb3320f40dc5e981230d52ae3ac19322": "0x9ddc1e3b901180000",
    "0xc6ae287ddbe1149ba16ddcca4fe06aa2eaa988a9": "0x15af1d78b58c400000",
    "0xc6c7c191379897dd9c9d9a33839c4a5f62c0890d": "0xd8d854b22430688000",
    "0xc6cd68ec35362c5ad84c82ad4edc232125912d99": "0x5e0549c9632e1d80000",
    "0xc6d8954e8f3fc533d2d230ff025cb4dce14f3426": "0x15af1d78b58c400000",
    "0xc6dbdb9efd5ec1b3786e0671eb2279b253f215ed": "0x3635c9adc5dea00000",
    "0xc6df2075ebd240d44869c2be6bdf82e63d4ef1f5": "0x1158e460913d00000",
    "0xc6e2f5af979a03fd723a1b6efa728318cf9c1800": "0x243d4d18229ca20000",
    "0xc6e324beeb5b36765ecd464260f7f26006c5c62e": "0x6c6b935b8bbd400000",
    "0xc6e4cc0c7283fc1c85bc4813effaaf72b49823c0": "0xf031ec9c87dd30000",
    "0xc6ee35934229693529dc41d9bb71a2496658b88e": "0x42bf06b78ed3b500000",
    "0xc6fb1ee37417d080a0d048923bdabab095d077c6": "0xad78ebc5ac6200000",
    "0xc70527d444c490e9fc3f5cc44e66eb4f306b380f": "0xd8d726b7177a800000",
    "0xc70d856d621ec145303c0a6400cd17bbd6f5eaf7": "0x1158e460913d00000",
    "0xc70fa45576bf9c865f983893002c414926f61029": "0x15b4aa8e9702680000",
    "0xc71145e529c7a714e67903ee6206e4c3042b6727": "0x4d853c8f8908980000",
    "0xc71b2a3d7135d2a85fb5a571dcbe695e13fc43cd": "0x3635c9adc5dea00000",
    "0xc71f1d75873f33dcb2dd4b3987a12d0791a5ce27": "0x3708baed3d68900000",
    "0xc71f92a3a54a7b8c2f5ea44305fccb84eee23148": "0x2b59ca131d2060000",
    "0xc721b2a7aa44c21298e85039d00e2e460e670b9c": "0x7a1fe160277000000",
    "0xc72cb301258e91bc08998a805dd192f25c2f9a35": "0x2009c5c8bf6fdc0000",
    "0xc7368b9709a5c1b51c0adf187a65df14e12b7dba": "0x2026fc77f03e5ae8000",
    "0xc739259e7f85f2659bef5f609ed86b3d596c201e": "0xad78ebc5ac6200000",
    "0xc73e2112282215dc0762f32b7e807dcd1a7aae3e": "0x1760cbc623bb3500000",
    "0xc749668042e71123a648975e08ed6382f83e05e2": "0x2f6f10780d22cc00000",
    "0xc74a3995f807de1db01a2eb9c62e97d0548f696f": "0x3635c9adc5dea00000",
    "0xc7506c1019121ff08a2c8c1591a65eb4bdfb4a3f": "0x2086ac351052600000",
    "0xc75c37ce2da06bbc40081159c6ba0f976e3993b1": "0x3a7923151ecf580000",
    "0xc75d2259306aec7df022768c69899a652185dbc4": "0xd8d726b7177a800000",
    "0xc760971bbc181c6a7cf77441f24247d19ce9b4cf": "0x6c6b935b8bbd400000",
    "0xc76130c73cb9210238025c9df95d0be54ac67fbe": "0x5150ae84a8cdf00000",
    "0xc765e00476810947816af142d46d2ee7bca8cc4f": "0x1b1ae4d6e2ef500000",
    "0xc7675e5647b9d8daf4d3dff1e552f6b07154ac38": "0x9c2007651b2500000",
    "0xc77b01a6e911fa988d01a3ab33646beef9c138f3": "0x271b6fa5dbe6cc0000",
    "0xc7837ad0a0bf14186937ace06c5546a36aa54f46": "0xd8d726b7177a800000",
    "0xc79806032bc7d828f19ac6a640c68e3d820fa442": "0x1158e460913d00000",
    "0xc799e34e88ff88be7de28e15e4f2a63d0b33c4cb": "0xad78ebc5ac6200000",
    "0xc79d5062c796dd7761f1f13e558d73a59f82f38b": "0x1b1ae4d6e2ef5000000",
    "0xc7a018f0968a51d1f6603c5c49dc545bcb0ff293": "0xd8d726b7177a800000",
    "0xc7aff91929797489555a2ff1d14d5c695a108355": "0x3635c9adc5dea00000",
    "0xc7b1c83e63203f9547263ef6282e7da33b6ed659": "0xfc936392801c0000",
    "0xc7b39b060451000ca1049ba154bcfa00ff8af262": "0x152d02c7e14af6800000",
    "0xc7bf17c4c11f98941f507e77084fffbd2dbd3db5": "0x3635c9adc5dea00000",
    "0xc7bf2ed1ed312940ee6aded1516e268e4a604856": "0x14542ba12a337c00000",
    "0xc7d44fe32c7f8cd5f1a97427b6cd3afc9e45023e": "0x55a6e79ccd1d300000",
    "0xc7d5c7054081e918ec687b5ab36e973d18132935": "0x9ddc1e3b901180000",
    "0xc7de5e8eafb5f62b1a0af2195cf793c7894c9268": "0x3635c9adc5dea00000",
    "0xc7e330cd0c890ac99fe771fcc7e7b009b7413d8a": "0xd8d726b7177a800000",
    "0xc7eac31abce6d5f1dea42202b6a674153db47a29": "0x2009c5c8bf6fdc0000",
    "0xc7ec62b804b1f69b1e3070b5d362c62fb309b070": "0x2c46bf5416066110000",
    "0xc7f72bb758016b374714d4899bce22b4aec70a31": "0x3a26c9478f5e2d0000",
    "0xc80b36d1beafba5fcc644d60ac6e46ed2927e7dc": "0xb98bc829a6f90000",
    "0xc811c2e9aa1ac3462eba5e88fcb5120e9f6e2ca2": "0x4be6d887bd876e0000",
    "0xc817df1b91faf30fe3251571727c9711b45d8f06": "0x6c6acc67d7b1d40000",
    "0xc81fb7d20fd2800192f0aac198d6d6a37d3fcb7d": "0xe1149331c2dde0000",
    "0xc820c711f07705273807aaaa6de44d0e4b48be2e": "0x8670e9ec6598c0000",
    "0xc8231ba5a411a13e222b29bfc1083f763158f226": "0x3637096c4bcc690000",
    "0xc836e24a6fcf29943b3608e662290a215f6529ea": "0xfd45064eaee100000",
    "0xc83ba6dd9549be1d3287a5a654d106c34c6b5da2": "0x17b7883c06916600000",
    "0xc83e9d6a58253beebeb793e6f28b054a58491b74": "0xf46c2b6f5a9140000",
    "0xc841884fa4785fb773b28e9715fae99a5134305d": "0x6c6b935b8bbd400000",
    "0xc84d9bea0a7b9f140220fd8b9097cfbfd5edf564": "0x6ab9ec291ad7d8000",
    "0xc852428d2b586497acd30c56aa13fb5582f84402": "0x3342d60dff19600000",
    "0xc853215b9b9f2d2cd0741e585e987b5fb80c212e": "0x54069233bf7f780000",
    "0xc85325eab2a59b3ed863c86a5f2906a04229ffa9": "0x193d7f7d253de00000",
    "0xc85ef27d820403805fc9ed259fff64acb8d6346a": "0x6c6b935b8bbd400000",
    "0xc8616b4ec09128cdff39d6e4b9ac86eec471d5f2": "0x10d3aa536e2940000",
    "0xc86190904b8d079ec010e462cbffc90834ffaa5c": "0x22385a827e815500000",
    "0xc8710d7e8b5a3bd69a42fe0fa8b87c357fddcdc8": "0xd8d726b7177a800000",
    "0xc87352dba582ee2066b9c002a962e003134f78b1": "0x1b1ae4d6e2ef500000",
    "0xc87c77e3c24adecdcd1038a38b56e18dead3b702": "0x1dd0c885f9a0d800000",
    "0xc87d3ae3d88704d9ab0009dcc1a0067131f8ba3c": "0x6ac5c62d9486070000",
    "0xc8814e34523e38e1f927a7dce8466a447a093603": "0x21e19e0c9bab2400000",
    "0xc88255eddcf521c6f81d97f5a42181c9073d4ef1": "0xfc39044d00a2a8000",
    "0xc885a18aabf4541b7b7b7ecd30f6fae6869d9569": "0x6c6b935b8bbd400000",
    "0xc88ca1e6e5f4d558d13780f488f10d4ad3130d34": "0x54069233bf7f780000",
    "0xc88eec54d305c928cc2848c2fee23531acb96d49": "0x6c6ad382d4fb610000",
    "0xc89cf504b9f3f835181fd8424f5ccbc8e1bddf7d": "0x21e19e0c9bab2400000",
    "0xc8a2c4e59e1c7fc54805580438aed3e44afdf00e": "0x2629f66e0c5300000",
    "0xc8aa49e3809f0899f28ab57e6743709d58419033": "0x2fb474098f67c00000",
    "0xc8ab1a3cf46cb8b064df2e222d39607394203277": "0x6c6b935b8bbd400000",
    "0xc8b1850525d946f2ae84f317b15188c536a5dc86": "0x918ddc3a42a3d40000",
    "0xc8d4e1599d03b79809e0130a8dc38408f05e8cd3": "0x9fad06241279160000",
    "0xc8dd27f16bf22450f5771b9fe4ed4ffcb30936f4": "0xaadec983fcff40000",
    "0xc8de7a564c7f4012a6f6d10fd08f47890fbf07d4": "0x1043561a8829300000",
    "0xc8e2adeb545e499d982c0c117363ceb489c5b11f": "0x35659ef93f0fc40000",
    "0xc8e558a3c5697e6fb23a2594c880b7a1b68f9860": "0x21e19e0c9bab2400000",
    "0xc8f2b320e6dfd70906c597bad2f9501312c78259": "0x51934b8b3a57d00000",
    "0xc90300cb1d4077e6a6d7e169a460468cf4a492d7": "0x6c6b935b8bbd400000",
    "0xc90c3765156bca8e4897ab802419153cbe5225a9": "0xad78ebc5ac6200000",
    "0xc910a970556c9716ea53af66ddef93143124913d": "0x55a6e79ccd1d300000",
    "0xc9127b7f6629ee13fc3f60bc2f4467a20745a762": "0x37c9aa4e7ce421d8000",
    "0xc91bb562e42bd46130e2d3ae4652b6a4eb86bc0f": "0x1d460162f516f00000",
    "0xc9308879056dfe138ef8208f79a915c6bc7e70a8": "0x21e19e0c9bab2400000",
    "0xc934becaf71f225f8b4a4bf7b197f4ac9630345c": "0x43c33c1937564800000",
    "0xc93fbde8d46d2bcc0fa9b33bd8ba7f8042125565": "0x4be4e7267b6ae00000",
    "0xc94089553ae4c22ca09fbc98f57075cf2ec59504": "0xd8d726b7177a800000",
    "0xc94110e71afe578aa218e4fc286403b0330ace8d": "0x6c6b935b8bbd400000",
    "0xc946d5acc1346eba0a7279a0ac1d465c996d827e": "0x3783d545fdf0aa40000",
    "0xc94a28fb3230a9ddfa964e770f2ce3c253a7be4f": "0xad78ebc5ac6200000",
    "0xc94a585203da7bbafd93e15884e660d4b1ead854": "0x17b7883c06916600000",
    "0xc94f7c35c027d47df8ef4f9df85a9248a17dd23b": "0x19f8e7559924c0000",
    "0xc951900c341abbb3bafbf7ee2029377071dbc36a": "0x11c25d004d01f80000",
    "0xc953f934c0eb2d0f144bdab00483fd8194865ce7": "0x6c6b935b8bbd400000",
    "0xc96626728aaa4c4fb3d31c26df3af310081710d1": "0xb50fcfafebecb00000",
    "0xc96751656c0a8ef4357b7344322134b983504aca": "0x6c6b935b8bbd400000",
    "0xc98048687f2bfcc9bd90ed18736c57edd352b65d": "0x3635c9adc5dea00000",
    "0xc981d312d287d558871edd973abb76b979e5c35e": "0x6acb3df27e1f880000",
    "0xc982586d63b0d74c201b1af8418372e30c7616be": "0x56bc75e2d63100000",
    "0xc989434f825aaf9c552f685eba7c11db4a5fc73a": "0x1b28c58d9696b40000",
    "0xc989eec307e8839b9d7237cfda08822962abe487": "0x15af1d78b58c400000",
    "0xc992be59c6721caf4e028f9e8f05c25c55515bd4": "0x1158e460913d00000",
    "0xc9957ba94c1b29e5277ec36622704904c63dc023": "0x683efc6782642c0000",
    "0xc99a9cd6c9c1be3534eecd92ecc22f5c38e9515b": "0x105593b3a169d770000",
    "0xc9ac01c3fb0929033f0ccc7e1acfeaaba7945d47": "0x2a36a9e9ca4d2038000",
    "0xc9b698e898d20d4d4f408e4e4d061922aa856307": "0x22b1c8c1227a00000",
    "0xc9b6b686111691ee6aa197c7231a88dc60bd295d": "0x1b1ae4d6e2ef500000",
    "0xc9c7ac0bdd9342b5ead4360923f68c72a6ba633a": "0x1b1ae4d6e2ef500000",
    "0xc9c80dc12e7bab86e949d01e4c3ed35f2b9bba5f": "0x6c6b935b8bbd400000",
    "0xc9d76446d5aadff80b68b91b08cd9bc8f5551ac1": "0x26b4bd9110dce80000",
    "0xc9dcbb056f4db7d9da39936202c5bd8230b3b477": "0x43c33c1937564800000",
    "0xc9e02608066828848aeb28c73672a12925181f4d": "0x1b1b6bd7af64c70000",
    "0xca0432cb157b5179f02ebba5c9d1b54fec4d88ca": "0x3635c9adc5dea00000",
    "0xca122cf0f2948896b74843f49afed0ba1618eed7": "0x1e5b8fa8fe2ac00000",
    "0xca22cda3606da5cad013b8074706d7e9e721a50c": "0x17181c6fa3981940000",
    "0xca23f62dff0d6460036c62e840aec5577e0befd2": "0x7a1fe160277000000",
    "0xca25ff34934c1942e22a4e7bd56f14021a1af088": "0xaadec983fcff40000",
    "0xca373fe3c906b8c6559ee49ccd07f37cd4fb5266": "0x61093d7c2c6d380000",
    "0xca41ccac30172052d522cd2f2f957d248153409f": "0x6acb3df27e1f880000",
    "0xca4288014eddc5632f5facb5e38517a8f8bc5d98": "0x126e72a69a50d00000",
    "0xca428863a5ca30369892d612183ef9fb1a04bcea": "0x52663ccab1e1c00000",
    "0xca49a5f58adbefae23ee59eea241cf0482622eaa": "0x4d853c8f8908980000",
    "0xca4ca9e4779d530ecbacd47e6a8058cfde65d98f": "0x2b5e3af16b18800000",
    "0xca657ec06fe5bc09cf23e52af7f80cc3689e6ede": "0x30ca024f987b900000",
    "0xca66b2280fa282c5b67631ce552b62ee55ad8474": "0x6ac422f53492880000",
    "0xca6c818befd251361e02744068be99d8aa60b84a": "0x14542ba12a337c00000",
    "0xca70f4ddbf069d2143bd6bbc7f696b52789b32e7": "0xa2a15d09519be00000",
    "0xca747576446a4c8f30b08340fee198de63ec92cf": "0x17c8e1206722a300000",
    "0xca7ba3ff536c7e5f0e153800bd383db8312998e0": "0x931ac3d6bb2400000",
    "0xca8276c477b4a07b80107b843594189607b53bec": "0x14542ba12a337c00000",
    "0xca8409083e01b397cf12928a05b68455ce6201df": "0x56bc75e2d631000000",
    "0xca98c7988efa08e925ef9c9945520326e9f43b99": "0xd8d726b7177a800000",
    "0xca9a042a6a806ffc92179500d24429e8ab528117": "0x3ba1910bf341b00000",
    "0xca9dec02841adf5cc920576a5187edd2bd434a18": "0x1b1ae4d6e2ef500000",
    "0xca9faa17542fafbb388eab21bc4c94e8a7b34788": "0x6c6b8fce0d18798000",
    "0xcaaa68ee6cdf0d34454a769b0da148a1faaa1865": "0x1872e1de7fe52c00000",
    "0xcaad9dc20d589ce428d8fda3a9d53a607b7988b5": "0xd8d726b7177a800000",
    "0xcab0d32cf3767fa6b3537c84328baa9f50458136": "0x1e5b8fa8fe2ac000000",
    "0xcab9a301e6bd46e940355028eccd40ce4d5a1ac3": "0x15af1d78b58c400000",
    "0xcab9a97ada065c87816e6860a8f1426fe6b3d775": "0x3635c9adc5dea00000",
    "0xcabab6274ed15089737e287be878b757934864e2": "0x43c33c1937564800000",
    "0xcabdaf354f4720a466a764a528d60e3a482a393c": "0x3635c9adc5dea00000",
    "0xcacb675e0996235404efafbb2ecb8152271b55e0": "0x25f273933db5700000",
    "0xcad14f9ebba76680eb836b079c7f7baaf481ed6d": "0xcef3d7bd7d0340000",
    "0xcae3a253bcb2cf4e13ba80c298ab0402da7c2aa0": "0x124bc0ddd92e5600000",
    "0xcaef027b1ab504c73f41f2a10979b474f97e309f": "0xad78ebc5ac6200000",
    "0xcaf4481d9db78dc4f25f7b4ac8bd3b1ca0106b31": "0x10f0cf064dd59200000",
    "0xcafde855864c2598da3cafc05ad98df2898e8048": "0x300a8ed96ff4a940000",
    "0xcb0dd7cf4e5d8661f6028943a4b9b75c914436a7": "0x1969368974c05b000000",
    "0xcb1bb6f1da5eb10d4899f7e61d06c1b00fdfb52d": "0x384524cc70b7780000",
    "0xcb3d766c983f192bcecac70f4ee03dd9ff714d51": "0x56bc75e2d63100000",
    "0xcb42b44eb5fd60b5837e4f9eb47267523d1a229c": "0x2ee449550898e40000",
    "0xcb47bd30cfa8ec5468aaa6a94642ced9c819c8d4": "0xd8d726b7177a800000",
    "0xcb48fe8265d9af55eb7006bc335645b0a3a183be": "0xa2a15d09519be00000",
    "0xcb4a914d2bb029f32e5fef5c234c4fec2d2dd577": "0x6194049f30f7200000",
    "0xcb4abfc282aed76e5d57affda542c1f382fcacf4": "0x1b90f11c3183faa0000",
    "0xcb4ad0c723da46ab56d526da0c1d25c73daff10a": "0x1ba5abf9e779380000",
    "0xcb4bb1c623ba28dc42bdaaa6e74e1d2aa1256c2a": "0x6c6acc67d7b1d40000",
    "0xcb50587412822304ebcba07dab3a0f09fffee486": "0x4a4491bd6dcd280000",
    "0xcb58990bcd90cfbf6d8f0986f6fa600276b94e2d": "0x3634bf39ab98788000",
    "0xcb68ae5abe02dcf8cbc5aa719c25814651af8b85": "0x1b1ae4d6e2ef500000",
    "0xcb7479109b43b26657f4465f4d18c6f974be5f42": "0x62a992e53a0af00000",
    "0xcb7d2b8089e9312cc9aeaa2773f35308ec6c2a7b": "0x21e19e0c9bab2400000",
    "0xcb86edbc8bbb1f9131022be649565ebdb09e32a1": "0x6c6b935b8bbd400000",
    "0xcb93199b9c90bc4915bd859e3d42866dc8c18749": "0xc90df07def78c0000",
    "0xcb94e76febe208116733e76e805d48d112ec9fca": "0x3635c9adc5dea00000",
    "0xcb9b5103e4ce89af4f64916150bff9eecb9faa5c": "0x1b1ae4d6e2ef500000",
    "0xcba25c7a503cc8e0d04971ca05c762f9b762b48b": "0x1b1ae4d6e2ef500000",
    "0xcba288cd3c1eb4d59ddb06a6421c14c345a47b24": "0xd8d726b7177a800000",
    "0xcbb3189e4bd7f45f178b1c30c76e26314d4a4b0a": "0xffe0b677c65a98000",
    "0xcbb7be17953f2ccc93e1bc99805bf45511434e4c": "0xaae5b9df56d2f200000",
    "0xcbc04b4d8b82caf670996f160c362940d66fcf1a": "0x14542ba12a337c00000",
    "0xcbde9734b8e6aa538c291d6d7facedb0f338f857": "0x6c6b935b8bbd400000",
    "0xcbe1b948864d8474e765145858fca4550f784b92": "0x21e19e0c9bab2400000",
    "0xcbe52fc533d7dd608c92a260b37c3f45deb4eb33": "0x3635c9adc5dea00000",
    "0xcbe810fe0fecc964474a1db97728bc87e973fcbd": "0x21e19e0c9bab2400000",
    "0xcbf16a0fe2745258cd52db2bf21954c975fc6a15": "0x1043561a8829300000",
    "0xcbf37ff854a2f1ce53934494777892d3ec655782": "0x21e19e0c9bab2400000",
    "0xcbfa6af6c283b046e2772c6063b0b21553c40106": "0x6c6b935b8bbd400000",
    "0xcbfa76db04ce38fb205d37b8d377cf1380da0317": "0x4d853c8f8908980000",
    "0xcc034985d3f28c2d39b1a34bced4d3b2b6ca234e": "0x9ddc1e3b901180000",
    "0xcc043c4388d345f884c6855e71142a9f41fd6935": "0x1158e460913d00000",
    "0xcc1d6ead01aada3e8dc7b95dca25df26eefa639d": "0x6c6b935b8bbd400000",
    "0xcc2b5f448f3528d3fe41cc7d1fa9c0dc76f1b776": "0x340aad21b3b700000",
    "0xcc2d04f0a4017189b340ca77198641dcf6456b91": "0xd5967be4fc3f100000",
    "0xcc419fd9912b85135659e77a93bc3df182d45115": "0x21e19e0c9bab2400000",
    "0xcc45fb3a555bad807b388a0357c855205f7c75e8": "0x2ee449550898e40000",
    "0xcc48414d2ac4d42a5962f29eee4497092f431352": "0x8ba52e6fc45e40000",
    "0xcc4a2f2cf86cf3e43375f360a4734691195f1490": "0x4915053bd129098000",
    "0xcc4f0ff2aeb67d54ce3bc8c6510b9ae83e9d328b": "0x15af1d78b58c400000",
    "0xcc4faac00be6628f92ef6b8cb1b1e76aac81fa18": "0xb22a2eab0f0fd0000",
    "0xcc4feb72df98ff35a138e01761d1203f9b7edf0a": "0x17b7883c06916600000",
    "0xcc606f511397a38fc7872bd3b0bd03c71bbd768b": "0x3635c9adc5dea00000",
    "0xcc60f836acdef3548a1fefcca13ec6a937db44a0": "0x4b06dbbb40f4a0000",
    "0xcc6c03bd603e09de54e9c4d5ac6d41cbce715724": "0x556f64c1fe7fa0000",
    "0xcc6c2df00e86eca40f21ffda1a67a1690f477c65": "0xab4dcf399a3a600000",
    "0xcc6d7b12061bc96d104d606d65ffa32b0036eb07": "0x21e19e0c9bab2400000",
    "0xcc73dd356b4979b579b401d4cc7a31a268ddce5a": "0x1b1ae4d6e2ef500000",
    "0xcc758d071d25a6320af68c5dc9c4f6955ba94520": "0x14542ba12a337c00000",
    "0xcc7b0481cc32e6faef2386a07022bcb6d2c3b4fc": "0xab4dcf399a3a600000",
    "0xcc943be1222cd1400a2399dd1b459445cf6d54a9": "0x2a740ae6536fc880000",
    "0xcc9519d1f3985f6b255eaded12d5624a972721e1": "0x3635c9adc5dea00000",
    "0xcc9ac715cd6f2610c52b58676456884297018b29": "0xb98bc829a6f90000",
    "0xcca07bb794571d4acf041dad87f0d1ef3185b319": "0x6c6b935b8bbd400000",
    "0xccabc6048a53464424fcf76eeb9e6e1801fa23d4": "0x2ab7b260ff3fd0000",
    "0xccae0d3d852a7da3860f0636154c0a6ca31628d4": "0x5c6d12b6bc1a00000",
    "0xccca24d8c56d6e2c07db086ec07e585be267ac8d": "0xad78ebc5ac6200000",
    "0xccd521132d986cb96869842622a7dda26c3ed057": "0x6c6b935b8bbd400000",
    "0xccf43975b76bfe735fec3cb7d4dd24f805ba0962": "0x340aad21b3b700000",
    "0xccf62a663f1353ba2ef8e6521dc1ecb673ec8ef7": "0x83d6c7aab63600000",
    "0xccf7110d1bd9a74bfd1d7d7d2d9d55607e7b837d": "0x30ca024f987b900000",
    "0xccfd725760a68823ff1e062f4cc97e1360e8d997": "0x15ac56edc4d12c0000",
    "0xcd020f8edfcf524798a9b73a640334bbf72f80a5": "0x73f75d1a085ba0000",
    "0xcd06f8c1b5cdbd28e2d96b6346c3e85a0483ba24": "0x3635c9adc5dea00000",
    "0xcd072e6e1833137995196d7bb1725fef8761f655": "0x14542ba12a337c00000",
    "0xcd0a161bc367ae0927a92aac9cf6e5086714efca": "0x6c6b935b8bbd400000",
    "0xcd0af3474e22f069ec3407870dd770443d5b12b0": "0x8e5eb4ee77b2ef0000",
    "0xcd0b0257e783a3d2c2e3ba9d6e79b75ef98024d4": "0x9fad06241279160000",
    "0xcd102cd6db3df14ad6af0f87c72479861bfc3d24": "0x6c6b935b8bbd400000",
    "0xcd1e66ed539dd92fc40bbaa1fa16de8c02c14d45": "0xc77e4256863d80000",
    "0xcd1ed263fbf6f6f7b48aef8f733d329d4382c7c7": "0x100bd33fb98ba0000",
    "0xcd2a36d753e9e0ed012a584d716807587b41d56a": "0xe2ba75b0b1f1c0000",
    "0xcd32a4a8a27f1cc63954aa634f7857057334c7a3": "0x3ad166576c72d40000",
    "0xcd35ff010ec501a721a1b2f07a9ca5877dfcf95a": "0xd96fce90cfabcc0000",
    "0xcd4306d7f6947ac1744d4e13b8ef32cb657e1c00": "0x1b1ab319f5ec750000",
    "0xcd43258b7392a930839a51b2ef8ad23412f75a9f": "0x6c6b935b8bbd400000",
    "0xcd49bf185e70d04507999f92a4de4455312827d0": "0x3635c9adc5dea00000",
    "0xcd5510a242dfb0183de925fba866e312fabc1657": "0x821ab0d44149800000",
    "0xcd566ad7b883f01fd3998a9a58a9dee4724ddca5": "0x330ae1835be300000",
    "0xcd59f3dde77e09940befb6ee58031965cae7a336": "0x21e19e0c9bab2400000",
    "0xcd725d70be97e677e3c8e85c0b26ef31e9955045": "0x487a9a304539440000",
    "0xcd7e47909464d871b9a6dc76a8e9195db3485e7a": "0x215f835bc769da80000",
    "0xcd7ece086b4b619b3b369352ee38b71ddb06439a": "0xad78ebc5ac6200000",
    "0xcd7f09d7ed66d0c38bc5ad4e32b7f2b08dc1b30d": "0x3e3bb34da2a4700000",
    "0xcd9529492b5c29e475acb941402b3d3ba50686b0": "0x6acb3df27e1f880000",
    "0xcd95fa423d6fc120274aacde19f4eeb766f10420": "0xad78ebc5ac6200000",
    "0xcd9b4cef73390c83a8fd71d7b540a7f9cf8b8c92": "0x4e1003b28d9280000",
    "0xcda1741109c0265b3fb2bf8d5ec9c2b8a3346b63": "0x1158e460913d00000",
    "0xcda1b886e3a795c9ba77914e0a2fe5676f0f5ccf": "0x5bf60ea42c2040000",
    "0xcda4530f4b9bc50905b79d17c28fc46f95349bdf": "0x3310e04911f1f80000",
    "0xcdab46a5902080646fbf954204204ae88404822b": "0x1d8a96e5c606eb0000",
    "0xcdb597299030183f6e2d238533f4642aa58754b6": "0x15af1d78b58c400000",
    "0xcdd5d881a7362c9070073bdfbc75e72453ac510e": "0x2da518eae48ee80000",
    "0xcdd60d73efaad873c9bbfb178ca1b7105a81a681": "0x1bc16d674ec800000",
    "0xcdd9efac4d6d60bd71d95585dce5d59705c13564": "0x56bc75e2d63100000",
    "0xcde36d81d128c59da145652193eec2bfd96586ef": "0xd8d726b7177a800000",
    "0xcdea386f9d0fd804d02818f237b7d9fa7646d35e": "0xa349d36d80ec578000",
    "0xcdecf5675433cdb0c2e55a68db5d8bbe78419dd2": "0x1158e460913d00000",
    "0xcdfd8217339725d7ebac11a63655f265eff1cc3d": "0x10f0c696410e3a90000",
    "0xce079f51887774d8021cb3b575f58f18e9acf984": "0x9c2007651b2500000",
    "0xce1884ddbbb8e10e4dba6e44feeec2a7e5f92f05": "0xd8d726b7177a800000",
    "0xce1b0cb46aaecfd79b880cad0f2dda8a8dedd0b1": "0x1158e460913d00000",
    "0xce26f9a5305f8381094354dbfc92664e84f902b5": "0xc7aaab0591eec0000",
    "0xce2deab51c0a9ae09cd212c4fa4cc52b53cc0dec": "0x6c6b935b8bbd400000",
    "0xce2e0da8934699bb1a553e55a0b85c169435bea3": "0x10f0c696410e3a90000",
    "0xce3a61f0461b00935e85fa1ead82c45e5a64d488": "0x1b1ae4d6e2ef500000",
    "0xce4b065dbcb23047203262fb48c1188364977470": "0x1b1ae4d6e2ef500000",
    "0xce53c8cdd74296aca987b2bc19c2b875a48749d0": "0xa2a15d09519be00000",
    "0xce5e04f0184369bcfa06aca66ffa91bf59fa0fb9": "0x22b1c8c1227a00000",
    "0xce5eb63a7bf4fbc2f6e4baa0c68ab1cb4cf98fb4": "0x6c6b935b8bbd400000",
    "0xce62125adec3370ac52110953a4e760be9451e3b": "0x83d6c7aab63600000",
    "0xce71086d4c602554b82dcbfce88d20634d53cc4d": "0x92896529baddc880000",
    "0xce8a6b6d5033b1498b1ffeb41a41550405fa03a2": "0xd8d726b7177a800000",
    "0xce9786d3712fa200e9f68537eeaa1a06a6f45a4b": "0x61093d7c2c6d380000",
    "0xce9d21c692cd3c01f2011f505f870036fa8f6cd2": "0x15af1d78b58c400000",
    "0xcea2896623f4910287a2bdc5be83aea3f2e6de08": "0x1fb5a3751e490dc0000",
    "0xcea34a4dd93dd9aefd399002a97d997a1b4b89cd": "0x5150ae84a8cdf00000",
    "0xcea43f7075816b60bbfce68b993af0881270f6c4": "0x6c6b935b8bbd400000",
    "0xcea8743341533cb2f0b9c6efb8fda80d77162825": "0x56bc75e2d63100000",
    "0xceb089ec8a78337e8ef88de11b49e3dd910f748f": "0x3635c9adc5dea00000",
    "0xceb33d78e7547a9da2e87d51aec5f3441c87923a": "0x1158e460913d00000",
    "0xceb389381d48a8ae4ffc483ad0bb5e204cfdb1ec": "0x2827e6e4dd62ba8000",
    "0xcec6fc65853f9cce5f8e844676362e1579015f02": "0x6c6b935b8bbd400000",
    "0xced3c7be8de7585140952aeb501dc1f876ecafb0": "0xd8d726b7177a800000",
    "0xced81ec3533ff1bfebf3e3843ee740ad11758d3e": "0x6acb3df27e1f880000",
    "0xcedcb3a1d6843fb6bef643617deaf38f8e98dd5f": "0x19e2a4c818b9060000",
    "0xcee699c0707a7836252b292f047ce8ad289b2f55": "0x119a1e21aa69560000",
    "0xceed47ca5b899fd1623f21e9bd4db65a10e5b09d": "0x73877404c1eee0000",
    "0xcef77451dfa2c643e00b156d6c6ff84e2373eb66": "0xa31062beeed700000",
    "0xcf1169041c1745e45b172435a2fc99b49ace2b00": "0x1bb88baab2d7c0000",
    "0xcf157612764e0fd696c8cb5fba85df4c0ddc3cb0": "0x65a4da25d3016c00000",
    "0xcf1bdb799b2ea63ce134668bdc198b54840f180b": "0xfc936392801c0000",
    "0xcf2288ef4ebf88e86db13d8a0e0bf52a056582c3": "0x89506fbf9740740000",
    "0xcf264e6925130906c4d7c18591aa41b2a67f6f58": "0x6c6b935b8bbd400000",
    "0xcf26b47bd034bc508e6c4bcfd6c7d30034925761": "0x6194049f30f7200000",
    "0xcf2e2ad635e9861ae95cb9bafcca036b5281f5ce": "0x77432217e6836000000",
    "0xcf2e734042a355d05ffb2e3915b16811f45a695e": "0x6c6b935b8bbd400000",
    "0xcf348f2fe47b7e413c077a7baf3a75fbf8428692": "0x6c6b935b8bbd400000",
    "0xcf3f9128b07203a3e10d7d5755c0c4abc6e2cac2": "0x10f0cf064dd59200000",
    "0xcf3fbfa1fd32d7a6e0e6f8ef4eab57be34025c4c": "0x39a1c0f7594d480000",
    "0xcf4166746e1d3bc1f8d0714b01f17e8a62df1464": "0x3677036edf0af60000",
    "0xcf4f1138f1bd6bf5b6d485cce4c1017fcb85f07d": "0x2fd0bc77c32bff0000",
    "0xcf5a6f9df75579c644f794711215b30d77a0ce40": "0x6c6b935b8bbd400000",
    "0xcf5e0eacd1b39d0655f2f77535ef6608eb950ba0": "0x6c6b935b8bbd400000",
    "0xcf684dfb8304729355b58315e8019b1aa2ad1bac": "0x177224aa844c720000",
    "0xcf694081c76d18c64ca71382be5cd63b3cb476f8": "0x3635c9adc5dea00000",
    "0xcf6e52e6b77480b1867efec6446d9fc3cc3577e8": "0xc0901f6bd98790000",
    "0xcf883a20329667ea226a1e3c765dbb6bab32219f": "0xa4be3564d616660000",
    "0xcf8882359c0fb23387f5674074d8b17ade512f98": "0x14542ba12a337c00000",
    "0xcf89f7460ba3dfe83c5a1d3a019ee1250f242f0f": "0x356813cdcefd028000",
    "0xcf923a5d8fbc3d01aa079d1cfe4b43ce071b1611": "0x6c6b935b8bbd400000",
    "0xcf9be9b9ab86c66b59968e67b8d4dcff46b1814a": "0x23c757072b8dd00000",
    "0xcfa8b37127149bdbfee25c34d878510951ea10eb": "0x6c6b935b8bbd400000",
    "0xcfac2e1bf33205b05533691a02267ee19cd81836": "0x3635c9adc5dea00000",
    "0xcfbb32b7d024350e3321fa20c9a914035372ffc6": "0x15be6174e1912e0000",
    "0xcfc4e6f7f8b011414bfba42f23adfaa78d4ecc5e": "0x6449e84e47a8a80000",
    "0xcfd2728dfb8bdbf3bf73598a6e13eaf43052ea2b": "0x93739534d28680000",
    "0xcfd47493c9f89fe680bda5754dd7c9cfe7cb5bbe": "0x2f473513448fe0000",
    "0xcfde0fc75d6f16c443c3038217372d99f5d907f7": "0x83225e6396b5ec0000",
    "0xcfe2caaf3cec97061d0939748739bffe684ae91f": "0x21e19e0c9bab2400000",
    "0xcfeacaaed57285e0ac7268ce6a4e35ecfdb242d7": "0x3ae4d4240190600000",
    "0xcfecbea07c27002f65fe534bb8842d0925c78402": "0xd8d726b7177a800000",
    "0xcfee05c69d1f29e7714684c88de5a16098e91399": "0x6acb3df27e1f880000",
    "0xcff6a6fe3e9a922a12f21faa038156918c4fcb9c": "0x44591d67fecc80000",
    "0xcff7f89a4d4219a38295251331568210ffc1c134": "0x5f68e8131ecf800000",
    "0xcff8d06b00e3f50c191099ad56ba6ae26571cd88": "0x3635c9adc5dea00000",
    "0xcffc49c1787eebb2b56cabe92404b636147d4558": "0x133e0308f40a3da8000",
    "0xd008513b27604a89ba1763b6f84ce688b346945b": "0x3635c9adc5dea00000",
    "0xd00f067286c0fbd082f9f4a61083ec76deb3cee6": "0x3635c9adc5dea00000",
    "0xd015f6fcb84df7bb410e8c8f04894a881dcac237": "0x384524cc70b7780000",
    "0xd01af9134faf5257174e8b79186f42ee354e642d": "0x3635c9adc5dea00000",
    "0xd02108d2ae3cab10cbcf1657af223e027c8210f6": "0x6c6d84bccdd9ce0000",
    "0xd02afecf8e2ec2b62ac8ad204161fd1fae771d0e": "0x6c6b935b8bbd400000",
    "0xd0319139fbab2e8e2accc1d924d4b11df6696c5a": "0xad78ebc5ac6200000",
    "0xd037d215d11d1df3d54fbd321cd295c5465e273b": "0x4be4e7267b6ae00000",
    "0xd03a2da41e868ed3fef5745b96f5eca462ff6fda": "0xa2a15d09519be00000",
    "0xd03fc165576aaed525e5502c8e140f8b2e869639": "0x17356d8b32501c80000",
    "0xd043a011ec4270ee7ec8b968737515e503f83028": "0x1b1ae4d6e2ef500000",
    "0xd04b861b3d9acc563a901689941ab1e1861161a2": "0x1158e460913d00000",
    "0xd05a447c911dbb275bfb2e5a37e5a703a56f9997": "0xad78ebc5ac6200000",
    "0xd05ffb2b74f867204fe531653b0248e21c13544e": "0x3635c9adc5dea00000",
    "0xd062588171cf99bbeb58f126b870f9a3728d61ec": "0xf3f20b8dfa69d00000",
    "0xd0638ea57189a6a699024ad78c71d939c1c2ff8c": "0x8eae566710fc200000",
    "0xd0648a581b3508e135a2935d12c9657045d871ca": "0x1b2df9d219f57980000",
    "0xd071192966eb69c3520fca3aa4dd04297ea04b4e": "0x5f68e8131ecf80000",
    "0xd0718520eae0a4d62d70de1be0ca431c5eea2482": "0x6c6b935b8bbd400000",
    "0xd0775dba2af4c30a3a78365939cd71c2f9de95d2": "0x692ae8897081d00000",
    "0xd07be0f90997caf903c8ac1d53cde904fb190741": "0x36389038b699b40000",
    "0xd07e511864b1cf9969e3560602829e32fc4e71f5": "0x2b5e3af16b1880000",
    "0xd0809498c548047a1e2a2aa6a29cd61a0ee268bd": "0x6c6b935b8bbd400000",
    "0xd082275f745a2cac0276fbdb02d4b2a3ab1711fe": "0x1a055690d9db80000",
    "0xd08fc09a0030fd0928cd321198580182a76aae9f": "0x3635c9adc5dea00000",
    "0xd093e829819fd2e25b973800bb3d5841dd152d05": "0xd8d726b7177a800000",
    "0xd0944aa185a1337061ae20dc9dd96c83b2ba4602": "0xad78ebc5ac6200000",
    "0xd096565b7c7407d06536580355fdd6d239144aa1": "0xd8d726b7177a80000",
    "0xd09cb2e6082d693a13e8d2f68dd1dd8461f55840": "0x3635c9adc5dea00000",
    "0xd0a6c6f9e9c4b383d716b31de78d56414de8fa91": "0x1043561a8829300000",
    "0xd0a7209b80cf60db62f57d0a5d7d521a69606655": "0x8ac7230489e800000",
    "0xd0a8abd80a199b54b08b65f01d209c27fef0115b": "0x161c626dc61a2ef8000",
    "0xd0abcc70c0420e0e172f97d43b87d5e80c336ea9": "0x21e19e0c9bab2400000",
    "0xd0ae735d915e946866e1fea77e5ea466b5cadd16": "0x6c6b935b8bbd400000",
    "0xd0b11d6f2bce945e0c6a5020c3b52753f803f9d1": "0xad78ebc5ac6200000",
    "0xd0c101fd1f01c63f6b1d19bc920d9f932314b136": "0x43c33c1937564800000",
    "0xd0c55abf976fdc3db2afe9be99d499484d576c02": "0x3635c9adc5dea00000",
    "0xd0d0a2ad45f59a9dccc695d85f25ca46ed31a5a3": "0x2d89577d7d40200000",
    "0xd0d62c47ea60fb90a3639209bbfdd4d933991cc6": "0xa844a7424d9c80000",
    "0xd0db456178206f5c4430fe005063903c3d7a49a7": "0x26491e45a753c08000",
    "0xd0e194f34b1db609288509ccd2e73b6131a2538b": "0x36356633ebd8ea0000",
    "0xd0e35e047646e759f4517093d6408642517f084d": "0xd58fa46818eccb8000",
    "0xd0ee4d02cf24382c3090d3e99560de3678735cdf": "0x821ab0d44149800000",
    "0xd0f04f52109aebec9a7b1e9332761e9fe2b97bb5": "0xd8d726b7177a800000",
    "0xd0f9597811b0b992bb7d3757aa25b4c2561d32e2": "0x1b1ae4d6e2ef500000",
    "0xd10302faa1929a326904d376bf0b8dc93ad04c4c": "0x61093d7c2c6d380000",
    "0xd1100dd00fe2ddf18163ad964d0b69f1f2e9658a": "0x143120955b2506b0000",
    "0xd116f3dcd5db744bd008887687aa0ec9fd7292aa": "0x3635c9adc5dea00000",
    "0xd119417c46732cf34d1a1afb79c3e7e2cd8eece4": "0x6c6b935b8bbd400000",
    "0xd12d77ae01a92d35117bac705aacd982d02e74c1": "0x3635c9adc5dea00000",
    "0xd135794b149a18e147d16e621a6931f0a40a969a": "0x43c33c1937564800000",
    "0xd1432538e35b7664956ae495a32abdf041a7a21c": "0x42bf06b78ed3b500000",
    "0xd1438267231704fc7280d563adf4763844a80722": "0xad78ebc5ac6200000",
    "0xd1538e9a87e59ca9ec8e5826a5b793f99f96c4c3": "0x3635c9adc5dea00000",
    "0xd1648503b1ccc5b8be03fa1ec4f3ee267e6adf7b": "0x13befbf51eec0900000",
    "0xd1682c2159018dc3d07f08240a8c606daf65f8e1": "0x2a5a058fc295ed000000",
    "0xd171c3f2258aef35e599c7da1aa07300234da9a6": "0x6c6b935b8bbd400000",
    "0xd1778c13fbd968bc083cb7d1024ffe1f49d02caa": "0xd9ecb4fd208e500000",
    "0xd17fbe22d90462ed37280670a2ea0b3086a0d6d6": "0xad6eedd17cf3b8000",
    "0xd1811c55976980f083901d8a0db269222dfb5cfe": "0x54069233bf7f780000",
    "0xd18eb9e1d285dabe93e5d4bae76beefe43b521e8": "0x243d4d18229ca20000",
    "0xd193e583d6070563e7b862b9614a47e99489f3e5": "0x36356633ebd8ea0000",
    "0xd1978f2e34407fab1dc2183d95cfda6260b35982": "0x2ab7b260ff3fd00000",
    "0xd19caf39bb377fdf2cf19bd4fb52591c2631a63c": "0x3635c9adc5dea00000",
    "0xd1a396dcdab2c7494130b3fd307820340dfd8c1f": "0xf92250e2dfd00000",
    "0xd1a71b2d0858e83270085d95a3b1549650035e23": "0x327bb09d06aa8500000",
    "0xd1acb5adc1183973258d6b8524ffa28ffeb23de3": "0xd8d726b7177a800000",
    "0xd1b37f03cb107424e9c4dd575ccd4f4cee57e6cd": "0x6c6b935b8bbd400000",
    "0xd1b5a454ac3405bb4179208c6c84de006bcb9be9": "0x1b1ae4d6e2ef500000",
    "0xd1c45954a62b911ad701ff2e90131e8ceb89c95c": "0x4b91a2de457e880000",
    "0xd1c96e70f05ae0e6cd6021b2083750a7717cde56": "0x1b1ae4d6e2ef500000",
    "0xd1d5b17ffe2d7bbb79cc7d7930bcb2e518fb1bbf": "0xa2a15d09519be00000",
    "0xd1da0c8fb7c210e0f2ec618f85bdae7d3e734b1c": "0x6acb3df27e1f880000",
    "0xd1dd79fb158160e5b4e8e23f312e6a907fbc4d4e": "0x1b1ae4d6e2ef500000",
    "0xd1de5aad3a5fd803f1b1aeb6103cb8e14fe723b7": "0x1158e460913d00000",
    "0xd1e1f2b9c16c309874dee7fac32675aff129c398": "0x3f24d8e4a00700000",
    "0xd1e5e234a9f44266a4a6241a84d7a1a55ad5a7fe": "0x43c33c1937564800000",
    "0xd1ea4d72a67b5b3e0f315559f52bd0614d713069": "0x6c6b935b8bbd400000",
    "0xd1ee905957fe7cc70ec8f2868b43fe47b13febff": "0x2629f66e0c5300000",
    "0xd1f1694d22671b5aad6a94995c369fbe6133676f": "0x3635c9adc5dea00000",
    "0xd1f4dc1ddb8abb8848a8b14e25f3b55a8591c266": "0xd8d726b7177a80000",
    "0xd1fed0aee6f5dfd7e25769254c3cfad15adeccaa": "0x2792c8fc4b53280000",
    "0xd2051cb3cb6704f0548cc890ab0a19db3415b42a": "0x121b2e5e6464780000",
    "0xd206aaddb336d45e7972e93cb075471d15897b5d": "0x2086ac351052600000",
    "0xd209482bb549abc4777bea6d7f650062c9c57a1c": "0x11651ac3e7a7580000",
    "0xd20dcb0b78682b94bc3000281448d557a20bfc83": "0x30849ebe16369c0000",
    "0xd2107b353726c3a2b46566eaa7d9f80b5d21dbe3": "0x1158e460913d00000",
    "0xd211b21f1b12b5096181590de07ef81a89537ead": "0x6c6b935b8bbd400000",
    "0xd218efb4db981cdd6a797f4bd48c7c26293ceb40": "0xa1466b31c6431c0000",
    "0xd21a7341eb84fd151054e5e387bb25d36e499c09": "0x2f6f10780d22cc00000",
    "0xd224f880f9479a89d32f09e52be990b288135cef": "0x3a9d5baa4abf1d00000",
    "0xd22f0ca4cd479e661775053bcc49e390f670dd8a": "0x3635c9adc5dea00000",
    "0xd231929735132102471ba59007b6644cc0c1de3e": "0x3637096c4bcc690000",
    "0xd235d15cb5eceebb61299e0e827fa82748911d89": "0xd8d726b7177a800000",
    "0xd23a24d7f9468343c143a41d73b88f7cbe63be5e": "0xad78ebc5ac6200000",
    "0xd23d7affacdc3e9f3dae7afcb4006f58f8a44600": "0xc328093e61ee400000",
    "0xd243184c801e5d79d2063f3578dbae81e7b3a9cb": "0x6bdca2681e1aba0000",
    "0xd24b6644f439c8051dfc64d381b8c86c75c17538": "0x6c6b935b8bbd400000",
    "0xd24bf12d2ddf457decb17874efde2052b65cbb49": "0x2f6f10780d22cc00000",
    "0xd251f903ae18727259eee841a189a1f569a5fd76": "0x21e19e0c9bab2400000",
    "0xd252960b0bf6b2848fdead80136db5f507f8be02": "0x6c6b935b8bbd400000",
    "0xd2581a55ce23ab10d8ad8c44378f59079bd6f658": "0x1dd0c885f9a0d800000",
    "0xd25aecd7eb8bd6345b063b5dbd271c77d3514494": "0x62a992e53a0af00000",
    "0xd27c234ff7accace3d996708f8f9b04970f97d36": "0x487a9a304539440000",
    "0xd28298524df5ec4b24b0ffb9df85170a145a9eb5": "0xf98a3b9b337e20000",
    "0xd283b8edb10a25528a4404de1c65e7410dbcaa67": "0x28a857425466f800000",
    "0xd284a50382f83a616d39b8a9c0f396e0ebbfa95d": "0x3636c25e66ece70000",
    "0xd288e7cb7ba9f620ab0f7452e508633d1c5aa276": "0xd8d726b7177a800000",
    "0xd29dc08efbb3d72e263f78ab7610d0226de76b00": "0x28a857425466f800000",
    "0xd2a030ac8952325f9e1db378a71485a24e1b07b2": "0x6c6b935b8bbd400000",
    "0xd2a479404347c5543aab292ae1bb4a6f158357fa": "0xd8d726b7177a800000",
    "0xd2a5a024230a57ccc666760b89b0e26cafd189c7": "0xa96595a5c6e8a3f8000",
    "0xd2a80327cbe55c4c7bd51ff9dde4ca648f9eb3f8": "0x2b5e3af16b1880000",
    "0xd2a84f75675c62d80c88756c428eee2bcb185421": "0x410d586a20a4c00000",
    "0xd2abd84a181093e5e229136f42d835e8235de109": "0x56be03ca3e47d8000",
    "0xd2ac0d3a58605e1d0f0eb3de25b2cad129ed6058": "0xd8d726b7177a800000",
    "0xd2bf67a7f3c6ce56b7be41675dbbadfe7ea93a33": "0x15af1d78b58c400000",
    "0xd2dbebe89b0357aea98bbe8e496338debb28e805": "0xd8d726b7177a800000",
    "0xd2e21ed56868fab28e0947927adaf29f23ebad6c": "0x6c184f1355d0e80000",
    "0xd2e817738abf1fb486583f80c350318bed860c80": "0xd02cecf5f5d810000",
    "0xd2edd1ddd6d86dc005baeb541d22b640d5c7cae5": "0x1158e460913d00000",
    "0xd2f1998e1cb1580cec4f6c047dcd3dcec54cf73c": "0xad78ebc5ac6200000",
    "0xd2f241255dd7c3f73c07043071ec08ddd9c5cde5": "0x1b1ae4d6e2ef500000",
    "0xd2ff672016f63b2f85398f4a6fedbb60a50d3cce": "0x1291246f5b734a0000",
    "0xd30d4c43adcf55b2cb53d68323264134498d89ce": "0x3635c9adc5dea00000",
    "0xd30ee9a12b4d68abace6baca9ad7bf5cd1faf91c": "0x514fcb24ff9c500000",
    "0xd3118ea3c83505a9d893bb67e2de142d537a3ee7": "0x1158e460913d00000",
    "0xd311bcd7aa4e9b4f383ff3d0d6b6e07e21e3705d": "0xad78ebc5ac6200000",
    "0xd315deea1d8c1271f9d1311263ab47c007afb6f5": "0x3c81d4e654b400000",
    "0xd32b2c79c36478c5431901f6d700b04dbe9b8810": "0x15779a9de6eeb00000",
    "0xd32b45564614516c91b07fa9f72dcf787cce4e1c": "0xfc66fae3746ac0000",
    "0xd330728131fe8e3a15487a34573c93457e2afe95": "0xd8d726b7177a800000",
    "0xd331c823825a9e5263d052d8915d4dcde07a5c37": "0x1e931283ccc8500000",
    "0xd333627445f2d787901ef33bb2a8a3675e27ffec": "0x15af1d78b58c400000",
    "0xd33cf82bf14c592640a08608914c237079d5be34": "0x6c6b935b8bbd400000",
    "0xd34d708d7398024533a5a2b2309b19d3c55171bb": "0x15af1d78b58c400000",
    "0xd34e03d36a2bd4d19a5fa16218d1d61e3ffa0b15": "0x1158e460913d000000",
    "0xd35075ca61fe59d123969c36a82d1ab2d918aa38": "0x90f534608a72880000",
    "0xd367009ab658263b62c2333a1c9e4140498e1389": "0x6c6b935b8bbd400000",
    "0xd3679a47df2d99a49b01c98d1c3e0c987ce1e158": "0xf2dc7d47f15600000",
    "0xd38fa2c4cc147ad06ad5a2f75579281f22a7cc1f": "0x43c33c1937564800000",
    "0xd39a5da460392b940b3c69bc03757bf3f2e82489": "0x17c83a97d6b6ca50000",
    "0xd39b7cbc94003fc948f0cde27b100db8ccd6e063": "0x15af1d78b58c400000",
    "0xd3a10ec7a5c9324999dd9e9b6bde7c911e584bda": "0x2086ac351052600000",
    "0xd3a941c961e8ca8b1070f23c6d6d0d2a758a4444": "0xad78ebc5ac6200000",
    "0xd3bb59fa31258be62f8ed232f1a7d47b4a0b41ee": "0x56bc75e2d63100000",
    "0xd3bc730937fa75d8452616ad1ef1fe7fffe0d0e7": "0x484e4ded2eae38000",
    "0xd3c24d4b3a5e0ff8a4622d518edd73f16ab28610": "0x1158e460913d00000",
    "0xd3c6f1e0f50ec3d2a67e6bcd193ec7ae38f1657f": "0x166c5480889db770000",
    "0xd3d6e9fb82542fd29ed9ea3609891e151396b6f7": "0xb6f588aa7bcf5c00000",
    "0xd3dad1b6d08d4581ccae65a8732db6ac69f0c69e": "0x14542ba12a337c00000",
    "0xd3df3b53cb3b4755de54e180451cc44c9e8ae0aa": "0x23c49409b977828000",
    "0xd3f873bd9956135789ab00ebc195b922e94b259d": "0x6c6b935b8bbd400000",
    "0xd402b4f6a099ebe716cb14df4f79c0cd01c6071b": "0x6c6b935b8bbd400000",
    "0xd40d0055fd9a38488aff923fd03d35ec46d711b3": "0x10f08eda8e555098000",
    "0xd40ed66ab3ceff24ca05ecd471efb492c15f5ffa": "0x1b1ae4d6e2ef500000",
    "0xd418870bc2e4fa7b8a6121ae0872d55247b62501": "0x55a6e79ccd1d300000",
    "0xd41d7fb49fe701baac257170426cc9b38ca3a9b2": "0x98a7d9b8314c00000",
    "0xd4205592844055b3c7a1f80cefe3b8eb509bcde7": "0x9b3bfd342a9fc8000",
    "0xd42b20bd0311608b66f8a6d15b2a95e6de27c5bf": "0x6c6b935b8bbd400000",
    "0xd4344f7d5cad65d17e5c2d0e7323943d6f62fe92": "0xe7eeba3410b740000",
    "0xd43ee438d83de9a37562bb4e286cb1bd19f4964d": "0x3635c9adc5dea00000",
    "0xd44334b4e23a169a0c16bd21e866bba52d970587": "0x8cf23f909c0fa00000",
    "0xd44d81e18f46e2cfb5c1fcf5041bc8569767d100": "0x7b442e684f65aa40000",
    "0xd44f4ac5fad76bdc1537a3b3af6472319b410d9d": "0x56bc75e2d631000000",
    "0xd44f5edf2bcf2433f211dadd0cc450db1b008e14": "0xe7eeba3410b740000",
    "0xd44f6ac3923b5fd731a4c45944ec4f7ec52a6ae4": "0x21e19e0c9bab2400000",
    "0xd45b3341e8f15c80329320c3977e3b90e7826a7e": "0x1b1ae4d6e2ef500000",
    "0xd45d5daa138dd1d374c71b9019916811f4b20a4e": "0x1f399b1438a1000000",
    "0xd460a4b908dd2b056759b488850b66a838fc77a8": "0x6acb3df27e1f880000",
    "0xd467cf064c0871989b90d8b2eb14ccc63b360823": "0xad78ebc5ac6200000",
    "0xd46bae61b027e5bb422e83a3f9c93f3c8fc77d27": "0x6c6b935b8bbd400000",
    "0xd46f8223452982a1eea019a8816efc2d6fc00768": "0x76d41c62494840000",
    "0xd475477fa56390d33017518d6711027f05f28dbf": "0x6b111333d4fd4c0000",
    "0xd47c242edffea091bc54d57df5d1fdb93101476c": "0x9df7dfa8f760480000",
    "0xd47d8685faee147c520fd986709175bf2f886bef": "0x6c6b935b8bbd400000",
    "0xd47f50df89a1cff96513bef1b2ae3a2971accf2c": "0x2d89577d7d40200000",
    "0xd482e7f68e41f238fe517829de15477fe0f6dd1d": "0x1b1ae4d6e2ef500000",
    "0xd4879fd12b1f3a27f7e109761b23ca343c48e3d8": "0x241a9b4f617a280000",
    "0xd48e3f9357e303513841b3f84bda83fc89727587": "0x3635c9adc5dea00000",
    "0xd49a75bb933fca1fca9aa1303a64b6cb44ea30e1": "0x21e19e0c9bab2400000",
    "0xd4b085fb086f3d0d68bf12926b1cc3142cae8770": "0xc893d09c8f51500000",
    "0xd4b2ff3bae1993ffea4d3b180231da439f7502a2": "0x6c6b935b8bbd400000",
    "0xd4b38a5fdb63e01714e9801db47bc990bd509183": "0x14534d95bef905c0000",
    "0xd4b8bdf3df9a51b0b91d16abbea05bb4783c8661": "0x3635c9adc5dea00000",
    "0xd4c4d1a7c3c74984f6857b2f5f07e8face68056d": "0x6c6b935b8bbd400000",
    "0xd4c6ac742e7c857d4a05a04c33d4d05c1467571d": "0xad78ebc5ac6200000",
    "0xd4cb21e590c5a0e06801366aff342c7d7db16424": "0x1ac7a08ead02f80000",
    "0xd4d92c62b280e00f626d8657f1b86166cb1f740f": "0xad7f23634cbd60000",
    "0xd4ebb1929a23871cf77fe049ab9602be08be0a73": "0x678a932062e4180000",
    "0xd4ee4919fb37f2bb970c3fff54aaf1f3dda6c03f": "0x878678326eac9000000",
    "0xd4feed99e8917c5c5458635f3603ecb7e817a7d0": "0x1043c43cde1d398000",
    "0xd4ff46203efa23064b1caf00516e28704a82a4f8": "0x487a9a304539440000",
    "0xd500e4d1c9824ba9f5b635cfa3a8c2c38bbd4ced": "0x15af1d78b58c400000",
    "0xd508d39c70916f6abc4cc7f999f011f077105802": "0x5724d24afe77f0000",
    "0xd50f7fa03e389876d3908b60a537a6706304fb56": "0x56bc75e2d63100000",
    "0xd513a45080ff2febe62cd5854abe29ee4467f996": "0x84e13bc4fc5d80000",
    "0xd5276f0cd5ffd5ffb63f98b5703d5594ede0838b": "0x15af1d78b58c400000",
    "0xd5294b666242303b6df0b1c88d37429bc8c965aa": "0x104d0d00d2b7f60000",
    "0xd52aecc6493938a28ca1c367b701c21598b6a02e": "0x3ba1910bf341b00000",
    "0xd53c567f0c3ff2e08b7d59e2b5c73485437fc58d": "0x2086ac351052600000",
    "0xd541ac187ad7e090522de6da3213e9a7f4439673": "0x6c6b935b8bbd400000",
    "0xd54ba2d85681dc130e5b9b02c4e8c851391fd9b9": "0xd5967be4fc3f100000",
    "0xd55508adbbbe9be81b80f97a6ea89add68da674f": "0x6c6b935b8bbd400000",
    "0xd5550caaf743b037c56fd2558a1c8ed235130750": "0x121e4d49036255b0000",
    "0xd5586da4e59583c8d86cccf71a86197f17996749": "0x6c6b935b8bbd400000",
    "0xd55c1c8dfbe1e02cacbca60fdbdd405b09f0b75f": "0x6c6b935b8bbd400000",
    "0xd561cbbc05515de73ab8cf9eae1357341e7dfdf4": "0x14542ba12a337c00000",
    "0xd56a144d7af0ae8df649abae535a15983aa04d02": "0x10f0cf064dd59200000",
    "0xd572309169b1402ec8131a17a6aac3222f89e6eb": "0x2ec1978c47766a00000",
    "0xd5787668c2c5175b01a8ee1ac3ecc9c8b2aba95a": "0x6c6acc67d7b1d40000",
    "0xd588c3a5df228185d98ee7e60748255cdea68b01": "0xd8d726b7177a800000",
    "0xd58a52e078a805596b0d56ea4ae1335af01c66eb": "0xe7eeba3410b740000",
    "0xd5903e9978ee20a38c3f498d63d57f31a39f6a06": "0x232b36ffc672ab00000",
    "0xd59638d3c5faa7711bf085745f9d5bdc23d498d8": "0x6c6b935b8bbd400000",
    "0xd59d92d2c8701980cc073c375d720af064743c0c": "0x405fdf7e5af85e00000",
    "0xd5a7bec332adde18b3104b5792546aa59b879b52": "0x6c6b935b8bbd400000",
    "0xd5b117ec116eb846418961eb7edb629cd0dd697f": "0xa2a15d09519be00000",
    "0xd5b284040130abf7c1d163712371cc7e28ad66da": "0x6acb3df27e1f880000",
    "0xd5b9d277d8aad20697a51f76e20978996bffe055": "0x7c3fe3c076ab50000",
    "0xd5bd5e8455c130169357c471e3e681b7996a7276": "0x2d9e288f8abb360000",
    "0xd5cba5b26bea5d73fabb1abafacdef85def368cc": "0xad78ebc5ac6200000",
    "0xd5ce55d1b62f59433c2126bcec09bafc9dfaa514": "0xaadec983fcff40000",
    "0xd5e55100fbd1956bbed2ca518d4b1fa376032b0b": "0x56bc75e2d63100000",
    "0xd5e5c135d0c4c3303934711993d0d16ff9e7baa0": "0x6c6b935b8bbd400000",
    "0xd5e656a1b916f9bf45afb07dd8afaf73b4c56f41": "0x542253a126ce40000",
    "0xd5ea472cb9466018110af00c37495b5c2c713112": "0x10eee686c854f440000",
    "0xd5f07552b5c693c20067b378b809cee853b8f136": "0x1b67c6df88c6fa0000",
    "0xd5f7c41e07729dfa6dfc64c4423160a22c609fd3": "0x61093d7c2c6d380000",
    "0xd604abce4330842e3d396ca73ddb5519ed3ec03f": "0x8e31fe1689d8a0000",
    "0xd60651e393783423e5cc1bc5f889e44ef7ea243e": "0x159e76371129c80000",
    "0xd609bf4f146eea6b0dc8e06ddcf4448a1fccc9fa": "0x6c6b935b8bbd400000",
    "0xd609ec0be70d0ad26f6e67c9d4762b52ee51122c": "0x3635c9adc5dea00000",
    "0xd60a52580728520df7546bc1e283291788dbae0c": "0x363489ef3ff0d70000",
    "0xd60b247321a32a5affb96b1e279927cc584de943": "0x7ad020d6ddd7760000",
    "0xd6110276cfe31e42825a577f6b435dbcc10cf764": "0x3635c9adc5dea00000",
    "0xd612597bc31743c78633f633f239b1e9426bd925": "0x1017f7df96be17800000",
    "0xd6234aaf45c6f22e66a225ffb93add629b4ef80f": "0x3635c9adc5dea00000",
    "0xd62edb96fce2969aaf6c545e967cf1c0bc805205": "0x4a565536a5ada8000",
    "0xd6300b3215b11de762ecde4b70b7927d01291582": "0x6c6b935b8bbd400000",
    "0xd6395db5a4bb66e60f4cfbcdf0057bb4d97862e2": "0x3154c9729d05780000",
    "0xd64a2d50f8858537188a24e0f50df1681ab07ed7": "0x8375a2abcca24400000",
    "0xd6580ab5ed4c7dfa506fa6fe64ad5ce129707732": "0xd8d726b7177a800000",
    "0xd6598b1386e93c5ccb9602ff4bbbecdbd3701dc4": "0xc25f4ecb041f00000",
    "0xd6644d40e90bc97fe7dfe7cabd3269fd579ba4b3": "0x89e917994f71c0000",
    "0xd6670c036df754be43dadd8f50feea289d061fd6": "0x144a2903448cef78000",
    "0xd668523a90f0293d65c538d2dd6c57673710196e": "0x2242c30b853ee0000",
    "0xd66ab79294074c8b627d842dab41e17dd70c5de5": "0x3635c9adc5dea00000",
    "0xd66acc0d11b689cea6d9ea5ff4014c224a5dc7c4": "0xfc936392801c0000",
    "0xd66ddf1159cf22fd8c7a4bc8d5807756d433c43e": "0x77432217e683600000",
    "0xd687cec0059087fdc713d4d2d65e77daefedc15f": "0x340aad21b3b700000",
    "0xd688e785c98f00f84b3aa1533355c7a258e87948": "0x1b1ae4d6e2ef500000",
    "0xd6a22e598dabd38ea6e958bd79d48ddd9604f4df": "0x3635c9adc5dea00000",
    "0xd6a7ac4de7b510f0e8de519d973fa4c01ba83400": "0x65ea3db75546600000",
    "0xd6acc220ba2e51dfcf21d443361eea765cbd35d8": "0x1158e460913d00000",
    "0xd6acffd0bfd99c382e7bd56ff0e6144a9e52b08e": "0x8ac7230489e800000",
    "0xd6c0d0bc93a62e257174700e10f024c8b23f1f87": "0x6c6b935b8bbd400000",
    "0xd6cf5c1bcf9da662bcea2255905099f9d6e84dcc": "0x1c49e420157d9c20000",
    "0xd6d03572a45245dbd4368c4f82c95714bd2167e2": "0x3f00c3d66686fc0000",
    "0xd6d6776958ee23143a81adadeb08382009e996c2": "0xa2a15d09519be00000",
    "0xd6d9e30f0842012a7176a917d9d2048ca0738759": "0xd8d726b7177a800000",
    "0xd6e09e98fe1300332104c1ca34fbfac554364ed9": "0x6c6b935b8bbd400000",
    "0xd6e8e97ae9839b9ee507eedb28edfb7477031439": "0x6c6b935b8bbd400000",
    "0xd6eea898d4ae2b718027a19ce9a5eb7300abe3ca": "0x17d4aceee63db8000",
    "0xd6f1e55b1694089ebcb4fe7d7882aa66c8976176": "0x43c23bdbe929db30000",
    "0xd6f4a7d04e8faf20e8c6eb859cf7f78dd23d7a15": "0x724ded1c748140000",
    "0xd6fc0446c6a8d40ae3551db7e701d1fa876e4a49": "0x6c6b935b8bbd400000",
    "0xd703c6a4f11d60194579d58c2766a7ef16c30a29": "0x6c6b935b8bbd400000",
    "0xd7052519756af42590f15391b723a03fa564a951": "0xfa3631480d01fd8000",
    "0xd70a612bd6dda9eab0dddcff4aaf4122d38feae4": "0x1d460162f516f00000",
    "0xd70ad2c4e9eebfa637ef56bd486ad2a1e5bce093": "0xad78ebc5ac6200000",
    "0xd7140c8e5a4307fab0cc27badd9295018bf87970": "0x5f1016b5076d00000",
    "0xd7164aa261c09ad9b2b5068d453ed8eb6aa13083": "0xa2a15d09519be00000",
    "0xd71e43a45177ad51cbe0f72184a5cb503917285a": "0xad78ebc5ac6200000",
    "0xd71fb130f0150c565269e00efb43902b52a455a6": "0xad78ebc5ac6200000",
    "0xd7225738dcf3578438f8e7c8b3837e42e04a262f": "0x182b8cebbb83aa0000",
    "0xd7274d50804d9c77da93fa480156efe57ba501de": "0x692ae8897081d00000",
    "0xd731bb6b5f3c37395e09ceaccd14a918a6060789": "0xd5967be4fc3f100000",
    "0xd73ed2d985b5f21b55b274643bc6da031d8edd8d": "0xa6dd90cae5114480000",
    "0xd744ac7e5310be696a63b003c40bd039370561c6": "0x5a87e7d7f5f6580000",
    "0xd74a6e8d6aab34ce85976814c1327bd6ea0784d2": "0x152d02c7e14af6800000",
    "0xd75a502a5b677287470f65c5aa51b87c10150572": "0x3130b4646385740000",
    "0xd76dbaebc30d4ef67b03e6e6ecc6d84e004d502d": "0x6d76b9188e13850000",
    "0xd771d9e0ca8a08a113775731434eb3270599c40d": "0x1158e460913d00000",
    "0xd7788ef28658aa06cc53e1f3f0de58e5c371be78": "0x16a6502f15a1e540000",
    "0xd77892e2273b235d7689e430e7aeed9cbce8a1f3": "0x6c6b935b8bbd400000",
    "0xd781f7fc09184611568570b4986e2c72872b7ed0": "0x1159561065d5d0000",
    "0xd785a8f18c38b9bc4ffb9b8fa8c7727bd642ee1c": "0x3635c9adc5dea00000",
    "0xd78ecd25adc86bc2051d96f65364866b42a426b7": "0xd23058bf2f26120000",
    "0xd78f84e38944a0e0255faece48ba4950d4bd39d2": "0x10f0cf064dd59200000",
    "0xd79483f6a8444f2549d611afe02c432d15e11051": "0x1158e460913d00000",
    "0xd79835e404fb86bf845fba090d6ba25e0c8866a6": "0x821ab0d44149800000",
    "0xd79aff13ba2da75d46240cac0a2467c656949823": "0x5dc892aa1131c80000",
    "0xd79db5ab43621a7a3da795e58929f3dd25af67d9": "0x6c6acc67d7b1d40000",
    "0xd7a1431ee453d1e49a0550d1256879b4f5d10201": "0x5a87e7d7f5f6580000",
    "0xd7ad09c6d32657685355b5c6ec8e9f57b4ebb982": "0x6acb3df27e1f880000",
    "0xd7b740dff8c457668fdf74f6a266bfc1dcb723f9": "0x1158e460913d00000",
    "0xd7c2803ed7b0e0837351411a8e6637d168bc5b05": "0x641daf5c91bd9358000",
    "0xd7c6265dea11876c903b718e4cd8ab24fe265bde": "0x6c6b935b8bbd400000",
    "0xd7ca7fdcfebe4588eff5421d1522b61328df7bf3": "0xd8e6001e6c302b0000",
    "0xd7cdbd41fff20df727c70b6255c1ba7606055468": "0xad78ebc5ac6200000",
    "0xd7d157e4c0a96437a6d285741dd23ec4361fa36b": "0x6c6b935b8bbd400000",
    "0xd7d2c6fca8ad1f75395210b57de5dfd673933909": "0x126e72a69a50d00000",
    "0xd7d3c75920590438b82c3e9515be2eb6ed7a8b1a": "0xcb49b44ba602d800000",
    "0xd7d7f2caa462a41b3b30a34aeb3ba61010e2626f": "0x6c6b935b8bbd400000",
    "0xd7e74afdbad55e96cebc5a374f2c8b768680f2b0": "0x55de6a779bbac0000",
    "0xd7eb903162271c1afa35fe69e37322c8a4d29b11": "0x21e19e0c9bab2400000",
    "0xd7ebddb9f93987779b680155375438db65afcb6a": "0x5741afeff944c0000",
    "0xd7ef340e66b0d7afcce20a19cb7bfc81da33d94e": "0xa2a15d09519be00000",
    "0xd7f370d4bed9d57c6f49c999de729ee569d3f4e4": "0xad78ebc5ac6200000",
    "0xd7fa5ffb6048f96fb1aba09ef87b1c11dd7005e4": "0x3635c9adc5dea00000",
    "0xd8069f84b521493f4715037f3226b25f33b60586": "0x678a932062e4180000",
    "0xd815e1d9f4e2b5e57e34826b7cfd8881b8546890": "0xf015f25736420000",
    "0xd81bd54ba2c44a6f6beb1561d68b80b5444e6dc6": "0x3f170d7ee43c430000",
    "0xd82251456dc1380f8f5692f962828640ab9f2a03": "0x1088b53b2c202be0000",
    "0xd82c6fedbdac98af2eed10b00f32b00056ca5a6d": "0xad78ebc5ac6200000",
    "0xd82fd9fdf6996bedad2843159c06f37e0924337d": "0x5b8ccedc5aa7b00000",
    "0xd83ad260e9a6f432fb6ea28743299b4a09ad658c": "0x6c6b935b8bbd400000",
    "0xd843ee0863ce933e22f89c802d31287b9671e81c": "0xb98bc829a6f90000",
    "0xd84b922f7841fc5774f00e14604ae0df42c8551e": "0xd96fce90cfabcc0000",
    "0xd855b03ccb029a7747b1f07303e0a664793539c8": "0x6c6b935b8bbd400000",
    "0xd85fdeaf2a61f95db902f9b5a53c9b8f9266c3ac": "0x6cf65a7e9047280000",
    "0xd8715ef9176f850b2e30eb8e382707f777a6fbe9": "0x6c6b935b8bbd400000",
    "0xd874b9dfae456a929ba3b1a27e572c9b2cecdfb3": "0x93739534d28680000",
    "0xd8930a39c77357c30ad3a060f00b06046331fd62": "0x2c73c937742c500000",
    "0xd89bc271b27ba3ab6962c94a559006ae38d5f56a": "0x6c6b935b8bbd400000",
    "0xd8b77db9b81bbe90427b62f702b201ffc29ff618": "0x326d1e4396d45c0000",
    "0xd8cd64e0284eec53aa4639afc4750810b97fab56": "0x1158e460913d00000",
    "0xd8d64384249b776794063b569878d5e3b530a4b2": "0x9a043d0b2f9568000",
    "0xd8d65420c18c2327cc5af97425f857e4a9fd51b3": "0x5f68e8131ecf800000",
    "0xd8e5c9675ef4deed266b86956fc4590ea7d4a27d": "0x3635c9adc5dea00000",
    "0xd8e8474292e7a051604ca164c0707783bb2885e8": "0x2d4ca05e2b43ca80000",
    "0xd8eb78503ec31a54a90136781ae109004c743257": "0x3635c9adc5dea00000",
    "0xd8eef4cf4beb01ee20d111748b61cb4d3f641a01": "0x9489237adb9a500000",
    "0xd8f4bae6f84d910d6d7d5ac914b1e68372f94135": "0x56bc75e2d63100000",
    "0xd8f62036f03b7635b858f1103f8a1d9019a892b6": "0x2b5e3af16b1880000",
    "0xd8f665fd8cd5c2bcc6ddc0a8ae521e4dc6aa6060": "0x5c283d410394100000",
    "0xd8f9240c55cff035523c6d5bd300d370dc8f0c95": "0xf732b66015a540000",
    "0xd8f94579496725b5cb53d7985c989749aff849c0": "0x39992648a23c8a00000",
    "0xd8fdf546674738c984d8fab857880b3e4280c09e": "0x1158e460913d00000",
    "0xd8fe088fffce948f5137ee23b01d959e84ac4223": "0xc5b54a94fc0170000",
    "0xd90f3009db437e4e11c780bec8896f738d65ef0d": "0xd8d726b7177a800000",
    "0xd9103bb6b67a55a7fece2d1af62d457c2178946d": "0x3635c9adc5dea00000",
    "0xd913f0771949753c4726acaa2bd3619c5c20ff77": "0xa2a15d09519be00000",
    "0xd91d889164479ce436ece51763e22cda19b22d6b": "0xb66d88126800880000",
    "0xd929c65d69d5bbaea59762662ef418bc21ad924a": "0x3635c9adc5dea00000",
    "0xd930b27a78876485d0f48b70dd5336549679ca8f": "0x22b1c8c1227a00000",
    "0xd931ac2668ba6a84481ab139735aec14b7bfbabf": "0x6c6b935b8bbd400000",
    "0xd9383d4b6d17b3f9cd426e10fb944015c0d44bfb": "0x2b5e3af16b18800000",
    "0xd942de4784f7a48716c0fd4b9d54a6e54c5f2f3e": "0x43c33c1937564800000",
    "0xd944c8a69ff2ca1249690c1229c7192f36251062": "0x6acb3df27e1f880000",
    "0xd94a57882a52739bbe2a0647c80c24f58a2b4f1c": "0x48b54e2adbe12b0000",
    "0xd95342953c8a21e8b635eefac7819bea30f17047": "0x13f06c7ffef05d400000",
    "0xd95c90ffbe5484864780b867494a83c89256d6e4": "0x58e7926ee858a00000",
    "0xd96711540e2e998343d4f590b6fc8fac3bb8b31d": "0x5f5a4068b71cb00000",
    "0xd96ac2507409c7a383ab2eee1822a5d738b36b56": "0xad78ebc5ac6200000",
    "0xd96db33b7b5a950c3efa2dc31b10ba10a532ef87": "0x6c6b935b8bbd400000",
    "0xd9775965b716476675a8d513eb14bbf7b07cd14a": "0x1132e6d2d23c5e40000",
    "0xd97bc84abd47c05bbf457b2ef659d61ca5e5e48f": "0x69d17119dc5a80000",
    "0xd97f4526dea9b163f8e8e33a6bcf92fb907de6ec": "0xf654aaf4db2f00000",
    "0xd97fe6f53f2a58f6d76d752adf74a8a2c18e9074": "0x10cdf9b69a43570000",
    "0xd99999a2490d9494a530cae4daf38554f4dd633e": "0x68155a43676e00000",
    "0xd99df7421b9382e42c89b006c7f087702a0757c0": "0x1a055690d9db800000",
    "0xd9b783d31d32adc50fa3eacaa15d92b568eaeb47": "0x733af90374c1b280000",
    "0xd9d370fec63576ab15b318bf9e58364dc2a3552a": "0x56bc75e2d63100000",
    "0xd9d42fd13ebd4bf69cac5e9c7e82483ab46dd7e9": "0x121ea68c114e5100000",
    "0xd9e27eb07dfc71a706060c7f079238ca93e88539": "0x3635c9adc5dea00000",
    "0xd9e3857efd1e202a441770a777a49dcc45e2e0d3": "0xc1daf81d8a3ce0000",
    "0xd9ec2efe99ff5cf00d03a8317b92a24aef441f7e": "0x6c6b935b8bbd400000",
    "0xd9ec8fe69b7716c0865af888a11b2b12f720ed33": "0xd8d726b7177a800000",
    "0xd9f1b26408f0ec67ad1d0d6fe22e8515e1740624": "0x14d1120d7b1600000",
    "0xd9f547f2c1de0ed98a53d161df57635dd21a00bd": "0x556f64c1fe7fa0000",
    "0xd9ff115d01266c9f73b063c1c238ef3565e63b36": "0x24dce54d34a1a00000",
    "0xda06044e293c652c467fe74146bf185b21338a1c": "0x3635c9adc5dea00000",
    "0xda0b48e489d302b4b7bf204f957c1c9be383b0df": "0x6c6b935b8bbd400000",
    "0xda0d4b7ef91fb55ad265f251142067f10376ced6": "0x43c33c1937564800000",
    "0xda10978a39a46ff0bb848cf65dd9c77509a6d70e": "0x6c6b935b8bbd400000",
    "0xda16dd5c3d1a2714358fe3752cae53dbab2be98c": "0x41bad155e6512200000",
    "0xda214c023e2326ff696c00393168ce46ffac39ec": "0x3635c9adc5dea00000",
    "0xda2a14f9724015d79014ed8e5909681d596148f1": "0x2a10f0f8a91ab8000",
    "0xda2ad58e77deddede2187646c465945a8dc3f641": "0x23c757072b8dd00000",
    "0xda3017c150dd0dce7fcf881b0a48d0d1c756c4c7": "0x56bf91b1a65eb0000",
    "0xda34b2eae30bafe8daeccde819a794cd89e09549": "0x6c6b935b8bbd400000",
    "0xda4a5f557f3bab390a92f49b9b900af30c46ae80": "0x21e19e0c9bab2400000",
    "0xda505537537ffb33c415fec64e69bae090c5f60f": "0x8ac7230489e800000",
    "0xda698d64c65c7f2b2c7253059cd3d181d899b6b7": "0x1004e2e45fb7ee0000",
    "0xda7732f02f2e272eaf28df972ecc0ddeed9cf498": "0xb20bfbf6967890000",
    "0xda7ad025ebde25d22243cb830ea1d3f64a566323": "0x1b1ae4d6e2ef500000",
    "0xda855d53477f505ec4c8d5e8bb9180d38681119c": "0x12f939c99edab800000",
    "0xda875e4e2f3cabe4f37e0eaed7d1f6dcc6ffef43": "0x6c6b935b8bbd400000",
    "0xda8bbee182e455d2098acb338a6d45b4b17ed8b6": "0x6c6b935b8bbd400000",
    "0xda982e9643ffece723075a40fe776e5ace04b29b": "0x8b8b6c9999bf20000",
    "0xda9f55460946d7bfb570ddec757ca5773b58429a": "0x1b845d769eb4480000",
    "0xdaa1bd7a9148fb865cd612dd35f162861d0f3bdc": "0xa638ab72d92c138000",
    "0xdaa63cbda45dd487a3f1cd4a746a01bb5e060b90": "0x10416d9b02a89240000",
    "0xdaa776a6754469d7b9267a89b86725e740da0fa0": "0x6acb3df27e1f880000",
    "0xdaac91c1e859d5e57ed3084b50200f9766e2c52b": "0x15af1d78b58c400000",
    "0xdaacdaf42226d15cb1cf98fa15048c7f4ceefe69": "0x1043561a8829300000",
    "0xdab6bcdb83cf24a0ae1cb21b3b5b83c2f3824927": "0xa968163f0a57b400000",
    "0xdabb0889fc042926b05ef57b2520910abc4b4149": "0x6c6b935b8bbd400000",
    "0xdabc225042a6592cfa13ebe54efa41040878a5a2": "0xe11fad5d85ca30000",
    "0xdac0c177f11c5c3e3e78f2efd663d13221488574": "0x3635c9adc5dea00000",
    "0xdad136b88178b4837a6c780feba226b98569a94c": "0xad78ebc5ac6200000",
    "0xdadbfafd8b62b92a24efd75256dd83abdbd7bbdb": "0x11164759ffb320000",
    "0xdadc00ab7927603c2fcf31cee352f80e6c4d6351": "0x6c66e9a55378b80000",
    "0xdae0d33eaa341569fa9ff5982684854a4a328a6e": "0x3635c9adc5dea00000",
    "0xdae7201eab8c063302930d693929d07f95e71962": "0x91aec028b419810000",
    "0xdaedd4ad107b271e89486cbf80ebd621dd974578": "0x6c6b935b8bbd400000",
    "0xdb04fad9c49f9e880beb8fcf1d3a3890e4b3846f": "0x435ae6cc0c58e50000",
    "0xdb0cc78f74d9827bdc8a6473276eb84fdc976212": "0x6c6b935b8bbd400000",
    "0xdb1293a506e90cad2a59e1b8561f5e66961a6788": "0x6c6b935b8bbd400000",
    "0xdb19a3982230368f0177219cb10cb259cdb2257c": "0x6c6b935b8bbd400000",
    "0xdb23a6fef1af7b581e772cf91882deb2516fc0a7": "0xad78ebc5ac6200000",
    "0xdb244f97d9c44b158a40ed9606d9f7bd38913331": "0x58788cb94b1d80000",
    "0xdb288f80ffe232c2ba47cc94c763cf6fc9b82b0d": "0x49b9ca9a694340000",
    "0xdb2a0c9ab64df58ddfb1dbacf8ba0d89c85b31b4": "0xd8d726b7177a800000",
    "0xdb34745ede8576b499db01beb7c1ecda85cf4abe": "0x4563918244f400000",
    "0xdb3f258ab2a3c2cf339c4499f75a4bd1d3472e9e": "0x5150ae84a8cdf00000",
    "0xdb4bc83b0e6baadb1156c5cf06e0f721808c52c7": "0x2fb474098f67c00000",
    "0xdb63122de7037da4971531fae9af85867886c692": "0xf0425b0641f340000",
    "0xdb6c2a73dac7424ab0d031b66761122566c01043": "0xa2a15d09519be00000",
    "0xdb6e560c9bc620d4bea3a94d47f7880bf47f2d5f": "0x4da0fdfcf05760000",
    "0xdb6ff71b3db0928f839e05a7323bfb57d29c87aa": "0x3154c9729d05780000",
    "0xdb73460b59d8e85045d5e752e62559875e42502e": "0x36330322d5238c0000",
    "0xdb77b88dcb712fd17ee91a5b94748d720c90a994": "0x6c6b935b8bbd400000",
    "0xdb7d4037081f6c65f9476b0687d97f1e044d0a1d": "0x23c757072b8dd00000",
    "0xdb882eacedd0eff263511b312adbbc59c6b8b25b": "0x1ed4fde7a2236b00000",
    "0xdb9371b30c4c844e59e03e924be606a938d1d310": "0x6c6b935b8bbd400000",
    "0xdba4796d0ceb4d3a836b84c96f910afc103f5ba0": "0x908f493f737410000",
    "0xdbadc61ed5f0460a7f18e51b2fb2614d9264a0e0": "0x22b1c8c1227a00000",
    "0xdbb6ac484027041642bbfd8d80f9d0c1cf33c1eb": "0x6c6b935b8bbd400000",
    "0xdbbcbb79bf479a42ad71dbcab77b5adfaa872c58": "0x5dc892aa1131c80000",
    "0xdbc1ce0e49b1a705d22e2037aec878ee0d75c703": "0xd8d726b7177a80000",
    "0xdbc1d0ee2bab531140de137722cd36bdb4e47194": "0xad78ebc5ac6200000",
    "0xdbc59ed88973dead310884223af49763c05030f1": "0x1158e460913d00000",
    "0xdbc66965e426ff1ac87ad6eb78c1d95271158f9f": "0xfc936392801c0000",
    "0xdbcbcd7a57ea9db2349b878af34b1ad642a7f1d1": "0xad78ebc5ac6200000",
    "0xdbd51cdf2c3bfacdff106221de2e19ad6d420414": "0x5f68e8131ecf800000",
    "0xdbd71efa4b93c889e76593de609c3b04cbafbe08": "0x1158e460913d00000",
    "0xdbf5f061a0f48e5e69618739a77d2ec19768d201": "0x83d6c7aab63600000",
    "0xdbf8b13967f55125272de0562536c450ba5655a0": "0x6ef578f06e0ccb0000",
    "0xdbfb1bb464b8a58e500d2ed8de972c45f5f1c0fb": "0x56bc75e2d631000000",
    "0xdc067ed3e12d711ed475f5156ef7e71a80d934b9": "0x205b4dfa1ee74780000",
    "0xdc087f9390fb9e976ac23ab689544a0942ec2021": "0x62a992e53a0af00000",
    "0xdc1eb9b6e64351f56424509645f83e79eee76cf4": "0xd8d726b7177a800000",
    "0xdc1f1979615f082140b8bb78c67b27a1942713b1": "0x340aad21b3b700000",
    "0xdc23b260fcc26e7d10f4bd044af794579460d9da": "0x1b1b6bd7af64c70000",
    "0xdc29119745d2337320da51e19100c948d980b915": "0x8ac7230489e800000",
    "0xdc2d15a69f6bb33b246aef40450751c2f6756ad2": "0x6c341080bd1fb00000",
    "0xdc3dae59ed0fe18b58511e6fe2fb69b219689423": "0x56bc75e2d63100000",
    "0xdc3f0e7672f71fe7525ba30b9755183a20b9166a": "0x2089cf57b5b3e968000",
    "0xdc4345d6812e870ae90c568c67d2c567cfb4f03c": "0x16b352da5e0ed300000",
    "0xdc44275b1715baea1b0345735a29ac42c9f51b4f": "0x3f19beb8dd1ab00000",
    "0xdc46c13325cd8edf0230d068896486f007bf4ef1": "0x487a9a304539440000",
    "0xdc51b2dc9d247a1d0e5bc36ca3156f7af21ff9f6": "0x3635c9adc5dea00000",
    "0xdc5305b4020a06b49d657c7ca34c35c91c5f2c56": "0x17df6c10dbeba970000",
    "0xdc57345b38e0f067c9a31d9deac5275a10949321": "0xad78ebc5ac6200000",
    "0xdc57477dafa42f705c7fe40eae9c81756e0225f1": "0x1b1b8128a7416e0000",
    "0xdc5f5ad663a6f263327d64cac9cb133d2c960597": "0x6c6b935b8bbd400000",
    "0xdc703a5f3794c84d6cb3544918cae14a35c3bd4f": "0x6449e84e47a8a80000",
    "0xdc738fb217cead2f69594c08170de1af10c419e3": "0x152d02c7e14af6800000",
    "0xdc76e85ba50b9b31ec1e2620bce6e7c8058c0eaf": "0x1158e460913d00000",
    "0xdc83b6fd0d512131204707eaf72ea0c8c9bef976": "0x6c6b935b8bbd400000",
    "0xdc8c2912f084a6d184aa73638513ccbc326e0102": "0x4633bc36cbc2dc0000",
    "0xdc911cf7dc5dd0813656670528e9338e67034786": "0x6c6b935b8bbd400000",
    "0xdcb03bfa6c1131234e56b7ea7c4f721487546b7a": "0x487a9a304539440000",
    "0xdcb64df43758c7cf974fa660484fbb718f8c67c1": "0x43c33c1937564800000",
    "0xdcc52d8f8d9fc742a8b82767f0555387c563efff": "0x1b1ae4d6e2ef500000",
    "0xdccb370ed68aa922283043ef7cad1b9d403fc34a": "0xd8d726b7177a800000",
    "0xdccca42045ec3e16508b603fd936e7fd7de5f36a": "0x11164759ffb320000",
    "0xdcd10c55bb854f754434f1219c2c9a98ace79f03": "0xd8d8583fa2d52f0000",
    "0xdcd5bca2005395b675fde5035659b26bfefc49ee": "0xaadec983fcff40000",
    "0xdcdbbd4e2604e40e1710cc6730289dccfad3892d": "0xf95dd2ec27cce00000",
    "0xdce30c31f3ca66721ecb213c809aab561d9b52e4": "0x6c6b935b8bbd400000",
    "0xdcf33965531380163168fc11f67e89c6f1bc178a": "0x122776853406b08000",
    "0xdcf6b657266e91a4dae6033ddac15332dd8d2b34": "0x5f68e8131ecf800000",
    "0xdcf9719be87c6f46756db4891db9b611d2469c50": "0x3635c9adc5dea00000",
    "0xdcfff3e8d23c2a34b56bd1b3bd45c79374432239": "0x10f0cf064dd59200000",
    "0xdd04eee74e0bf30c3f8d6c2c7f52e0519210df93": "0x4563918244f400000",
    "0xdd26b429fd43d84ec179825324bad5bfb916b360": "0x116bf95bc8432980000",
    "0xdd2a233adede66fe1126d6c16823b62a021feddb": "0x6c6b935b8bbd400000",
    "0xdd2bdfa917c1f310e6fa35aa8af16939c233cd7d": "0x15af1d78b58c400000",
    "0xdd35cfdbcb993395537aecc9f59085a8d5ddb6f5": "0x3635c9adc5dea00000",
    "0xdd47189a3e64397167f0620e484565b762bfbbf4": "0x6449e84e47a8a80000",
    "0xdd4dd6d36033b0636fcc8d0938609f4dd64f4a86": "0x340aad21b3b700000",
    "0xdd4f5fa2111db68f6bde3589b63029395b69a92d": "0x8963dd8c2c5e00000",
    "0xdd63042f25ed32884ad26e3ad959eb94ea36bf67": "0x484d7fde7d593f00000",
    "0xdd65f6e17163b5d203641f51cc7b24b00f02c8fb": "0xad78ebc5ac6200000",
    "0xdd6c062193eac23d2fdbf997d5063a346bb3b470": "0x1158e460913d00000",
    "0xdd7bcda65924aaa49b80984ae173750258b92847": "0x21e19e0c9bab2400000",
    "0xdd7ff441ba6ffe3671f3c0dabbff1823a5043370": "0x6c6b935b8bbd400000",
    "0xdd8254121a6e942fc90828f2431f511dad7f32e6": "0xa39b29e1f360e80000",
    "0xdd8af9e7765223f4446f44d3d509819a3d3db411": "0x21e19e0c9bab2400000",
    "0xdd95dbe30f1f1877c5dd7684aeef302ab6885192": "0x1c5d8d6eb3e32500000",
    "0xdd967c4c5f8ae47e266fb416aad1964ee3e7e8c3": "0x1a420db02bd7d580000",
    "0xdd9b485a3b1cd33a6a9c62f1e5bee92701856d25": "0xc3383ed031b7e8000",
    "0xdda371e600d30688d4710e088e02fdf2b9524d5f": "0x177224aa844c7200000",
    "0xdda4ed2a58a8dd20a73275347b580d71b95bf99a": "0x15a13cc201e4dc0000",
    "0xdda4ff7de491c687df4574dd1b17ff8f246ba3d1": "0x42684a41abfd8400000",
    "0xddab6b51a9030b40fb95cf0b748a059c2417bec7": "0x6c6b935b8bbd400000",
    "0xddab75fb2ff9fecb88f89476688e2b00e367ebf9": "0x41bad155e6512200000",
    "0xddabf13c3c8ea4e3d73d78ec717afafa430e5479": "0x8cf23f909c0fa000000",
    "0xddac312a9655426a9c0c9efa3fd82559ef4505bf": "0x15be6174e1912e0000",
    "0xddac6bf4bbdd7d597d9c686d0695593bedccc7fa": "0x2ee449550898e40000",
    "0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a": "0x21e19e0c9bab2400000",
    "0xddbddd1bbd38ffade0305d30f02028d92e9f3aa8": "0x6c6b935b8bbd400000",
    "0xddbee6f094eae63420b003fb4757142aea6cd0fd": "0x6c6b935b8bbd400000",
    "0xddd69c5b9bf5eb5a39cee7c3341a120d973fdb34": "0x6bc14b8f8e1b350000",
    "0xdddd7b9e6eab409b92263ac272da801b664f8a57": "0x69e10de76676d0800000",
    "0xdde670d01639667576a22dd05d3246d61f06e083": "0x1731790534df20000",
    "0xdde77a4740ba08e7f73fbe3a1674912931742eeb": "0x434fe4d4382f1d48000",
    "0xdde8f0c31b7415511dced1cd7d46323e4bd12232": "0x57473d05dabae80000",
    "0xdde969aef34ea87ac299b7597e292b4a0155cc8a": "0x1032f2594a01738000",
    "0xddf0cce1fe996d917635f00712f4052091dff9ea": "0x6c6b935b8bbd400000",
    "0xddf3ad76353810be6a89d731b787f6f17188612b": "0x43c33c1937564800000",
    "0xddf5810a0eb2fb2e32323bb2c99509ab320f24ac": "0x3ca5c66d9bc44300000",
    "0xddf95c1e99ce2f9f5698057c19d5c94027ee4a6e": "0x14542ba12a337c00000",
    "0xddfafdbc7c90f1320e54b98f374617fbd01d109f": "0xb98bc829a6f90000",
    "0xddfcca13f934f0cfbe231da13039d70475e6a1d0": "0x3638221660a5aa8000",
    "0xde027efbb38503226ed871099cb30bdb02af1335": "0x3635c9adc5dea00000",
    "0xde06d5ea777a4eb1475e605dbcbf43444e8037ea": "0xa968163f0a57b400000",
    "0xde07fb5b7a464e3ba7fbe09e9acb271af5338c58": "0x2b5e3af16b1880000",
    "0xde1121829c9a08284087a43fbd2fc1142a3233b4": "0x3635c9adc5dea00000",
    "0xde176b5284bcee3a838ba24f67fc7cbf67d78ef6": "0x209ce08c962b00000",
    "0xde212293f8f1d231fa10e609470d512cb8ffc512": "0x6c6b935b8bbd400000",
    "0xde30e49e5ab313214d2f01dcabce8940b81b1c76": "0xaadec983fcff40000",
    "0xde33d708a3b89e909eaf653b30fdc3a5d5ccb4b3": "0x99c88229fd4c20000",
    "0xde374299c1d07d79537385190f442ef9ca24061f": "0x73f75d1a085ba0000",
    "0xde42fcd24ce4239383304367595f068f0c610740": "0x2722a70f1a9a00000",
    "0xde50868eb7e3c71937ec73fa89dd8b9ee10d45aa": "0x3635c9adc5dea00000",
    "0xde55de0458f850b37e4d78a641dd2eb2dd8f38ce": "0xd8d726b7177a800000",
    "0xde5b005fe8daae8d1f05de3eda042066c6c4691c": "0x3ba1910bf341b00000",
    "0xde612d0724e84ea4a7feaa3d2142bd5ee82d3201": "0x1158e460913d00000",
    "0xde6d363106cc6238d2f092f0f0372136d1cd50c6": "0x121ea68c114e5100000",
    "0xde7dee220f0457a7187d56c1c41f2eb00ac56021": "0x2225f39c85052a0000",
    "0xde82cc8d4a1bb1d9434392965b3e80bad3c03d4f": "0x50186e75de97a60000",
    "0xde97f4330700b48c496d437c91ca1de9c4b01ba4": "0x9dcc0515b56e0c0000",
    "0xde9eff4c798811d968dccb460d9b069cf30278e0": "0x15af1d78b58c400000",
    "0xdeb1bc34d86d4a4dde2580d8beaf074eb0e1a244": "0x55a6e79ccd1d300000",
    "0xdeb2495d6aca7b2a6a2d138b6e1a42e2dc311fdd": "0x6c6b935b8bbd400000",
    "0xdeb97254474c0d2f5a7970dcdb2f52fb1098b896": "0x3635c9adc5dea00000",
    "0xdeb9a49a43873020f0759185e20bbb4cf381bb8f": "0xb78edb0bf2e5e0000",
    "0xdebbdd831e0f20ae6e378252decdf92f7cf0c658": "0x6c6b935b8bbd400000",
    "0xdec3eec2640a752c466e2b7e7ee685afe9ac41f4": "0x47c99753596b288000",
    "0xdec82373ade8ebcf2acb6f8bc2414dd7abb70d77": "0xad78ebc5ac6200000",
    "0xdec8a1a898f1b895d8301fe64ab3ad5de941f689": "0x2ab4f67e8a730f8000",
    "0xdec99e972fca7177508c8e1a47ac22d768acab7c": "0x6c6b935b8bbd400000",
    "0xded877378407b94e781c4ef4af7cfc5bc220b516": "0x143179d86911020000",
    "0xdee942d5caf5fac11421d86b010b458e5c392990": "0xd8d726b7177a800000",
    "0xdeee2689fa9006b59cf285237de53b3a7fd01438": "0x186579f29e20250000",
    "0xdefddfd59b8d2c154eecf5c7c167bf0ba2905d3e": "0x512cb5e2647420000",
    "0xdefe9141f4704599159d7b223de42bffd80496b3": "0x56bc75e2d63100000",
    "0xdf098f5e4e3dffa51af237bda8652c4f73ed9ca6": "0x1b36a6444a3e180000",
    "0xdf0d08617bd252a911df8bd41a39b83ddf809673": "0x21e19e0c9bab2400000",
    "0xdf0ff1f3d27a8ec9fb8f6b0cb254a63bba8224a5": "0xecc5202945d0020000",
    "0xdf1fa2e20e31985ebe2c0f0c93b54c0fb67a264b": "0xad78ebc5ac6200000",
    "0xdf211cd21288d6c56fae66c3ff54625dd4b15427": "0x8786cd764e1f2c0000",
    "0xdf236bf6abf4f3293795bf0c28718f93e3b1b36b": "0x487a9a304539440000",
    "0xdf31025f5649d2c6eea41ed3bdd3471a790f759a": "0x1158e460913d00000",
    "0xdf37c22e603aedb60a627253c47d8ba866f6d972": "0x5150ae84a8cdf000000",
    "0xdf3b72c5bd71d4814e88a62321a93d4011e3578b": "0xd8d726b7177a800000",
    "0xdf3f57b8ee6434d047223def74b20f63f9e4f955": "0xd9462c6cb4b5a0000",
    "0xdf44c47fc303ac76e74f97194cca67b5bb3c023f": "0x2009c5c8bf6fdc0000",
    "0xdf47a61b72535193c561cccc75c3f3ce0804a20e": "0x15935c0b4e3d780000",
    "0xdf47a8ef95f2f49f8e6f58184154145d11f72797": "0x678a932062e4180000",
    "0xdf53003346d65c5e7a646bc034f2b7d32fcbe56a": "0x6c6b935b8bbd400000",
    "0xdf57353aaff2aadb0a04f9014e8da7884e86589c": "0x84886a66e4fb00000",
    "0xdf60f18c812a11ed4e2776e7a80ecf5e5305b3d6": "0x30ca024f987b900000",
    "0xdf6485c4297ac152b289b19dde32c77ec417f47d": "0x3635c9adc5dea00000",
    "0xdf660a91dab9f730f6190d50c8390561500756ca": "0x6c6b935b8bbd400000",
    "0xdf6ed6006a6abe886ed33d95a4de28fc12183927": "0x3154c9729d05780000",
    "0xdf8510793eee811c2dab1c93c6f4473f30fbef5b": "0x3635c9adc5dea00000",
    "0xdf8d48b1eb07b3c217790e6c2df04dc319e7e848": "0x1b1ae4d6e2ef500000",
    "0xdfa6b8b8ad3184e357da282951d79161cfb089bc": "0x15af1d78b58c400000",
    "0xdfaf31e622c03d9e18a0ddb8be60fbe3e661be0a": "0x21e171a3ec9f72c0000",
    "0xdfb1626ef48a1d7d7552a5e0298f1fc23a3b482d": "0x5ce895dd949efa0000",
    "0xdfb4d4ade52fcc818acc7a2c6bb2b00224658f78": "0x1a420db02bd7d580000",
    "0xdfbd4232c17c407a980db87ffbcda03630e5c459": "0x1dfc7f924923530000",
    "0xdfcbdf09454e1a5e4a40d3eef7c5cf1cd3de9486": "0xd8d726b7177a800000",
    "0xdfdbcec1014b96da2158ca513e9c8d3b9af1c3d0": "0x6c6b935b8bbd400000",
    "0xdfded2574b27d1613a7d98b715159b0d00baab28": "0x43c33c1937564800000",
    "0xdfdf43393c649caebe1bb18059decb39f09fb4e8": "0x15af1d78b58c400000",
    "0xdfe3c52a92c30396a4e33a50170dc900fcf8c9cf": "0x2b5e3af16b1880000",
    "0xdfe549fe8430e552c6d07cc3b92ccd43b12fb50f": "0x48875eaf6562a0000",
    "0xdfe929a61c1b38eddbe82c25c2d6753cb1e12d68": "0x15d1cf4176aeba0000",
    "0xdff1b220de3d8e9ca4c1b5be34a799bcded4f61c": "0x14e4e353ea39420000",
    "0xdff4007931786593b229efe5959f3a4e219e51af": "0x10afc1ade3b4ed40000",
    "0xdffcea5421ec15900c6ecfc777184e140e209e24": "0x115473824344e0000",
    "0xe001aba77c02e172086c1950fffbcaa30b83488f": "0x6acb3df27e1f880000",
    "0xe00484788db50fc6a48e379d123e508b0f6e5ab1": "0x3635c9adc5dea00000",
    "0xe0060462c47ff9679baef07159cae08c29f274a9": "0x6c6b935b8bbd400000",
    "0xe00d153b10369143f97f54b8d4ca229eb3e8f324": "0x83d6c7aab63600000",
    "0xe012db453827a58e16c1365608d36ed658720507": "0x6c6b935b8bbd400000",
    "0xe01547ba42fcafaf93938becf7699f74290af74f": "0x6c6b935b8bbd400000",
    "0xe016dc138e25815b90be3fe9eee8ffb2e105624f": "0x1b1ae4d6e2ef500000",
    "0xe01859f242f1a0ec602fa8a3b0b57640ec89075e": "0x1e162c177be5cc0000",
    "0xe020e86362b487752836a6de0bc02cd8d89a8b6a": "0x14542ba12a337c00000",
    "0xe023f09b2887612c7c9cf1988e3a3a602b3394c9": "0x6c6b935b8bbd400000",
    "0xe0272213e8d2fd3e96bd6217b24b4ba01b617079": "0x1158e460913d00000",
    "0xe02b74a47628be315b1f76b315054ad44ae9716f": "0xd8d726b7177a800000",
    "0xe03220c697bcd28f26ef0b74404a8beb06b2ba7b": "0x1b1ae4d6e2ef5000000",
    "0xe0352fdf819ba265f14c06a6315c4ac1fe131b2e": "0x3635c9adc5dea00000",
    "0xe0388aeddd3fe2ad56f85748e80e710a34b7c92e": "0x1b1ae4d6e2ef500000",
    "0xe03c00d00388ecbf4f263d0ac778bb41a57a40d9": "0x3636c9796436740000",
    "0xe04920dc6ecc1d6ecc084f88aa0af5db97bf893a": "0x9ddc1e3b901180000",
    "0xe04972a83ca4112bc871c72d4ae1616c2f0728db": "0xe81c77f29a32f0000",
    "0xe04ff5e5a7e2af995d8857ce0290b53a2b0eda5d": "0x3635c9adc5dea00000",
    "0xe05029aceb0778675bef1741ab2cd2931ef7c84b": "0x10f0dbae61009528000",
    "0xe056bf3ff41c26256fef51716612b9d39ade999c": "0x56be757a12e0a8000",
    "0xe061a4f2fc77b296d19ada238e49a5cb8ecbfa70": "0xd8d726b7177a800000",
    "0xe0663e8cd66792a641f56e5003660147880f018e": "0x6c6b935b8bbd400000",
    "0xe0668fa82c14d6e8d93a53113ef2862fa81581bc": "0x2f2f39fc6c54000000",
    "0xe069c0173352b10bf6834719db5bed01adf97bbc": "0x10634f8e5323b0000",
    "0xe06c29a81517e0d487b67fb0b6aabc4f57368388": "0x15be6174e1912e0000",
    "0xe06cb6294704eea7437c2fc3d30773b7bf38889a": "0x116dc3a8994b30000",
    "0xe07137ae0d116d033533c4eab496f8a9fb09569c": "0x4be4e7267b6ae00000",
    "0xe076db30ab486f79194ebbc45d8fab9a9242f654": "0x106607e3494baa00000",
    "0xe07ebbc7f4da416e42c8d4f842aba16233c12580": "0x6c6b935b8bbd400000",
    "0xe081ca1f4882db6043d5a9190703fde0ab3bf56d": "0x15af1d78b58c400000",
    "0xe083d34863e0e17f926b7928edff317e998e9c4b": "0x15af1d78b58c400000",
    "0xe08b9aba6bd9d28bc2056779d2fbf0f2855a3d9d": "0x6c6b935b8bbd400000",
    "0xe08bc29c2b48b169ff2bdc16714c586e6cb85ccf": "0x1158e460913d00000",
    "0xe08c60313106e3f9334fe6f7e7624d211130c077": "0x22b1c8c1227a00000",
    "0xe09c68e61998d9c81b14e4ee802ba7adf6d74cdb": "0xd8d726b7177a800000",
    "0xe09fea755aee1a44c0a89f03b5deb762ba33006f": "0x3ba289bc944ff70000",
    "0xe0a254ac09b9725bebc8e460431dd0732ebcabbf": "0x14542ba12a337c00000",
    "0xe0aa69365555b73f282333d1e30c1bbd072854e8": "0x17b7883c06916600000",
    "0xe0bad98eee9698dbf6d76085b7923de5754e906d": "0x90d972f32323c0000",
    "0xe0c4ab9072b4e6e3654a49f8a8db026a4b3386a9": "0x6c6b935b8bbd400000",
    "0xe0ce80a461b648a501fd0b824690c8868b0e4de8": "0x1b1ae4d6e2ef500000",
    "0xe0cf698a053327ebd16b7d7700092fe2e8542446": "0x52a34cbb61f578000",
    "0xe0d231e144ec9107386c7c9b02f1702ceaa4f700": "0x10f0dbae61009528000",
    "0xe0d76b7166b1f3a12b4091ee2b29de8caa7d07db": "0x6c6b935b8bbd400000",
    "0xe0e0b2e29dde73af75987ee4446c829a189c95bc": "0x813ca56906d340000",
    "0xe0e978753d982f7f9d1d238a18bd4889aefe451b": "0x20dd68aaf3289100000",
    "0xe0f372347c96b55f7d4306034beb83266fd90966": "0x15af1d78b58c400000",
    "0xe0f903c1e48ac421ab48528f3d4a2648080fe043": "0x3708baed3d68900000",
    "0xe0ff0bd9154439c4a5b7233e291d7d868af53f33": "0x1579216a51bbfb0000",
    "0xe10ac19c546fc2547c61c139f5d1f45a6666d5b0": "0x102da6fd0f73a3c0000",
    "0xe10c540088113fa6ec00b4b2c8824f8796e96ec4": "0x320f4509ab1ec7c00000",
    "0xe1173a247d29d8238df0922f4df25a05f2af77c3": "0x878c95d560f30478000",
    "0xe1203eb3a723e99c2220117ca6afeb66fa424f61": "0x200ef929e3256fe0000",
    "0xe131f87efc5ef07e43f0f2f4a747b551d750d9e6": "0x43c25e0dcc1bd1c0000",
    "0xe1334e998379dfe983177062791b90f80ee22d8d": "0x1b1ae4d6e2ef500000",
    "0xe13540ecee11b212e8b775dc8e71f374aae9b3f8": "0x6c6b935b8bbd400000",
    "0xe13b3d2bbfdcbc8772a23315724c1425167c5688": "0x37f379141ed04b8000",
    "0xe1443dbd95cc41237f613a48456988a04f683282": "0xd8d8583fa2d52f0000",
    "0xe14617f6022501e97e7b3e2d8836aa61f0ff2dba": "0xad78ebc5ac6200000",
    "0xe149b5726caf6d5eb5bf2acc41d4e2dc328de182": "0x692ae8897081d00000",
    "0xe154daeadb545838cbc6aa0c55751902f528682a": "0x10afc1ade3b4ed40000",
    "0xe16ce35961cd74bd590d04c4ad4a1989e05691c6": "0x7ea28327577080000",
    "0xe172dfc8f80cd1f8cd8539dc26082014f5a8e3e8": "0xa2a15d09519be00000",
    "0xe177e0c201d335ba3956929c571588b51c5223ae": "0x6c6b935b8bbd400000",
    "0xe17812f66c5e65941e186c46922b6e7b2f0eeb46": "0x62a992e53a0af00000",
    "0xe180de9e86f57bafacd7904f9826b6b4b26337a3": "0x2d041d705a2c600000",
    "0xe192489b85a982c1883246d915b229cb13207f38": "0x10f0cf064dd59200000",
    "0xe1953c6e975814c571311c34c0f6a99cdf48ab82": "0x2b5e3af16b1880000",
    "0xe1ae029b17e373cde3de5a9152201a14cac4e119": "0x56b55ae58ca400000",
    "0xe1b2aca154b8e0766c4eba30bc10c7f35036f368": "0x115473824344e0000",
    "0xe1b39b88d9900dbc4a6cdc481e1060080a8aec3c": "0x6c6b935b8bbd400000",
    "0xe1b63201fae1f129f95c7a116bd9dde5159c6cda": "0x4d60573a2f0c9ef0000",
    "0xe1bfaa5a45c504428923c4a61192a55b1400b45d": "0x90f534608a72880000",
    "0xe1c607c0a8a060da8f02a8eb38a013ea8cda5b8c": "0x2ba39e82ed5d740000",
    "0xe1cb83ec5eb6f1eeb85e99b2fc63812fde957184": "0x43c33c1937564800000",
    "0xe1d91b0954cede221d6f24c7985fc59965fb98b8": "0x6c6b935b8bbd400000",
    "0xe1dfb5cc890ee8b2877e885d267c256187d019e6": "0x56bc75e2d63100000",
    "0xe1e8c50b80a352b240ce7342bbfdf5690cc8cb14": "0x155bd9307f9fe80000",
    "0xe1f63ebbc62c7b7444040eb99623964f7667b376": "0x1158e460913d00000",
    "0xe206fb7324e9deb79e19903496d6961b9be56603": "0x56bc75e2d63100000",
    "0xe207578e1f4ddb8ff6d5867b39582d71b9812ac5": "0xd255d112e103a00000",
    "0xe208812a684098f3da4efe6aba256256adfe3fe6": "0x6c6b935b8bbd400000",
    "0xe20954d0f4108c82d4dcb2148d26bbd924f6dd24": "0x21e19e0c9bab2400000",
    "0xe20bb9f3966419e14bbbaaaa6789e92496cfa479": "0xbbd825030752760000",
    "0xe20d1bcb71286dc7128a9fc7c6ed7f733892eef5": "0x3664f8e7c24af40000",
    "0xe2191215983f33fd33e22cd4a2490054da53fddc": "0xdb44e049bb2c0000",
    "0xe2198c8ca1b399f7521561fd5384a7132fba486b": "0x3708baed3d68900000",
    "0xe21c778ef2a0d7f751ea8c074d1f812243863e4e": "0x11fc70e2c8c8ae18000",
    "0xe229e746a83f2ce253b0b03eb1472411b57e5700": "0x1369fb96128ac480000",
    "0xe22b20c77894463baf774cc256d5bddbbf7ddd09": "0x3635c9adc5dea00000",
    "0xe230fe1bff03186d0219f15d4c481b7d59be286a": "0x1fd741e8088970000",
    "0xe237baa4dbc9926e32a3d85d1264402d54db012f": "0x6c6b935b8bbd400000",
    "0xe24109be2f513d87498e926a286499754f9ed49e": "0x300ea8ad1f27ca0000",
    "0xe246683cc99db7c4a52bcbacaab0b32f6bfc93d7": "0x6c6b935b8bbd400000",
    "0xe25a167b031e84616d0f013f31bda95dcc6350b9": "0x23c757072b8dd000000",
    "0xe25b9f76b8ad023f057eb11ad94257a0862e4e8c": "0x6c6b935b8bbd400000",
    "0xe26657f0ed201ea2392c9222b80a7003608ddf30": "0x22b1c8c1227a00000",
    "0xe26bf322774e18288769d67e3107deb7447707b8": "0x6c6b935b8bbd400000",
    "0xe2728a3e8c2aaac983d05dc6877374a8f446eee9": "0xab640391201300000",
    "0xe28b062259e96eeb3c8d4104943f9eb325893cf5": "0x487a9a304539440000",
    "0xe28dbc8efd5e416a762ec0e018864bb9aa83287b": "0x531f200ab3e030a8000",
    "0xe2904b1aefa056398b6234cb35811288d736db67": "0x22b1c8c1227a00000",
    "0xe29d8ae452dcf3b6ac645e630409385551faae0a": "0x45a0da4adf5420000",
    "0xe2bbf84641e3541f6c33e6ed683a635a70bde2ec": "0x1b413cfcbf59b78000",
    "0xe2cf360aa2329eb79d2bf7ca04a27a17c532e4d8": "0x58788cb94b1d80000",
    "0xe2df23f6ea04becf4ab701748dc0963184555cdb": "0x6c6b935b8bbd400000",
    "0xe2e15c60dd381e3a4be25071ab249a4c5c5264da": "0x7f6bc49b81b5370000",
    "0xe2e26e4e1dcf30d048cc6ecf9d51ec1205a4e926": "0xd8d726b7177a800000",
    "0xe2ee691f237ee6529b6557f2fcdd3dcf0c59ec63": "0x127729c14687c200000",
    "0xe2efa5fca79538ce6068bf31d2c516d4d53c08e5": "0x71cc408df63400000",
    "0xe2efd0a9bc407ece03d67e8ec8e9d283f48d2a49": "0x299b33bf9c584e00000",
    "0xe2f40d358f5e3fe7463ec70480bd2ed398a7063b": "0x1158e460913d00000",
    "0xe2f9383d5810ea7b43182b8704b62b27f5925d39": "0x15af1d78b58c400000",
    "0xe2ff9ee4b6ecc14141cc74ca52a9e7a2ee14d908": "0x4be4e7267b6ae00000",
    "0xe30212b2011bb56bdbf1bc35690f3a4e0fd905ea": "0x1b2df9d219f57980000",
    "0xe303167f3d4960fe881b32800a2b4aeff1b088d4": "0x6c6b935b8bbd400000",
    "0xe304a32f05a83762744a9542976ff9b723fa31ea": "0x5572f240a346200000",
    "0xe308435204793764f5fcbe65eb510f5a744a655a": "0xad78ebc5ac6200000",
    "0xe309974ce39d60aadf2e69673251bf0e04760a10": "0xdc55fdb17647b0000",
    "0xe31b4eef184c24ab098e36c802714bd4743dd0d4": "0xad78ebc5ac6200000",
    "0xe321bb4a946adafdade4571fb15c0043d39ee35f": "0x556475382b4c9e0000",
    "0xe3263ce8af6db3e467584502ed7109125eae22a5": "0x6c6b935b8bbd400000",
    "0xe32b1c4725a1875449e98f970eb3e54062d15800": "0xad78ebc5ac6200000",
    "0xe32f95766d57b5cd4b173289d6876f9e64558194": "0x56bc75e2d63100000",
    "0xe33840d8bca7da98a6f3d096d83de78b70b71ef8": "0x6c6b935b8bbd400000",
    "0xe338e859fe2e8c15554848b75caecda877a0e832": "0x61acff81a78ad40000",
    "0xe33d980220fab259af6a1f4b38cf0ef3c6e2ea1a": "0x6c6b935b8bbd400000",
    "0xe33df4ce80ccb62a76b12bcdfcecc46289973aa9": "0x14542ba12a337c00000",
    "0xe33ff987541dde5cdee0a8a96dcc3f33c3f24cc2": "0x2a5a058fc295ed000000",
    "0xe3410bb7557cf91d79fa69d0dfea0aa075402651": "0x6c6b935b8bbd400000",
    "0xe341642d40d2afce2e9107c67079ac7a2660086c": "0x15af1d78b58c400000",
    "0xe35453eef2cc3c7a044d0ac134ba615908fa82ee": "0x7ff1ccb7561df0000",
    "0xe36a8ea87f1e99e8a2dc1b2608d166667c9dfa01": "0x56bc75e2d63100000",
    "0xe3712701619ca7623c55db3a0ad30e867db0168b": "0x1158e460913d00000",
    "0xe37f5fdc6ec97d2f866a1cfd0d3a4da4387b22b5": "0x21e19e0c9bab2400000",
    "0xe3878f91ca86053fced5444686a330e09cc388fb": "0xa844a7424d9c80000",
    "0xe38b91b35190b6d9deed021c30af094b953fdcaa": "0x1ceaf795b6b860000",
    "0xe38ef28a5ed984a7db24a1ae782dfb87f397dfc6": "0x7c0860e5a80dc0000",
    "0xe3925509c8d0b2a6738c5f6a72f35314491248ce": "0x36e9a8669a44768000",
    "0xe3933d61b77dcdc716407f8250bc91e4ffaeb09d": "0x1256986c95891c200000",
    "0xe3951de5aefaf0458768d774c254f7157735e505": "0x56c95de8e8ca1d0000",
    "0xe399c81a1d701b44f0b66f3399e66b275aaaf8c1": "0x3635c9adc5dea00000",
    "0xe39b11a8ab1ff5e22e5ae6517214f73c5b9b55dc": "0x6c6b935b8bbd400000",
    "0xe39e46e15d22ce56e0c32f1877b7d1a264cf94f3": "0x43c33c1937564800000",
    "0xe3a4621b66004588e31206f718cb00a319889cf0": "0x6c6b935b8bbd400000",
    "0xe3a4f83c39f85af9c8b1b312bfe5fc3423afa634": "0x18d993f34aef10000",
    "0xe3a89a1927cc4e2d43fbcda1e414d324a7d9e057": "0xb23e2a936dec60000",
    "0xe3ab3ca9b870e3f548517306bba4de2591afafc2": "0x410e34aecc8cd30000",
    "0xe3b3d2c9bf570be6a2f72adca1862c310936a43c": "0x56d2aa3a5c09a0000",
    "0xe3c0c128327a9ad80148139e269773428e638cb0": "0x6c6b935b8bbd400000",
    "0xe3c812737ac606baf7522ad817428a36050e7a34": "0x692ae8897081d00000",
    "0xe3cffe239c64e7e20388e622117391301b298696": "0x1b1ae4d6e2ef500000",
    "0xe3d3eaa299887865569e88be219be507189be1c9": "0x18ba6fa92e93160000",
    "0xe3d8bf4efe84b1616d1b89e427ddc6c8830685ae": "0x6c6b935b8bbd400000",
    "0xe3d915eda3b825d6ee4af9328d32ac18ada35497": "0x1b1ae4d6e2ef500000",
    "0xe3da4f3240844c9b6323b4996921207122454399": "0x27190a952df4be58000",
    "0xe3eb2c0a132a524f72ccc0d60fee8b41685d39e2": "0x6acb3df27e1f880000",
    "0xe3ec18a74ed43855409a26ade7830de8e42685ef": "0x11164759ffb320000",
    "0xe3ece1f632711d13bfffa1f8f6840871ee58fb27": "0xd8d726b7177a800000",
    "0xe3f80b40fb83fb97bb0d5230af4f6ed59b1c7cc8": "0x487a9a304539440000",
    "0xe3ffb02cb7d9ea5243701689afd5d417d7ed2ece": "0x43a77aabd00780000",
    "0xe400d651bb3f2d23d5f849e6f92d9c5795c43a8a": "0x90f534608a72880000",
    "0xe406f5dd72cab66d8a6ecbd6bfb494a7b6b09afe": "0x56bc75e2d63100000",
    "0xe408aa99835307eea4a6c5eb801fe694117f707d": "0x1b1ae4d6e2ef500000",
    "0xe408fceaa1b98f3c640f48fcba39f056066d6308": "0x21e19e0c9bab2400000",
    "0xe40a7c82e157540a0b00901dbb86c716e1a062da": "0x2b31d2425f6740000",
    "0xe41aea250b877d423a63ba2bce2f3a61c0248d56": "0xe18398e7601900000",
    "0xe430c0024fdbf73a82e21fccf8cbd09138421c21": "0xd8d726b7177a800000",
    "0xe4324912d64ea3aef76b3c2ff9df82c7e13ae991": "0x6c6b935b8bbd400000",
    "0xe4368bc1420b35efda95fafbc73090521916aa34": "0xd8d726b7177a800000",
    "0xe437acbe0f6227b0e36f36e4bcf7cf613335fb68": "0xad78ebc5ac6200000",
    "0xe44b7264dd836bee8e87970340ed2b9aed8ed0a5": "0x138e7faa01a803a0000",
    "0xe44ea51063405154aae736be2bf1ee3b9be639ae": "0xd8d726b7177a800000",
    "0xe4625501f52b7af52b19ed612e9d54fdd006b492": "0xb5a905a56ddd00000",
    "0xe4715956f52f15306ee9506bf82bccc406b3895e": "0xee79d4f48c5000000",
    "0xe47fbaed99fc209962604ebd20e240f74f4591f1": "0x6c6b935b8bbd400000",
    "0xe482d255ede56b04c3e8df151f56e9ca62aaa8c2": "0x1b1ae4d6e2ef500000",
    "0xe48e65125421880d42bdf1018ab9778d96928f3f": "0xe3aeb5737240a00000",
    "0xe492818aa684e5a676561b725d42f3cc56ae5198": "0x2b5e3af16b18800000",
    "0xe49936a92a8ccf710eaac342bc454b9b14ebecb1": "0x6c6b935b8bbd400000",
    "0xe49af4f34adaa2330b0e49dc74ec18ab2f92f827": "0x6c6b935b8bbd400000",
    "0xe49ba0cd96816c4607773cf8a5970bb5bc16a1e6": "0x5a87e7d7f5f6580000",
    "0xe4a47e3933246c3fd62979a1ea19ffdf8c72ef37": "0x809b383ea7d7e8000",
    "0xe4b6ae22c7735f5b89f34dd77ad0975f0acc9181": "0x3635c9adc5dea00000",
    "0xe4ca0a5238564dfc91e8bf22bade2901619a1cd4": "0x3635c9adc5dea00000",
    "0xe4cafb727fb5c6b70bb27533b8a9ccc9ef6888e1": "0x10497bf4af4caf8000",
    "0xe4dc22ed595bf0a337c01e03cc6be744255fc9e8": "0xa5aa85009e39c0000",
    "0xe4fb26d1ca1eecba3d8298d9d148119ac2bbf580": "0x15af1d78b58c400000",
    "0xe4fc13cfcbac1b17ce7783acd423a845943f6b3a": "0x1158e460913d00000",
    "0xe50b464ac9de35a5618b7cbf254674182b81b97e": "0xde42ee1544dd900000",
    "0xe5102c3b711b810344197419b1cd8a7059f13e32": "0x1043528d0984698000",
    "0xe510d6797fba3d6693835a844ea2ad540691971b": "0x3ae39d47383e8740000",
    "0xe51421f8ee2210c71ed870fe618276c8954afbe9": "0x487a9a304539440000",
    "0xe51eb87e7fb7311f5228c479b48ec9878831ac4c": "0x6c6b935b8bbd400000",
    "0xe5215631b14248d45a255296bed1fbfa0330ff35": "0x4703e6eb5291b80000",
    "0xe528a0e5a267d667e9393a6584e19b34dc9be973": "0x12f939c99edab800000",
    "0xe53425d8df1f11c341ff58ae5f1438abf1ca53cf": "0x1174a5cdf88bc80000",
    "0xe53c68796212033e4e6f9cff56e19c461eb454f9": "0x3635c9adc5dea00000",
    "0xe54102534de8f23effb093b31242ad3b233facfd": "0xd8d726b7177a800000",
    "0xe545ee84ea48e564161e9482d59bcf406a602ca2": "0x6449e84e47a8a80000",
    "0xe5481a7fed42b901bbed20789bd4ade50d5f83b9": "0x6c6b935b8bbd400000",
    "0xe559b5fd337b9c5572a9bf9e0f2521f7d446dbe4": "0xad78ebc5ac6200000",
    "0xe55c80520a1b0f755b9a2cd3ce214f7625653e8a": "0x6c6b935b8bbd400000",
    "0xe56d431324c92911a1749df292709c14b77a65cd": "0x1bc85dc2a89bb200000",
    "0xe57d2995b0ebdf3f3ca6c015eb04260dbb98b7c6": "0x6c6b935b8bbd400000",
    "0xe587b16abc8a74081e3613e14342c03375bf0847": "0x6c6b935b8bbd400000",
    "0xe589fa76984db5ec4004b46ee8a59492c30744ce": "0x97c9ce4cf6d5c00000",
    "0xe58dd23238ee6ea7c2138d385df500c325f376be": "0x62a992e53a0af00000",
    "0xe5953fea497104ef9ad2d4e5841c271f073519c2": "0x2629f66e0c53000000",
    "0xe5968797468ef767101b761d431fce14abffdbb4": "0x1b3d969fa411ca00000",
    "0xe597f083a469c4591c3d2b1d2c772787befe27b2": "0xf2dc7d47f15600000",
    "0xe59b3bd300893f97233ef947c46f7217e392f7e9": "0x3635c9adc5dea00000",
    "0xe5a365343cc4eb1e770368e1f1144a77b832d7e0": "0x1158e460913d00000",
    "0xe5a3d7eb13b15c100177236d1beb30d17ee15420": "0x6c6b935b8bbd400000",
    "0xe5aa0b833bb916dc19a8dd683f0ede241d988eba": "0xa2a15d09519be00000",
    "0xe5b7af146986c0ff8f85d22e6cc334077d84e824": "0x6c6b935b8bbd400000",
    "0xe5b826196c0e1bc1119b021cf6d259a610c99670": "0xad78ebc5ac6200000",
    "0xe5b96fc9ac03d448c1613ac91d15978145dbdfd1": "0xad78ebc5ac6200000",
    "0xe5b980d28eece2c06fca6c9473068b37d4a6d6e9": "0x25afd68cac2b900000",
    "0xe5bab4f0afd8a9d1a381b45761aa18f3d3cce105": "0x51bfd7c13878d10000",
    "0xe5bcc88c3b256f6ed5fe550e4a18198b943356ad": "0x6c6b935b8bbd400000",
    "0xe5bdf34f4ccc483e4ca530cc7cf2bb18febe92b3": "0x6d835a10bbcd20000",
    "0xe5dc9349cb52e161196122cf87a38936e2c57f34": "0x6c6b935b8bbd400000",
    "0xe5e33800a1b2e96bde1031630a959aa007f26e51": "0x487a9a304539440000",
    "0xe5e37e19408f2cfbec83349dd48153a4a795a08f": "0xe3aeb5737240a00000",
    "0xe5edc73e626f5d3441a45539b5f7a398c593edf6": "0x2ee449550898e40000",
    "0xe5edf8123f2403ce1a0299becf7aac744d075f23": "0xada55474b81340000",
    "0xe5f8ef6d970636b0dcaa4f200ffdc9e75af1741c": "0x6c6b935b8bbd400000",
    "0xe5fb31a5caee6a96de393bdbf89fbe65fe125bb3": "0x3635c9adc5dea00000",
    "0xe5fbe34984b637196f331c679d0c0c47d83410e1": "0x6c6c44fe47ec050000",
    "0xe60955dc0bc156f6c41849f6bd776ba44b0ef0a1": "0x10431627a0933b0000",
    "0xe60a55f2df996dc3aedb696c08dde039b2641de8": "0x6c6b935b8bbd400000",
    "0xe6115b13f9795f7e956502d5074567dab945ce6b": "0x152d02c7e14af6800000",
    "0xe61f280915c774a31d223cf80c069266e5adf19b": "0x2fb474098f67c00000",
    "0xe62f98650712eb158753d82972b8e99ca3f61877": "0x6c6b935b8bbd400000",
    "0xe62f9d7c64e8e2635aeb883dd73ba684ee7c1079": "0x1b1ae4d6e2ef5000000",
    "0xe63e787414b9048478a50733359ecdd7e3647aa6": "0x55a6e79ccd1d300000",
    "0xe646665872e40b0d7aa2ff82729caaba5bc3e89e": "0x15af1d78b58c400000",
    "0xe64ef012658d54f8e8609c4e9023c09fe865c83b": "0x18493fba64ef00000",
    "0xe64f6e1d6401b56c076b64a1b0867d0b2f310d4e": "0x2cbad71c53ae50000",
    "0xe667f652f957c28c0e66d0b63417c80c8c9db878": "0x209d922f5259c50000",
    "0xe677c31fd9cb720075dca49f1abccd59ec33f734": "0x1a6d6beb1d42ee00000",
    "0xe67c2c1665c88338688187629f49e99b60b2d3ba": "0xad78ebc5ac6200000",
    "0xe69a6cdb3a8a7db8e1f30c8b84cd73bae02bc0f8": "0x394fdc2e452f6718000",
    "0xe69d1c378b771e0feff051db69d966ac6779f4ed": "0x1dfa6aaa1497040000",
    "0xe69fcc26ed225f7b2e379834c524d70c1735e5bc": "0x6c6b935b8bbd400000",
    "0xe6a3010f0201bc94ff67a2f699dfc206f9e76742": "0x2fa7cbf66464980000",
    "0xe6a6f6dd6f70a456f4ec15ef7ad5e5dbb68bd7dc": "0xad78ebc5ac6200000",
    "0xe6b20f980ad853ad04cbfc887ce6601c6be0b24c": "0xd8d726b7177a800000",
    "0xe6b3ac3f5d4da5a8857d0b3f30fc4b2b692b77d7": "0x4f2591f896a6500000",
    "0xe6b9545f7ed086e552924639f9a9edbbd5540b3e": "0xcbd47b6eaa8cc00000",
    "0xe6bcd30a8fa138c5d9e5f6c7d2da806992812dcd": "0x370ea0d47cf61a800000",
    "0xe6c81ffcecb47ecdc55c0b71e4855f3e5e97fc1e": "0x121ea68c114e510000",
    "0xe6cb260b716d4c0ab726eeeb07c8707204e276ae": "0x3635c9adc5dea00000",
    "0xe6cb3f3124c9c9cc3834b1274bc3336456a38bac": "0x172b1de0a213ff0000",
    "0xe6d22209ffd0b87509ade3a8e2ef429879cb89b5": "0x3a7aa9e1899ca300000",
    "0xe6d49f86c228f47367a35e886caacb271e539429": "0x165ec09da7a1980000",
    "0xe6e621eaab01f20ef0836b7cad47464cb5fd3c96": "0x11219342afa24b0000",
    "0xe6e886317b6a66a5b4f81bf164c538c264351765": "0x6c6b935b8bbd400000",
    "0xe6e9a39d750fe994394eb68286e5ea62a6997882": "0x2086ac351052600000",
    "0xe6ec5cf0c49b9c317e1e706315ef9eb7c0bf11a7": "0x3a469f3467e8ec00000",
    "0xe6f5eb649afb99599c414b27a9c9c855357fa878": "0x90f534608a72880000",
    "0xe6fe0afb9dcedd37b2e22c451ba6feab67348033": "0x21e19e0c9bab2400000",
    "0xe710dcd09b8101f9437bd97db90a73ef993d0bf4": "0x14ee36c05ac2520000",
    "0xe727e67ef911b81f6cf9c73fcbfebc2b02b5bfc6": "0x6c6b935b8bbd400000",
    "0xe72e1d335cc29a96b9b1c02f003a16d971e90b9d": "0x55a6e79ccd1d300000",
    "0xe7311c9533f0092c7248c9739b5b2c864a34b1ce": "0x97f97d6cc26dfe0000",
    "0xe73bfeada6f0fd016fbc843ebcf6e370a65be70c": "0x6acb3df27e1f880000",
    "0xe73ccf436725c151e255ccf5210cfce5a43f13e3": "0x1154e53217ddb0000",
    "0xe742b1e6069a8ffc3c4767235defb0d49cbed222": "0x2b5e3af16b18800000",
    "0xe74608f506866ada6bfbfdf20fea440be76989ef": "0x6c6acc67d7b1d40000",
    "0xe7533e270cc61fa164ac1553455c105d04887e14": "0x696d8590020bb0000",
    "0xe75c1fb177089f3e58b1067935a6596ef1737fb5": "0x56a879fa775470000",
    "0xe75c3b38a58a3f33d55690a5a59766be185e0284": "0x1b1ae4d6e2ef500000",
    "0xe761d27fa3502cc76bb1a608740e1403cf9dfc69": "0xf2dc7d47f15600000",
    "0xe766f34ff16f3cfcc97321721f43ddf5a38b0cf4": "0x54069233bf7f780000",
    "0xe76d945aa89df1e457aa342b31028a5e9130b2ce": "0x3708baed3d68900000",
    "0xe7735ec76518fc6aa92da8715a9ee3f625788f13": "0x6c4d160bafa1b78000",
    "0xe77a89bd45dc04eeb4e41d7b596b707e6e51e74c": "0x28a857425466f800000",
    "0xe77d7deab296c8b4fa07ca3be184163d5a6d606c": "0x5043904b671190000",
    "0xe77febabdf080f0f5dca1d3f5766f2a79c0ffa7c": "0x4b229d28a843680000",
    "0xe780a56306ba1e6bb331952c22539b858af9f77d": "0xa968163f0a57b400000",
    "0xe781ec732d401202bb9bd13860910dd6c29ac0b6": "0x433874f632cc600000",
    "0xe784dcc873aa8c1513ec26ff36bc92eac6d4c968": "0xad78ebc5ac6200000",
    "0xe7912d4cf4562c573ddc5b71e37310e378ef86c9": "0x155bd9307f9fe80000",
    "0xe791d585b89936b25d298f9d35f9f9edc25a2932": "0x6c6b935b8bbd400000",
    "0xe792349ce9f6f14f81d0674096befa1f9221cdea": "0x5b5d234a0db4388000",
    "0xe796fd4e839b4c95d7510fb7c5c72b83c6c3e3c7": "0x1bc433f23f83140000",
    "0xe7a42f59fee074e4fb13ea9e57ecf1cc48282249": "0x43c33c1937564800000",
    "0xe7a4560c84b20e0fb54c49670c2903b0a96c42a4": "0x206aeac7a903980000",
    "0xe7a8e471eafb798f4554cc6e526730fd56e62c7d": "0x3635c9adc5dea00000",
    "0xe7be82c6593c1eeddd2ae0b15001ff201ab57b2f": "0x10910d4cdc9f60000",
    "0xe7c6b5fc05fc748e5b4381726449a1c0ad0fb0f1": "0x6c6b935b8bbd400000",
    "0xe7d17524d00bad82497c0f27156a647ff51d2792": "0x1158e460913d00000",
    "0xe7d213947fcb904ad738480b1eed2f5c329f27e8": "0x103c3b1d3e9c30000",
    "0xe7d6240620f42c5edbb2ede6aec43da4ed9b5757": "0x3635c9adc5dea00000",
    "0xe7da609d40cde80f00ce5b4ffb6aa9d0b03494fc": "0x3635c9adc5dea00000",
    "0xe7f06f699be31c440b43b4db0501ec0e25261644": "0x1b1ae4d6e2ef500000",
    "0xe7f4d7fe6f561f7fa1da3005fd365451ad89df89": "0xad78ebc5ac6200000",
    "0xe7fd8fd959aed2767ea7fa960ce1db53af802573": "0x3635c9adc5dea00000",
    "0xe80e7fef18a5db15b01473f3ad6b78b2a2f8acd9": "0x1b1ae4d6e2ef500000",
    "0xe8137fc1b2ec7cc7103af921899b4a39e1d959a1": "0x50c5e761a444080000",
    "0xe81c2d346c0adf4cc56708f6394ba6c8c8a64a1e": "0x6c6b935b8bbd400000",
    "0xe82c58c579431b673546b53a86459acaf1de9b93": "0x3635c9adc5dea00000",
    "0xe834c64318205ca7dd4a21abcb08266cb21ff02c": "0x3635c6204739d98000",
    "0xe83604e4ff6be7f96f6018d3ec3072ec525dff6b": "0x9ddc1e3b901180000",
    "0xe845e387c4cbdf982280f6aa01c40e4be958ddb2": "0x54b40b1f852bda00000",
    "0xe848ca7ebff5c24f9b9c316797a43bf7c356292d": "0x62e115c008a880000",
    "0xe84b55b525f1039e744b918cb3332492e45eca7a": "0xad78ebc5ac6200000",
    "0xe84f8076a0f2969ecd333eef8de41042986291f2": "0x176b344f2a78c00000",
    "0xe864fec07ed1214a65311e11e329de040d04f0fd": "0x59ca83f5c404968000",
    "0xe87dbac636a37721df54b08a32ef4959b5e4ff82": "0x6c6b935b8bbd400000",
    "0xe87e9bbfbbb71c1a740c74c723426df55d063dd9": "0x1b1928c00c7a6380000",
    "0xe87eac6d602b4109c9671bf57b950c2cfdb99d55": "0x2b4f21972ecce0000",
    "0xe881bbbe69722d81efecaa48d1952a10a2bfac8f": "0x3635c9adc5dea000000",
    "0xe89249738b7eced7cb666a663c49cbf6de8343ea": "0x6c6b935b8bbd400000",
    "0xe89c22f1a4e1d4746ecfaa59ed386fee12d51e37": "0x26f8e87f0a7da0000",
    "0xe89da96e06beaf6bd880b378f0680c43fd2e9d30": "0x209a1a01a56fec0000",
    "0xe8a91da6cf1b9d65c74a02ec1f96eecb6dd241f3": "0x692ae8897081d00000",
    "0xe8a9a41740f44f54c3688b53e1ddd42e43c9fe94": "0xd8d726b7177a800000",
    "0xe8b28acda971725769db8f563d28666d41ddab6c": "0x21e19e0c9bab2400000",
    "0xe8be24f289443ee473bc76822f55098d89b91cc5": "0x6c6b935b8bbd400000",
    "0xe8c3d3b0e17f97d1e756e684f94e1470f99c95a1": "0x15af1d78b58c400000",
    "0xe8c3f045bb7d38c9d2f395b0ba8492b253230901": "0x1e7e4171bf4d3a00000",
    "0xe8cc43bc4f8acf39bff04ebfbf42aac06a328470": "0x15af1d78b58c400000",
    "0xe8d942d82f175ecb1c16a405b10143b3f46b963a": "0x1ed2e8ff6d971c0000",
    "0xe8ddbed732ebfe754096fde9086b8ea4a4cdc616": "0x6c6b935b8bbd400000",
    "0xe8de725eca5def805ff7941d31ac1c2e342dfe95": "0x857e0d6f1da76a0000",
    "0xe8e9850586e94f5299ab494bb821a5f40c00bd04": "0xcf152640c5c8300000",
    "0xe8ead1bb90ccc3aea2b0dcc5b58056554655d1d5": "0x1a4aba225c207400000",
    "0xe8eaf12944092dc3599b3953fa7cb1c9761cc246": "0x6194049f30f7200000",
    "0xe8ed51bbb3ace69e06024b33f86844c47348db9e": "0x22f9ea89f4a7d6c40000",
    "0xe8ef100d7ce0895832f2678df72d4acf8c28b8e3": "0x1b1b6bd7af64c70000",
    "0xe8f29969e75c65e01ce3d86154207d0a9e7c76f2": "0xa22fa9a73a27198000",
    "0xe8fc36b0131ec120ac9e85afc10ce70b56d8b6ba": "0xad78ebc5ac6200000",
    "0xe90a354cec04d69e5d96ddc0c5138d3d33150aa0": "0x1b1a7dcf8a44d38000",
    "0xe9133e7d31845d5f2b66a2618792e869311acf66": "0x517c0cbf9a390880000",
    "0xe91dac0195b19e37b59b53f7c017c0b2395ba44c": "0x65ea3db75546600000",
    "0xe91fa0badaddb9a97e88d3f4db7c55d6bb7430fe": "0x14620c57dddae00000",
    "0xe923c06177b3427ea448c0a6ff019b54cc548d95": "0x1f780014667f28000",
    "0xe93d47a8ca885d540c4e526f25d5c6f2c108c4b8": "0x17da3a04c7b3e0000000",
    "0xe9458f68bb272cb5673a04f781b403556fd3a387": "0x34e8b88cee2d40000",
    "0xe94941b6036019b4016a30c1037d5a6903babaad": "0x2a48acab6204b00000",
    "0xe9495ba5842728c0ed97be37d0e422b98d69202c": "0x6c6b935b8bbd400000",
    "0xe94ded99dcb572b9bb1dcba32f6dee91e057984e": "0x155bd9307f9fe80000",
    "0xe95179527deca5916ca9a38f215c1e9ce737b4c9": "0x21e19e0c9bab2400000",
    "0xe9559185f166fc9513cc71116144ce2deb0f1d4b": "0x43c33c1937564800000",
    "0xe95e92bbc6de07bf3a660ebf5feb1c8a3527e1c5": "0xfc936392801c0000",
    "0xe965daa34039f7f0df62375a37e5ab8a72b301e7": "0x103fddecdb3f5700000",
    "0xe969ea1595edc5c4a707cfde380929633251a2b0": "0xad78ebc5ac6200000",
    "0xe96b184e1f0f54924ac874f60bbf44707446b72b": "0x9dcc0515b56e0c0000",
    "0xe96d7d4cdd15553a4e4d316d6d6480ca3cea1e38": "0x2955d02e1a135a00000",
    "0xe96e2d3813efd1165f12f602f97f4a62909d3c66": "0x7caee97613e6700000",
    "0xe97fde0b67716325cf0ecce8a191a3761b2c791d": "0x3677036edf0af60000",
    "0xe982e6f28c548f5f96f45e63f7ab708724f53fa1": "0x157ae829a41f3b0000",
    "0xe9864c1afc8eaad37f3ba56fcb7477cc622009b7": "0x448586170a7dc0000",
    "0xe987e6139e6146a717fef96bc24934a5447fe05d": "0x6c6b935b8bbd400000",
    "0xe989733ca1d58d9e7b5029ba5d444858bec03172": "0x1f87408313df4f8000",
    "0xe98c91cadd924c92579e11b41217b282956cdaa1": "0x75c9a8480320c0000",
    "0xe99aece90541cae224b87da673965e0aeb296afd": "0x31df9095a18f600000",
    "0xe99de258a4173ce9ac38ede26c0b3bea3c0973d5": "0x59d0b805e5bb300000",
    "0xe9a2b4914e8553bf0d7c00ca532369b879f931bf": "0x6c6b935b8bbd400000",
    "0xe9a39a8bac0f01c349c64cedb69897f633234ed2": "0xd7c198710e66b00000",
    "0xe9a5ae3c9e05977dd1069e9fd9d3aefbae04b8df": "0x6acb3df27e1f880000",
    "0xe9ac36376efa06109d40726307dd1a57e213eaa9": "0xa844a7424d9c80000",
    "0xe9b1f1fca3fa47269f21b061c353b7f5e96d905a": "0x1b1ae4d6e2ef500000",
    "0xe9b36fe9b51412ddca1a521d6e94bc901213dda8": "0x21e19e0c9bab2400000",
    "0xe9b4a4853577a9dbcc2e795be0310d1bed28641a": "0x3635c9adc5dea00000",
    "0xe9b6a790009bc16642c8d820b7cde0e9fd16d8f5": "0xc55325ca7415e00000",
    "0xe9b9a2747510e310241d2ece98f56b3301d757e0": "0x6c6b935b8bbd400000",
    "0xe9c35c913ca1fceab461582fe1a5815164b4fd21": "0x1b1ae4d6e2ef5000000",
    "0xe9c6dfae97f7099fc5f4e94b784db802923a1419": "0x2a53c6d724f100000",
    "0xe9c758f8da41e3346e4350e5ac3976345c6c1082": "0x68a0d3092826ad0000",
    "0xe9caf827be9d607915b365c83f0d3b7ea8c79b50": "0xa2a15d09519be00000",
    "0xe9cafe41a5e8bbd90ba02d9e06585b4eb546c57f": "0x6c6b935b8bbd400000",
    "0xe9d599456b2543e6db80ea9b210e908026e2146e": "0xad78ebc5ac6200000",
    "0xe9e1f7cb00a110edd0ebf8b377ef8a7bb856117f": "0xad78ebc5ac6200000",
    "0xea14bfda0a6e76668f8788321f07df37824ec5df": "0x2a5a058fc295ed000000",
    "0xea1ea0c599afb9cd36caacbbb52b5bbb97597377": "0x39fbae8d042dd00000",
    "0xea1efb3ce789bedec3d67c3e1b3bc0e9aa227f90": "0x27ca4bd719f0b80000",
    "0xea2c197d26e98b0da83e1b72c787618c979d3db0": "0x11164759ffb320000",
    "0xea3779d14a13f6c78566bcde403591413a6239db": "0x29b76432b94451200000",
    "0xea4e809e266ae5f13cdbe38f9d0456e6386d1274": "0xf3f20b8dfa69d00000",
    "0xea53c954f4ed97fd4810111bdab69ef981ef25b9": "0x3a9d5baa4abf1d00000",
    "0xea53d26564859d9e90bb0e53b7abf560e0162c38": "0x15af1d78b58c400000",
    "0xea60436912de6bf187d3a472ff8f5333a0f7ed06": "0x11164759ffb320000",
    "0xea60549ec7553f511d2149f2d4666cbd9243d93c": "0x6c6b935b8bbd400000",
    "0xea66e7b84dcdbf36eea3e75b85382a75f1a15d96": "0x5dbc9191266f118000",
    "0xea686c5057093c171c66db99e01b0ececb308683": "0x14dda85d2ce1478000",
    "0xea6afe2cc928ac8391eb1e165fc40040e37421e7": "0xa27fa063b2e2e68000",
    "0xea79057dabef5e64e7b44f7f18648e7e533718d2": "0xad78ebc5ac6200000",
    "0xea7c4d6dc729cd6b157c03ad237ca19a209346c3": "0x6c6b935b8bbd400000",
    "0xea8168fbf225e786459ca6bb18d963d26b505309": "0x1b1ae4d6e2ef500000",
    "0xea81ca8638540cd9d4d73d060f2cebf2241ffc3e": "0x6acb3df27e1f880000",
    "0xea8317197959424041d9d7c67a3ece1dbb78bb55": "0x155bd9307f9fe80000",
    "0xea8527febfa1ade29e26419329d393b940bbb7dc": "0x6c6acc67d7b1d40000",
    "0xea8f30b6e4c5e65290fb9864259bc5990fa8ee8a": "0x1158e460913d00000",
    "0xea94f32808a2ef8a9bf0861d1d2404f7b7be258a": "0x1158e460913d00000",
    "0xeaa45cea02d87d2cc8fda9434e2d985bd4031584": "0x681fc2cc6e2b8b0000",
    "0xeab0bd148309186cf8cbd13b7232d8095acb833a": "0x2439a881c6a717c0000",
    "0xeabb90d37989aab31feae547e0e6f3999ce6a35d": "0x6c6b935b8bbd400000",
    "0xeac0827eff0c6e3ff28a7d4a54f65cb7689d7b99": "0x9ad9e69f9d47520000",
    "0xeac1482826acb6111e19d340a45fb851576bed60": "0x1be8bab04d9be8000",
    "0xeac17b81ed5191fb0802aa54337313834107aaa4": "0x1b1ae4d6e2ef5000000",
    "0xeac3af5784927fe9a598fc4eec38b8102f37bc58": "0x3635c9adc5dea00000",
    "0xeac6b98842542ea10bb74f26d7c7488f698b6452": "0x43c33c1937564800000",
    "0xeac768bf14b8f9432e69eaa82a99fbeb94cd0c9c": "0x14dbb2195ca228900000",
    "0xead21c1deccfbf1c5cd96688a2476b69ba07ce4a": "0x3f24d8e4a00700000",
    "0xead4d2eefb76abae5533961edd11400406b298fc": "0xd255d112e103a00000",
    "0xead65262ed5d122df2b2751410f98c32d1238f51": "0x58317ed46b9b80000",
    "0xead75016e3a0815072b6b108bcc1b799acf0383e": "0x6c6b935b8bbd400000",
    "0xeaea23aa057200e7c9c15e8ff190d0e66c0c0e83": "0x6c6b935b8bbd400000",
    "0xeaed16eaf5daab5bf0295e5e077f59fb8255900b": "0xd8d726b7177a800000",
    "0xeaedcc6b8b6962d5d9288c156c579d47c0a9fcff": "0x49b9ca9a694340000",
    "0xeaf52388546ec35aca6f6c6393d8d609de3a4bf3": "0x1158e460913d00000",
    "0xeb10458daca79e4a6b24b29a8a8ada711b7f2eb6": "0xd8bb6549b02bb80000",
    "0xeb1cea7b45d1bd4d0e2a007bd3bfb354759e2c16": "0xabbcd4ef377580000",
    "0xeb25481fcd9c221f1ac7e5fd1ecd9307a16215b8": "0xaadec983fcff40000",
    "0xeb2ef3d38fe652403cd4c9d85ed7f0682cd7c2de": "0x90f534608a728800000",
    "0xeb3bdd59dcdda5a9bb2ac1641fd02180f5f36560": "0x165c96647b38a200000",
    "0xeb3ce7fc381c51db7d5fbd692f8f9e058a4c703d": "0xad78ebc5ac6200000",
    "0xeb453f5a3adddd8ab56750fadb0fe7f94d9c89e7": "0x1158e460913d00000",
    "0xeb4f00e28336ea09942588eeac921811c522143c": "0x6c6b935b8bbd400000",
    "0xeb52ab10553492329c1c54833ae610f398a65b9d": "0x83d6c7aab63600000",
    "0xeb570dba975227b1c42d6e8dea2c56c9ad960670": "0x6c6b935b8bbd400000",
    "0xeb6394a7bfa4d28911d5a5b23e93f35e340c2294": "0x43a77aabd00780000",
    "0xeb6810691d1ae0d19e47bd22cebee0b3ba27f88a": "0x87856315d878150000",
    "0xeb76424c0fd597d3e341a9642ad1ee118b2b579d": "0xd8d726b7177a800000",
    "0xeb7c202b462b7cc5855d7484755f6e26ef43a115": "0x6c6b935b8bbd400000",
    "0xeb835c1a911817878a33d167569ea3cdd387f328": "0x3635c9adc5dea00000",
    "0xeb89a882670909cf377e9e78286ee97ba78d46c2": "0x2b7cc2e9c3225c0000",
    "0xeb90c793b3539761e1c814a29671148692193eb4": "0x28a857425466f800000",
    "0xeb9cc9fe0869d2dab52cc7aae8fd57adb35f9feb": "0x6a93bb17af81f80000",
    "0xeba388b0da27c87b1cc0eac6c57b2c5a0b459c1a": "0x170a0f5040e50400000",
    "0xebaa216de9cc5a43031707d36fe6d5bedc05bdf0": "0x6ac5c62d9486070000",
    "0xebac2b4408ef5431a13b8508e86250982114e145": "0xd8d726b7177a800000",
    "0xebb62cf8e22c884b1b28c6fa88fbbc17938aa787": "0x2b42798403c9b80000",
    "0xebb7d2e11bc6b58f0a8d45c2f6de3010570ac891": "0x1731790534df20000",
    "0xebbb4f2c3da8be3eb62d1ffb1f950261cf98ecda": "0x6c6b935b8bbd400000",
    "0xebbd4db9019952d68b1b0f6d8cf0683c00387bb5": "0x120401563d7d910000",
    "0xebbeeb259184a6e01cccfc2207bbd883785ac90a": "0x219bc1b04783d30000",
    "0xebd356156a383123343d48843bffed6103e866b3": "0x6acb3df27e1f880000",
    "0xebd37b256563e30c6f9289a8e2702f0852880833": "0x6c6acc67d7b1d40000",
    "0xebe46cc3c34c32f5add6c3195bb486c4713eb918": "0x3635c9adc5dea00000",
    "0xebff84bbef423071e604c361bba677f5593def4e": "0x21e19e0c9bab2400000",
    "0xec0927bac7dc36669c28354ab1be83d7eec30934": "0x6c6b935b8bbd400000",
    "0xec0e18a01dc4dc5daae567c3fa4c7f8f9b590205": "0x111ffe404a41e60000",
    "0xec11362cec810985d0ebbd7b73451444985b369f": "0x65a4e49577057318000",
    "0xec2cb8b9378dff31aec3c22e0e6dadff314ab5dd": "0x6c6b935b8bbd400000",
    "0xec30addd895b82ee319e54fb04cb2bb03971f36b": "0x6c6b935b8bbd400000",
    "0xec3b8b58a12703e581ce5ffd7e21c57d1e5c663f": "0x5c283d410394100000",
    "0xec4867d2175ab5b9469361595546554684cda460": "0xa2a15d09519be00000",
    "0xec4d08aa2e47496dca87225de33f2b40a8a5b36f": "0x890b0c2e14fb80000",
    "0xec58bc0d0c20d8f49465664153c5c196fe59e6be": "0x15af1d78b58c400000",
    "0xec5b198a00cfb55a97b5d53644cffa8a04d2ab45": "0x6c6b935b8bbd400000",
    "0xec5df227bfa85d7ad76b426e1cee963bc7f519dd": "0x3635c9adc5dea00000",
    "0xec5feafe210c12bfc9a5d05925a123f1e73fbef8": "0x608fcf3d88748d000000",
    "0xec6904bae1f69790591709b0609783733f2573e3": "0x1b1ae4d6e2ef500000",
    "0xec73114c5e406fdbbe09b4fa621bd70ed54ea1ef": "0x53025cd216fce500000",
    "0xec73833de4b810bb027810fc8f69f544e83c12d1": "0x3635c9adc5dea00000",
    "0xec75b4a47513120ba5f86039814f1998e3817ac3": "0x9b0bce2e8fdba0000",
    "0xec76f12e57a65504033f2c0bce6fc03bd7fa0ac4": "0xc2127af858da700000",
    "0xec8014efc7cbe5b0ce50f3562cf4e67f8593cd32": "0xf015f25736420000",
    "0xec82f50d06475f684df1b392e00da341aa145444": "0x6c6b935b8bbd400000",
    "0xec83e798c396b7a55e2a2224abcd834b27ea459c": "0x28a857425466f800000",
    "0xec89f2b678a1a15b9134ec5eb70c6a62071fbaf9": "0xad78ebc5ac6200000",
    "0xec8c1d7b6aaccd429db3a91ee4c9eb1ca4f6f73c": "0xe664992288f2280000",
    "0xec9851bd917270610267d60518b54d3ca2b35b17": "0x878678326eac9000000",
    "0xec99e95dece46ffffb175eb6400fbebb08ee9b95": "0x56bc75e2d63100000",
    "0xeca5f58792b8c62d2af556717ee3ee3028be4dce": "0x6c6b935b8bbd400000",
    "0xecab5aba5b828de1705381f38bc744b32ba1b437": "0x32f51edbaaa3300000",
    "0xecaf3350b7ce144d068b186010852c84dd0ce0f0": "0x6c6b935b8bbd400000",
    "0xecb94c568bfe59ade650645f4f26306c736cace4": "0xe7eeba3410b740000",
    "0xecbe425e670d39094e20fb5643a9d818eed236de": "0x10f0cf064dd59200000",
    "0xecbe5e1c9ad2b1dccf0a305fc9522f4669dd3ae7": "0x10f0cf064dd59200000",
    "0xeccf7a0457b566b346ca673a180f444130216ac3": "0x56bc75e2d63100000",
    "0xecd1a62802351a41568d23033004acc6c005a5d3": "0x2b5e3af16b1880000",
    "0xecd276af64c79d1bd9a92b86b5e88d9a95eb88f8": "0x1158e460913d00000",
    "0xecd486fc196791b92cf612d348614f9156488b7e": "0x28a857425466f800000",
    "0xecdaf93229b45ee672f65db506fb5eca00f7fce6": "0x5701f96dcc40ee8000",
    "0xece111670b563ccdbebca52384290ecd68fe5c92": "0x1158e460913d00000",
    "0xece1152682b7598fe2d1e21ec15533885435ac85": "0xd8d726b7177a800000",
    "0xece1290877b583e361a2d41b009346e6274e2538": "0x1043561a8829300000",
    "0xecf05d07ea026e7ebf4941002335baf2fed0f002": "0xad78ebc5ac6200000",
    "0xecf24cdd7c22928c441e694de4aa31b0fab59778": "0x2086ac351052600000",
    "0xecfd004d02f36cd4d8b4a8c1a9533b6af85cd716": "0x10f41acb4bb3b9c0000",
    "0xed0206cb23315128f8caff26f6a30b985467d022": "0x878678326eac9000000",
    "0xed1065dbcf9d73c04ffc7908870d881468c1e132": "0x6c6b935b8bbd400000",
    "0xed1276513b6fc68628a74185c2e20cbbca7817bf": "0xa5aa85009e39c0000",
    "0xed12a1ba1fb8adfcb20dfa19582e525aa3b74524": "0x16a6502f15a1e540000",
    "0xed16ce39feef3bd7f5d162045e0f67c0f00046bb": "0x1158e460913d00000",
    "0xed1a5c43c574d4e934299b24f1472cdc9fd6f010": "0xad78ebc5ac6200000",
    "0xed1b24b6912d51b334ac0de6e771c7c0454695ea": "0x22b1c8c1227a00000",
    "0xed1f1e115a0d60ce02fb25df014d289e3a0cbe7d": "0x1b1ae4d6e2ef500000",
    "0xed31305c319f9273d3936d8f5b2f71e9b1b22963": "0x56bc75e2d63100000",
    "0xed327a14d5cfadd98103fc0999718d7ed70528ea": "0x4e1003b28d92800000",
    "0xed3cbc3782cebd67989b305c4133b2cde32211eb": "0x15af1d78b58c400000",
    "0xed4014538cee664a2fbcb6dc669f7ab16d0ba57c": "0xad78ebc5ac6200000",
    "0xed41e1a28f5caa843880ef4e8b08bd6c33141edf": "0x2ad5ddfa7a8d830000",
    "0xed4be04a052d7accb3dcce90319dba4020ab2c68": "0x7f37a70eaf362178000",
    "0xed52a2cc0869dc9e9f842bd0957c47a8e9b0c9ff": "0x205b4dfa1ee74780000",
    "0xed5b4c41e762d942404373caf21ed4615d25e6c1": "0x6d2d4f3d9525b40000",
    "0xed60c4ab6e540206317e35947a63a9ca6b03e2cb": "0x31ad9ad0b467f8000",
    "0xed641e06368fb0efaa1703e01fe48f4a685309eb": "0xad78ebc5ac6200000",
    "0xed6643c0e8884b2d3211853785a08bf8f33ed29f": "0x487a9a304539440000",
    "0xed70a37cdd1cbda9746d939658ae2a6181288578": "0x2086ac3510526000000",
    "0xed7346766e1a676d0d06ec821867a276a083bf31": "0xd98a0931cc2d490000",
    "0xed862616fcbfb3becb7406f73c5cbff00c940755": "0x5c283d410394100000",
    "0xed9e030ca75cb1d29ea01d0d4cdfdccd3844b6e4": "0x1acc116cfafb18000",
    "0xed9ebccba42f9815e78233266dd6e835b6afc31b": "0x14542ba12a337c00000",
    "0xed9fb1f5af2fbf7ffc5029cee42b70ff5c275bf5": "0xf2dc7d47f15600000",
    "0xeda4b2fa59d684b27a810df8978a73df308a63c2": "0xd8d726b7177a800000",
    "0xedb473353979a206879de144c10a3c51d7d7081a": "0x14542ba12a337c00000",
    "0xedb71ec41bda7dce86e766e6e8c3e9907723a69b": "0x1158e460913d00000",
    "0xedbac9527b54d6df7ae2e000cca3613ba015cae3": "0x6acb3df27e1f880000",
    "0xedc22fb92c638e1e21ff5cf039daa6e734dafb29": "0x102794ad20da680000",
    "0xeddacd94ec89a2ef968fcf977a08f1fae2757869": "0x1b1ae4d6e2ef5000000",
    "0xeddbaafbc21be8f25562f1ed6d05d6afb58f02c2": "0x6c6b935b8bbd400000",
    "0xede0147ec032c3618310c1ff25690bf172193dac": "0x6c6b935b8bbd400000",
    "0xede5de7c7fb7eee0f36e64530a41440edfbefacf": "0x21755ee1ef2b180000",
    "0xede79ae1ff4f1606d59270216fa46ab2ddd4ecaa": "0x7ea28327577080000",
    "0xede8c2cb876fbe8a4cca8290361a7ea01a69fdf8": "0x1a78c6b44f841838000",
    "0xedeb4894aadd0081bbddd3e8846804b583d19f27": "0x6c6b935b8bbd400000",
    "0xedf603890228d7d5de9309942b5cad4219ef9ad7": "0x10f0cf064dd59200000",
    "0xedf8a3e1d40f13b79ec8e3e1ecf262fd92116263": "0x890b0c2e14fb80000",
    "0xedfda2d5db98f9380714664d54b4ee971a1cae03": "0x22bb8ddd679be0000",
    "0xee0007b0960d00908a94432a737557876aac7c31": "0x2e0421e69c4cc8000",
    "0xee049af005974dd1c7b3a9ca8d9aa77175ba53aa": "0x1211ecb56d13488000",
    "0xee25b9a7032679b113588ed52c137d1a053a1e94": "0xad50f3f4eea8e0000",
    "0xee31167f9cc93b3c6465609d79db0cde90e8484c": "0x6c6b935b8bbd400000",
    "0xee34c7e7995db9f187cff156918cfb6f13f6e003": "0x6a4076cf7995a00000",
    "0xee3564f5f1ba0f94ec7bac164bddbf31c6888b55": "0x56bc75e2d63100000",
    "0xee58fb3db29070d0130188ce472be0a172b89055": "0x21f42dcdc58e39c0000",
    "0xee655bb4ee0e8d5478526fb9f15e4064e09ff3dd": "0xad78ebc5ac6200000",
    "0xee6959de2b67967b71948c891ab00d8c8f38c7dc": "0x6685ac1bfe32c0000",
    "0xee6c03429969ca1262cb3f0a4a54afa7d348d7f5": "0xde219f91fc18a0000",
    "0xee71793e3acf12a7274f563961f537529d89c7de": "0x6c6b935b8bbd400000",
    "0xee7288d91086d9e2eb910014d9ab90a02d78c2a0": "0x6c6b935b8bbd400000",
    "0xee7c3ded7c28f459c92fe13b4d95bafbab02367d": "0x25f273933db5700000",
    "0xee867d20916bd2e9c9ece08aa04385db667c912e": "0xa968163f0a57b400000",
    "0xee899b02cbcb3939cd61de1342d50482abb68532": "0x5f68e8131ecf800000",
    "0xee906d7d5f1748258174be4cbc38930302ab7b42": "0xad78ebc5ac6200000",
    "0xee97aa8ac69edf7a987d6d70979f8ec1fbca7a94": "0x14620c57dddae00000",
    "0xeea1e97988de75d821cd28ad6822b22cce988b31": "0x1c30731cec03200000",
    "0xeed28c3f068e094a304b853c950a6809ebcb03e0": "0x3a9d5baa4abf1d00000",
    "0xeed384ef2d41d9d203974e57c12328ea760e08ea": "0x3635c9adc5dea00000",
    "0xeedf6c4280e6eb05b934ace428e11d4231b5905b": "0xad78ebc5ac6200000",
    "0xeee761847e33fd61d99387ee14628694d1bfd525": "0x6c6b935b8bbd400000",
    "0xeee9d0526eda01e43116a395322dda8970578f39": "0x21e1999bbd5d2be0000",
    "0xeef1bbb1e5a83fde8248f88ee3018afa2d1332eb": "0xad78ebc5ac6200000",
    "0xeefba12dfc996742db790464ca7d273be6e81b3e": "0x3635c9adc5dea00000",
    "0xeefd05b0e3c417d55b3343060486cdd5e92aa7a6": "0x4d853c8f8908980000",
    "0xef0dc7dd7a53d612728bcbd2b27c19dd4d7d666f": "0x26411c5b35f05a0000",
    "0xef115252b1b845cd857f002d630f1b6fa37a4e50": "0x6acb3df27e1f880000",
    "0xef1c0477f1184d60accab374d374557a0a3e10f3": "0x83d6c7aab63600000",
    "0xef2c34bb487d3762c3cca782ccdd7a8fbb0a9931": "0x9c2007651b2500000",
    "0xef35f6d4b1075e6aa139151c974b2f4658f70538": "0x3c3bc33f94e50d8000",
    "0xef39ca9173df15531d73e6b72a684b51ba0f2bb4": "0x56a0b4756ee2380000",
    "0xef463c2679fb279164e20c3d2691358773a0ad95": "0x6c6b935b8bbd400000",
    "0xef47cf073e36f271d522d7fa4e7120ad5007a0bc": "0x878678326eac900000",
    "0xef61155ba009dcdebef10b28d9da3d1bc6c9ced4": "0x3342d60dff1960000",
    "0xef69781f32ffce33346f2c9ae3f08493f3e82f89": "0xfc936392801c0000",
    "0xef76a4cd8febcbc9b818f17828f8d93473f3f3cb": "0xd8d726b7177a800000",
    "0xef93818f684db0c3675ec81332b3183ecc28a495": "0x54069233bf7f780000",
    "0xef9f59aeda418c1494682d941aab4924b5f4929a": "0x152d02c7e14af6800000",
    "0xefa6b1f0db603537826891b8b4bc163984bb40cd": "0x35659ef93f0fc40000",
    "0xefbd52f97da5fd3a673a46cbf330447b7e8aad5c": "0x56c3c9b80a0a68000",
    "0xefc8cf1963c9a95267b228c086239889f4dfd467": "0x21e19e0c9bab2400000",
    "0xefcaae9ff64d2cd95b5249dcffe7faa0a0c0e44d": "0x15be6174e1912e0000",
    "0xefcce06bd6089d0e458ef561f5a689480afe7000": "0x2086ac351052600000",
    "0xefe0675da98a5dda70cd96196b87f4e726b43348": "0x3f19beb8dd1ab00000",
    "0xefe8ff87fc260e0767638dd5d02fc4672e0ec06d": "0x6c6b935b8bbd400000",
    "0xefeb1997aad277cc33430e6111ed0943594048b8": "0x6c6b935b8bbd400000",
    "0xefeea010756f81da4ba25b721787f058170befbd": "0x1c29c9cf770ef0000",
    "0xeff51d72adfae143edf3a42b1aec55a2ccdd0b90": "0x1043561a8829300000",
    "0xeff86b5123bcdc17ed4ce8e05b7e12e51393a1f7": "0x1b1ae4d6e2ef500000",
    "0xeffc15e487b1beda0a8d1325bdb4172240dc540a": "0x3853939eee1de0000",
    "0xf01195d657ef3c942e6cb83949e5a20b5cfa8b1e": "0x57473d05dabae800000",
    "0xf02796295101674288c1d93467053d042219b794": "0x281d901f4fdd100000",
    "0xf039683d7b3d225bc7d8dfadef63163441be41e2": "0x1dd1e4bd8d1ee0000",
    "0xf04a6a379708b9428d722aa2b06b77e88935cf89": "0x1043561a8829300000",
    "0xf04d2c91efb6e9c45ffbe74b434c8c5f2b028f1f": "0x3635c9adc5dea00000",
    "0xf057aa66ca767ede124a1c5b9cc5fc94ef0b0137": "0x70a24bcab6f45d0000",
    "0xf05ba8d7b68539d933300bc9289c3d9474d0419e": "0x6da27024dd9600000",
    "0xf05ceeab65410564709951773c8445ad9f4ec797": "0x10431627a0933b0000",
    "0xf05fcd4c0d73aa167e5553c8c0d6d4f2faa39757": "0x2d2d66c3170b2980000",
    "0xf067e1f1d683556a4cc4fd0c0313239f32c4cfd8": "0x3635c9adc5dea00000",
    "0xf067fb10dfb293e998abe564c055e3348f9fbf1e": "0x6c6b935b8bbd400000",
    "0xf068dfe95d15cd3a7f98ffa688b4346842be2690": "0x440ad819e0974c0000",
    "0xf06a854a3c5dc36d1c49f4c87d6db333b57e4add": "0x21e19e0c9bab2400000",
    "0xf079e1b1265f50e8c8a98ec0c7815eb3aeac9eb4": "0x116dc3a8994b30000",
    "0xf07bd0e5c2ce69c7c4a724bd26bbfa9d2a17ca03": "0x14061b9d77a5e980000",
    "0xf0832a6bb25503eeca435be31b0bf905ca1fcf57": "0x16a6502f15a1e540000",
    "0xf09b3e87f913ddfd57ae8049c731dba9b636dfc3": "0x20f5b1eaad8d800000",
    "0xf0b1340b996f6f0bf0d9561c849caf7f4430befa": "0x56bc75e2d63100000",
    "0xf0b1f9e27832c6de6914d70afc238c749995ace4": "0x6c6b935b8bbd400000",
    "0xf0b469eae89d400ce7d5d66a9695037036b88903": "0x43c33c1937564800000",
    "0xf0b9d683cea12ba600baace219b0b3c97e8c00e4": "0x56bc75e2d63100000",
    "0xf0be0faf4d7923fc444622d1980cf2d990aab307": "0x6c6b935b8bbd400000",
    "0xf0c081da52a9ae36642adf5e08205f05c54168a6": "0x6046f37e5945c0000",
    "0xf0c70d0d6dab7663aa9ed9ceea567ee2c6b02765": "0x71438ac5a791a08000",
    "0xf0cbef84e169630098d4e301b20208ef05846ac9": "0xe0b8345506b4e0000",
    "0xf0d21663d8b0176e05fde1b90ef31f8530fda95f": "0x6c6acc67d7b1d40000",
    "0xf0d5c31ccb6cbe30c7c9ea19f268d159851f8c9c": "0x3894f0e6f9b9f700000",
    "0xf0d64cf9df09741133d170485fd24b005011d520": "0x1b089341e14fcc0000",
    "0xf0d858105e1b648101ac3f85a0f8222bf4f81d6a": "0x2086ac351052600000",
    "0xf0dc43f205619127507b2b1c1cfdf32d28310920": "0x105eb79b9417088000",
    "0xf0e1dfa42adeac2f17f6fdf584c94862fd563393": "0x1b1ae4d6e2ef500000",
    "0xf0e2649c7e6a3f2c5dfe33bbfbd927ca3c350a58": "0x6c6b935b8bbd400000",
    "0xf0e7fb9e420a5340d536f40408344feaefc06aef": "0x3635c9adc5dea00000",
    "0xf10462e58fcc07f39584a187639451167e859201": "0x934dd5d33bc970000",
    "0xf10661ff94140f203e7a482572437938bec9c3f7": "0x43c33c1937564800000",
    "0xf114ff0d0f24eff896edde5471dea484824a99b3": "0xbe202d6a0eda0000",
    "0xf116b0b4680f53ab72c968ba802e10aa1be11dc8": "0x1158e460913d00000",
    "0xf11cf5d363746fee6864d3ca336dd80679bb87ae": "0x878678326eac9000000",
    "0xf11e01c7a9d12499005f4dae7716095a34176277": "0x15af1d78b58c400000",
    "0xf13b083093ba564e2dc631568cf7540d9a0ec719": "0x6c6acc67d7b1d40000",
    "0xf14f0eb86db0eb68753f16918e5d4b807437bd3e": "0xad78ebc5ac6200000",
    "0xf15178ffc43aa8070ece327e930f809ab1a54f9d": "0xab640391201300000",
    "0xf156dc0b2a981e5b55d3f2f03b8134e331dbadb7": "0x56bc75e2d63100000",
    "0xf15d9d5a21b1929e790371a17f16d95f0c69655c": "0x6c6b935b8bbd400000",
    "0xf15e182c4fbbad79bd93342242d4dccf2be58925": "0x692ae8897081d00000",
    "0xf1624d980b65336feac5a6d54125005cfcf2aacb": "0x6c6b935b8bbd400000",
    "0xf167f5868dcf4233a7830609682caf2df4b1b807": "0x81e542e1a7383f0000",
    "0xf16de1891d8196461395f9b136265b3b9546f6ef": "0x1b28e1f98bbce8000",
    "0xf17a92e0361dbacecdc5de0d1894955af6a9b606": "0x6c6b935b8bbd400000",
    "0xf17adb740f45cbbde3094e7e13716f8103f563bd": "0x6c6b935b8bbd400000",
    "0xf18b14cbf6694336d0fe12ac1f25df2da0c05dbb": "0xd8d4602c26bf6c0000",
    "0xf19b39389d47b11b8a2c3f1da9124decffbefaf7": "0x6c6b935b8bbd400000",
    "0xf19f193508393e4d2a127b20b2031f39c82581c6": "0xbdbd7a83bd2f6c0000",
    "0xf1a1f320407964fd3c8f2e2cc8a4580da94f01ea": "0x6c6c2177557c440000",
    "0xf1b4ecc63525f7432c3d834ffe2b970fbeb87212": "0xa2a24068facd800000",
    "0xf1b58faffa8794f50af8e88309c7a6265455d51a": "0x36330322d5238c0000",
    "0xf1c8c4a941b4628c0d6c30fda56452d99c7e1b64": "0x4e8cea1ede75040000",
    "0xf1da40736f99d5df3b068a5d745fafc6463fc9b1": "0x696ca23058da10000",
    "0xf1dc8ac81042c67a9c3c6792b230c46ac016ca10": "0xad78ebc5ac6200000",
    "0xf1df55dcc34a051012b575cb968bc9c458ea09c9": "0xd8d726b7177a800000",
    "0xf1e980c559a1a8e5e50a47f8fffdc773b7e06a54": "0x65ffbcdea04b7480000",
    "0xf1f391ca92808817b755a8b8f4e2ca08d1fd1108": "0x14542ba12a337c00000",
    "0xf1f766b0e46d73fcd4d52e7a72e1b9190cc632b3": "0x1b1ae4d6e2ef5000000",
    "0xf2049532fd458a83ca1bff2eebacb6d5ca63f4a4": "0xc48c991dc1545c8000",
    "0xf206d328e471d0117b246d2a4619827709e96df3": "0xa2af3dc00543440000",
    "0xf20c9a99b74759d782f25c1ceca802a27e0b436c": "0x5a87e7d7f5f6580000",
    "0xf2127d54188fedef0f338a5f38c7ff73ad9f6f42": "0x43c33c1937564800000",
    "0xf2133431d1d9a37ba2f0762bc40c5acc8aa6978e": "0x6c6b935b8bbd400000",
    "0xf21549bdd1487912f900a7523db5f7626121bba3": "0x21e19e0c9bab2400000",
    "0xf218bd848ee7f9d38bfdd1c4eb2ed2496ae4305f": "0x1b1ae4d6e2ef500000",
    "0xf224eb900b37b4490eee6a0b6420d85c947d8733": "0x34957444b840e80000",
    "0xf2294adbb6f0dcc76e632ebef48ab49f124dbba4": "0x4e43393600a7b10000",
    "0xf22f4078febbbaa8b0e78e642c8a42f35d433905": "0x6c6acc67d7b1d40000",
    "0xf237ef05261c34d79cc22b860de0f17f793c3860": "0xad78ebc5ac6200000",
    "0xf23c7b0cb8cd59b82bd890644a57daf40c85e278": "0x2b66aafe326ff0000",
    "0xf23d01589eb12d439f7448ff54307529f191858d": "0x6c6b935b8bbd400000",
    "0xf23e5c633221a8f7363e65870c9f287424d2a960": "0x4acf58e07257100000",
    "0xf242da845d42d4bf779a00f295b40750fe49ea13": "0x3635c9adc5dea00000",
    "0xf25259a5c939cd25966c9b6303d3731c53ddbc4c": "0xad78ebc5ac6200000",
    "0xf25e4c70bc465632c89e5625a832a7722f6bffab": "0xf34b82fd8e91200000",
    "0xf26bcedce3feadcea3bc3e96eb1040dfd8ffe1a0": "0x2a034919dfbfbc0000",
    "0xf270792576f05d514493ffd1f5e84bec4b2df810": "0x3635c9adc5dea00000",
    "0xf2732cf2c13b8bb8e7492a988f5f89e38273ddc8": "0x2086ac351052600000",
    "0xf2742e6859c569d5f2108351e0bf4dca352a48a8": "0x21e19e0c9bab2400000",
    "0xf2813a64c5265d020235cb9c319b6c96f906c41e": "0x12f939c99edab80000",
    "0xf287ff52f461117adb3e1daa71932d1493c65f2e": "0xc55325ca7415e00000",
    "0xf2ab1161750244d0ecd048ee0d3e51abb143a2fd": "0x42fe2b907373bc0000",
    "0xf2b4ab2c9427a9015ef6eefff5edb60139b719d1": "0x26db992a3b18000000",
    "0xf2c03e2a38998c21648760f1e5ae7ea3077d8522": "0x8f3f7193ab079c0000",
    "0xf2c2904e9fa664a11ee25656d8fd2cc0d9a522a0": "0xb98bc829a6f90000",
    "0xf2c362b0ef991bc82fb36e66ff75932ae8dd8225": "0x402f4cfee62e80000",
    "0xf2d0e986d814ea13c8f466a0538c53dc922651f0": "0x4acf58e07257100000",
    "0xf2d1b7357724ec4c03185b879b63f57e26589153": "0x14542ba12a337c00000",
    "0xf2d5763ce073127e2cedde6faba786c73ca94141": "0x1ac4286100191f00000",
    "0xf2d59c8923759073d6f415aaf8eb065ff2f3b685": "0x1ab2cf7c9f87e200000",
    "0xf2e99f5cbb836b7ad36247571a302cbe4b481c69": "0x6acb3df27e1f880000",
    "0xf2ed3e77254acb83231dc0860e1a11242ba627db": "0x6b56051582a9700000",
    "0xf2edde37f9a8c39ddea24d79f4015757d06bf786": "0x152d02c7e14af6800000",
    "0xf2efe96560c9d97b72bd36447843885c1d90c231": "0x6c6b935b8bbd400000",
    "0xf2fbb6d887f8b8cc3a869aba847f3d1f643c53d6": "0xd8c9460063d31c0000",
    "0xf3034367f87d24d3077fa9a2e38a8b0ccb1104ef": "0x3635c9adc5dea00000",
    "0xf303d5a816affd97e83d9e4dac2f79072bb0098f": "0x340aad21b3b7000000",
    "0xf3159866c2bc86bba40f9d73bb99f1eee57bb9d7": "0x3635c9adc5dea00000",
    "0xf316ef1df2ff4d6c1808dba663ec8093697968e0": "0x61464d6cdc80f00000",
    "0xf32d25eb0ea2b8b3028a4c7a155dc1aae865784d": "0x13593a9297fdad60000",
    "0xf332c0f3e05a27d9126fd0b641a8c2d4060608fd": "0x10f1b62c4d9644e8000",
    "0xf338459f32a159b23db30ac335769ab2351aa63c": "0x65a4da25d3016c00000",
    "0xf33efc6397aa65fb53a8f07a0f893aae30e8bcee": "0x7cf2381f619f150000",
    "0xf34083ecea385017aa40bdd35ef7effb4ce7762d": "0x15af1d78b58c400000",
    "0xf346d7de92741c08fc58a64db55b062dde012d14": "0xfff6b1f761e6d0000",
    "0xf355d3ec0cfb907d8dbb1bf3464e458128190bac": "0x10b046e7f0d80100000",
    "0xf36df02fbd89607347afce2969b9c4236a58a506": "0x6c6b935b8bbd400000",
    "0xf373e9daac0c8675f53b797a160f6fc034ae6b23": "0x56bc75e2d63100000",
    "0xf37b426547a1642d8033324814f0ede3114fc212": "0x15be6174e1912e0000",
    "0xf37bf78c5875154711cb640d37ea6d28cfcb1259": "0xad78ebc5ac6200000",
    "0xf382df583155d8548f3f93440cd5f68cb79d6026": "0x38757d027fc1fd5c0000",
    "0xf382e4c20410b951089e19ba96a2fee3d91cce7e": "0x111fa56eec2a8380000",
    "0xf38a6ca80168537e974d14e1c3d13990a44c2c1b": "0x14542ba12a337c00000",
    "0xf39a9d7aa3581df07ee4279ae6c312ef21033658": "0xd8d726b7177a800000",
    "0xf3b668b3f14d920ebc379092db98031b67b219b3": "0xad6eedd17cf3b8000",
    "0xf3be99b9103ce7550aa74ff1db18e09dfe32e005": "0x6c6b935b8bbd400000",
    "0xf3c1abd29dc57b41dc192d0e384d021df0b4f6d4": "0x97ae0cdf8f86f80000",
    "0xf3c4716d1ee5279a86d0163a14618181e16136c7": "0x3635c9adc5dea00000",
    "0xf3cc8bcb559465f81bfe583bd7ab0a2306453b9e": "0x43c33c1937564800000",
    "0xf3d688f06bbdbf50f9932c4145cbe48ecdf68904": "0x1158e460913d00000",
    "0xf3dbcf135acb9dee1a489c593c024f03c2bbaece": "0x6c6b935b8bbd400000",
    "0xf3de5f26ef6aded6f06d3b911346ee70401da4a0": "0x133ab37d9f9d030000",
    "0xf3df63a97199933330383b3ed7570b96c4812334": "0x6c6b935b8bbd400000",
    "0xf3e74f470c7d3a3f0033780f76a89f3ef691e6cb": "0xa3cfe631d143640000",
    "0xf3eb1948b951e22df1617829bf3b8d8680ec6b68": "0xd8d726b7177a800000",
    "0xf3f1fa3918ca34e2cf7e84670b1f4d8eca160db3": "0x24dce54d34a1a00000",
    "0xf3f24fc29e20403fc0e8f5ebbb553426f78270a2": "0x56bc75e2d63100000",
    "0xf3fa723552a5d0512e2b62f48dca7b2b8105305b": "0x76d41c62494840000",
    "0xf3fe51fde34413c73318b9c85437fe7e820f561a": "0x3662325cd18fe00000",
    "0xf400f93d5f5c7e3fc303129ac8fb0c2f786407fa": "0x6c6b935b8bbd400000",
    "0xf40b134fea22c6b29c8457f49f000f9cda789adb": "0x2086ac351052600000",
    "0xf41557dfdfb1a1bdcefefe2eba1e21fe0a4a9942": "0x6acb3df27e1f880000",
    "0xf4177a0d85d48b0e264211ce2aa2efd3f1b47f08": "0xc2ccca26b7e80e8000",
    "0xf42f905231c770f0a406f2b768877fb49eee0f21": "0xaadec983fcff40000",
    "0xf432b9dbaf11bdbd73b6519fc0a904198771aac6": "0x83d6c7aab63600000",
    "0xf43da3a4e3f5fab104ca9bc1a0f7f3bb4a56f351": "0x6c6acc67d7b1d40000",
    "0xf447108b98df64b57e871033885c1ad71db1a3f9": "0x176f49ead3483508000",
    "0xf44f8551ace933720712c5c491cdb6f2f951736c": "0xd8d726b7177a800000",
    "0xf456055a11ab91ff668e2ec922961f2a23e3db25": "0xfc936392801c0000",
    "0xf456a75bb99655a7412ce97da081816dfdb2b1f2": "0xad78ebc5ac6200000",
    "0xf45b1dcb2e41dc27ffa024daadf619c11175c087": "0x11164759ffb320000",
    "0xf463a90cb3f13e1f0643423636beab84c123b06d": "0x22b1c8c1227a00000",
    "0xf468906e7edf664ab0d8be3d83eb7ab3f7ffdc78": "0x5c283d410394100000",
    "0xf46980e3a4a9d29a6a6e90604537a3114bcb2897": "0x1b1ae4d6e2ef500000",
    "0xf46b6b9c7cb552829c1d3dfd8ffb11aabae782f6": "0x1236efcbcbb340000",
    "0xf476e1267f86247cc908816f2e7ad5388c952db0": "0xd8d726b7177a800000",
    "0xf476f2cb7208a32e051fd94ea8662992638287a2": "0x56bc75e2d63100000",
    "0xf47bb134da30a812d003af8dccb888f44bbf5724": "0x11959b7fe3395580000",
    "0xf483f607a21fcc28100a018c568ffbe140380410": "0x3635c9adc5dea00000",
    "0xf48e1f13f6af4d84b371d7de4b273d03a263278e": "0x2086ac351052600000",
    "0xf49c47b3efd86b6e6a5bc9418d1f9fec814b69ef": "0x43c33c1937564800000",
    "0xf49f6f9baabc018c8f8e119e0115f491fc92a8a4": "0x21e19e0c9bab2400000",
    "0xf4a367b166d2991a2bfda9f56463a09f252c1b1d": "0x6acb3df27e1f880000",
    "0xf4a51fce4a1d5b94b0718389ba4e7814139ca738": "0x1043561a8829300000",
    "0xf4a9d00cefa97b7a58ef9417fc6267a5069039ee": "0x12e89287fa7840000",
    "0xf4aaa3a6163e3706577b49c0767e948a681e16ee": "0x6c6b935b8bbd400000",
    "0xf4b1626e24f30bcad9273c527fcc714b5d007b8f": "0xad78ebc5ac6200000",
    "0xf4b49100757772f33c177b9a76ba95226c8f3dd8": "0x16b352da5e0ed300000",
    "0xf4b6cdcfcb24230b337d770df6034dfbd4e1503f": "0x405fdf7e5af85e00000",
    "0xf4b759cc8a1c75f80849ebbcda878dc8f0d66de4": "0x15af1d78b58c400000",
    "0xf4ba6a46d55140c439cbcf076cc657136262f4f8": "0x6c6b935b8bbd400000",
    "0xf4d67a9044b435b66e8977ff39a28dc4bd53729a": "0xad78ebc5ac6200000",
    "0xf4d97664cc4eec9edbe7fa09f4750a663b507d79": "0xd8d726b7177a800000",
    "0xf4dc7ba85480bbb3f535c09568aaa3af6f3721c6": "0x1871fb6307e35e50000",
    "0xf4ebf50bc7e54f82e9b9bd24baef29438e259ce6": "0x21e19e0c9bab2400000",
    "0xf4ec8e97a20aa5f8dd206f55207e06b813df2cc0": "0xad78ebc5ac6200000",
    "0xf4ed848ec961739c2c7e352f435ba70a7cd5db38": "0x6acb3df27e1f880000",
    "0xf4fc4d39bc0c2c4068a36de50e4ab4d4db7e340a": "0x16037df87ef6a0000",
    "0xf504943aaf16796e0b341bbcdf21d11cc586cdd1": "0x1e7e4171bf4d3a00000",
    "0xf5061ee2e5ee26b815503677130e1de07a52db07": "0x56bc75e2d63100000",
    "0xf509557e90183fbf0f0651a786487bcc428ba175": "0xa844a7424d9c80000",
    "0xf50abbd4aa45d3eb88515465a8ba0b310fd9b521": "0x16a6502f15a1e540000",
    "0xf50ae7fab4cfb5a646ee04ceadf9bf9dd5a8e540": "0xd8d67c2f5895480000",
    "0xf50cbafd397edd556c0678988cb2af5c2617e0a2": "0x26d07efe782bb00000",
    "0xf51fded80acb502890e87369741f3722514cefff": "0x43c3456ca3c6d110000",
    "0xf52a5882e8927d944b359b26366ba2b9cacfbae8": "0x54b41ce2fe63ba80000",
    "0xf52c0a7877345fe0c233bb0f04fd6ab18b6f14ba": "0x54cbe55989f38de00000",
    "0xf5437e158090b2a2d68f82b54a5864b95dd6dbea": "0xd96c16703b2bfe0000",
    "0xf54c19d9ef3873bfd1f7a622d02d86249a328f06": "0x960ae127af32fb28000",
    "0xf5500178cb998f126417831a08c2d7abfff6ab5f": "0x46f4f4a5875a9f8000",
    "0xf5534815dc635efa5cc84b2ac734723e21b29372": "0x55a6e79ccd1d300000",
    "0xf555a27bb1e2fd4e2cc784caee92939fc06e2fc9": "0x6c6b935b8bbd400000",
    "0xf558a2b2dd26dd9593aae04531fd3c3cc3854b67": "0xabbcd4ef377580000",
    "0xf56048dd2181d4a36f64fcecc6215481e42abc15": "0xad78ebc5ac6200000",
    "0xf56442f60e21691395d0bffaa9194dcaff12e2b7": "0xe18398e7601900000",
    "0xf579714a45eb8f52c3d57bbdefd2c15b2e2f11df": "0x54915956c409600000",
    "0xf593c65285ee6bbd6637f3be8f89ad40d489f655": "0xa2a15d09519be00000",
    "0xf598db2e09a8a5ee7d720d2b5c43bb126d11ecc2": "0xad78ebc5ac6200000",
    "0xf59dab1bf8df11327e61f9b7a14b563a96ec3554": "0x14542ba12a337c00000",
    "0xf59f9f02bbc98efe097eabb78210979021898bfd": "0x21e171a3ec9f72c0000",
    "0xf5a5459fcdd5e5b273830df88eea4cb77ddadfb9": "0x409e52b48369a0000",
    "0xf5a7676ad148ae9c1ef8b6f5e5a0c2c473be850b": "0xad78ebc5ac6200000",
    "0xf5b068989df29c253577d0405ade6e0e7528f89e": "0x57473d05dabae80000",
    "0xf5b6e9061a4eb096160777e26762cf48bdd8b55d": "0xdc55fdb17647b0000",
    "0xf5cffbba624e7eb321bc83c60ca68199b4e36671": "0x6c6b935b8bbd400000",
    "0xf5d14552b1dce0d6dc1f320da6ffc8a331cd6f0c": "0x487a9a304539440000",
    "0xf5d61ac4ca95475e5b7bffd5f2f690b316759615": "0x692ae8897081d000000",
    "0xf5d9cf00d658dd45517a48a9d3f5f633541a533d": "0x64f5fdf494f780000",
    "0xf5eadcd2d1b8657a121f33c458a8b13e76b65526": "0xd8b0f5a5ac24a0000",
    "0xf607c2150d3e1b99f24fa1c7d540add35c4ebe1e": "0xa7f1aa07fc8faa0000",
    "0xf60bd735543e6bfd2ea6f11bff627340bc035a23": "0x6c6b935b8bbd400000",
    "0xf60c1b45f164b9580e20275a5c39e1d71e35f891": "0x6c6b935b8bbd400000",
    "0xf60f62d73937953fef35169e11d872d2ea317eec": "0x121ea68c114e5100000",
    "0xf61283b4bd8504058ca360e993999b62cbc8cd67": "0xdd2d5fcf3bc9c0000",
    "0xf617b967b9bd485f7695d2ef51fb7792d898f500": "0x1b1ae4d6e2ef500000",
    "0xf618d9b104411480a863e623fc55232d1a4f48aa": "0xe689e6d44b1668000",
    "0xf622e584a6623eaaf99f2be49e5380c5cbcf5cd8": "0xad78ebc5ac6200000",
    "0xf632adff490da4b72d1236d04b510f74d2faa3cd": "0x4be4e7267b6ae00000",
    "0xf639ac31da9f67271bd10402b7654e5ce763bd47": "0x15af0f42baf9260000",
    "0xf63a579bc3eac2a9490410128dbcebe6d9de8243": "0x50c5e761a444080000",
    "0xf645dd7c890093e8e4c8aa92a6bb353522d3dc98": "0x7439fa2099e580000",
    "0xf648ea89c27525710172944e79edff847803b775": "0x152d02c7e14af6800000",
    "0xf64a4ac8d540a9289c68d960d5fb7cc45a77831c": "0x6c6b935b8bbd400000",
    "0xf64ecf2117931c6d535a311e4ffeaef9d49405b8": "0x90f534608a72880000",
    "0xf64fe0939a8d1eea2a0ecd9a9730fd7958e33109": "0x11de1e6db450c0000",
    "0xf65616be9c8b797e7415227c9138faa0891742d7": "0x2ad373ce668e980000",
    "0xf657fcbe682eb4e8db152ecf892456000b513d15": "0x692ae8897081d00000",
    "0xf65819ac4cc14c137f05dd7977c7dae08d1a4ab5": "0x58788cb94b1d80000",
    "0xf67bb8e2118bbcd59027666eedf6943ec9f880a5": "0xd8d726b7177a800000",
    "0xf68464bf64f2411356e4d3250efefe5c50a5f65b": "0x1158e460913d00000",
    "0xf686785b89720b61145fea80978d6acc8e0bc196": "0xd8d726b7177a800000",
    "0xf68c5e33fa97139df5b2e63886ce34ebf3e4979c": "0xb3fa4169e2d8e00000",
    "0xf6a8635757c5e8c134d20d028cf778cf8609e46a": "0x4f1d772faec17c0000",
    "0xf6b782f4dcd745a6c0e2e030600e04a24b25e542": "0x15af1d78b58c400000",
    "0xf6bc37b1d2a3788d589b6de212dc1713b2f6e78e": "0x10f0cf064dd59200000",
    "0xf6c3c48a1ac0a34799f04db86ec7a975fe7768f3": "0x6acb3df27e1f880000",
    "0xf6d25d3f3d846d239f525fa8cac97bc43578dbac": "0x30927f74c9de000000",
    "0xf6eaac7032d492ef17fd6095afc11d634f56b382": "0x1b1b6bd7af64c70000",
    "0xf6ead67dbf5b7eb13358e10f36189d53e643cfcf": "0x878678326eac9000000",
    "0xf6f1a44309051c6b25e47dff909b179bb9ab591c": "0x692ae8897081d00000",
    "0xf70328ef97625fe745faa49ee0f9d4aa3b0dfb69": "0x3635c9adc5dea00000",
    "0xf70a998a717b338d1dd99854409b1a338deea4b0": "0x6c6b935b8bbd400000",
    "0xf70d637a845c06db6cdc91e6371ce7c4388a628e": "0x1158e460913d00000",
    "0xf7155213449892744bc60f2e04400788bd041fdd": "0x39fbae8d042dd0000",
    "0xf71b4534f286e43093b1e15efea749e7597b8b57": "0x161c13d3341c87280000",
    "0xf734ec03724ddee5bb5279aa1afcf61b0cb448a1": "0xe5bf2cc9b097800000",
    "0xf736dc96760012388fe88b66c06efe57e0d7cf0a": "0x71d75ab9b920500000",
    "0xf73ac46c203be1538111b151ec8220c786d84144": "0xff7377817b82b8000",
    "0xf73dd9c142b71bce11d06e30e7e7d032f2ec9c9e": "0x6acb3df27e1f880000",
    "0xf7418aa0e713d248228776b2e7434222ae75e3a5": "0x6c6b935b8bbd400000",
    "0xf74e6e145382b4db821fe0f2d98388f45609c69f": "0x56bc75e2d63100000",
    "0xf7500c166f8bea2f82347606e5024be9e4f4ce99": "0x1158e460913d00000",
    "0xf757fc8720d3c4fa5277075e60bd5c411aebd977": "0x6c6b935b8bbd400000",
    "0xf75bb39c799779ebc04a336d260da63146ed98d0": "0x15af1d78b58c40000",
    "0xf768f321fd6433d96b4f354d3cc1652c1732f57f": "0x21e19e0c9bab2400000",
    "0xf76f69cee4faa0a63b30ae1e7881f4f715657010": "0xad78ebc5ac6200000",
    "0xf777361a3dd8ab62e5f1b9b047568cc0b555704c": "0x3635c9adc5dea00000",
    "0xf77c7b845149efba19e261bc7c75157908afa990": "0x6c6b935b8bbd400000",
    "0xf77f9587ff7a2d7295f1f571c886bd33926a527c": "0x6c68ccd09b022c0000",
    "0xf78258c12481bcdddbb72a8ca0c043097261c6c5": "0x1158e460913d00000",
    "0xf798d16da4e460c460cd485fae0fa0599708eb82": "0x3635c9adc5dea00000",
    "0xf7a1ade2d0f529123d1055f19b17919f56214e67": "0x1b1ae4d6e2ef500000",
    "0xf7acff934b84da0969dc37a8fcf643b7d7fbed41": "0x6c6acc67d7b1d40000",
    "0xf7b151cc5e571c17c76539dbe9964cbb6fe5de79": "0x74717cfb6883100000",
    "0xf7b29b82195c882dab7897c2ae95e77710f57875": "0x7735416132dbfc0000",
    "0xf7bc4c44910d5aedd66ed2355538a6b193c361ec": "0x541de2c2d8d620000",
    "0xf7c00cdb1f020310d5acab7b496aaa44b779085e": "0x5a87e7d7f5f6580000",
    "0xf7c1b443968b117b5dd9b755572fcd39ca5ec04b": "0x18b968c292f1b50000",
    "0xf7c50f922ad16b61c6d1baa045ed816815bac48f": "0x2a9396a9784ad7d0000",
    "0xf7c708015071d4fb0a3a2a09a45d156396e3349e": "0xa2a15d09519be00000",
    "0xf7cbdba6be6cfe68dbc23c2b0ff530ee05226f84": "0x1158e460913d00000",
    "0xf7d0d310acea18406138baaabbfe0571e80de85f": "0x487a9a304539440000",
    "0xf7d7af204c56f31fd94398e40df1964bd8bf123c": "0x821d221b5291f8000",
    "0xf7dc251196fbcbb77c947d7c1946b0ff65021cea": "0x3635c9adc5dea00000",
    "0xf7e45a12aa711c709acefe95f33b78612d2ad22a": "0xe0655e2f26bc9180000",
    "0xf7f4898c4c526d955f21f055cb6e47b915e51964": "0x7c0860e5a80dc00000",
    "0xf7f91e7acb5b8129a306877ce3168e6f438b66a1": "0x98a7d9b8314c00000",
    "0xf7fc45abf76f5088e2e5b5a8d132f28a4d4ec1c0": "0x6c6b935b8bbd400000",
    "0xf8063af4cc1dd9619ab5d8bff3fcd1faa8488221": "0x6c6b935b8bbd400000",
    "0xf8086e42661ea929d2dda1ab6c748ce3055d111e": "0x3635c9adc5dea00000",
    "0xf8087786b42da04ed6d1e0fe26f6c0eefe1e9f5a": "0x21e19e0c9bab2400000",
    "0xf80d3619702fa5838c48391859a839fb9ce7160f": "0x6c07a7d1b16e700000",
    "0xf814799f6ddf4dcb29c7ee870e75f9cc2d35326d": "0x3635c9adc5dea00000",
    "0xf815c10a032d13c34b8976fa6e3bd2c9131a8ba9": "0x487a9a304539440000",
    "0xf81622e55757daea6675975dd93538da7d16991e": "0x6c6b935b8bbd400000",
    "0xf824ee331e4ac3cc587693395b57ecf625a6c0c2": "0x56c95de8e8ca1d0000",
    "0xf827d56ed2d32720d4abf103d6d0ef4d3bcd559b": "0x16c80065791a28000",
    "0xf8298591523e50b103f0b701d623cbf0f74556f6": "0xad78ebc5ac6200000",
    "0xf848fce9ab611c7d99206e23fac69ad488b94fe1": "0x2a1129d0936720000",
    "0xf84f090adf3f8db7e194b350fbb77500699f66fd": "0x6acb3df27e1f880000",
    "0xf851b010f633c40af1a8f06a73ebbaab65077ab5": "0xee86442fcd06c00000",
    "0xf858171a04d357a13b4941c16e7e55ddd4941329": "0x246a5218f2a000000",
    "0xf85bab1cb3710fc05fa19ffac22e67521a0ba21d": "0x6c95357fa6b36c0000",
    "0xf86a3ea8071f7095c7db8a05ae507a8929dbb876": "0x1236efcbcbb3400000",
    "0xf8704c16d2fd5ba3a2c01d0eb20484e6ecfa3109": "0xad78ebc5ac6200000",
    "0xf870995fe1e522321d754337a45c0c9d7b38951c": "0x1158e460913d00000",
    "0xf873e57a65c93b6e18cb75f0dc077d5b8933dc5c": "0xaadec983fcff40000",
    "0xf875619d8a23e45d8998d184d480c0748970822a": "0xd8d726b7177a800000",
    "0xf87bb07b289df7301e54c0efda6a2cf291e89200": "0x4be4e7267b6ae00000",
    "0xf88900db737955b1519b1a7d170a18864ce590eb": "0xfc936392801c0000",
    "0xf88b58db37420b464c0be88b45ee2b95290f8cfa": "0x22b1c8c1227a00000",
    "0xf8962b75db5d24c7e8b7cef1068c3e67cebb30a5": "0xf2dc7d47f15600000",
    "0xf8a065f287d91d77cd626af38ffa220d9b552a2b": "0x678a932062e4180000",
    "0xf8a49ca2390c1f6d5c0e62513b079571743f7cc6": "0xa2a15d09519be00000",
    "0xf8a50cee2e688ceee3aca4d4a29725d4072cc483": "0x6c6b935b8bbd400000",
    "0xf8ac4a39b53c11307820973b441365cffe596f66": "0x6c6b935b8bbd400000",
    "0xf8ae857b67a4a2893a3fbe7c7a87ff1c01c6a6e7": "0xd8d726b7177a800000",
    "0xf8bf9c04874e5a77f38f4c38527e80c676f7b887": "0x6c6b935b8bbd400000",
    "0xf8c7f34a38b31801da43063477b12b27d0f203ff": "0x1ad2baba6fef480000",
    "0xf8ca336c8e91bd20e314c20b2dd4608b9c8b9459": "0x2ddc9bc5b32c780000",
    "0xf8d17424c767bea31205739a2b57a7277214eebe": "0x246ddf97976680000",
    "0xf8d52dcc5f96cc28007b3ecbb409f7e22a646caa": "0x81690e18128480000",
    "0xf8dce867f0a39c5bef9eeba609229efa02678b6c": "0x6c6b935b8bbd400000",
    "0xf8f226142a428434ab17a1864a2597f64aab2f06": "0x9598b2fb2e9f28000",
    "0xf8f6645e0dee644b3dad81d571ef9baf840021ad": "0x6c6b935b8bbd400000",
    "0xf901c00fc1db88b69c4bc3252b5ca70ea6ee5cf6": "0x15af1d78b58c400000",
    "0xf93d5bcb0644b0cce5fcdda343f5168ffab2877d": "0xb6207b67d26f90000",
    "0xf9570e924c95debb7061369792cf2efec2a82d5e": "0x1158e460913d00000",
    "0xf9642086b1fbae61a6804dbe5fb15ec2d2b537f4": "0x6c6b935b8bbd400000",
    "0xf96488698590dc3b2c555642b871348dfa067ad5": "0x1b1ae4d6e2ef500000",
    "0xf964d98d281730ba35b2e3a314796e7b42fedf67": "0x53b0876098d80c0000",
    "0xf9650d6989f199ab1cc479636ded30f241021f65": "0x2e141ea081ca080000",
    "0xf96883582459908c827627e86f28e646f9c7fc7a": "0x1c4a78737cdcfb80000",
    "0xf96b4c00766f53736a8574f822e6474c2f21da2d": "0x15af1d78b58c400000",
    "0xf9729d48282c9e87166d5eef2d01eda9dbf78821": "0x56b83ddc728548000",
    "0xf9767e4ecb4a5980527508d7bec3d45e4c649c13": "0x678a932062e4180000",
    "0xf978b025b64233555cc3c19ada7f4199c9348bf7": "0x54b40b1f852bda000000",
    "0xf97b56ebd5b77abc9fbacbabd494b9d2c221cd03": "0x6acb3df27e1f880000",
    "0xf9811fa19dadbf029f8bfe569adb18228c80481a": "0xad78ebc5ac6200000",
    "0xf98250730c4c61c57f129835f2680894794542f3": "0xd8d726b7177a800000",
    "0xf989346772995ec1906faffeba2a7fe7de9c6bab": "0x16a6502f15a1e540000",
    "0xf998ca3411730a6cd10e7455b0410fb0f6d3ff80": "0x6c6b935b8bbd400000",
    "0xf99aee444b5783c093cfffd1c4632cf93c6f050c": "0x15af1d78b58c400000",
    "0xf99eeece39fa7ef5076d855061384009792cf2e0": "0x1b1ae4d6e2ef500000",
    "0xf9a59c3cc5ffacbcb67be0fc7256f64c9b127cb4": "0x6c6b935b8bbd400000",
    "0xf9a94bd56198da245ed01d1e6430b24b2708dcc0": "0x28a77afda87ee50000",
    "0xf9b37825f03073d31e249378c30c795c33f83af2": "0xad9aabf8c9bfc0000",
    "0xf9b617f752edecae3e909fbb911d2f8192f84209": "0x90f534608a72880000",
    "0xf9bfb59d538afc4874d4f5941b08c9730e38e24b": "0x22b1c8c1227a00000",
    "0xf9dd239008182fb519fb30eedd2093fed1639be8": "0x1b1ae4d6e2ef500000",
    "0xf9debaecb5f339beea4894e5204bfa340d067f25": "0x5a42844673b1640000",
    "0xf9e37447406c412197b2e2aebc001d6e30c98c60": "0x1c479bb4349c0ee0000",
    "0xf9e7222faaf0f4da40c1c4a40630373a09bed7b6": "0x9b4fdcb09456240000",
    "0xf9ece022bccd2c92346911e79dd50303c01e0188": "0x3635c9adc5dea00000",
    "0xfa00c376e89c05e887817a9dd0748d96f341aa89": "0x104d0d00d2b7f60000",
    "0xfa0c1a988c8a17ad3528eb28b3409daa58225f26": "0xad78ebc5ac6200000",
    "0xfa105f1a11b6e4b1f56012a27922e2ac2da4812f": "0x205b4dfa1ee74780000",
    "0xfa142fe47eda97e6503b386b18a2bedd73ccb5b1": "0x2e153ad81548100000",
    "0xfa14b566234abee73042c31d21717182cba14aa1": "0x11c7ea162e78200000",
    "0xfa19d6f7a50f4f079893d167bf14e21d0073d196": "0x1cbb3a3ff08d080000",
    "0xfa1f1971a775c3504fef5079f640c2c4bce7ac05": "0x6c6b935b8bbd400000",
    "0xfa279bfd8767f956bf7fa0bd5660168da75686bd": "0x90f534608a72880000",
    "0xfa27cc49d00b6c987336a875ae39da58fb041b2e": "0x21e19e0c9bab2400000",
    "0xfa283299603d8758e8cab082125d2c8f7d445429": "0x15bcacb1e0501ae8000",
    "0xfa2bbca15d3fe39f8a328e91f90da14f7ac6253d": "0xad78ebc5ac6200000",
    "0xfa2fd29d03fee9a07893df3a269f56b72f2e1e64": "0x21e19e0c9bab2400000",
    "0xfa33553285a973719a0d5f956ff861b2d89ed304": "0x1158e460913d00000",
    "0xfa3a0c4b903f6ea52ea7ab7b8863b6a616ad6650": "0x1158e460913d00000",
    "0xfa3a1aa4488b351aa7560cf5ee630a2fd45c3222": "0x2fa47e6aa7340d0000",
    "0xfa410971ad229c3036f41acf852f2ac999281950": "0xd8b311a8ddfa7c0000",
    "0xfa44a855e404c86d0ca8ef3324251dfb349c539e": "0x542253a126ce400000",
    "0xfa5201fe1342af11307b9142a041243ca92e2f09": "0x2038116a3ac043980000",
    "0xfa60868aafd4ff4c5c57914b8ed58b425773dfa9": "0x1cfe5c808f39fbc0000",
    "0xfa67b67b4f37a0150915110ede073b05b853bda2": "0x2319ba947371ad0000",
    "0xfa68e0cb3edf51f0a6f211c9b2cb5e073c9bffe6": "0xfc936392801c00000",
    "0xfa6a37f018e97967937fc5e8617ba1d786dd5f77": "0x43c30fb0884a96c0000",
    "0xfa7606435b356cee257bd2fcd3d9eacb3cd1c4e1": "0x56bc75e2d63100000",
    "0xfa7adf660b8d99ce15933d7c5f072f3cbeb99d33": "0x14061b9d77a5e980000",
    "0xfa86ca27bf2854d98870837fb6f6dfe4bf6453fc": "0x11757e8525cf148000",
    "0xfa8cf4e627698c5d5788abb7880417e750231399": "0xe61a3696eef6100000",
    "0xfa8e3b1f13433900737daaf1f6299c4887f85b5f": "0x26c29e47c4844c0000",
    "0xfa9ec8efe08686fa58c181335872ba698560ecab": "0x6c6acc67d7b1d40000",
    "0xfaad905d847c7b23418aeecbe3addb8dd3f8924a": "0x6acb3df27e1f880000",
    "0xfaaeba8fc0bbda553ca72e30ef3d732e26e82041": "0x488d282aafc9f68000",
    "0xfab487500df20fb83ebed916791d561772adbebf": "0x6c6b4c4da6ddbe0000",
    "0xfac5ca94758078fbfccd19db3558da7ee8a0a768": "0x3728a62b0dcff60000",
    "0xfad96ab6ac768ad5099452ac4777bd1a47edc48f": "0x56bc75e2d63100000",
    "0xfae76719d97eac41870428e940279d97dd57b2f6": "0x14dbb2195ca228900000",
    "0xfae881937047895a660cf229760f27e66828d643": "0x9ddc1e3b901180000",
    "0xfae92c1370e9e1859a5df83b56d0f586aa3b404c": "0x5c5b4f3d843980000",
    "0xfaf5f0b7b6d558f5090d9ea1fb2d42259c586078": "0x15affb8420c6b640000",
    "0xfb126f0ec769f49dcefca2f200286451583084b8": "0x10fcbc2350396bf0000",
    "0xfb135eb15a8bac72b69915342a60bbc06b7e077c": "0x43c33c1937564800000",
    "0xfb223c1e22eac1269b32ee156a5385922ed36fb8": "0x6c6b935b8bbd400000",
    "0xfb37cf6b4f81a9e222fba22e9bd24b5098b733cf": "0x21a754a6dc5280000",
    "0xfb3860f4121c432ebdc8ec6a0331b1b709792e90": "0x208c394af1c8880000",
    "0xfb39189af876e762c71d6c3e741893df226cedd6": "0xd8d726b7177a800000",
    "0xfb3a0b0d6b6a718f6fc0292a825dc9247a90a5d0": "0xad6dd199e975b0000",
    "0xfb3fa1ac08aba9cc3bf0fe9d483820688f65b410": "0x65a4da25d3016c00000",
    "0xfb3fe09bb836861529d7518da27635f538505615": "0x4be39216fda0700000",
    "0xfb5125bf0f5eb0b6f020e56bfc2fdf3d402c097e": "0x14061b9d77a5e980000",
    "0xfb5518714cefc36d04865de5915ef0ff47dfe743": "0x6c6b935b8bbd400000",
    "0xfb5ffaa0f7615726357891475818939d2037cf96": "0x1158e460913d00000",
    "0xfb685c15e439965ef626bf0d834cd1a89f2b5695": "0xd5967be4fc3f100000",
    "0xfb744b951d094b310262c8f986c860df9ab1de65": "0x2d1c515f1cb4a8000",
    "0xfb79abdb925c55b9f98efeef64cfc9eb61f51bb1": "0x6140c056fb0ac80000",
    "0xfb8113f94d9173eefd5a3073f516803a10b286ae": "0x4563918244f400000",
    "0xfb842ca2c5ef133917a236a0d4ac40690110b038": "0x10969a62be15880000",
    "0xfb91fb1a695553f0c68e21276decf0b83909b86d": "0x56c003617af780000",
    "0xfb9473cf7712350a1fa0395273fc80560752e4fb": "0x6af2198ba85aa0000",
    "0xfb949c647fdcfd2514c7d58e31f28a532d8c5833": "0x43c33c1937564800000",
    "0xfba5486d53c6e240494241abf87e43c7600d413a": "0x6bbf61494948340000",
    "0xfbb161fe875f09290a4b262bc60110848f0d2226": "0x6c6b935b8bbd400000",
    "0xfbbbebcfbe235e57dd2306ad1a9ec581c7f9f48f": "0x22b1c8c1227a00000",
    "0xfbc01db54e47cdc3c438694ab717a856c23fe6e9": "0x1ca7150ab174f470000",
    "0xfbcfcc4a7b0f26cf26e9f3332132e2fc6a230766": "0x1b1ae4d6e2ef5000000",
    "0xfbe71622bcbd31c1a36976e7e5f670c07ffe16de": "0x15af1d78b58c400000",
    "0xfbede32c349f3300ef4cd33b4de7dc18e443d326": "0xab4dcf399a3a600000",
    "0xfbf204c813f836d83962c7870c7808ca347fd33e": "0x1158e460913d00000",
    "0xfbf75933e01b75b154ef0669076be87f62dffae1": "0x10846372f249d4c00000",
    "0xfc0096b21e95acb8d619d176a4a1d8d529badbef": "0x14d9693bcbec028000",
    "0xfc00a420a36107dfd5f495128a5fe5abb2db0f34": "0x143179d869110200000",
    "0xfc018a690ad6746dbe3acf9712ddca52b6250039": "0x21e19e0c9bab2400000",
    "0xfc02734033e57f70517e0afc7ee62461f06fad8e": "0x155bd9307f9fe80000",
    "0xfc0ee6f7c2b3714ae9916c45566605b656f32441": "0x5f68e8131ecf800000",
    "0xfc10b7a67b3268d5331bfb6a14def5ea4a162ca3": "0xad78ebc5ac6200000",
    "0xfc15cb99a8d1030b12770add033a79ee0d0c908c": "0x12fa00bd52e6240000",
    "0xfc2952b4c49fedd0bc0528a308495e6d6a1c71d6": "0x6c6b935b8bbd400000",
    "0xfc2c1f88961d019c3e9ea33009152e0693fbf88a": "0x1b1ae4d6e2ef5000000",
    "0xfc361105dd90f9ede566499d69e9130395f12ac8": "0x53a4fe2f204e80e00000",
    "0xfc372ff6927cb396d9cf29803500110da632bc52": "0x6c6b935b8bbd400000",
    "0xfc39be41094b1997d2169e8264c2c3baa6c99bc4": "0x6c6b935b8bbd400000",
    "0xfc3d226bb36a58f526568857b0bb12d109ec9301": "0x6c6b935b8bbd400000",
    "0xfc43829ac787ff88aaf183ba352aadbf5a15b193": "0xd6ac0a2b0552e00000",
    "0xfc49c1439a41d6b3cf26bb67e0365224e5e38f5f": "0x3636d7af5ec98e0000",
    "0xfc5500825105cf712a318a5e9c3bfc69c89d0c12": "0xd8d726b7177a800000",
    "0xfc66faba277f4b5de64ad45eb19c31e00ced3ed5": "0x131beb925ffd3200000",
    "0xfc7e22a503ec5abe9b08c50bd14999f520fa4884": "0x15a477dfbe1ea148000",
    "0xfc8215a0a69913f62a43bf1c8590b9ddcd0d8ddb": "0x6c6b935b8bbd400000",
    "0xfc989cb487bf1a7d17e4c1b7c4b7aafdda6b0a8d": "0x1158e460913d00000",
    "0xfc9b347464b2f9929d807e039dae48d3d98de379": "0x2f6f10780d22cc00000",
    "0xfca43bbc23a0d321ba9e46b929735ce7d8ef0c18": "0x1158e460913d00000",
    "0xfca73eff8771c0103ba3cc1a9c259448c72abf0b": "0x3635c9adc5dea00000",
    "0xfcada300283f6bcc134a91456760b0d77de410e0": "0x6c6b935b8bbd400000",
    "0xfcbc5c71ace79741450b012cf6b8d3f17db68a70": "0x205b4dfa1ee74780000",
    "0xfcbd85feea6a754fcf3449449e37ff9784f7773c": "0xa74ada69abd7780000",
    "0xfcc9d4a4262e7a027ab7519110d802c495ceea39": "0x1595182224b26480000",
    "0xfccd0d1ecee27addea95f6857aeec8c7a04b28ee": "0x21e19e0c9bab2400000",
    "0xfcd0b4827cd208ffbf5e759dba8c3cc61d8c2c3c": "0x1b1ae4d6e2ef5000000",
    "0xfce089635ce97abac06b44819be5bb0a3e2e0b37": "0x503920a7630a78000",
    "0xfcf199f8b854222f182e4e1d099d4e323e2aae01": "0x3635c9adc5dea00000",
    "0xfcfc3a5004d678613f0b36a642269a7f371c3f6a": "0x3635c9adc5dea00000",
    "0xfd191a35157d781373fb411bf9f25290047c5eef": "0x3635c9adc5dea00000",
    "0xfd1faa347b0fcc804c2da86c36d5f1d18b7087bb": "0x2d6eb247a96f60000",
    "0xfd1fb5a89a89a721b8797068fbc47f3e9d52e149": "0xcd0b5837fc6580000",
    "0xfd204f4f4aba2525ba728afdf78792cbdeb735ae": "0x6c6b935b8bbd400000",
    "0xfd2757cc3551a095878d97875615fe0c6a32aa8a": "0x206db15299beac0000",
    "0xfd2872d19e57853cfa16effe93d0b1d47b4f93fb": "0xd8d726b7177a800000",
    "0xfd2929271e9d2095a264767e7b0df52ea0d1d400": "0xa2a1eb251b5ae40000",
    "0xfd377a385272900cb436a3bb7962cdffe93f5dad": "0x6c6b935b8bbd400000",
    "0xfd40242bb34a70855ef0fd90f3802dec2136b327": "0x68a875073e29240000",
    "0xfd452c3969ece3801c542020f1cdcaa1c71ed23d": "0x152d02c7e14af6800000",
    "0xfd4b551f6fdbcda6c511b5bb372250a6b783e534": "0x11de1e6db450c0000",
    "0xfd4b989558ae11be0c3b36e2d6f2a54a9343ca2e": "0x6c6b935b8bbd400000",
    "0xfd4de8e3748a289cf7d060517d9d38388db01fb8": "0xd8d726b7177a80000",
    "0xfd5a63157f914fd398eab19c137dd9550bb7715c": "0x56bc75e2d63100000",
    "0xfd60d2b5af3d35f7aaf0c393052e79c4d823d985": "0x30eb50d2e14080000",
    "0xfd686de53fa97f99639e2568549720bc588c9efc": "0x6ac5c62d9486070000",
    "0xfd7ede8f5240a06541eb699d782c2f9afb2170f6": "0x487a9a304539440000",
    "0xfd812bc69fb170ef57e2327e80affd14f8e4b6d2": "0x6c6b935b8bbd400000",
    "0xfd88d114220f081cb3d5e15be8152ab07366576a": "0x1043561a8829300000",
    "0xfd918536a8efa6f6cefe1fa1153995fef5e33d3b": "0x1b1ae4d6e2ef500000",
    "0xfd920f722682afb5af451b0544d4f41b3b9d5742": "0x7e52056a123f3c0000",
    "0xfd9579f119bbc819a02b61e38d8803c942f24d32": "0x5b97e9081d9400000",
    "0xfda0ce15330707f10bce3201172d2018b9ddea74": "0x2d041d705a2c60000",
    "0xfda3042819af3e662900e1b92b4358eda6e92590": "0x1907a284d58f63e00000",
    "0xfda6810ea5ac985d6ffbf1c511f1c142edcfddf7": "0xd8d726b7177a800000",
    "0xfdb33944f2360615e5be239577c8a19ba52d9887": "0x209d922f5259c50000",
    "0xfdba5359f7ec3bc770ac49975d844ec9716256f1": "0x3635c9adc5dea00000",
    "0xfdc4d4765a942f5bf96931a9e8cc7ab8b757ff4c": "0x126c478a0e3ea8600000",
    "0xfdcd5d80b105897a57abc47865768b2900524295": "0x15af1d78b58c4000000",
    "0xfdd1195f797d4f35717d15e6f9810a9a3ff55460": "0xfc936392801c0000",
    "0xfdd502a74e813bcfa355ceda3c176f6a6871af7f": "0x15af1d78b58c400000",
    "0xfde395bc0b6d5cbb4c1d8fea3e0b4bff635e9db7": "0x6c6b935b8bbd400000",
    "0xfdeaac2acf1d138e19f2fc3f9fb74592e3ed818a": "0x243d4d18229ca20000",
    "0xfdecc82ddfc56192e26f563c3d68cb544a96bfed": "0x17da3a04c7b3e00000",
    "0xfdf42343019b0b0c6bf260b173afab7e45b9d621": "0x6c6acc67d7b1d40000",
    "0xfdf449f108c6fb4f5a2b081eed7e45e6919e4d25": "0x6c6b935b8bbd400000",
    "0xfdfd6134c04a8ab7eb16f00643f8fed7daaaecb2": "0x15af1d78b58c400000",
    "0xfe00bf439911a553982db638039245bcf032dbdc": "0x155bd9307f9fe80000",
    "0xfe016ec17ec5f10e3bb98ff4a1eda045157682ab": "0x145f5402e7b2e60000",
    "0xfe0e30e214290d743dd30eb082f1f0a5225ade61": "0xad78ebc5ac6200000",
    "0xfe210b8f04dc6d4f76216acfcbd59ba83be9b630": "0x1158e460913d00000",
    "0xfe22a0b388668d1ae2643e771dacf38a434223cc": "0xd8db5ebd7b26380000",
    "0xfe362688845fa244cc807e4b1130eb3741a8051e": "0x3635c9adc5dea00000",
    "0xfe3827d57630cf8761d512797b0b858e478bbd12": "0x1158e460913d00000",
    "0xfe418b421a9c6d373602790475d2303e11a75930": "0x3708baed3d68900000",
    "0xfe4249127950e2f896ec0e7e2e3d055aab10550f": "0x243d4d18229ca20000",
    "0xfe4d8403216fd571572bf1bdb01d00578978d688": "0x215f835bc769da80000",
    "0xfe53b94989d89964da2061539526bbe979dd2ea9": "0x68a875073e29240000",
    "0xfe549bbfe64740189892932538daaf46d2b61d4f": "0x22b1c8c1227a00000",
    "0xfe615d975c0887e0c9113ec7298420a793af8b96": "0x1b1ae4d6e2ef5000000",
    "0xfe65c4188d7922576909642044fdc52395560165": "0xd8d726b7177a800000",
    "0xfe697ff22ca547bfc95e33d960da605c6763f35b": "0x47d4119fd960940000",
    "0xfe6a895b795cb4bf85903d3ce09c5aa43953d3bf": "0xb8507a820728200000",
    "0xfe6f5f42b6193b1ad16206e4afb5239d4d7db45e": "0x5dc892aa1131c80000",
    "0xfe7011b698bf3371132d7445b19eb5b094356aee": "0x6c6b935b8bbd400000",
    "0xfe80e9232deaff19baf99869883a4bdf0004e53c": "0x2e62f20a69be400000",
    "0xfe8e6e3665570dff7a1bda697aa589c0b4e9024a": "0x6c6b935b8bbd400000",
    "0xfe8f1fdcab7fbec9a6a3fcc507619600505c36a3": "0x11164759ffb320000",
    "0xfe91eccf2bd566afa11696c5049fa84c69630a52": "0x692ae8897081d00000",
    "0xfe96c4cd381562401aa32a86e65b9d52fa8aee27": "0x8f1d5c1cae37400000",
    "0xfe98c664c3e447a95e69bd582171b7176ea2a685": "0xd8d726b7177a800000",
    "0xfe9ad12ef05d6d90261f96c8340a0381974df477": "0x6c6b935b8bbd400000",
    "0xfe9c0fffefb803081256c0cf4d6659e6d33eb4fb": "0x52d542804f1ce00000",
    "0xfe9cfc3bb293ddb285e625f3582f74a6b0a5a6cd": "0x6acb3df27e1f880000",
    "0xfe9e1197d7974a7648dcc7a03112a88edbc9045d": "0x10afc1ade3b4ed40000",
    "0xfeaca2ac74624bf348dac9985143cfd652a4be55": "0x5897fcbb02914088000",
    "0xfead1803e5e737a68e18472d9ac715f0994cc2be": "0x1b1ae4d6e2ef500000",
    "0xfeb8b8e2af716ae41fc7c04bcf29540156461e6b": "0x545174a528a77a0000",
    "0xfeb92d30bf01ff9a1901666c5573532bfa07eeec": "0x3635c9adc5dea00000",
    "0xfebc3173bc9072136354002b7b4fb3bfc53f22f1": "0x140ec80fa7ee880000",
    "0xfebd48d0ffdbd5656cd5e686363a61145228f279": "0x97c9ce4cf6d5c00000",
    "0xfebd9f81cf78bd5fb6c4b9a24bd414bb9bfa4c4e": "0x6be10fb8ed6e138000",
    "0xfec06fe27b44c784b2396ec92f7b923ad17e9077": "0x6c6b935b8bbd400000",
    "0xfec14e5485de2b3eef5e74c46146db8e454e0335": "0x9b41fbf9e0aec0000",
    "0xfed8476d10d584b38bfa6737600ef19d35c41ed8": "0x62a992e53a0af00000",
    "0xfeef3b6eabc94affd3310c1c4d0e65375e131119": "0x1158e460913d00000",
    "0xfef09d70243f39ed8cd800bf9651479e8f4aca3c": "0xad78ebc5ac6200000",
    "0xfef3b3dead1a6926d49aa32b12c22af54d9ff985": "0x3635c9adc5dea00000",
    "0xff0b7cb71da9d4c1ea6ecc28ebda504c63f82fd1": "0x388a885df2fc6c0000",
    "0xff0c3c7798e8733dd2668152891bab80a8be955c": "0x45946b0f9e9d60000",
    "0xff0cb06c42e3d88948e45bd7b0d4e291aefeea51": "0x678a932062e4180000",
    "0xff0cc8dac824fa24fc3caa2169e6e057cf638ad6": "0xd8d726b7177a800000",
    "0xff0e2fec304207467e1e3307f64cbf30af8fd9cd": "0x6c6b935b8bbd400000",
    "0xff128f4b355be1dc4a6f94fa510d7f15d53c2aff": "0x93739534d286800000",
    "0xff12e49d8e06aa20f886293c0b98ed7eff788805": "0xd8d726b7177a800000",
    "0xff207308ced238a6c01ad0213ca9eb4465d42590": "0x6c6acc67d7b1d40000",
    "0xff26138330274df4e0a3081e6df7dd983ec6e78f": "0x6c6b935b8bbd400000",
    "0xff2726294148b86c78a9372497e459898ed3fee3": "0x6acb3df27e1f880000",
    "0xff3ded7a40d3aff0d7a8c45fa6136aa0433db457": "0x6c68ccd09b022c0000",
    "0xff3eee57c34d6dae970d8b311117c53586cd3502": "0x5c283d410394100000",
    "0xff3ef6ba151c21b59986ae64f6e8228bc9a2c733": "0x6c6b935b8bbd400000",
    "0xff41d9e1b4effe18d8b0d1f63fc4255fb4e06c3d": "0x487a9a304539440000",
    "0xff45cb34c928364d9cc9d8bb00373474618f06f3": "0x56bc75e2d63100000",
    "0xff49a775814ec00051a795a875de24592ea400d4": "0x2a5a058fc295ed000000",
    "0xff4a408f50e9e72146a28ce4fc8d90271f116e84": "0x6acb3df27e1f880000",
    "0xff4d9c8484c43c42ff2c5ab759996498d323994d": "0xd8d726b7177a800000",
    "0xff4fc66069046c525658c337a917f2d4b832b409": "0x6c6b935b8bbd400000",
    "0xff5162f2354dc492c75fd6e3a107268660eecb47": "0x5c283d410394100000",
    "0xff545bbb66fbd00eb5e6373ff4e326f5feb5fe12": "0x1158e460913d00000",
    "0xff5e7ee7d5114821e159dca5e81f18f1bfffbff9": "0x6c6b935b8bbd400000",
    "0xff61c9c1b7a3d8b53bba20b34466544b7b216644": "0x6c6b935b8bbd400000",
    "0xff65511cada259260c1ddc41974ecaecd32d6357": "0x5f68e8131ecf800000",
    "0xff7843c7010aa7e61519b762dfe49124a76b0e4e": "0xc5b17924412b9bb00000",
    "0xff78541756ab2b706e0d70b18adb700fc4f1643d": "0x92896529baddc880000",
    "0xff83855051ee8ffb70b4817dba3211ed2355869d": "0x15af1d78b58c400000",
    "0xff850e3be1eb6a4d726c08fa73aad358f39706da": "0x692ae8897081d00000",
    "0xff86e5e8e15b53909600e41308dab75f0e24e46b": "0x30eb50d2e140800000",
    "0xff88ebacc41b3687f39e4b59e159599b80cba33f": "0x15af1d78b58c400000",
    "0xff8a2ca5a81333f19998255f203256e1a819c0aa": "0xc249fdd3277800000",
    "0xff8eb07de3d49d9d52bbe8e5b26dbe1d160fa834": "0xd814dcb94453080000",
    "0xffa4aff1a37f984b0a67272149273ae9bd41e3bc": "0x21e19e0c9bab2400000",
    "0xffa696ecbd787e66abae4fe87b635f07ca57d848": "0x487a9a304539440000",
    "0xffac3db879a6c7158e8dec603b407463ba0d31cf": "0x6acb3df27e1f880000",
    "0xffad3dd74e2c1f796ac640de56dc99b4c792a402": "0x10f0cf064dd59200000",
    "0xffb04726dfa41afdc819168418610472970d7bfc": "0xd8d726b7177a800000",
    "0xffb3bcc3196a8c3cb834cec94c34fed35b3e1054": "0x48a43c54602f700000",
    "0xffb974673367f5c07be5fd270dc4b7138b074d57": "0x85ebc8bdb9066d8000",
    "0xffb9c7217e66743031eb377af65c77db7359dcda": "0x22b1c8c1227a00000",
    "0xffbc3da0381ec339c1c049eb1ed9ee34fdcea6ca": "0xd8d726b7177a800000",
    "0xffc5fc4b7e8a0293ff39a3a0f7d60d2646d37a74": "0x6c6b935b8bbd400000",
    "0xffc9cc3094b041ad0e076f968a0de3b167255866": "0x1770c1650beee80000",
    "0xffd5170fd1a8118d558e7511e364b24906c4f6b3": "0x341d8cd27f1588000",
    "0xffd6da958eecbc016bab91058440d39b41c7be83": "0x43c33c1937564800000",
    "0xffe0e997f1977a615f5a315af413fd4869343ba0": "0x56cd55fc64dfe0000",
    "0xffe28db53c9044b4ecd4053fd1b4b10d7056c688": "0x56bc75e2d63100000",
    "0xffe2e28c3fb74749d7e780dc8a5d422538e6e451": "0xdbb81e05bc12d8000",
    "0xffe8cbc1681e5e9db74a0f93f8ed25897519120f": "0x51b1d3839261ac0000",
    "0xffeac0305ede3a915295ec8e61c7f881006f4474": "0x556f64c1fe7fa0000",
    "0xffec0913c635baca2f5e57a37aa9fb7b6c9b6e26": "0x2ba39e82ed5d740000",
    "0xfff33a3bd36abdbd412707b8e310d6011454a7ae": "0x1b1ae4d6e2ef5000000",
    "0xfff4bad596633479a2a29f9a8b3f78eefd07e6ee": "0x56bc75e2d63100000",
    "0xfff7ac99c8e4feb60c9750054bdc14ce1857f181": "0x3635c9adc5dea00000"
}

},{}],24:[function(require,module,exports){
module.exports={
    "0x0000000000000000000000000000000000000000": "0x1",
    "0x0000000000000000000000000000000000000001": "0x1",
    "0x0000000000000000000000000000000000000002": "0x1",
    "0x0000000000000000000000000000000000000003": "0x1",
    "0x0000000000000000000000000000000000000004": "0x1",
    "0x0000000000000000000000000000000000000005": "0x1",
    "0x0000000000000000000000000000000000000006": "0x1",
    "0x0000000000000000000000000000000000000007": "0x1",
    "0x0000000000000000000000000000000000000008": "0x1",
    "0x0000000000000000000000000000000000000009": "0x1",
    "0x000000000000000000000000000000000000000a": "0x1",
    "0x000000000000000000000000000000000000000b": "0x1",
    "0x000000000000000000000000000000000000000c": "0x1",
    "0x000000000000000000000000000000000000000d": "0x1",
    "0x000000000000000000000000000000000000000e": "0x1",
    "0x000000000000000000000000000000000000000f": "0x1",
    "0x0000000000000000000000000000000000000010": "0x1",
    "0x0000000000000000000000000000000000000011": "0x1",
    "0x0000000000000000000000000000000000000012": "0x1",
    "0x0000000000000000000000000000000000000013": "0x1",
    "0x0000000000000000000000000000000000000014": "0x1",
    "0x0000000000000000000000000000000000000015": "0x1",
    "0x0000000000000000000000000000000000000016": "0x1",
    "0x0000000000000000000000000000000000000017": "0x1",
    "0x0000000000000000000000000000000000000018": "0x1",
    "0x0000000000000000000000000000000000000019": "0x1",
    "0x000000000000000000000000000000000000001a": "0x1",
    "0x000000000000000000000000000000000000001b": "0x1",
    "0x000000000000000000000000000000000000001c": "0x1",
    "0x000000000000000000000000000000000000001d": "0x1",
    "0x000000000000000000000000000000000000001e": "0x1",
    "0x000000000000000000000000000000000000001f": "0x1",
    "0x0000000000000000000000000000000000000020": "0x1",
    "0x0000000000000000000000000000000000000021": "0x1",
    "0x0000000000000000000000000000000000000022": "0x1",
    "0x0000000000000000000000000000000000000023": "0x1",
    "0x0000000000000000000000000000000000000024": "0x1",
    "0x0000000000000000000000000000000000000025": "0x1",
    "0x0000000000000000000000000000000000000026": "0x1",
    "0x0000000000000000000000000000000000000027": "0x1",
    "0x0000000000000000000000000000000000000028": "0x1",
    "0x0000000000000000000000000000000000000029": "0x1",
    "0x000000000000000000000000000000000000002a": "0x1",
    "0x000000000000000000000000000000000000002b": "0x1",
    "0x000000000000000000000000000000000000002c": "0x1",
    "0x000000000000000000000000000000000000002d": "0x1",
    "0x000000000000000000000000000000000000002e": "0x1",
    "0x000000000000000000000000000000000000002f": "0x1",
    "0x0000000000000000000000000000000000000030": "0x1",
    "0x0000000000000000000000000000000000000031": "0x1",
    "0x0000000000000000000000000000000000000032": "0x1",
    "0x0000000000000000000000000000000000000033": "0x1",
    "0x0000000000000000000000000000000000000034": "0x1",
    "0x0000000000000000000000000000000000000035": "0x1",
    "0x0000000000000000000000000000000000000036": "0x1",
    "0x0000000000000000000000000000000000000037": "0x1",
    "0x0000000000000000000000000000000000000038": "0x1",
    "0x0000000000000000000000000000000000000039": "0x1",
    "0x000000000000000000000000000000000000003a": "0x1",
    "0x000000000000000000000000000000000000003b": "0x1",
    "0x000000000000000000000000000000000000003c": "0x1",
    "0x000000000000000000000000000000000000003d": "0x1",
    "0x000000000000000000000000000000000000003e": "0x1",
    "0x000000000000000000000000000000000000003f": "0x1",
    "0x0000000000000000000000000000000000000040": "0x1",
    "0x0000000000000000000000000000000000000041": "0x1",
    "0x0000000000000000000000000000000000000042": "0x1",
    "0x0000000000000000000000000000000000000043": "0x1",
    "0x0000000000000000000000000000000000000044": "0x1",
    "0x0000000000000000000000000000000000000045": "0x1",
    "0x0000000000000000000000000000000000000046": "0x1",
    "0x0000000000000000000000000000000000000047": "0x1",
    "0x0000000000000000000000000000000000000048": "0x1",
    "0x0000000000000000000000000000000000000049": "0x1",
    "0x000000000000000000000000000000000000004a": "0x1",
    "0x000000000000000000000000000000000000004b": "0x1",
    "0x000000000000000000000000000000000000004c": "0x1",
    "0x000000000000000000000000000000000000004d": "0x1",
    "0x000000000000000000000000000000000000004e": "0x1",
    "0x000000000000000000000000000000000000004f": "0x1",
    "0x0000000000000000000000000000000000000050": "0x1",
    "0x0000000000000000000000000000000000000051": "0x1",
    "0x0000000000000000000000000000000000000052": "0x1",
    "0x0000000000000000000000000000000000000053": "0x1",
    "0x0000000000000000000000000000000000000054": "0x1",
    "0x0000000000000000000000000000000000000055": "0x1",
    "0x0000000000000000000000000000000000000056": "0x1",
    "0x0000000000000000000000000000000000000057": "0x1",
    "0x0000000000000000000000000000000000000058": "0x1",
    "0x0000000000000000000000000000000000000059": "0x1",
    "0x000000000000000000000000000000000000005a": "0x1",
    "0x000000000000000000000000000000000000005b": "0x1",
    "0x000000000000000000000000000000000000005c": "0x1",
    "0x000000000000000000000000000000000000005d": "0x1",
    "0x000000000000000000000000000000000000005e": "0x1",
    "0x000000000000000000000000000000000000005f": "0x1",
    "0x0000000000000000000000000000000000000060": "0x1",
    "0x0000000000000000000000000000000000000061": "0x1",
    "0x0000000000000000000000000000000000000062": "0x1",
    "0x0000000000000000000000000000000000000063": "0x1",
    "0x0000000000000000000000000000000000000064": "0x1",
    "0x0000000000000000000000000000000000000065": "0x1",
    "0x0000000000000000000000000000000000000066": "0x1",
    "0x0000000000000000000000000000000000000067": "0x1",
    "0x0000000000000000000000000000000000000068": "0x1",
    "0x0000000000000000000000000000000000000069": "0x1",
    "0x000000000000000000000000000000000000006a": "0x1",
    "0x000000000000000000000000000000000000006b": "0x1",
    "0x000000000000000000000000000000000000006c": "0x1",
    "0x000000000000000000000000000000000000006d": "0x1",
    "0x000000000000000000000000000000000000006e": "0x1",
    "0x000000000000000000000000000000000000006f": "0x1",
    "0x0000000000000000000000000000000000000070": "0x1",
    "0x0000000000000000000000000000000000000071": "0x1",
    "0x0000000000000000000000000000000000000072": "0x1",
    "0x0000000000000000000000000000000000000073": "0x1",
    "0x0000000000000000000000000000000000000074": "0x1",
    "0x0000000000000000000000000000000000000075": "0x1",
    "0x0000000000000000000000000000000000000076": "0x1",
    "0x0000000000000000000000000000000000000077": "0x1",
    "0x0000000000000000000000000000000000000078": "0x1",
    "0x0000000000000000000000000000000000000079": "0x1",
    "0x000000000000000000000000000000000000007a": "0x1",
    "0x000000000000000000000000000000000000007b": "0x1",
    "0x000000000000000000000000000000000000007c": "0x1",
    "0x000000000000000000000000000000000000007d": "0x1",
    "0x000000000000000000000000000000000000007e": "0x1",
    "0x000000000000000000000000000000000000007f": "0x1",
    "0x0000000000000000000000000000000000000080": "0x1",
    "0x0000000000000000000000000000000000000081": "0x1",
    "0x0000000000000000000000000000000000000082": "0x1",
    "0x0000000000000000000000000000000000000083": "0x1",
    "0x0000000000000000000000000000000000000084": "0x1",
    "0x0000000000000000000000000000000000000085": "0x1",
    "0x0000000000000000000000000000000000000086": "0x1",
    "0x0000000000000000000000000000000000000087": "0x1",
    "0x0000000000000000000000000000000000000088": "0x1",
    "0x0000000000000000000000000000000000000089": "0x1",
    "0x000000000000000000000000000000000000008a": "0x1",
    "0x000000000000000000000000000000000000008b": "0x1",
    "0x000000000000000000000000000000000000008c": "0x1",
    "0x000000000000000000000000000000000000008d": "0x1",
    "0x000000000000000000000000000000000000008e": "0x1",
    "0x000000000000000000000000000000000000008f": "0x1",
    "0x0000000000000000000000000000000000000090": "0x1",
    "0x0000000000000000000000000000000000000091": "0x1",
    "0x0000000000000000000000000000000000000092": "0x1",
    "0x0000000000000000000000000000000000000093": "0x1",
    "0x0000000000000000000000000000000000000094": "0x1",
    "0x0000000000000000000000000000000000000095": "0x1",
    "0x0000000000000000000000000000000000000096": "0x1",
    "0x0000000000000000000000000000000000000097": "0x1",
    "0x0000000000000000000000000000000000000098": "0x1",
    "0x0000000000000000000000000000000000000099": "0x1",
    "0x000000000000000000000000000000000000009a": "0x1",
    "0x000000000000000000000000000000000000009b": "0x1",
    "0x000000000000000000000000000000000000009c": "0x1",
    "0x000000000000000000000000000000000000009d": "0x1",
    "0x000000000000000000000000000000000000009e": "0x1",
    "0x000000000000000000000000000000000000009f": "0x1",
    "0x00000000000000000000000000000000000000a0": "0x1",
    "0x00000000000000000000000000000000000000a1": "0x1",
    "0x00000000000000000000000000000000000000a2": "0x1",
    "0x00000000000000000000000000000000000000a3": "0x1",
    "0x00000000000000000000000000000000000000a4": "0x1",
    "0x00000000000000000000000000000000000000a5": "0x1",
    "0x00000000000000000000000000000000000000a6": "0x1",
    "0x00000000000000000000000000000000000000a7": "0x1",
    "0x00000000000000000000000000000000000000a8": "0x1",
    "0x00000000000000000000000000000000000000a9": "0x1",
    "0x00000000000000000000000000000000000000aa": "0x1",
    "0x00000000000000000000000000000000000000ab": "0x1",
    "0x00000000000000000000000000000000000000ac": "0x1",
    "0x00000000000000000000000000000000000000ad": "0x1",
    "0x00000000000000000000000000000000000000ae": "0x1",
    "0x00000000000000000000000000000000000000af": "0x1",
    "0x00000000000000000000000000000000000000b0": "0x1",
    "0x00000000000000000000000000000000000000b1": "0x1",
    "0x00000000000000000000000000000000000000b2": "0x1",
    "0x00000000000000000000000000000000000000b3": "0x1",
    "0x00000000000000000000000000000000000000b4": "0x1",
    "0x00000000000000000000000000000000000000b5": "0x1",
    "0x00000000000000000000000000000000000000b6": "0x1",
    "0x00000000000000000000000000000000000000b7": "0x1",
    "0x00000000000000000000000000000000000000b8": "0x1",
    "0x00000000000000000000000000000000000000b9": "0x1",
    "0x00000000000000000000000000000000000000ba": "0x1",
    "0x00000000000000000000000000000000000000bb": "0x1",
    "0x00000000000000000000000000000000000000bc": "0x1",
    "0x00000000000000000000000000000000000000bd": "0x1",
    "0x00000000000000000000000000000000000000be": "0x1",
    "0x00000000000000000000000000000000000000bf": "0x1",
    "0x00000000000000000000000000000000000000c0": "0x1",
    "0x00000000000000000000000000000000000000c1": "0x1",
    "0x00000000000000000000000000000000000000c2": "0x1",
    "0x00000000000000000000000000000000000000c3": "0x1",
    "0x00000000000000000000000000000000000000c4": "0x1",
    "0x00000000000000000000000000000000000000c5": "0x1",
    "0x00000000000000000000000000000000000000c6": "0x1",
    "0x00000000000000000000000000000000000000c7": "0x1",
    "0x00000000000000000000000000000000000000c8": "0x1",
    "0x00000000000000000000000000000000000000c9": "0x1",
    "0x00000000000000000000000000000000000000ca": "0x1",
    "0x00000000000000000000000000000000000000cb": "0x1",
    "0x00000000000000000000000000000000000000cc": "0x1",
    "0x00000000000000000000000000000000000000cd": "0x1",
    "0x00000000000000000000000000000000000000ce": "0x1",
    "0x00000000000000000000000000000000000000cf": "0x1",
    "0x00000000000000000000000000000000000000d0": "0x1",
    "0x00000000000000000000000000000000000000d1": "0x1",
    "0x00000000000000000000000000000000000000d2": "0x1",
    "0x00000000000000000000000000000000000000d3": "0x1",
    "0x00000000000000000000000000000000000000d4": "0x1",
    "0x00000000000000000000000000000000000000d5": "0x1",
    "0x00000000000000000000000000000000000000d6": "0x1",
    "0x00000000000000000000000000000000000000d7": "0x1",
    "0x00000000000000000000000000000000000000d8": "0x1",
    "0x00000000000000000000000000000000000000d9": "0x1",
    "0x00000000000000000000000000000000000000da": "0x1",
    "0x00000000000000000000000000000000000000db": "0x1",
    "0x00000000000000000000000000000000000000dc": "0x1",
    "0x00000000000000000000000000000000000000dd": "0x1",
    "0x00000000000000000000000000000000000000de": "0x1",
    "0x00000000000000000000000000000000000000df": "0x1",
    "0x00000000000000000000000000000000000000e0": "0x1",
    "0x00000000000000000000000000000000000000e1": "0x1",
    "0x00000000000000000000000000000000000000e2": "0x1",
    "0x00000000000000000000000000000000000000e3": "0x1",
    "0x00000000000000000000000000000000000000e4": "0x1",
    "0x00000000000000000000000000000000000000e5": "0x1",
    "0x00000000000000000000000000000000000000e6": "0x1",
    "0x00000000000000000000000000000000000000e7": "0x1",
    "0x00000000000000000000000000000000000000e8": "0x1",
    "0x00000000000000000000000000000000000000e9": "0x1",
    "0x00000000000000000000000000000000000000ea": "0x1",
    "0x00000000000000000000000000000000000000eb": "0x1",
    "0x00000000000000000000000000000000000000ec": "0x1",
    "0x00000000000000000000000000000000000000ed": "0x1",
    "0x00000000000000000000000000000000000000ee": "0x1",
    "0x00000000000000000000000000000000000000ef": "0x1",
    "0x00000000000000000000000000000000000000f0": "0x1",
    "0x00000000000000000000000000000000000000f1": "0x1",
    "0x00000000000000000000000000000000000000f2": "0x1",
    "0x00000000000000000000000000000000000000f3": "0x1",
    "0x00000000000000000000000000000000000000f4": "0x1",
    "0x00000000000000000000000000000000000000f5": "0x1",
    "0x00000000000000000000000000000000000000f6": "0x1",
    "0x00000000000000000000000000000000000000f7": "0x1",
    "0x00000000000000000000000000000000000000f8": "0x1",
    "0x00000000000000000000000000000000000000f9": "0x1",
    "0x00000000000000000000000000000000000000fa": "0x1",
    "0x00000000000000000000000000000000000000fb": "0x1",
    "0x00000000000000000000000000000000000000fc": "0x1",
    "0x00000000000000000000000000000000000000fd": "0x1",
    "0x00000000000000000000000000000000000000fe": "0x1",
    "0x00000000000000000000000000000000000000ff": "0x1",
    "0x31b98d14007bdee637298086988a0bbd31184523": "0x200000000000000000000000000000000000000000000000000000000000000"
}

},{}],25:[function(require,module,exports){
module.exports={
    "0x0000000000000000000000000000000000000000": "0x1",
    "0x0000000000000000000000000000000000000001": "0x1",
    "0x0000000000000000000000000000000000000002": "0x1",
    "0x0000000000000000000000000000000000000003": "0x1",
    "0x0000000000000000000000000000000000000004": "0x1",
    "0x0000000000000000000000000000000000000005": "0x1",
    "0x0000000000000000000000000000000000000006": "0x1",
    "0x0000000000000000000000000000000000000007": "0x1",
    "0x0000000000000000000000000000000000000008": "0x1",
    "0x0000000000000000000000000000000000000009": "0x1",
    "0x000000000000000000000000000000000000000a": "0x0",
    "0x000000000000000000000000000000000000000b": "0x0",
    "0x000000000000000000000000000000000000000c": "0x0",
    "0x000000000000000000000000000000000000000d": "0x0",
    "0x000000000000000000000000000000000000000e": "0x0",
    "0x000000000000000000000000000000000000000f": "0x0",
    "0x0000000000000000000000000000000000000010": "0x0",
    "0x0000000000000000000000000000000000000011": "0x0",
    "0x0000000000000000000000000000000000000012": "0x0",
    "0x0000000000000000000000000000000000000013": "0x0",
    "0x0000000000000000000000000000000000000014": "0x0",
    "0x0000000000000000000000000000000000000015": "0x0",
    "0x0000000000000000000000000000000000000016": "0x0",
    "0x0000000000000000000000000000000000000017": "0x0",
    "0x0000000000000000000000000000000000000018": "0x0",
    "0x0000000000000000000000000000000000000019": "0x0",
    "0x000000000000000000000000000000000000001a": "0x0",
    "0x000000000000000000000000000000000000001b": "0x0",
    "0x000000000000000000000000000000000000001c": "0x0",
    "0x000000000000000000000000000000000000001d": "0x0",
    "0x000000000000000000000000000000000000001e": "0x0",
    "0x000000000000000000000000000000000000001f": "0x0",
    "0x0000000000000000000000000000000000000020": "0x0",
    "0x0000000000000000000000000000000000000021": "0x0",
    "0x0000000000000000000000000000000000000022": "0x0",
    "0x0000000000000000000000000000000000000023": "0x0",
    "0x0000000000000000000000000000000000000024": "0x0",
    "0x0000000000000000000000000000000000000025": "0x0",
    "0x0000000000000000000000000000000000000026": "0x0",
    "0x0000000000000000000000000000000000000027": "0x0",
    "0x0000000000000000000000000000000000000028": "0x0",
    "0x0000000000000000000000000000000000000029": "0x0",
    "0x000000000000000000000000000000000000002a": "0x0",
    "0x000000000000000000000000000000000000002b": "0x0",
    "0x000000000000000000000000000000000000002c": "0x0",
    "0x000000000000000000000000000000000000002d": "0x0",
    "0x000000000000000000000000000000000000002e": "0x0",
    "0x000000000000000000000000000000000000002f": "0x0",
    "0x0000000000000000000000000000000000000030": "0x0",
    "0x0000000000000000000000000000000000000031": "0x0",
    "0x0000000000000000000000000000000000000032": "0x0",
    "0x0000000000000000000000000000000000000033": "0x0",
    "0x0000000000000000000000000000000000000034": "0x0",
    "0x0000000000000000000000000000000000000035": "0x0",
    "0x0000000000000000000000000000000000000036": "0x0",
    "0x0000000000000000000000000000000000000037": "0x0",
    "0x0000000000000000000000000000000000000038": "0x0",
    "0x0000000000000000000000000000000000000039": "0x0",
    "0x000000000000000000000000000000000000003a": "0x0",
    "0x000000000000000000000000000000000000003b": "0x0",
    "0x000000000000000000000000000000000000003c": "0x0",
    "0x000000000000000000000000000000000000003d": "0x0",
    "0x000000000000000000000000000000000000003e": "0x0",
    "0x000000000000000000000000000000000000003f": "0x0",
    "0x0000000000000000000000000000000000000040": "0x0",
    "0x0000000000000000000000000000000000000041": "0x0",
    "0x0000000000000000000000000000000000000042": "0x0",
    "0x0000000000000000000000000000000000000043": "0x0",
    "0x0000000000000000000000000000000000000044": "0x0",
    "0x0000000000000000000000000000000000000045": "0x0",
    "0x0000000000000000000000000000000000000046": "0x0",
    "0x0000000000000000000000000000000000000047": "0x0",
    "0x0000000000000000000000000000000000000048": "0x0",
    "0x0000000000000000000000000000000000000049": "0x0",
    "0x000000000000000000000000000000000000004a": "0x0",
    "0x000000000000000000000000000000000000004b": "0x0",
    "0x000000000000000000000000000000000000004c": "0x0",
    "0x000000000000000000000000000000000000004d": "0x0",
    "0x000000000000000000000000000000000000004e": "0x0",
    "0x000000000000000000000000000000000000004f": "0x0",
    "0x0000000000000000000000000000000000000050": "0x0",
    "0x0000000000000000000000000000000000000051": "0x0",
    "0x0000000000000000000000000000000000000052": "0x0",
    "0x0000000000000000000000000000000000000053": "0x0",
    "0x0000000000000000000000000000000000000054": "0x0",
    "0x0000000000000000000000000000000000000055": "0x0",
    "0x0000000000000000000000000000000000000056": "0x0",
    "0x0000000000000000000000000000000000000057": "0x0",
    "0x0000000000000000000000000000000000000058": "0x0",
    "0x0000000000000000000000000000000000000059": "0x0",
    "0x000000000000000000000000000000000000005a": "0x0",
    "0x000000000000000000000000000000000000005b": "0x0",
    "0x000000000000000000000000000000000000005c": "0x0",
    "0x000000000000000000000000000000000000005d": "0x0",
    "0x000000000000000000000000000000000000005e": "0x0",
    "0x000000000000000000000000000000000000005f": "0x0",
    "0x0000000000000000000000000000000000000060": "0x0",
    "0x0000000000000000000000000000000000000061": "0x0",
    "0x0000000000000000000000000000000000000062": "0x0",
    "0x0000000000000000000000000000000000000063": "0x0",
    "0x0000000000000000000000000000000000000064": "0x0",
    "0x0000000000000000000000000000000000000065": "0x0",
    "0x0000000000000000000000000000000000000066": "0x0",
    "0x0000000000000000000000000000000000000067": "0x0",
    "0x0000000000000000000000000000000000000068": "0x0",
    "0x0000000000000000000000000000000000000069": "0x0",
    "0x000000000000000000000000000000000000006a": "0x0",
    "0x000000000000000000000000000000000000006b": "0x0",
    "0x000000000000000000000000000000000000006c": "0x0",
    "0x000000000000000000000000000000000000006d": "0x0",
    "0x000000000000000000000000000000000000006e": "0x0",
    "0x000000000000000000000000000000000000006f": "0x0",
    "0x0000000000000000000000000000000000000070": "0x0",
    "0x0000000000000000000000000000000000000071": "0x0",
    "0x0000000000000000000000000000000000000072": "0x0",
    "0x0000000000000000000000000000000000000073": "0x0",
    "0x0000000000000000000000000000000000000074": "0x0",
    "0x0000000000000000000000000000000000000075": "0x0",
    "0x0000000000000000000000000000000000000076": "0x0",
    "0x0000000000000000000000000000000000000077": "0x0",
    "0x0000000000000000000000000000000000000078": "0x0",
    "0x0000000000000000000000000000000000000079": "0x0",
    "0x000000000000000000000000000000000000007a": "0x0",
    "0x000000000000000000000000000000000000007b": "0x0",
    "0x000000000000000000000000000000000000007c": "0x0",
    "0x000000000000000000000000000000000000007d": "0x0",
    "0x000000000000000000000000000000000000007e": "0x0",
    "0x000000000000000000000000000000000000007f": "0x0",
    "0x0000000000000000000000000000000000000080": "0x0",
    "0x0000000000000000000000000000000000000081": "0x0",
    "0x0000000000000000000000000000000000000082": "0x0",
    "0x0000000000000000000000000000000000000083": "0x0",
    "0x0000000000000000000000000000000000000084": "0x0",
    "0x0000000000000000000000000000000000000085": "0x0",
    "0x0000000000000000000000000000000000000086": "0x0",
    "0x0000000000000000000000000000000000000087": "0x0",
    "0x0000000000000000000000000000000000000088": "0x0",
    "0x0000000000000000000000000000000000000089": "0x0",
    "0x000000000000000000000000000000000000008a": "0x0",
    "0x000000000000000000000000000000000000008b": "0x0",
    "0x000000000000000000000000000000000000008c": "0x0",
    "0x000000000000000000000000000000000000008d": "0x0",
    "0x000000000000000000000000000000000000008e": "0x0",
    "0x000000000000000000000000000000000000008f": "0x0",
    "0x0000000000000000000000000000000000000090": "0x0",
    "0x0000000000000000000000000000000000000091": "0x0",
    "0x0000000000000000000000000000000000000092": "0x0",
    "0x0000000000000000000000000000000000000093": "0x0",
    "0x0000000000000000000000000000000000000094": "0x0",
    "0x0000000000000000000000000000000000000095": "0x0",
    "0x0000000000000000000000000000000000000096": "0x0",
    "0x0000000000000000000000000000000000000097": "0x0",
    "0x0000000000000000000000000000000000000098": "0x0",
    "0x0000000000000000000000000000000000000099": "0x0",
    "0x000000000000000000000000000000000000009a": "0x0",
    "0x000000000000000000000000000000000000009b": "0x0",
    "0x000000000000000000000000000000000000009c": "0x0",
    "0x000000000000000000000000000000000000009d": "0x0",
    "0x000000000000000000000000000000000000009e": "0x0",
    "0x000000000000000000000000000000000000009f": "0x0",
    "0x00000000000000000000000000000000000000a0": "0x0",
    "0x00000000000000000000000000000000000000a1": "0x0",
    "0x00000000000000000000000000000000000000a2": "0x0",
    "0x00000000000000000000000000000000000000a3": "0x0",
    "0x00000000000000000000000000000000000000a4": "0x0",
    "0x00000000000000000000000000000000000000a5": "0x0",
    "0x00000000000000000000000000000000000000a6": "0x0",
    "0x00000000000000000000000000000000000000a7": "0x0",
    "0x00000000000000000000000000000000000000a8": "0x0",
    "0x00000000000000000000000000000000000000a9": "0x0",
    "0x00000000000000000000000000000000000000aa": "0x0",
    "0x00000000000000000000000000000000000000ab": "0x0",
    "0x00000000000000000000000000000000000000ac": "0x0",
    "0x00000000000000000000000000000000000000ad": "0x0",
    "0x00000000000000000000000000000000000000ae": "0x0",
    "0x00000000000000000000000000000000000000af": "0x0",
    "0x00000000000000000000000000000000000000b0": "0x0",
    "0x00000000000000000000000000000000000000b1": "0x0",
    "0x00000000000000000000000000000000000000b2": "0x0",
    "0x00000000000000000000000000000000000000b3": "0x0",
    "0x00000000000000000000000000000000000000b4": "0x0",
    "0x00000000000000000000000000000000000000b5": "0x0",
    "0x00000000000000000000000000000000000000b6": "0x0",
    "0x00000000000000000000000000000000000000b7": "0x0",
    "0x00000000000000000000000000000000000000b8": "0x0",
    "0x00000000000000000000000000000000000000b9": "0x0",
    "0x00000000000000000000000000000000000000ba": "0x0",
    "0x00000000000000000000000000000000000000bb": "0x0",
    "0x00000000000000000000000000000000000000bc": "0x0",
    "0x00000000000000000000000000000000000000bd": "0x0",
    "0x00000000000000000000000000000000000000be": "0x0",
    "0x00000000000000000000000000000000000000bf": "0x0",
    "0x00000000000000000000000000000000000000c0": "0x0",
    "0x00000000000000000000000000000000000000c1": "0x0",
    "0x00000000000000000000000000000000000000c2": "0x0",
    "0x00000000000000000000000000000000000000c3": "0x0",
    "0x00000000000000000000000000000000000000c4": "0x0",
    "0x00000000000000000000000000000000000000c5": "0x0",
    "0x00000000000000000000000000000000000000c6": "0x0",
    "0x00000000000000000000000000000000000000c7": "0x0",
    "0x00000000000000000000000000000000000000c8": "0x0",
    "0x00000000000000000000000000000000000000c9": "0x0",
    "0x00000000000000000000000000000000000000ca": "0x0",
    "0x00000000000000000000000000000000000000cb": "0x0",
    "0x00000000000000000000000000000000000000cc": "0x0",
    "0x00000000000000000000000000000000000000cd": "0x0",
    "0x00000000000000000000000000000000000000ce": "0x0",
    "0x00000000000000000000000000000000000000cf": "0x0",
    "0x00000000000000000000000000000000000000d0": "0x0",
    "0x00000000000000000000000000000000000000d1": "0x0",
    "0x00000000000000000000000000000000000000d2": "0x0",
    "0x00000000000000000000000000000000000000d3": "0x0",
    "0x00000000000000000000000000000000000000d4": "0x0",
    "0x00000000000000000000000000000000000000d5": "0x0",
    "0x00000000000000000000000000000000000000d6": "0x0",
    "0x00000000000000000000000000000000000000d7": "0x0",
    "0x00000000000000000000000000000000000000d8": "0x0",
    "0x00000000000000000000000000000000000000d9": "0x0",
    "0x00000000000000000000000000000000000000da": "0x0",
    "0x00000000000000000000000000000000000000db": "0x0",
    "0x00000000000000000000000000000000000000dc": "0x0",
    "0x00000000000000000000000000000000000000dd": "0x0",
    "0x00000000000000000000000000000000000000de": "0x0",
    "0x00000000000000000000000000000000000000df": "0x0",
    "0x00000000000000000000000000000000000000e0": "0x0",
    "0x00000000000000000000000000000000000000e1": "0x0",
    "0x00000000000000000000000000000000000000e2": "0x0",
    "0x00000000000000000000000000000000000000e3": "0x0",
    "0x00000000000000000000000000000000000000e4": "0x0",
    "0x00000000000000000000000000000000000000e5": "0x0",
    "0x00000000000000000000000000000000000000e6": "0x0",
    "0x00000000000000000000000000000000000000e7": "0x0",
    "0x00000000000000000000000000000000000000e8": "0x0",
    "0x00000000000000000000000000000000000000e9": "0x0",
    "0x00000000000000000000000000000000000000ea": "0x0",
    "0x00000000000000000000000000000000000000eb": "0x0",
    "0x00000000000000000000000000000000000000ec": "0x0",
    "0x00000000000000000000000000000000000000ed": "0x0",
    "0x00000000000000000000000000000000000000ee": "0x0",
    "0x00000000000000000000000000000000000000ef": "0x0",
    "0x00000000000000000000000000000000000000f0": "0x0",
    "0x00000000000000000000000000000000000000f1": "0x0",
    "0x00000000000000000000000000000000000000f2": "0x0",
    "0x00000000000000000000000000000000000000f3": "0x0",
    "0x00000000000000000000000000000000000000f4": "0x0",
    "0x00000000000000000000000000000000000000f5": "0x0",
    "0x00000000000000000000000000000000000000f6": "0x0",
    "0x00000000000000000000000000000000000000f7": "0x0",
    "0x00000000000000000000000000000000000000f8": "0x0",
    "0x00000000000000000000000000000000000000f9": "0x0",
    "0x00000000000000000000000000000000000000fa": "0x0",
    "0x00000000000000000000000000000000000000fb": "0x0",
    "0x00000000000000000000000000000000000000fc": "0x0",
    "0x00000000000000000000000000000000000000fd": "0x0",
    "0x00000000000000000000000000000000000000fe": "0x0",
    "0x00000000000000000000000000000000000000ff": "0x0",
    "0x874b54a8bd152966d63f706bae1ffeb0411921e5": "0xc9f2c9cd04674edea40000000"
}

},{}],26:[function(require,module,exports){
module.exports={
    "name": "berlin",
    "comment": "HF targeted for July 2020 following the Muir Glacier HF",
    "url": "https://eips.ethereum.org/EIPS/eip-2070",
    "status": "Draft",
    "eips": [2565, 2929, 2718, 2930]
}

},{}],27:[function(require,module,exports){
module.exports={
    "name": "byzantium",
    "comment": "Hardfork with new precompiles, instructions and other protocol changes",
    "url": "https://eips.ethereum.org/EIPS/eip-609",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "modexpGquaddivisor": {
            "v": 20,
            "d": "Gquaddivisor from modexp precompile for gas calculation"
        },
        "ecAdd": {
            "v": 500,
            "d": "Gas costs for curve addition precompile"
        },
        "ecMul": {
            "v": 40000,
            "d": "Gas costs for curve multiplication precompile"
        },
        "ecPairing": {
            "v": 100000,
            "d": "Base gas costs for curve pairing precompile"
        },
        "ecPairingWord": {
            "v": 80000,
            "d": "Gas costs regarding curve pairing precompile input length"
        },
        "revert": {
            "v": 0,
            "d": "Base fee of the REVERT opcode"
        },
        "staticcall": {
            "v": 700,
            "d": "Base fee of the STATICCALL opcode"
        },
        "returndatasize": {
            "v": 2,
            "d": "Base fee of the RETURNDATASIZE opcode"
        },
        "returndatacopy": {
            "v": 3,
            "d": "Base fee of the RETURNDATACOPY opcode"
        }
    },
    "vm": {},
    "pow": {
        "minerReward": {
            "v": "3000000000000000000",
            "d": "the amount a miner get rewarded for mining a block"
        },
        "difficultyBombDelay": {
            "v": 3000000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

},{}],28:[function(require,module,exports){
module.exports={
    "name": "chainstart",
    "comment": "Start of the Ethereum main chain",
    "url": "",
    "status": "",
    "gasConfig": {
        "minGasLimit": {
            "v": 5000,
            "d": "Minimum the gas limit may ever be"
        },
        "gasLimitBoundDivisor": {
            "v": 1024,
            "d": "The bound divisor of the gas limit, used in update calculations"
        },
        "maxRefundQuotient": {
            "v": 2,
            "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
        }
    },
    "gasPrices": {
        "base": {
            "v": 2,
            "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)"
        },
        "tierStep": {
            "v": [
                0,
                2,
                3,
                5,
                8,
                10,
                20
            ],
            "d": "Once per operation, for a selection of them"
        },
        "exp": {
            "v": 10,
            "d": "Base fee of the EXP opcode"
        },
        "expByte": {
            "v": 10,
            "d": "Times ceil(log256(exponent)) for the EXP instruction"
        },
        "sha3": {
            "v": 30,
            "d": "Base fee of the SHA3 opcode"
        },
        "sha3Word": {
            "v": 6,
            "d": "Once per word of the SHA3 operation's data"
        },
        "sload": {
            "v": 50,
            "d": "Base fee of the SLOAD opcode"
        },
        "sstoreSet": {
            "v": 20000,
            "d": "Once per SSTORE operation if the zeroness changes from zero"
        },
        "sstoreReset": {
            "v": 5000,
            "d": "Once per SSTORE operation if the zeroness does not change from zero"
        },
        "sstoreRefund": {
            "v": 15000,
            "d": "Once per SSTORE operation if the zeroness changes to zero"
        },
        "jumpdest": {
            "v": 1,
            "d": "Base fee of the JUMPDEST opcode"
        },
        "log": {
            "v": 375,
            "d": "Base fee of the LOG opcode"
        },
        "logData": {
            "v": 8,
            "d": "Per byte in a LOG* operation's data"
        },
        "logTopic": {
            "v": 375,
            "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"
        },
        "create": {
            "v": 32000,
            "d": "Base fee of the CREATE opcode"
        },
        "call": {
            "v": 40,
            "d": "Base fee of the CALL opcode"
        },
        "callStipend": {
            "v": 2300,
            "d": "Free gas given at beginning of call"
        },
        "callValueTransfer": {
            "v": 9000,
            "d": "Paid for CALL when the value transfor is non-zero"
        },
        "callNewAccount": {
            "v": 25000,
            "d": "Paid for CALL when the destination address didn't exist prior"
        },
        "selfdestructRefund": {
            "v": 24000,
            "d": "Refunded following a selfdestruct operation"
        },
        "memory": {
            "v": 3,
            "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"
        },
        "quadCoeffDiv": {
            "v": 512,
            "d": "Divisor for the quadratic particle of the memory cost equation"
        },
        "createData": {
            "v": 200,
            "d": ""
        },
        "tx": {
            "v": 21000,
            "d": "Per transaction. NOTE: Not payable on data of calls between transactions"
        },
        "txCreation": {
            "v": 32000,
            "d": "The cost of creating a contract via tx"
        },
        "txDataZero": {
            "v": 4,
            "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"
        },
        "txDataNonZero": {
            "v": 68,
            "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
        },
        "copy": {
            "v": 3,
            "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"
        },
        "ecRecover": {
            "v": 3000,
            "d": ""
        },
        "sha256": {
            "v": 60,
            "d": ""
        },
        "sha256Word": {
            "v": 12,
            "d": ""
        },
        "ripemd160": {
            "v": 600,
            "d": ""
        },
        "ripemd160Word": {
            "v": 120,
            "d": ""
        },
        "identity": {
            "v": 15,
            "d": ""
        },
        "identityWord": {
            "v": 3,
            "d": ""
        },
        "stop": {
            "v": 0,
            "d": "Base fee of the STOP opcode"
        },
        "add": {
            "v": 3,
            "d": "Base fee of the ADD opcode"
        },
        "mul": {
            "v": 5,
            "d": "Base fee of the MUL opcode"
        },
        "sub": {
            "v": 3,
            "d": "Base fee of the SUB opcode"
        },
        "div": {
            "v": 5,
            "d": "Base fee of the DIV opcode"
        },
        "sdiv": {
            "v": 5,
            "d": "Base fee of the SDIV opcode"
        },
        "mod": {
            "v": 5,
            "d": "Base fee of the MOD opcode"
        },
        "smod": {
            "v": 5,
            "d": "Base fee of the SMOD opcode"
        },
        "addmod": {
            "v": 8,
            "d": "Base fee of the ADDMOD opcode"
        },
        "mulmod": {
            "v": 8,
            "d": "Base fee of the MULMOD opcode"
        },
        "signextend": {
            "v": 5,
            "d": "Base fee of the SIGNEXTEND opcode"
        },
        "lt": {
            "v": 3,
            "d": "Base fee of the LT opcode"
        },
        "gt": {
            "v": 3,
            "d": "Base fee of the GT opcode"
        },
        "slt": {
            "v": 3,
            "d": "Base fee of the SLT opcode"
        },
        "sgt": {
            "v": 3,
            "d": "Base fee of the SGT opcode"
        },
        "eq": {
            "v": 3,
            "d": "Base fee of the EQ opcode"
        },
        "iszero": {
            "v": 3,
            "d": "Base fee of the ISZERO opcode"
        },
        "and": {
            "v": 3,
            "d": "Base fee of the AND opcode"
        },
        "or": {
            "v": 3,
            "d": "Base fee of the OR opcode"
        },
        "xor": {
            "v": 3,
            "d": "Base fee of the XOR opcode"
        },
        "not": {
            "v": 3,
            "d": "Base fee of the NOT opcode"
        },
        "byte": {
            "v": 3,
            "d": "Base fee of the BYTE opcode"
        },
        "address": {
            "v": 2,
            "d": "Base fee of the ADDRESS opcode"
        },
        "balance": {
            "v": 20,
            "d": "Base fee of the BALANCE opcode"
        },
        "origin": {
            "v": 2,
            "d": "Base fee of the ORIGIN opcode"
        },
        "caller": {
            "v": 2,
            "d": "Base fee of the CALLER opcode"
        },
        "callvalue": {
            "v": 2,
            "d": "Base fee of the CALLVALUE opcode"
        },
        "calldataload": {
            "v": 3,
            "d": "Base fee of the CALLDATALOAD opcode"
        },
        "calldatasize": {
            "v": 2,
            "d": "Base fee of the CALLDATASIZE opcode"
        },
        "calldatacopy": {
            "v": 3,
            "d": "Base fee of the CALLDATACOPY opcode"
        },
        "codesize": {
            "v": 2,
            "d": "Base fee of the CODESIZE opcode"
        },
        "codecopy": {
            "v": 3,
            "d": "Base fee of the CODECOPY opcode"
        },
        "gasprice": {
            "v": 2,
            "d": "Base fee of the GASPRICE opcode"
        },
        "extcodesize": {
            "v": 20,
            "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
            "v": 20,
            "d": "Base fee of the EXTCODECOPY opcode"
        },
        "blockhash": {
            "v": 20,
            "d": "Base fee of the BLOCKHASH opcode"
        },
        "coinbase": {
            "v": 2,
            "d": "Base fee of the COINBASE opcode"
        },
        "timestamp": {
            "v": 2,
            "d": "Base fee of the TIMESTAMP opcode"
        },
        "number": {
            "v": 2,
            "d": "Base fee of the NUMBER opcode"
        },
        "difficulty": {
            "v": 2,
            "d": "Base fee of the DIFFICULTY opcode"
        },
        "gaslimit": {
            "v": 2,
            "d": "Base fee of the GASLIMIT opcode"
        },
        "pop": {
            "v": 2,
            "d": "Base fee of the POP opcode"
        },
        "mload": {
            "v": 3,
            "d": "Base fee of the MLOAD opcode"
        },
        "mstore": {
            "v": 3,
            "d": "Base fee of the MSTORE opcode"
        },
        "mstore8": {
            "v": 3,
            "d": "Base fee of the MSTORE8 opcode"
        },
        "sstore": {
            "v": 0,
            "d": "Base fee of the SSTORE opcode"
        },
        "jump": {
            "v": 8,
            "d": "Base fee of the JUMP opcode"
        },
        "jumpi": {
            "v": 10,
            "d": "Base fee of the JUMPI opcode"
        },
        "pc": {
            "v": 2,
            "d": "Base fee of the PC opcode"
        },
        "msize": {
            "v": 2,
            "d": "Base fee of the MSIZE opcode"
        },
        "gas": {
            "v": 2,
            "d": "Base fee of the GAS opcode"
        },
        "push": {
            "v": 3,
            "d": "Base fee of the PUSH opcode"
        },
        "dup": {
            "v": 3,
            "d": "Base fee of the DUP opcode"
        },
        "swap": {
            "v": 3,
            "d": "Base fee of the SWAP opcode"
        },
        "callcode": {
            "v": 40,
            "d": "Base fee of the CALLCODE opcode"
        },
        "return": {
            "v": 0,
            "d": "Base fee of the RETURN opcode"
        },
        "invalid": {
            "v": 0,
            "d": "Base fee of the INVALID opcode"
        },
        "selfdestruct": {
            "v": 0,
            "d": "Base fee of the SELFDESTRUCT opcode"
        }
    },
    "vm": {
        "stackLimit": {
            "v": 1024,
            "d": "Maximum size of VM stack allowed"
        },
        "callCreateDepth": {
            "v": 1024,
            "d": "Maximum depth of call/create stack"
        },
        "maxExtraDataSize": {
            "v": 32,
            "d": "Maximum size extra data may be after Genesis"
        }
    },
    "pow": {
        "minimumDifficulty": {
            "v": 131072,
            "d": "The minimum that the difficulty may ever be"
        },
        "difficultyBoundDivisor": {
            "v": 2048,
            "d": "The bound divisor of the difficulty, used in the update calculations"
        },
        "durationLimit": {
            "v": 13,
            "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"
        },
        "epochDuration": {
            "v": 30000,
            "d": "Duration between proof-of-work epochs"
        },
        "timebombPeriod": {
            "v": 100000,
            "d": "Exponential difficulty timebomb period"
        },
        "minerReward": {
            "v": "5000000000000000000",
            "d": "the amount a miner get rewarded for mining a block"
        },
        "difficultyBombDelay": {
            "v": 0,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

},{}],29:[function(require,module,exports){
module.exports={
    "name": "constantinople",
    "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
    "url": "https://eips.ethereum.org/EIPS/eip-1013",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "netSstoreNoopGas": {
            "v": 200,
            "d": "Once per SSTORE operation if the value doesn't change"
        },
        "netSstoreInitGas": {
            "v": 20000,
            "d": "Once per SSTORE operation from clean zero"
        },
        "netSstoreCleanGas": {
            "v": 5000,
            "d": "Once per SSTORE operation from clean non-zero"
        },
        "netSstoreDirtyGas": {
            "v": 200,
            "d": "Once per SSTORE operation from dirty"
        },
        "netSstoreClearRefund": {
            "v": 15000,
            "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        },
        "netSstoreResetRefund": {
            "v": 4800,
            "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "netSstoreResetClearRefund": {
            "v": 19800,
            "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "shl": {
            "v": 3,
            "d": "Base fee of the SHL opcode"
        },
        "shr": {
            "v": 3,
            "d": "Base fee of the SHR opcode"
        },
        "sar": {
            "v": 3,
            "d": "Base fee of the SAR opcode"
        },
        "extcodehash": {
            "v": 400,
            "d": "Base fee of the EXTCODEHASH opcode"
        },
        "create2": {
            "v": 32000,
            "d": "Base fee of the CREATE2 opcode"
        }
    },
    "vm": {},
    "pow": {
        "minerReward": {
            "v": "2000000000000000000",
            "d": "The amount a miner gets rewarded for mining a block"
        },
        "difficultyBombDelay": {
            "v": 5000000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

},{}],30:[function(require,module,exports){
module.exports={
    "name": "dao",
    "comment": "DAO rescue hardfork",
    "url": "https://eips.ethereum.org/EIPS/eip-779",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
}

},{}],31:[function(require,module,exports){
module.exports={
    "name": "homestead",
    "comment": "Homestead hardfork with protocol and network changes",
    "url": "https://eips.ethereum.org/EIPS/eip-606",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "delegatecall": {
            "v": 40,
            "d": "Base fee of the DELEGATECALL opcode"
        }
    },
    "vm": {},
    "pow": {}
}

},{}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hardforks = void 0;
exports.hardforks = [
    ['chainstart', require('./chainstart.json')],
    ['homestead', require('./homestead.json')],
    ['dao', require('./dao.json')],
    ['tangerineWhistle', require('./tangerineWhistle.json')],
    ['spuriousDragon', require('./spuriousDragon.json')],
    ['byzantium', require('./byzantium.json')],
    ['constantinople', require('./constantinople.json')],
    ['petersburg', require('./petersburg.json')],
    ['istanbul', require('./istanbul.json')],
    ['muirGlacier', require('./muirGlacier.json')],
    ['berlin', require('./berlin.json')],
    ['london', require('./london.json')],
    ['shanghai', require('./shanghai.json')],
    ['merge', require('./merge.json')],
];

},{"./berlin.json":26,"./byzantium.json":27,"./chainstart.json":28,"./constantinople.json":29,"./dao.json":30,"./homestead.json":31,"./istanbul.json":33,"./london.json":34,"./merge.json":35,"./muirGlacier.json":36,"./petersburg.json":37,"./shanghai.json":38,"./spuriousDragon.json":39,"./tangerineWhistle.json":40}],33:[function(require,module,exports){
module.exports={
    "name": "istanbul",
    "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
    "url": "https://eips.ethereum.org/EIPS/eip-1679",
    "status": "Draft",
    "gasConfig": {},
    "gasPrices": {
        "blake2Round": {
            "v": 1,
            "d": "Gas cost per round for the Blake2 F precompile"
        },
        "ecAdd": {
            "v": 150,
            "d": "Gas costs for curve addition precompile"
        },
        "ecMul": {
            "v": 6000,
            "d": "Gas costs for curve multiplication precompile"
        },
        "ecPairing": {
            "v": 45000,
            "d": "Base gas costs for curve pairing precompile"
        },
        "ecPairingWord": {
            "v": 34000,
            "d": "Gas costs regarding curve pairing precompile input length"
        },
        "txDataNonZero": {
            "v": 16,
            "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
        },
        "sstoreSentryGasEIP2200": {
            "v": 2300,
            "d": "Minimum gas required to be present for an SSTORE call, not consumed"
        },
        "sstoreNoopGasEIP2200": {
            "v": 800,
            "d": "Once per SSTORE operation if the value doesn't change"
        },
        "sstoreDirtyGasEIP2200": {
            "v": 800,
            "d": "Once per SSTORE operation if a dirty value is changed"
        },
        "sstoreInitGasEIP2200": {
            "v": 20000,
            "d": "Once per SSTORE operation from clean zero to non-zero"
        },
        "sstoreInitRefundEIP2200": {
            "v": 19200,
            "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "sstoreCleanGasEIP2200": {
            "v": 5000,
            "d": "Once per SSTORE operation from clean non-zero to something else"
        },
        "sstoreCleanRefundEIP2200": {
            "v": 4200,
            "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "sstoreClearRefundEIP2200": {
            "v": 15000,
            "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        },
        "balance": {
            "v": 700,
            "d": "Base fee of the BALANCE opcode"
        },
        "extcodehash": {
            "v": 700,
            "d": "Base fee of the EXTCODEHASH opcode"
        },
        "chainid": {
            "v": 2,
            "d": "Base fee of the CHAINID opcode"
        },
        "selfbalance": {
            "v": 5,
            "d": "Base fee of the SELFBALANCE opcode"
        },
        "sload": {
            "v": 800,
            "d": "Base fee of the SLOAD opcode"
        }
    },
    "vm": {},
    "pow": {}
}

},{}],34:[function(require,module,exports){
module.exports={
    "name": "london",
    "comment": "HF targeted for July 2021 following the Berlin fork",
    "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
    "status": "Draft",
    "eips": [1559, 3198, 3529, 3541]
}

},{}],35:[function(require,module,exports){
module.exports={
    "name": "merge",
    "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
    "url": "https://github.com/ethereum/pm/issues/361",
    "status": "pre-Draft",
    "consensus": {
        "type": "pos",
        "algorithm": "casper",
        "casper": {}
    },
    "eips": [3675]
}

},{}],36:[function(require,module,exports){
module.exports={
    "name": "muirGlacier",
    "comment": "HF to delay the difficulty bomb",
    "url": "https://eips.ethereum.org/EIPS/eip-2384",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 9000000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
}

},{}],37:[function(require,module,exports){
module.exports={
    "name": "petersburg",
    "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
    "url": "https://eips.ethereum.org/EIPS/eip-1716",
    "status": "Draft",
    "gasConfig": {},
    "gasPrices": {
        "netSstoreNoopGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreInitGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreCleanGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreDirtyGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreClearRefund": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreResetRefund": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreResetClearRefund": {
            "v": null,
            "d": "Removed along EIP-1283"
        }
    },
    "vm": {},
    "pow": {}
}

},{}],38:[function(require,module,exports){
module.exports={
    "name": "shanghai",
    "comment": "Next feature hardfork after the London HF",
    "url": "https://github.com/ethereum/pm/issues/356",
    "status": "Pre-Draft",
    "eips": []
}

},{}],39:[function(require,module,exports){
module.exports={
    "name": "spuriousDragon",
    "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
    "url": "https://eips.ethereum.org/EIPS/eip-607",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "expByte": {
            "v": 50,
            "d": "Times ceil(log256(exponent)) for the EXP instruction"
        }
    },
    "vm": {
        "maxCodeSize": {
            "v": 24576,
            "d": "Maximum length of contract code"
        }
    },
    "pow": {}
}

},{}],40:[function(require,module,exports){
module.exports={
    "name": "tangerineWhistle",
    "comment": "Hardfork with gas cost changes for IO-heavy operations",
    "url": "https://eips.ethereum.org/EIPS/eip-608",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "sload": {
            "v": 200,
            "d": "Once per SLOAD operation"
        },
        "call": {
            "v": 700,
            "d": "Once per CALL operation & message call transaction"
        },
        "extcodesize": {
            "v": 700,
            "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
            "v": 700,
            "d": "Base fee of the EXTCODECOPY opcode"
        },
        "balance": {
            "v": 400,
            "d": "Base fee of the BALANCE opcode"
        },
        "delegatecall": {
            "v": 700,
            "d": "Base fee of the DELEGATECALL opcode"
        },
        "callcode": {
            "v": 700,
            "d": "Base fee of the CALLCODE opcode"
        },
        "selfdestruct": {
            "v": 5000,
            "d": "Base fee of the SELFDESTRUCT opcode"
        }
    },
    "vm": {},
    "pow": {}
}

},{}],41:[function(require,module,exports){
(function (Buffer){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsensusAlgorithm = exports.ConsensusType = exports.Hardfork = exports.Chain = exports.CustomChain = void 0;
var events_1 = require("events");
var crc_32_1 = require("crc-32");
var ethereumjs_util_1 = require("ethereumjs-util");
var chains_1 = require("./chains");
var hardforks_1 = require("./hardforks");
var eips_1 = require("./eips");
var CustomChain;
(function (CustomChain) {
    /**
     * Polygon (Matic) Mainnet
     *
     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
     */
    CustomChain["PolygonMainnet"] = "polygon-mainnet";
    /**
     * Polygon (Matic) Mumbai Testnet
     *
     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
     */
    CustomChain["PolygonMumbai"] = "polygon-mumbai";
    /**
     * Arbitrum Rinkeby Testnet
     *
     * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)
     */
    CustomChain["ArbitrumRinkebyTestnet"] = "arbitrum-rinkeby-testnet";
    /**
     * xDai EVM sidechain with a native stable token
     *
     * - [Documentation](https://www.xdaichain.com/)
     */
    CustomChain["xDaiChain"] = "x-dai-chain";
})(CustomChain = exports.CustomChain || (exports.CustomChain = {}));
var Chain;
(function (Chain) {
    Chain[Chain["Mainnet"] = 1] = "Mainnet";
    Chain[Chain["Ropsten"] = 3] = "Ropsten";
    Chain[Chain["Rinkeby"] = 4] = "Rinkeby";
    Chain[Chain["Kovan"] = 42] = "Kovan";
    Chain[Chain["Goerli"] = 5] = "Goerli";
})(Chain = exports.Chain || (exports.Chain = {}));
var Hardfork;
(function (Hardfork) {
    Hardfork["Chainstart"] = "chainstart";
    Hardfork["Homestead"] = "homestead";
    Hardfork["Dao"] = "dao";
    Hardfork["TangerineWhistle"] = "tangerineWhistle";
    Hardfork["SpuriousDragon"] = "spuriousDragon";
    Hardfork["Byzantium"] = "byzantium";
    Hardfork["Constantinople"] = "constantinople";
    Hardfork["Petersburg"] = "petersburg";
    Hardfork["Istanbul"] = "istanbul";
    Hardfork["MuirGlacier"] = "muirGlacier";
    Hardfork["Berlin"] = "berlin";
    Hardfork["London"] = "london";
    Hardfork["Shanghai"] = "shanghai";
    Hardfork["Merge"] = "merge";
})(Hardfork = exports.Hardfork || (exports.Hardfork = {}));
var ConsensusType;
(function (ConsensusType) {
    ConsensusType["ProofOfStake"] = "pos";
    ConsensusType["ProofOfWork"] = "pow";
    ConsensusType["ProofOfAuthority"] = "poa";
})(ConsensusType = exports.ConsensusType || (exports.ConsensusType = {}));
var ConsensusAlgorithm;
(function (ConsensusAlgorithm) {
    ConsensusAlgorithm["Ethash"] = "ethash";
    ConsensusAlgorithm["Clique"] = "clique";
    ConsensusAlgorithm["Casper"] = "casper";
})(ConsensusAlgorithm = exports.ConsensusAlgorithm || (exports.ConsensusAlgorithm = {}));
/**
 * Common class to access chain and hardfork parameters and to provide
 * a unified and shared view on the network and hardfork state.
 *
 * Use the {@link Common.custom} static constructor for creating simple
 * custom chain {@link Common} objects (more complete custom chain setups
 * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).
 */
var Common = /** @class */ (function (_super) {
    __extends(Common, _super);
    /**
     *
     * @constructor
     */
    function Common(opts) {
        var e_1, _a;
        var _b, _c;
        var _this = _super.call(this) || this;
        _this._supportedHardforks = [];
        _this._eips = [];
        _this._customChains = (_b = opts.customChains) !== null && _b !== void 0 ? _b : [];
        _this._chainParams = _this.setChain(opts.chain);
        _this.DEFAULT_HARDFORK = (_c = _this._chainParams.defaultHardfork) !== null && _c !== void 0 ? _c : Hardfork.Istanbul;
        try {
            for (var _d = __values(_this._chainParams.hardforks), _e = _d.next(); !_e.done; _e = _d.next()) {
                var hf = _e.value;
                if (!hf.forkHash) {
                    hf.forkHash = _this._calcForkHash(hf.name);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
        _this._hardfork = _this.DEFAULT_HARDFORK;
        if (opts.supportedHardforks) {
            _this._supportedHardforks = opts.supportedHardforks;
        }
        if (opts.hardfork) {
            _this.setHardfork(opts.hardfork);
        }
        if (opts.eips) {
            _this.setEIPs(opts.eips);
        }
        return _this;
    }
    /**
     * Creates a {@link Common} object for a custom chain, based on a standard one.
     *
     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden
     * in a provided {@link chainParamsOrName} dictionary. Some usage example:
     *
     * ```javascript
     * Common.custom({chainId: 123})
     * ```
     *
     * There are also selected supported custom chains which can be initialized by using one of the
     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:
     *
     * ```javascript
     * Common.custom(CustomChains.MaticMumbai)
     * ```
     *
     * Note that these supported custom chains only provide some base parameters (usually the chain and
     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with
     * the `@ethereumjs/tx` library to a Layer-2 chain).
     *
     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain
     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others
     */
    Common.custom = function (chainParamsOrName, opts) {
        var _a;
        if (opts === void 0) { opts = {}; }
        var baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : 'mainnet';
        var standardChainParams = __assign({}, Common._getChainParams(baseChain));
        standardChainParams['name'] = 'custom-chain';
        if (typeof chainParamsOrName !== 'string') {
            return new Common(__assign({ chain: __assign(__assign({}, standardChainParams), chainParamsOrName) }, opts));
        }
        else {
            if (chainParamsOrName === CustomChain.PolygonMainnet) {
                return Common.custom({
                    name: CustomChain.PolygonMainnet,
                    chainId: 137,
                    networkId: 137,
                });
            }
            if (chainParamsOrName === CustomChain.PolygonMumbai) {
                return Common.custom({
                    name: CustomChain.PolygonMumbai,
                    chainId: 80001,
                    networkId: 80001,
                });
            }
            if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {
                return Common.custom({
                    name: CustomChain.ArbitrumRinkebyTestnet,
                    chainId: 421611,
                    networkId: 421611,
                });
            }
            if (chainParamsOrName === CustomChain.xDaiChain) {
                return Common.custom({
                    name: CustomChain.xDaiChain,
                    chainId: 100,
                    networkId: 100,
                });
            }
            throw new Error("Custom chain " + chainParamsOrName + " not supported");
        }
    };
    /**
     * Creates a {@link Common} object for a custom chain, based on a standard one. It uses all the `Chain`
     * params from {@link baseChain} except the ones overridden in {@link customChainParams}.
     *
     * @deprecated Use {@link Common.custom} instead
     *
     * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom
     * chain params on.
     * @param customChainParams The custom parameters of the chain.
     * @param hardfork String identifier ('byzantium') for hardfork (optional)
     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)
     */
    Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {
        var standardChainParams = Common._getChainParams(baseChain);
        return new Common({
            chain: __assign(__assign({}, standardChainParams), customChainParams),
            hardfork: hardfork,
            supportedHardforks: supportedHardforks,
        });
    };
    /**
     * Static method to determine if a {@link chainId} is supported as a standard chain
     * @param chainId BN id (`1`) of a standard chain
     * @returns boolean
     */
    Common.isSupportedChainId = function (chainId) {
        var initializedChains = (0, chains_1._getInitializedChains)();
        return Boolean(initializedChains['names'][chainId.toString()]);
    };
    Common._getChainParams = function (chain, customChains) {
        var initializedChains = (0, chains_1._getInitializedChains)(customChains);
        if (typeof chain === 'number' || ethereumjs_util_1.BN.isBN(chain)) {
            chain = chain.toString();
            if (initializedChains['names'][chain]) {
                var name_1 = initializedChains['names'][chain];
                return initializedChains[name_1];
            }
            throw new Error("Chain with ID " + chain + " not supported");
        }
        if (initializedChains[chain]) {
            return initializedChains[chain];
        }
        throw new Error("Chain with name " + chain + " not supported");
    };
    /**
     * Sets the chain
     * @param chain String ('mainnet') or Number (1) chain
     *     representation. Or, a Dictionary of chain parameters for a private network.
     * @returns The dictionary with parameters set as chain
     */
    Common.prototype.setChain = function (chain) {
        var e_2, _a;
        if (typeof chain === 'number' || typeof chain === 'string' || ethereumjs_util_1.BN.isBN(chain)) {
            // Filter out genesis states if passed in to customChains
            var plainCustomChains = void 0;
            if (this._customChains &&
                this._customChains.length > 0 &&
                Array.isArray(this._customChains[0])) {
                plainCustomChains = this._customChains.map(function (e) { return e[0]; });
            }
            else {
                plainCustomChains = this._customChains;
            }
            this._chainParams = Common._getChainParams(chain, plainCustomChains);
        }
        else if (typeof chain === 'object') {
            if (this._customChains.length > 0) {
                throw new Error('Chain must be a string, number, or BN when initialized with customChains passed in');
            }
            var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];
            try {
                for (var required_1 = __values(required), required_1_1 = required_1.next(); !required_1_1.done; required_1_1 = required_1.next()) {
                    var param = required_1_1.value;
                    if (chain[param] === undefined) {
                        throw new Error("Missing required chain parameter: " + param);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (required_1_1 && !required_1_1.done && (_a = required_1.return)) _a.call(required_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this._chainParams = chain;
        }
        else {
            throw new Error('Wrong input format');
        }
        return this._chainParams;
    };
    /**
     * Sets the hardfork to get params for
     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum
     */
    Common.prototype.setHardfork = function (hardfork) {
        var e_3, _a;
        if (!this._isSupportedHardfork(hardfork)) {
            throw new Error("Hardfork " + hardfork + " not set as supported in supportedHardforks");
        }
        var existing = false;
        try {
            for (var HARDFORK_CHANGES_1 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next(); !HARDFORK_CHANGES_1_1.done; HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next()) {
                var hfChanges = HARDFORK_CHANGES_1_1.value;
                if (hfChanges[0] === hardfork) {
                    if (this._hardfork !== hardfork) {
                        this._hardfork = hardfork;
                        this.emit('hardforkChanged', hardfork);
                    }
                    existing = true;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (HARDFORK_CHANGES_1_1 && !HARDFORK_CHANGES_1_1.done && (_a = HARDFORK_CHANGES_1.return)) _a.call(HARDFORK_CHANGES_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (!existing) {
            throw new Error("Hardfork with name " + hardfork + " not supported");
        }
    };
    /**
     * Returns the hardfork based on the block number or an optional
     * total difficulty (Merge HF) provided.
     *
     * An optional TD takes precedence in case the corresponding HF block
     * is set to `null` or otherwise needs to match (if not an error
     * will be thrown).
     *
     * @param blockNumber
     * @param td
     * @returns The name of the HF
     */
    Common.prototype.getHardforkByBlockNumber = function (blockNumber, td) {
        var e_4, _a;
        blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);
        td = td ? (0, ethereumjs_util_1.toType)(td, ethereumjs_util_1.TypeOutput.BN) : undefined;
        var hardfork = Hardfork.Chainstart;
        var minTdHF;
        var maxTdHF;
        var previousHF;
        try {
            for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var hf = _c.value;
                // Skip comparison for not applied HFs
                if (hf.block === null) {
                    if (td && hf.td) {
                        if (td.gten(hf.td)) {
                            return hf.name;
                        }
                    }
                    continue;
                }
                if (blockNumber.gte(new ethereumjs_util_1.BN(hf.block))) {
                    hardfork = hf.name;
                }
                if (td && hf.td) {
                    if (td.gten(hf.td)) {
                        minTdHF = hf.name;
                    }
                    else {
                        maxTdHF = previousHF;
                    }
                }
                previousHF = hf.name;
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (td) {
            var msgAdd = "block number: " + blockNumber + " (-> " + hardfork + "), ";
            if (minTdHF) {
                if (!this.hardforkGteHardfork(hardfork, minTdHF)) {
                    var msg = 'HF determined by block number is lower than the minimum total difficulty HF';
                    msgAdd += "total difficulty: " + td + " (-> " + minTdHF + ")";
                    throw new Error(msg + ": " + msgAdd);
                }
            }
            if (maxTdHF) {
                if (!this.hardforkGteHardfork(maxTdHF, hardfork)) {
                    var msg = 'Maximum HF determined by total difficulty is lower than the block number HF';
                    msgAdd += "total difficulty: " + td + " (-> " + maxTdHF + ")";
                    throw new Error(msg + ": " + msgAdd);
                }
            }
        }
        return hardfork;
    };
    /**
     * Sets a new hardfork based on the block number or an optional
     * total difficulty (Merge HF) provided.
     *
     * An optional TD takes precedence in case the corresponding HF block
     * is set to `null` or otherwise needs to match (if not an error
     * will be thrown).
     *
     * @param blockNumber
     * @param td
     * @returns The name of the HF set
     */
    Common.prototype.setHardforkByBlockNumber = function (blockNumber, td) {
        var hardfork = this.getHardforkByBlockNumber(blockNumber, td);
        this.setHardfork(hardfork);
        return hardfork;
    };
    /**
     * Internal helper function to choose between hardfork set and hardfork provided as param
     * @param hardfork Hardfork given to function as a parameter
     * @returns Hardfork chosen to be used
     */
    Common.prototype._chooseHardfork = function (hardfork, onlySupported) {
        if (onlySupported === void 0) { onlySupported = true; }
        if (!hardfork) {
            hardfork = this._hardfork;
        }
        else if (onlySupported && !this._isSupportedHardfork(hardfork)) {
            throw new Error("Hardfork " + hardfork + " not set as supported in supportedHardforks");
        }
        return hardfork;
    };
    /**
     * Internal helper function, returns the params for the given hardfork for the chain set
     * @param hardfork Hardfork name
     * @returns Dictionary with hardfork params
     */
    Common.prototype._getHardfork = function (hardfork) {
        var e_5, _a;
        var hfs = this.hardforks();
        try {
            for (var hfs_1 = __values(hfs), hfs_1_1 = hfs_1.next(); !hfs_1_1.done; hfs_1_1 = hfs_1.next()) {
                var hf = hfs_1_1.value;
                if (hf['name'] === hardfork)
                    return hf;
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (hfs_1_1 && !hfs_1_1.done && (_a = hfs_1.return)) _a.call(hfs_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        throw new Error("Hardfork " + hardfork + " not defined for chain " + this.chainName());
    };
    /**
     * Internal helper function to check if a hardfork is set to be supported by the library
     * @param hardfork Hardfork name
     * @returns True if hardfork is supported
     */
    Common.prototype._isSupportedHardfork = function (hardfork) {
        var e_6, _a;
        if (this._supportedHardforks.length > 0) {
            try {
                for (var _b = __values(this._supportedHardforks), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var supportedHf = _c.value;
                    if (hardfork === supportedHf)
                        return true;
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        else {
            return true;
        }
        return false;
    };
    /**
     * Sets the active EIPs
     * @param eips
     */
    Common.prototype.setEIPs = function (eips) {
        var e_7, _a;
        var _this = this;
        if (eips === void 0) { eips = []; }
        var _loop_1 = function (eip) {
            if (!(eip in eips_1.EIPs)) {
                throw new Error(eip + " not supported");
            }
            var minHF = this_1.gteHardfork(eips_1.EIPs[eip]['minimumHardfork']);
            if (!minHF) {
                throw new Error(eip + " cannot be activated on hardfork " + this_1.hardfork() + ", minimumHardfork: " + minHF);
            }
            if (eips_1.EIPs[eip].requiredEIPs) {
                // eslint-disable-next-line prettier/prettier
                eips_1.EIPs[eip].requiredEIPs.forEach(function (elem) {
                    if (!(eips.includes(elem) || _this.isActivatedEIP(elem))) {
                        throw new Error(eip + " requires EIP " + elem + ", but is not included in the EIP list");
                    }
                });
            }
        };
        var this_1 = this;
        try {
            for (var eips_2 = __values(eips), eips_2_1 = eips_2.next(); !eips_2_1.done; eips_2_1 = eips_2.next()) {
                var eip = eips_2_1.value;
                _loop_1(eip);
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (eips_2_1 && !eips_2_1.done && (_a = eips_2.return)) _a.call(eips_2);
            }
            finally { if (e_7) throw e_7.error; }
        }
        this._eips = eips;
    };
    /**
     * Returns a parameter for the current chain setup
     *
     * If the parameter is present in an EIP, the EIP always takes precendence.
     * Otherwise the parameter if taken from the latest applied HF with
     * a change on the respective parameter.
     *
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @returns The value requested or `null` if not found
     */
    Common.prototype.param = function (topic, name) {
        var e_8, _a;
        // TODO: consider the case that different active EIPs
        // can change the same parameter
        var value = null;
        try {
            for (var _b = __values(this._eips), _c = _b.next(); !_c.done; _c = _b.next()) {
                var eip = _c.value;
                value = this.paramByEIP(topic, name, eip);
                if (value !== null) {
                    return value;
                }
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_8) throw e_8.error; }
        }
        return this.paramByHardfork(topic, name, this._hardfork);
    };
    /**
     * Returns the parameter corresponding to a hardfork
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @param hardfork Hardfork name
     * @returns The value requested or `null` if not found
     */
    Common.prototype.paramByHardfork = function (topic, name, hardfork) {
        var e_9, _a, e_10, _b;
        hardfork = this._chooseHardfork(hardfork);
        var value = null;
        try {
            for (var HARDFORK_CHANGES_2 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next(); !HARDFORK_CHANGES_2_1.done; HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next()) {
                var hfChanges = HARDFORK_CHANGES_2_1.value;
                // EIP-referencing HF file (e.g. berlin.json)
                if ('eips' in hfChanges[1]) {
                    var hfEIPs = hfChanges[1]['eips'];
                    try {
                        for (var hfEIPs_1 = (e_10 = void 0, __values(hfEIPs)), hfEIPs_1_1 = hfEIPs_1.next(); !hfEIPs_1_1.done; hfEIPs_1_1 = hfEIPs_1.next()) {
                            var eip = hfEIPs_1_1.value;
                            var valueEIP = this.paramByEIP(topic, name, eip);
                            value = valueEIP !== null ? valueEIP : value;
                        }
                    }
                    catch (e_10_1) { e_10 = { error: e_10_1 }; }
                    finally {
                        try {
                            if (hfEIPs_1_1 && !hfEIPs_1_1.done && (_b = hfEIPs_1.return)) _b.call(hfEIPs_1);
                        }
                        finally { if (e_10) throw e_10.error; }
                    }
                    // Paramater-inlining HF file (e.g. istanbul.json)
                }
                else {
                    if (!hfChanges[1][topic]) {
                        throw new Error("Topic " + topic + " not defined");
                    }
                    if (hfChanges[1][topic][name] !== undefined) {
                        value = hfChanges[1][topic][name].v;
                    }
                }
                if (hfChanges[0] === hardfork)
                    break;
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (HARDFORK_CHANGES_2_1 && !HARDFORK_CHANGES_2_1.done && (_a = HARDFORK_CHANGES_2.return)) _a.call(HARDFORK_CHANGES_2);
            }
            finally { if (e_9) throw e_9.error; }
        }
        return value;
    };
    /**
     * Returns a parameter corresponding to an EIP
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @param eip Number of the EIP
     * @returns The value requested or `null` if not found
     */
    Common.prototype.paramByEIP = function (topic, name, eip) {
        if (!(eip in eips_1.EIPs)) {
            throw new Error(eip + " not supported");
        }
        var eipParams = eips_1.EIPs[eip];
        if (!(topic in eipParams)) {
            throw new Error("Topic " + topic + " not defined");
        }
        if (eipParams[topic][name] === undefined) {
            return null;
        }
        var value = eipParams[topic][name].v;
        return value;
    };
    /**
     * Returns a parameter for the hardfork active on block number
     * @param topic Parameter topic
     * @param name Parameter name
     * @param blockNumber Block number
     */
    Common.prototype.paramByBlock = function (topic, name, blockNumber) {
        var activeHfs = this.activeHardforks(blockNumber);
        var hardfork = activeHfs[activeHfs.length - 1]['name'];
        return this.paramByHardfork(topic, name, hardfork);
    };
    /**
     * Checks if an EIP is activated by either being included in the EIPs
     * manually passed in with the {@link CommonOpts.eips} or in a
     * hardfork currently being active
     *
     * Note: this method only works for EIPs being supported
     * by the {@link CommonOpts.eips} constructor option
     * @param eip
     */
    Common.prototype.isActivatedEIP = function (eip) {
        var e_11, _a;
        if (this.eips().includes(eip)) {
            return true;
        }
        try {
            for (var HARDFORK_CHANGES_3 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next(); !HARDFORK_CHANGES_3_1.done; HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next()) {
                var hfChanges = HARDFORK_CHANGES_3_1.value;
                var hf = hfChanges[1];
                if (this.gteHardfork(hf['name']) && 'eips' in hf) {
                    if (hf['eips'].includes(eip)) {
                        return true;
                    }
                }
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (HARDFORK_CHANGES_3_1 && !HARDFORK_CHANGES_3_1.done && (_a = HARDFORK_CHANGES_3.return)) _a.call(HARDFORK_CHANGES_3);
            }
            finally { if (e_11) throw e_11.error; }
        }
        return false;
    };
    /**
     * Checks if set or provided hardfork is active on block number
     * @param hardfork Hardfork name or null (for HF set)
     * @param blockNumber
     * @param opts Hardfork options (onlyActive unused)
     * @returns True if HF is active on block number
     */
    Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {
        var _a;
        if (opts === void 0) { opts = {}; }
        blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);
        var onlySupported = (_a = opts.onlySupported) !== null && _a !== void 0 ? _a : false;
        hardfork = this._chooseHardfork(hardfork, onlySupported);
        var hfBlock = this.hardforkBlockBN(hardfork);
        if (hfBlock && blockNumber.gte(hfBlock)) {
            return true;
        }
        return false;
    };
    /**
     * Alias to hardforkIsActiveOnBlock when hardfork is set
     * @param blockNumber
     * @param opts Hardfork options (onlyActive unused)
     * @returns True if HF is active on block number
     */
    Common.prototype.activeOnBlock = function (blockNumber, opts) {
        return this.hardforkIsActiveOnBlock(null, blockNumber, opts);
    };
    /**
     * Sequence based check if given or set HF1 is greater than or equal HF2
     * @param hardfork1 Hardfork name or null (if set)
     * @param hardfork2 Hardfork name
     * @param opts Hardfork options
     * @returns True if HF1 gte HF2
     */
    Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {
        var e_12, _a;
        if (opts === void 0) { opts = {}; }
        var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;
        hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);
        var hardforks;
        if (onlyActive) {
            hardforks = this.activeHardforks(null, opts);
        }
        else {
            hardforks = this.hardforks();
        }
        var posHf1 = -1, posHf2 = -1;
        var index = 0;
        try {
            for (var hardforks_2 = __values(hardforks), hardforks_2_1 = hardforks_2.next(); !hardforks_2_1.done; hardforks_2_1 = hardforks_2.next()) {
                var hf = hardforks_2_1.value;
                if (hf['name'] === hardfork1)
                    posHf1 = index;
                if (hf['name'] === hardfork2)
                    posHf2 = index;
                index += 1;
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (hardforks_2_1 && !hardforks_2_1.done && (_a = hardforks_2.return)) _a.call(hardforks_2);
            }
            finally { if (e_12) throw e_12.error; }
        }
        return posHf1 >= posHf2 && posHf2 !== -1;
    };
    /**
     * Alias to hardforkGteHardfork when hardfork is set
     * @param hardfork Hardfork name
     * @param opts Hardfork options
     * @returns True if hardfork set is greater than hardfork provided
     */
    Common.prototype.gteHardfork = function (hardfork, opts) {
        return this.hardforkGteHardfork(null, hardfork, opts);
    };
    /**
     * Checks if given or set hardfork is active on the chain
     * @param hardfork Hardfork name, optional if HF set
     * @param opts Hardfork options (onlyActive unused)
     * @returns True if hardfork is active on the chain
     */
    Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {
        var e_13, _a;
        var _b;
        if (opts === void 0) { opts = {}; }
        var onlySupported = (_b = opts.onlySupported) !== null && _b !== void 0 ? _b : false;
        hardfork = this._chooseHardfork(hardfork, onlySupported);
        try {
            for (var _c = __values(this.hardforks()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var hf = _d.value;
                if (hf['name'] === hardfork && hf['block'] !== null)
                    return true;
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_13) throw e_13.error; }
        }
        return false;
    };
    /**
     * Returns the active hardfork switches for the current chain
     * @param blockNumber up to block if provided, otherwise for the whole chain
     * @param opts Hardfork options (onlyActive unused)
     * @return Array with hardfork arrays
     */
    Common.prototype.activeHardforks = function (blockNumber, opts) {
        var e_14, _a;
        if (opts === void 0) { opts = {}; }
        var activeHardforks = [];
        var hfs = this.hardforks();
        try {
            for (var hfs_2 = __values(hfs), hfs_2_1 = hfs_2.next(); !hfs_2_1.done; hfs_2_1 = hfs_2.next()) {
                var hf = hfs_2_1.value;
                if (hf['block'] === null)
                    continue;
                if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block'])
                    break;
                if (opts.onlySupported && !this._isSupportedHardfork(hf['name']))
                    continue;
                activeHardforks.push(hf);
            }
        }
        catch (e_14_1) { e_14 = { error: e_14_1 }; }
        finally {
            try {
                if (hfs_2_1 && !hfs_2_1.done && (_a = hfs_2.return)) _a.call(hfs_2);
            }
            finally { if (e_14) throw e_14.error; }
        }
        return activeHardforks;
    };
    /**
     * Returns the latest active hardfork name for chain or block or throws if unavailable
     * @param blockNumber up to block if provided, otherwise for the whole chain
     * @param opts Hardfork options (onlyActive unused)
     * @return Hardfork name
     */
    Common.prototype.activeHardfork = function (blockNumber, opts) {
        if (opts === void 0) { opts = {}; }
        var activeHardforks = this.activeHardforks(blockNumber, opts);
        if (activeHardforks.length > 0) {
            return activeHardforks[activeHardforks.length - 1]['name'];
        }
        else {
            throw new Error("No (supported) active hardfork found");
        }
    };
    /**
     * Returns the hardfork change block for hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block number or null if unscheduled
     * @deprecated Please use {@link Common.hardforkBlockBN} for large number support
     */
    Common.prototype.hardforkBlock = function (hardfork) {
        var block = this.hardforkBlockBN(hardfork);
        return block ? (0, ethereumjs_util_1.toType)(block, ethereumjs_util_1.TypeOutput.Number) : null;
    };
    /**
     * Returns the hardfork change block for hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block number or null if unscheduled
     */
    Common.prototype.hardforkBlockBN = function (hardfork) {
        hardfork = this._chooseHardfork(hardfork, false);
        var block = this._getHardfork(hardfork)['block'];
        if (block === undefined || block === null) {
            return null;
        }
        return new ethereumjs_util_1.BN(block);
    };
    /**
     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Total difficulty or null if no set
     */
    Common.prototype.hardforkTD = function (hardfork) {
        hardfork = this._chooseHardfork(hardfork, false);
        var td = this._getHardfork(hardfork)['td'];
        if (td === undefined || td === null) {
            return null;
        }
        return new ethereumjs_util_1.BN(td);
    };
    /**
     * True if block number provided is the hardfork (given or set) change block
     * @param blockNumber Number of the block to check
     * @param hardfork Hardfork name, optional if HF set
     * @returns True if blockNumber is HF block
     */
    Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {
        blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);
        hardfork = this._chooseHardfork(hardfork, false);
        var block = this.hardforkBlockBN(hardfork);
        return block ? block.eq(blockNumber) : false;
    };
    /**
     * Returns the change block for the next hardfork after the hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block number or null if not available
     * @deprecated Please use {@link Common.nextHardforkBlockBN} for large number support
     */
    Common.prototype.nextHardforkBlock = function (hardfork) {
        var block = this.nextHardforkBlockBN(hardfork);
        return block === null ? null : (0, ethereumjs_util_1.toType)(block, ethereumjs_util_1.TypeOutput.Number);
    };
    /**
     * Returns the change block for the next hardfork after the hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block number or null if not available
     */
    Common.prototype.nextHardforkBlockBN = function (hardfork) {
        hardfork = this._chooseHardfork(hardfork, false);
        var hfBlock = this.hardforkBlockBN(hardfork);
        if (hfBlock === null) {
            return null;
        }
        // Next fork block number or null if none available
        // Logic: if accumulator is still null and on the first occurrence of
        // a block greater than the current hfBlock set the accumulator,
        // pass on the accumulator as the final result from this time on
        var nextHfBlock = this.hardforks().reduce(function (acc, hf) {
            var block = new ethereumjs_util_1.BN(hf.block);
            return block.gt(hfBlock) && acc === null ? block : acc;
        }, null);
        return nextHfBlock;
    };
    /**
     * True if block number provided is the hardfork change block following the hardfork given or set
     * @param blockNumber Number of the block to check
     * @param hardfork Hardfork name, optional if HF set
     * @returns True if blockNumber is HF block
     */
    Common.prototype.isNextHardforkBlock = function (blockNumber, hardfork) {
        blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);
        hardfork = this._chooseHardfork(hardfork, false);
        var nextHardforkBlock = this.nextHardforkBlockBN(hardfork);
        return nextHardforkBlock === null ? false : nextHardforkBlock.eq(blockNumber);
    };
    /**
     * Internal helper function to calculate a fork hash
     * @param hardfork Hardfork name
     * @returns Fork hash as hex string
     */
    Common.prototype._calcForkHash = function (hardfork) {
        var e_15, _a;
        var genesis = Buffer.from(this.genesis().hash.substr(2), 'hex');
        var hfBuffer = Buffer.alloc(0);
        var prevBlock = 0;
        try {
            for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var hf = _c.value;
                var block = hf.block;
                // Skip for chainstart (0), not applied HFs (null) and
                // when already applied on same block number HFs
                if (block !== 0 && block !== null && block !== prevBlock) {
                    var hfBlockBuffer = Buffer.from(block.toString(16).padStart(16, '0'), 'hex');
                    hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer]);
                }
                if (hf.name === hardfork)
                    break;
                if (block !== null) {
                    prevBlock = block;
                }
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_15) throw e_15.error; }
        }
        var inputBuffer = Buffer.concat([genesis, hfBuffer]);
        // CRC32 delivers result as signed (negative) 32-bit integer,
        // convert to hex string
        var forkhash = (0, ethereumjs_util_1.intToBuffer)((0, crc_32_1.buf)(inputBuffer) >>> 0).toString('hex');
        return "0x" + forkhash;
    };
    /**
     * Returns an eth/64 compliant fork hash (EIP-2124)
     * @param hardfork Hardfork name, optional if HF set
     */
    Common.prototype.forkHash = function (hardfork) {
        hardfork = this._chooseHardfork(hardfork, false);
        var data = this._getHardfork(hardfork);
        if (data['block'] === null) {
            var msg = 'No fork hash calculation possible for non-applied or future hardfork';
            throw new Error(msg);
        }
        if (data['forkHash'] !== undefined) {
            return data['forkHash'];
        }
        return this._calcForkHash(hardfork);
    };
    /**
     *
     * @param forkHash Fork hash as a hex string
     * @returns Array with hardfork data (name, block, forkHash)
     */
    Common.prototype.hardforkForForkHash = function (forkHash) {
        var resArray = this.hardforks().filter(function (hf) {
            return hf.forkHash === forkHash;
        });
        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;
    };
    /**
     * Returns the Genesis parameters of the current chain
     * @returns Genesis dictionary
     */
    Common.prototype.genesis = function () {
        return this._chainParams['genesis'];
    };
    /**
     * Returns the Genesis state of the current chain,
     * both account addresses and values are provided
     * as hex-prefixed strings
     *
     * @returns {Array} Genesis state
     */
    Common.prototype.genesisState = function () {
        var e_16, _a;
        // Use require statements here in favor of import statements
        // to load json files on demand
        // (high memory usage by large mainnet.json genesis state file)
        switch (this.chainName()) {
            case 'mainnet':
                return require('./genesisStates/mainnet.json');
            case 'ropsten':
                return require('./genesisStates/ropsten.json');
            case 'rinkeby':
                return require('./genesisStates/rinkeby.json');
            case 'kovan':
                return require('./genesisStates/kovan.json');
            case 'goerli':
                return require('./genesisStates/goerli.json');
        }
        // Custom chains with genesis state provided
        if (this._customChains &&
            this._customChains.length > 0 &&
            Array.isArray(this._customChains[0])) {
            try {
                for (var _b = __values(this._customChains), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var chainArrayWithGenesis = _c.value;
                    if (chainArrayWithGenesis[0].name === this.chainName()) {
                        return chainArrayWithGenesis[1];
                    }
                }
            }
            catch (e_16_1) { e_16 = { error: e_16_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_16) throw e_16.error; }
            }
        }
        return {};
    };
    /**
     * Returns the hardforks for current chain
     * @returns {Array} Array with arrays of hardforks
     */
    Common.prototype.hardforks = function () {
        return this._chainParams['hardforks'];
    };
    /**
     * Returns bootstrap nodes for the current chain
     * @returns {Dictionary} Dict with bootstrap nodes
     */
    Common.prototype.bootstrapNodes = function () {
        return this._chainParams['bootstrapNodes'];
    };
    /**
     * Returns DNS networks for the current chain
     * @returns {String[]} Array of DNS ENR urls
     */
    Common.prototype.dnsNetworks = function () {
        return this._chainParams['dnsNetworks'];
    };
    /**
     * Returns the hardfork set
     * @returns Hardfork name
     */
    Common.prototype.hardfork = function () {
        return this._hardfork;
    };
    /**
     * Returns the Id of current chain
     * @returns chain Id
     * @deprecated Please use {@link Common.chainIdBN} for large number support
     */
    Common.prototype.chainId = function () {
        return (0, ethereumjs_util_1.toType)(this.chainIdBN(), ethereumjs_util_1.TypeOutput.Number);
    };
    /**
     * Returns the Id of current chain
     * @returns chain Id
     */
    Common.prototype.chainIdBN = function () {
        return new ethereumjs_util_1.BN(this._chainParams['chainId']);
    };
    /**
     * Returns the name of current chain
     * @returns chain name (lower case)
     */
    Common.prototype.chainName = function () {
        return this._chainParams['name'];
    };
    /**
     * Returns the Id of current network
     * @returns network Id
     * @deprecated Please use {@link Common.networkIdBN} for large number support
     */
    Common.prototype.networkId = function () {
        return (0, ethereumjs_util_1.toType)(this.networkIdBN(), ethereumjs_util_1.TypeOutput.Number);
    };
    /**
     * Returns the Id of current network
     * @returns network Id
     */
    Common.prototype.networkIdBN = function () {
        return new ethereumjs_util_1.BN(this._chainParams['networkId']);
    };
    /**
     * Returns the active EIPs
     * @returns List of EIPs
     */
    Common.prototype.eips = function () {
        return this._eips;
    };
    /**
     * Returns the consensus type of the network
     * Possible values: "pow"|"poa"|"pos"
     *
     * Note: This value can update along a hardfork.
     */
    Common.prototype.consensusType = function () {
        var e_17, _a;
        var hardfork = this.hardfork();
        var value;
        try {
            for (var HARDFORK_CHANGES_4 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_4_1 = HARDFORK_CHANGES_4.next(); !HARDFORK_CHANGES_4_1.done; HARDFORK_CHANGES_4_1 = HARDFORK_CHANGES_4.next()) {
                var hfChanges = HARDFORK_CHANGES_4_1.value;
                if ('consensus' in hfChanges[1]) {
                    value = hfChanges[1]['consensus']['type'];
                }
                if (hfChanges[0] === hardfork)
                    break;
            }
        }
        catch (e_17_1) { e_17 = { error: e_17_1 }; }
        finally {
            try {
                if (HARDFORK_CHANGES_4_1 && !HARDFORK_CHANGES_4_1.done && (_a = HARDFORK_CHANGES_4.return)) _a.call(HARDFORK_CHANGES_4);
            }
            finally { if (e_17) throw e_17.error; }
        }
        if (value) {
            return value;
        }
        return this._chainParams['consensus']['type'];
    };
    /**
     * Returns the concrete consensus implementation
     * algorithm or protocol for the network
     * e.g. "ethash" for "pow" consensus type,
     * "clique" for "poa" consensus type or
     * "casper" for "pos" consensus type.
     *
     * Note: This value can update along a hardfork.
     */
    Common.prototype.consensusAlgorithm = function () {
        var e_18, _a;
        var hardfork = this.hardfork();
        var value;
        try {
            for (var HARDFORK_CHANGES_5 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_5_1 = HARDFORK_CHANGES_5.next(); !HARDFORK_CHANGES_5_1.done; HARDFORK_CHANGES_5_1 = HARDFORK_CHANGES_5.next()) {
                var hfChanges = HARDFORK_CHANGES_5_1.value;
                if ('consensus' in hfChanges[1]) {
                    value = hfChanges[1]['consensus']['algorithm'];
                }
                if (hfChanges[0] === hardfork)
                    break;
            }
        }
        catch (e_18_1) { e_18 = { error: e_18_1 }; }
        finally {
            try {
                if (HARDFORK_CHANGES_5_1 && !HARDFORK_CHANGES_5_1.done && (_a = HARDFORK_CHANGES_5.return)) _a.call(HARDFORK_CHANGES_5);
            }
            finally { if (e_18) throw e_18.error; }
        }
        if (value) {
            return value;
        }
        return this._chainParams['consensus']['algorithm'];
    };
    /**
     * Returns a dictionary with consensus configuration
     * parameters based on the consensus algorithm
     *
     * Expected returns (parameters must be present in
     * the respective chain json files):
     *
     * ethash: -
     * clique: period, epoch
     * aura: -
     * casper: -
     *
     * Note: This value can update along a hardfork.
     */
    Common.prototype.consensusConfig = function () {
        var e_19, _a;
        var hardfork = this.hardfork();
        var value;
        try {
            for (var HARDFORK_CHANGES_6 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_6_1 = HARDFORK_CHANGES_6.next(); !HARDFORK_CHANGES_6_1.done; HARDFORK_CHANGES_6_1 = HARDFORK_CHANGES_6.next()) {
                var hfChanges = HARDFORK_CHANGES_6_1.value;
                if ('consensus' in hfChanges[1]) {
                    // The config parameter is named after the respective consensus algorithm
                    value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']];
                }
                if (hfChanges[0] === hardfork)
                    break;
            }
        }
        catch (e_19_1) { e_19 = { error: e_19_1 }; }
        finally {
            try {
                if (HARDFORK_CHANGES_6_1 && !HARDFORK_CHANGES_6_1.done && (_a = HARDFORK_CHANGES_6.return)) _a.call(HARDFORK_CHANGES_6);
            }
            finally { if (e_19) throw e_19.error; }
        }
        if (value) {
            return value;
        }
        var consensusAlgorithm = this.consensusAlgorithm();
        return this._chainParams['consensus'][consensusAlgorithm];
    };
    /**
     * Returns a deep copy of this {@link Common} instance.
     */
    Common.prototype.copy = function () {
        return Object.assign(Object.create(Object.getPrototypeOf(this)), this);
    };
    return Common;
}(events_1.EventEmitter));
exports.default = Common;

}).call(this,require("buffer").Buffer)
},{"./chains":3,"./eips":20,"./genesisStates/goerli.json":21,"./genesisStates/kovan.json":22,"./genesisStates/mainnet.json":23,"./genesisStates/rinkeby.json":24,"./genesisStates/ropsten.json":25,"./hardforks":32,"buffer":161,"crc-32":168,"ethereumjs-util":50,"events":237}],42:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":160}],43:[function(require,module,exports){
(function (Buffer){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;
var assert_1 = __importDefault(require("assert"));
var bn_js_1 = __importDefault(require("bn.js"));
var rlp = __importStar(require("rlp"));
var secp256k1_1 = require("ethereum-cryptography/secp256k1");
var internal_1 = require("./internal");
var constants_1 = require("./constants");
var bytes_1 = require("./bytes");
var hash_1 = require("./hash");
var helpers_1 = require("./helpers");
var types_1 = require("./types");
var Account = /** @class */ (function () {
    /**
     * This constructor assigns and validates the values.
     * Use the static factory methods to assist in creating an Account from varying data types.
     */
    function Account(nonce, balance, stateRoot, codeHash) {
        if (nonce === void 0) { nonce = new bn_js_1.default(0); }
        if (balance === void 0) { balance = new bn_js_1.default(0); }
        if (stateRoot === void 0) { stateRoot = constants_1.KECCAK256_RLP; }
        if (codeHash === void 0) { codeHash = constants_1.KECCAK256_NULL; }
        this.nonce = nonce;
        this.balance = balance;
        this.stateRoot = stateRoot;
        this.codeHash = codeHash;
        this._validate();
    }
    Account.fromAccountData = function (accountData) {
        var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;
        return new Account(nonce ? new bn_js_1.default((0, bytes_1.toBuffer)(nonce)) : undefined, balance ? new bn_js_1.default((0, bytes_1.toBuffer)(balance)) : undefined, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : undefined, codeHash ? (0, bytes_1.toBuffer)(codeHash) : undefined);
    };
    Account.fromRlpSerializedAccount = function (serialized) {
        var values = rlp.decode(serialized);
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized account input. Must be array');
        }
        return this.fromValuesArray(values);
    };
    Account.fromValuesArray = function (values) {
        var _a = __read(values, 4), nonce = _a[0], balance = _a[1], stateRoot = _a[2], codeHash = _a[3];
        return new Account(new bn_js_1.default(nonce), new bn_js_1.default(balance), stateRoot, codeHash);
    };
    Account.prototype._validate = function () {
        if (this.nonce.lt(new bn_js_1.default(0))) {
            throw new Error('nonce must be greater than zero');
        }
        if (this.balance.lt(new bn_js_1.default(0))) {
            throw new Error('balance must be greater than zero');
        }
        if (this.stateRoot.length !== 32) {
            throw new Error('stateRoot must have a length of 32');
        }
        if (this.codeHash.length !== 32) {
            throw new Error('codeHash must have a length of 32');
        }
    };
    /**
     * Returns a Buffer Array of the raw Buffers for the account, in order.
     */
    Account.prototype.raw = function () {
        return [
            (0, types_1.bnToUnpaddedBuffer)(this.nonce),
            (0, types_1.bnToUnpaddedBuffer)(this.balance),
            this.stateRoot,
            this.codeHash,
        ];
    };
    /**
     * Returns the RLP serialization of the account as a `Buffer`.
     */
    Account.prototype.serialize = function () {
        return rlp.encode(this.raw());
    };
    /**
     * Returns a `Boolean` determining if the account is a contract.
     */
    Account.prototype.isContract = function () {
        return !this.codeHash.equals(constants_1.KECCAK256_NULL);
    };
    /**
     * Returns a `Boolean` determining if the account is empty complying to the definition of
     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):
     * "An account is considered empty when it has no code and zero nonce and zero balance."
     */
    Account.prototype.isEmpty = function () {
        return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);
    };
    return Account;
}());
exports.Account = Account;
/**
 * Checks if the address is a valid. Accepts checksummed addresses too.
 */
var isValidAddress = function (hexAddress) {
    try {
        (0, helpers_1.assertIsString)(hexAddress);
    }
    catch (e) {
        return false;
    }
    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
};
exports.isValidAddress = isValidAddress;
/**
 * Returns a checksummed address.
 *
 * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
 * has the effect of checksummed addresses for one chain having invalid checksums for others.
 * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).
 *
 * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not
 * backwards compatible to the original widely adopted checksum format standard introduced in
 * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.
 * Usage of this EIP is therefore discouraged unless you have a very targeted use case.
 */
var toChecksumAddress = function (hexAddress, eip1191ChainId) {
    (0, helpers_1.assertIsHexString)(hexAddress);
    var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();
    var prefix = '';
    if (eip1191ChainId) {
        var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);
        prefix = chainId.toString() + '0x';
    }
    var hash = (0, hash_1.keccakFromString)(prefix + address).toString('hex');
    var ret = '0x';
    for (var i = 0; i < address.length; i++) {
        if (parseInt(hash[i], 16) >= 8) {
            ret += address[i].toUpperCase();
        }
        else {
            ret += address[i];
        }
    }
    return ret;
};
exports.toChecksumAddress = toChecksumAddress;
/**
 * Checks if the address is a valid checksummed address.
 *
 * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
 */
var isValidChecksumAddress = function (hexAddress, eip1191ChainId) {
    return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
};
exports.isValidChecksumAddress = isValidChecksumAddress;
/**
 * Generates an address of a newly created contract.
 * @param from The address which is creating this new address
 * @param nonce The nonce of the from account
 */
var generateAddress = function (from, nonce) {
    (0, helpers_1.assertIsBuffer)(from);
    (0, helpers_1.assertIsBuffer)(nonce);
    var nonceBN = new bn_js_1.default(nonce);
    if (nonceBN.isZero()) {
        // in RLP we want to encode null in the case of zero nonce
        // read the RLP documentation for an answer if you dare
        return (0, hash_1.rlphash)([from, null]).slice(-20);
    }
    // Only take the lower 160bits of the hash
    return (0, hash_1.rlphash)([from, Buffer.from(nonceBN.toArray())]).slice(-20);
};
exports.generateAddress = generateAddress;
/**
 * Generates an address for a contract created using CREATE2.
 * @param from The address which is creating this new address
 * @param salt A salt
 * @param initCode The init code of the contract being created
 */
var generateAddress2 = function (from, salt, initCode) {
    (0, helpers_1.assertIsBuffer)(from);
    (0, helpers_1.assertIsBuffer)(salt);
    (0, helpers_1.assertIsBuffer)(initCode);
    (0, assert_1.default)(from.length === 20);
    (0, assert_1.default)(salt.length === 32);
    var address = (0, hash_1.keccak256)(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, (0, hash_1.keccak256)(initCode)]));
    return address.slice(-20);
};
exports.generateAddress2 = generateAddress2;
/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 */
var isValidPrivate = function (privateKey) {
    return (0, secp256k1_1.privateKeyVerify)(privateKey);
};
exports.isValidPrivate = isValidPrivate;
/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param sanitize Accept public keys in other formats
 */
var isValidPublic = function (publicKey, sanitize) {
    if (sanitize === void 0) { sanitize = false; }
    (0, helpers_1.assertIsBuffer)(publicKey);
    if (publicKey.length === 64) {
        // Convert to SEC1 for secp256k1
        return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));
    }
    if (!sanitize) {
        return false;
    }
    return (0, secp256k1_1.publicKeyVerify)(publicKey);
};
exports.isValidPublic = isValidPublic;
/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param sanitize Accept public keys in other formats
 */
var pubToAddress = function (pubKey, sanitize) {
    if (sanitize === void 0) { sanitize = false; }
    (0, helpers_1.assertIsBuffer)(pubKey);
    if (sanitize && pubKey.length !== 64) {
        pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));
    }
    (0, assert_1.default)(pubKey.length === 64);
    // Only take the lower 160bits of the hash
    return (0, hash_1.keccak)(pubKey).slice(-20);
};
exports.pubToAddress = pubToAddress;
exports.publicToAddress = exports.pubToAddress;
/**
 * Returns the ethereum public key of a given private key.
 * @param privateKey A private key must be 256 bits wide
 */
var privateToPublic = function (privateKey) {
    (0, helpers_1.assertIsBuffer)(privateKey);
    // skip the type flag and use the X, Y points
    return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);
};
exports.privateToPublic = privateToPublic;
/**
 * Returns the ethereum address of a given private key.
 * @param privateKey A private key must be 256 bits wide
 */
var privateToAddress = function (privateKey) {
    return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
};
exports.privateToAddress = privateToAddress;
/**
 * Converts a public key to the Ethereum format.
 */
var importPublic = function (publicKey) {
    (0, helpers_1.assertIsBuffer)(publicKey);
    if (publicKey.length !== 64) {
        publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));
    }
    return publicKey;
};
exports.importPublic = importPublic;
/**
 * Returns the zero address.
 */
var zeroAddress = function () {
    var addressLength = 20;
    var addr = (0, bytes_1.zeros)(addressLength);
    return (0, bytes_1.bufferToHex)(addr);
};
exports.zeroAddress = zeroAddress;
/**
 * Checks if a given address is the zero address.
 */
var isZeroAddress = function (hexAddress) {
    try {
        (0, helpers_1.assertIsString)(hexAddress);
    }
    catch (e) {
        return false;
    }
    var zeroAddr = (0, exports.zeroAddress)();
    return zeroAddr === hexAddress;
};
exports.isZeroAddress = isZeroAddress;

}).call(this,require("buffer").Buffer)
},{"./bytes":45,"./constants":46,"./hash":48,"./helpers":49,"./internal":51,"./types":54,"assert":121,"bn.js":42,"buffer":161,"ethereum-cryptography/secp256k1":219,"rlp":55}],44:[function(require,module,exports){
(function (Buffer){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Address = void 0;
var assert_1 = __importDefault(require("assert"));
var bn_js_1 = __importDefault(require("bn.js"));
var bytes_1 = require("./bytes");
var account_1 = require("./account");
var Address = /** @class */ (function () {
    function Address(buf) {
        (0, assert_1.default)(buf.length === 20, 'Invalid address length');
        this.buf = buf;
    }
    /**
     * Returns the zero address.
     */
    Address.zero = function () {
        return new Address((0, bytes_1.zeros)(20));
    };
    /**
     * Returns an Address object from a hex-encoded string.
     * @param str - Hex-encoded address
     */
    Address.fromString = function (str) {
        (0, assert_1.default)((0, account_1.isValidAddress)(str), 'Invalid address');
        return new Address((0, bytes_1.toBuffer)(str));
    };
    /**
     * Returns an address for a given public key.
     * @param pubKey The two points of an uncompressed key
     */
    Address.fromPublicKey = function (pubKey) {
        (0, assert_1.default)(Buffer.isBuffer(pubKey), 'Public key should be Buffer');
        var buf = (0, account_1.pubToAddress)(pubKey);
        return new Address(buf);
    };
    /**
     * Returns an address for a given private key.
     * @param privateKey A private key must be 256 bits wide
     */
    Address.fromPrivateKey = function (privateKey) {
        (0, assert_1.default)(Buffer.isBuffer(privateKey), 'Private key should be Buffer');
        var buf = (0, account_1.privateToAddress)(privateKey);
        return new Address(buf);
    };
    /**
     * Generates an address for a newly created contract.
     * @param from The address which is creating this new address
     * @param nonce The nonce of the from account
     */
    Address.generate = function (from, nonce) {
        (0, assert_1.default)(bn_js_1.default.isBN(nonce));
        return new Address((0, account_1.generateAddress)(from.buf, nonce.toArrayLike(Buffer)));
    };
    /**
     * Generates an address for a contract created using CREATE2.
     * @param from The address which is creating this new address
     * @param salt A salt
     * @param initCode The init code of the contract being created
     */
    Address.generate2 = function (from, salt, initCode) {
        (0, assert_1.default)(Buffer.isBuffer(salt));
        (0, assert_1.default)(Buffer.isBuffer(initCode));
        return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));
    };
    /**
     * Is address equal to another.
     */
    Address.prototype.equals = function (address) {
        return this.buf.equals(address.buf);
    };
    /**
     * Is address zero.
     */
    Address.prototype.isZero = function () {
        return this.equals(Address.zero());
    };
    /**
     * True if address is in the address range defined
     * by EIP-1352
     */
    Address.prototype.isPrecompileOrSystemAddress = function () {
        var addressBN = new bn_js_1.default(this.buf);
        var rangeMin = new bn_js_1.default(0);
        var rangeMax = new bn_js_1.default('ffff', 'hex');
        return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);
    };
    /**
     * Returns hex encoding of address.
     */
    Address.prototype.toString = function () {
        return '0x' + this.buf.toString('hex');
    };
    /**
     * Returns Buffer representation of address.
     */
    Address.prototype.toBuffer = function () {
        return Buffer.from(this.buf);
    };
    return Address;
}());
exports.Address = Address;

}).call(this,require("buffer").Buffer)
},{"./account":43,"./bytes":45,"assert":121,"bn.js":42,"buffer":161}],45:[function(require,module,exports){
(function (Buffer){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
var internal_1 = require("./internal");
var helpers_1 = require("./helpers");
/**
 * Converts a `Number` into a hex `String`
 * @param {Number} i
 * @return {String}
 */
var intToHex = function (i) {
    if (!Number.isSafeInteger(i) || i < 0) {
        throw new Error("Received an invalid integer type: " + i);
    }
    return "0x" + i.toString(16);
};
exports.intToHex = intToHex;
/**
 * Converts an `Number` to a `Buffer`
 * @param {Number} i
 * @return {Buffer}
 */
var intToBuffer = function (i) {
    var hex = (0, exports.intToHex)(i);
    return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');
};
exports.intToBuffer = intToBuffer;
/**
 * Returns a buffer filled with 0s.
 * @param bytes the number of bytes the buffer should be
 */
var zeros = function (bytes) {
    return Buffer.allocUnsafe(bytes).fill(0);
};
exports.zeros = zeros;
/**
 * Pads a `Buffer` with zeros till it has `length` bytes.
 * Truncates the beginning or end of input if its length exceeds `length`.
 * @param msg the value to pad (Buffer)
 * @param length the number of bytes the output should be
 * @param right whether to start padding form the left or right
 * @return (Buffer)
 */
var setLength = function (msg, length, right) {
    var buf = (0, exports.zeros)(length);
    if (right) {
        if (msg.length < length) {
            msg.copy(buf);
            return buf;
        }
        return msg.slice(0, length);
    }
    else {
        if (msg.length < length) {
            msg.copy(buf, length - msg.length);
            return buf;
        }
        return msg.slice(-length);
    }
};
/**
 * Left Pads a `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param msg the value to pad (Buffer)
 * @param length the number of bytes the output should be
 * @return (Buffer)
 */
var setLengthLeft = function (msg, length) {
    (0, helpers_1.assertIsBuffer)(msg);
    return setLength(msg, length, false);
};
exports.setLengthLeft = setLengthLeft;
/**
 * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.
 * it truncates the end if it exceeds.
 * @param msg the value to pad (Buffer)
 * @param length the number of bytes the output should be
 * @return (Buffer)
 */
var setLengthRight = function (msg, length) {
    (0, helpers_1.assertIsBuffer)(msg);
    return setLength(msg, length, true);
};
exports.setLengthRight = setLengthRight;
/**
 * Trims leading zeros from a `Buffer`, `String` or `Number[]`.
 * @param a (Buffer|Array|String)
 * @return (Buffer|Array|String)
 */
var stripZeros = function (a) {
    var first = a[0];
    while (a.length > 0 && first.toString() === '0') {
        a = a.slice(1);
        first = a[0];
    }
    return a;
};
/**
 * Trims leading zeros from a `Buffer`.
 * @param a (Buffer)
 * @return (Buffer)
 */
var unpadBuffer = function (a) {
    (0, helpers_1.assertIsBuffer)(a);
    return stripZeros(a);
};
exports.unpadBuffer = unpadBuffer;
/**
 * Trims leading zeros from an `Array` (of numbers).
 * @param a (number[])
 * @return (number[])
 */
var unpadArray = function (a) {
    (0, helpers_1.assertIsArray)(a);
    return stripZeros(a);
};
exports.unpadArray = unpadArray;
/**
 * Trims leading zeros from a hex-prefixed `String`.
 * @param a (String)
 * @return (String)
 */
var unpadHexString = function (a) {
    (0, helpers_1.assertIsHexString)(a);
    a = (0, internal_1.stripHexPrefix)(a);
    return stripZeros(a);
};
exports.unpadHexString = unpadHexString;
/**
 * Attempts to turn a value into a `Buffer`.
 * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects
 * with a `toArray()` or `toBuffer()` method.
 * @param v the value
 */
var toBuffer = function (v) {
    if (v === null || v === undefined) {
        return Buffer.allocUnsafe(0);
    }
    if (Buffer.isBuffer(v)) {
        return Buffer.from(v);
    }
    if (Array.isArray(v) || v instanceof Uint8Array) {
        return Buffer.from(v);
    }
    if (typeof v === 'string') {
        if (!(0, internal_1.isHexString)(v)) {
            throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + v);
        }
        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');
    }
    if (typeof v === 'number') {
        return (0, exports.intToBuffer)(v);
    }
    if (bn_js_1.default.isBN(v)) {
        return v.toArrayLike(Buffer);
    }
    if (v.toArray) {
        // converts a BN to a Buffer
        return Buffer.from(v.toArray());
    }
    if (v.toBuffer) {
        return Buffer.from(v.toBuffer());
    }
    throw new Error('invalid type');
};
exports.toBuffer = toBuffer;
/**
 * Converts a `Buffer` to a `Number`.
 * @param buf `Buffer` object to convert
 * @throws If the input number exceeds 53 bits.
 */
var bufferToInt = function (buf) {
    return new bn_js_1.default((0, exports.toBuffer)(buf)).toNumber();
};
exports.bufferToInt = bufferToInt;
/**
 * Converts a `Buffer` into a `0x`-prefixed hex `String`.
 * @param buf `Buffer` object to convert
 */
var bufferToHex = function (buf) {
    buf = (0, exports.toBuffer)(buf);
    return '0x' + buf.toString('hex');
};
exports.bufferToHex = bufferToHex;
/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param num Signed integer value
 */
var fromSigned = function (num) {
    return new bn_js_1.default(num).fromTwos(256);
};
exports.fromSigned = fromSigned;
/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param num
 */
var toUnsigned = function (num) {
    return Buffer.from(num.toTwos(256).toArray());
};
exports.toUnsigned = toUnsigned;
/**
 * Adds "0x" to a given `String` if it does not already start with "0x".
 */
var addHexPrefix = function (str) {
    if (typeof str !== 'string') {
        return str;
    }
    return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;
};
exports.addHexPrefix = addHexPrefix;
/**
 * Returns the utf8 string representation from a hex string.
 *
 * Examples:
 *
 * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'
 * Input 2: '657468657265756d'
 * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'
 *
 * Output (all 3 input variants): 'ethereum'
 *
 * Note that this method is not intended to be used with hex strings
 * representing quantities in both big endian or little endian notation.
 *
 * @param string Hex string, should be `0x` prefixed
 * @return Utf8 string
 */
var toUtf8 = function (hex) {
    var zerosRegexp = /^(00)+|(00)+$/g;
    hex = (0, internal_1.stripHexPrefix)(hex);
    if (hex.length % 2 !== 0) {
        throw new Error('Invalid non-even hex string input for toUtf8() provided');
    }
    var bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');
    return bufferVal.toString('utf8');
};
exports.toUtf8 = toUtf8;
/**
 * Converts a `Buffer` or `Array` to JSON.
 * @param ba (Buffer|Array)
 * @return (Array|String|null)
 */
var baToJSON = function (ba) {
    if (Buffer.isBuffer(ba)) {
        return "0x" + ba.toString('hex');
    }
    else if (ba instanceof Array) {
        var array = [];
        for (var i = 0; i < ba.length; i++) {
            array.push((0, exports.baToJSON)(ba[i]));
        }
        return array;
    }
};
exports.baToJSON = baToJSON;

}).call(this,require("buffer").Buffer)
},{"./helpers":49,"./internal":51,"bn.js":42,"buffer":161}],46:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;
var Buffer = require('buffer').Buffer;
var bn_js_1 = __importDefault(require("bn.js"));
/**
 * The max integer that this VM can handle
 */
exports.MAX_INTEGER = new bn_js_1.default('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
/**
 * 2^256
 */
exports.TWO_POW256 = new bn_js_1.default('10000000000000000000000000000000000000000000000000000000000000000', 16);
/**
 * Keccak-256 hash of null
 */
exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
/**
 * Keccak-256 hash of null
 */
exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
/**
 * Keccak-256 of an RLP of an empty array
 */
exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
/**
 * Keccak-256 of an RLP of an empty array
 */
exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
/**
 * Keccak-256 hash of the RLP of null
 */
exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
/**
 * Keccak-256 hash of the RLP of null
 */
exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');

},{"bn.js":42,"buffer":161}],47:[function(require,module,exports){
"use strict";
/**
 * Re-exports commonly used modules:
 * * Exports [`BN`](https://github.com/indutny/bn.js), [`rlp`](https://github.com/ethereumjs/rlp).
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rlp = exports.BN = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
exports.BN = bn_js_1.default;
var rlp = __importStar(require("rlp"));
exports.rlp = rlp;

},{"bn.js":42,"rlp":55}],48:[function(require,module,exports){
(function (Buffer){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;
var keccak_1 = require("ethereum-cryptography/keccak");
var createHash = require('create-hash');
var rlp = __importStar(require("rlp"));
var bytes_1 = require("./bytes");
var helpers_1 = require("./helpers");
/**
 * Creates Keccak hash of a Buffer input
 * @param a The input data (Buffer)
 * @param bits (number = 256) The Keccak width
 */
var keccak = function (a, bits) {
    if (bits === void 0) { bits = 256; }
    (0, helpers_1.assertIsBuffer)(a);
    switch (bits) {
        case 224: {
            return (0, keccak_1.keccak224)(a);
        }
        case 256: {
            return (0, keccak_1.keccak256)(a);
        }
        case 384: {
            return (0, keccak_1.keccak384)(a);
        }
        case 512: {
            return (0, keccak_1.keccak512)(a);
        }
        default: {
            throw new Error("Invald algorithm: keccak" + bits);
        }
    }
};
exports.keccak = keccak;
/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
 * @param a The input data (Buffer)
 */
var keccak256 = function (a) {
    return (0, exports.keccak)(a);
};
exports.keccak256 = keccak256;
/**
 * Creates Keccak hash of a utf-8 string input
 * @param a The input data (String)
 * @param bits (number = 256) The Keccak width
 */
var keccakFromString = function (a, bits) {
    if (bits === void 0) { bits = 256; }
    (0, helpers_1.assertIsString)(a);
    var buf = Buffer.from(a, 'utf8');
    return (0, exports.keccak)(buf, bits);
};
exports.keccakFromString = keccakFromString;
/**
 * Creates Keccak hash of an 0x-prefixed string input
 * @param a The input data (String)
 * @param bits (number = 256) The Keccak width
 */
var keccakFromHexString = function (a, bits) {
    if (bits === void 0) { bits = 256; }
    (0, helpers_1.assertIsHexString)(a);
    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
};
exports.keccakFromHexString = keccakFromHexString;
/**
 * Creates Keccak hash of a number array input
 * @param a The input data (number[])
 * @param bits (number = 256) The Keccak width
 */
var keccakFromArray = function (a, bits) {
    if (bits === void 0) { bits = 256; }
    (0, helpers_1.assertIsArray)(a);
    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
};
exports.keccakFromArray = keccakFromArray;
/**
 * Creates SHA256 hash of an input.
 * @param  a The input data (Buffer|Array|String)
 */
var _sha256 = function (a) {
    a = (0, bytes_1.toBuffer)(a);
    return createHash('sha256').update(a).digest();
};
/**
 * Creates SHA256 hash of a Buffer input.
 * @param a The input data (Buffer)
 */
var sha256 = function (a) {
    (0, helpers_1.assertIsBuffer)(a);
    return _sha256(a);
};
exports.sha256 = sha256;
/**
 * Creates SHA256 hash of a string input.
 * @param a The input data (string)
 */
var sha256FromString = function (a) {
    (0, helpers_1.assertIsString)(a);
    return _sha256(a);
};
exports.sha256FromString = sha256FromString;
/**
 * Creates SHA256 hash of a number[] input.
 * @param a The input data (number[])
 */
var sha256FromArray = function (a) {
    (0, helpers_1.assertIsArray)(a);
    return _sha256(a);
};
exports.sha256FromArray = sha256FromArray;
/**
 * Creates RIPEMD160 hash of the input.
 * @param a The input data (Buffer|Array|String|Number)
 * @param padded Whether it should be padded to 256 bits or not
 */
var _ripemd160 = function (a, padded) {
    a = (0, bytes_1.toBuffer)(a);
    var hash = createHash('rmd160').update(a).digest();
    if (padded === true) {
        return (0, bytes_1.setLengthLeft)(hash, 32);
    }
    else {
        return hash;
    }
};
/**
 * Creates RIPEMD160 hash of a Buffer input.
 * @param a The input data (Buffer)
 * @param padded Whether it should be padded to 256 bits or not
 */
var ripemd160 = function (a, padded) {
    (0, helpers_1.assertIsBuffer)(a);
    return _ripemd160(a, padded);
};
exports.ripemd160 = ripemd160;
/**
 * Creates RIPEMD160 hash of a string input.
 * @param a The input data (String)
 * @param padded Whether it should be padded to 256 bits or not
 */
var ripemd160FromString = function (a, padded) {
    (0, helpers_1.assertIsString)(a);
    return _ripemd160(a, padded);
};
exports.ripemd160FromString = ripemd160FromString;
/**
 * Creates RIPEMD160 hash of a number[] input.
 * @param a The input data (number[])
 * @param padded Whether it should be padded to 256 bits or not
 */
var ripemd160FromArray = function (a, padded) {
    (0, helpers_1.assertIsArray)(a);
    return _ripemd160(a, padded);
};
exports.ripemd160FromArray = ripemd160FromArray;
/**
 * Creates SHA-3 hash of the RLP encoded version of the input.
 * @param a The input data
 */
var rlphash = function (a) {
    return (0, exports.keccak)(rlp.encode(a));
};
exports.rlphash = rlphash;

}).call(this,require("buffer").Buffer)
},{"./bytes":45,"./helpers":49,"buffer":161,"create-hash":169,"ethereum-cryptography/keccak":192,"rlp":55}],49:[function(require,module,exports){
(function (Buffer){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;
var internal_1 = require("./internal");
/**
 * Throws if a string is not hex prefixed
 * @param {string} input string to check hex prefix of
 */
var assertIsHexString = function (input) {
    if (!(0, internal_1.isHexString)(input)) {
        var msg = "This method only supports 0x-prefixed hex strings but input was: " + input;
        throw new Error(msg);
    }
};
exports.assertIsHexString = assertIsHexString;
/**
 * Throws if input is not a buffer
 * @param {Buffer} input value to check
 */
var assertIsBuffer = function (input) {
    if (!Buffer.isBuffer(input)) {
        var msg = "This method only supports Buffer but input was: " + input;
        throw new Error(msg);
    }
};
exports.assertIsBuffer = assertIsBuffer;
/**
 * Throws if input is not an array
 * @param {number[]} input value to check
 */
var assertIsArray = function (input) {
    if (!Array.isArray(input)) {
        var msg = "This method only supports number arrays but input was: " + input;
        throw new Error(msg);
    }
};
exports.assertIsArray = assertIsArray;
/**
 * Throws if input is not a string
 * @param {string} input value to check
 */
var assertIsString = function (input) {
    if (typeof input !== 'string') {
        var msg = "This method only supports strings but input was: " + input;
        throw new Error(msg);
    }
};
exports.assertIsString = assertIsString;

}).call(this,{"isBuffer":require("../../../../../is-buffer/index.js")})
},{"../../../../../is-buffer/index.js":256,"./internal":51}],50:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
/**
 * Constants
 */
__exportStar(require("./constants"), exports);
/**
 * Account class and helper functions
 */
__exportStar(require("./account"), exports);
/**
 * Address type
 */
__exportStar(require("./address"), exports);
/**
 * Hash functions
 */
__exportStar(require("./hash"), exports);
/**
 * ECDSA signature
 */
__exportStar(require("./signature"), exports);
/**
 * Utilities for manipulating Buffers, byte arrays, etc.
 */
__exportStar(require("./bytes"), exports);
/**
 * Function for definining properties on an object
 */
__exportStar(require("./object"), exports);
/**
 * External exports (BN, rlp, secp256k1)
 */
__exportStar(require("./externals"), exports);
/**
 * Helpful TypeScript types
 */
__exportStar(require("./types"), exports);
/**
 * Export ethjs-util methods
 */
var internal_1 = require("./internal");
Object.defineProperty(exports, "isHexPrefixed", { enumerable: true, get: function () { return internal_1.isHexPrefixed; } });
Object.defineProperty(exports, "stripHexPrefix", { enumerable: true, get: function () { return internal_1.stripHexPrefix; } });
Object.defineProperty(exports, "padToEven", { enumerable: true, get: function () { return internal_1.padToEven; } });
Object.defineProperty(exports, "getBinarySize", { enumerable: true, get: function () { return internal_1.getBinarySize; } });
Object.defineProperty(exports, "arrayContainsArray", { enumerable: true, get: function () { return internal_1.arrayContainsArray; } });
Object.defineProperty(exports, "toAscii", { enumerable: true, get: function () { return internal_1.toAscii; } });
Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function () { return internal_1.fromUtf8; } });
Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function () { return internal_1.fromAscii; } });
Object.defineProperty(exports, "getKeys", { enumerable: true, get: function () { return internal_1.getKeys; } });
Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return internal_1.isHexString; } });

},{"./account":43,"./address":44,"./bytes":45,"./constants":46,"./externals":47,"./hash":48,"./internal":51,"./object":52,"./signature":53,"./types":54}],51:[function(require,module,exports){
(function (Buffer){
"use strict";
/*
The MIT License

Copyright (c) 2016 Nick Dodson. nickdodson.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
/**
 * Returns a `Boolean` on whether or not the a `String` starts with '0x'
 * @param str the string input value
 * @return a boolean if it is or is not hex prefixed
 * @throws if the str input is not a string
 */
function isHexPrefixed(str) {
    if (typeof str !== 'string') {
        throw new Error("[isHexPrefixed] input must be type 'string', received type " + typeof str);
    }
    return str[0] === '0' && str[1] === 'x';
}
exports.isHexPrefixed = isHexPrefixed;
/**
 * Removes '0x' from a given `String` if present
 * @param str the string value
 * @returns the string without 0x prefix
 */
var stripHexPrefix = function (str) {
    if (typeof str !== 'string')
        throw new Error("[stripHexPrefix] input must be type 'string', received " + typeof str);
    return isHexPrefixed(str) ? str.slice(2) : str;
};
exports.stripHexPrefix = stripHexPrefix;
/**
 * Pads a `String` to have an even length
 * @param value
 * @return output
 */
function padToEven(value) {
    var a = value;
    if (typeof a !== 'string') {
        throw new Error("[padToEven] value must be type 'string', received " + typeof a);
    }
    if (a.length % 2)
        a = "0" + a;
    return a;
}
exports.padToEven = padToEven;
/**
 * Get the binary size of a string
 * @param str
 * @returns the number of bytes contained within the string
 */
function getBinarySize(str) {
    if (typeof str !== 'string') {
        throw new Error("[getBinarySize] method requires input type 'string', recieved " + typeof str);
    }
    return Buffer.byteLength(str, 'utf8');
}
exports.getBinarySize = getBinarySize;
/**
 * Returns TRUE if the first specified array contains all elements
 * from the second one. FALSE otherwise.
 *
 * @param superset
 * @param subset
 *
 */
function arrayContainsArray(superset, subset, some) {
    if (Array.isArray(superset) !== true) {
        throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '" + typeof superset + "'");
    }
    if (Array.isArray(subset) !== true) {
        throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '" + typeof subset + "'");
    }
    return subset[some ? 'some' : 'every'](function (value) { return superset.indexOf(value) >= 0; });
}
exports.arrayContainsArray = arrayContainsArray;
/**
 * Should be called to get ascii from its hex representation
 *
 * @param string in hex
 * @returns ascii string representation of hex value
 */
function toAscii(hex) {
    var str = '';
    var i = 0;
    var l = hex.length;
    if (hex.substring(0, 2) === '0x')
        i = 2;
    for (; i < l; i += 2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
    }
    return str;
}
exports.toAscii = toAscii;
/**
 * Should be called to get hex representation (prefixed by 0x) of utf8 string
 *
 * @param string
 * @param optional padding
 * @returns hex representation of input string
 */
function fromUtf8(stringValue) {
    var str = Buffer.from(stringValue, 'utf8');
    return "0x" + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
}
exports.fromUtf8 = fromUtf8;
/**
 * Should be called to get hex representation (prefixed by 0x) of ascii string
 *
 * @param  string
 * @param  optional padding
 * @returns  hex representation of input string
 */
function fromAscii(stringValue) {
    var hex = '';
    for (var i = 0; i < stringValue.length; i++) {
        var code = stringValue.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0" + n : n;
    }
    return "0x" + hex;
}
exports.fromAscii = fromAscii;
/**
 * Returns the keys from an array of objects.
 * @example
 * ```js
 * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']
 *````
 * @param  params
 * @param  key
 * @param  allowEmpty
 * @returns output just a simple array of output keys
 */
function getKeys(params, key, allowEmpty) {
    if (!Array.isArray(params)) {
        throw new Error("[getKeys] method expects input 'params' to be an array, got " + typeof params);
    }
    if (typeof key !== 'string') {
        throw new Error("[getKeys] method expects input 'key' to be type 'string', got " + typeof params);
    }
    var result = [];
    for (var i = 0; i < params.length; i++) {
        var value = params[i][key];
        if (allowEmpty && !value) {
            value = '';
        }
        else if (typeof value !== 'string') {
            throw new Error("invalid abi - expected type 'string', received " + typeof value);
        }
        result.push(value);
    }
    return result;
}
exports.getKeys = getKeys;
/**
 * Is the string a hex string.
 *
 * @param  value
 * @param  length
 * @returns  output the string is a hex string
 */
function isHexString(value, length) {
    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))
        return false;
    if (length && value.length !== 2 + 2 * length)
        return false;
    return true;
}
exports.isHexString = isHexString;

}).call(this,require("buffer").Buffer)
},{"buffer":161}],52:[function(require,module,exports){
(function (Buffer){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineProperties = void 0;
var assert_1 = __importDefault(require("assert"));
var internal_1 = require("./internal");
var rlp = __importStar(require("rlp"));
var bytes_1 = require("./bytes");
/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param self the `Object` to define properties on
 * @param fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param data data to be validated against the definitions
 * @deprecated
 */
var defineProperties = function (self, fields, data) {
    self.raw = [];
    self._fields = [];
    // attach the `toJSON`
    self.toJSON = function (label) {
        if (label === void 0) { label = false; }
        if (label) {
            var obj_1 = {};
            self._fields.forEach(function (field) {
                obj_1[field] = "0x" + self[field].toString('hex');
            });
            return obj_1;
        }
        return (0, bytes_1.baToJSON)(self.raw);
    };
    self.serialize = function serialize() {
        return rlp.encode(self.raw);
    };
    fields.forEach(function (field, i) {
        self._fields.push(field.name);
        function getter() {
            return self.raw[i];
        }
        function setter(v) {
            v = (0, bytes_1.toBuffer)(v);
            if (v.toString('hex') === '00' && !field.allowZero) {
                v = Buffer.allocUnsafe(0);
            }
            if (field.allowLess && field.length) {
                v = (0, bytes_1.unpadBuffer)(v);
                (0, assert_1.default)(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
            }
            else if (!(field.allowZero && v.length === 0) && field.length) {
                (0, assert_1.default)(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
            }
            self.raw[i] = v;
        }
        Object.defineProperty(self, field.name, {
            enumerable: true,
            configurable: true,
            get: getter,
            set: setter,
        });
        if (field.default) {
            self[field.name] = field.default;
        }
        // attach alias
        if (field.alias) {
            Object.defineProperty(self, field.alias, {
                enumerable: false,
                configurable: true,
                set: setter,
                get: getter,
            });
        }
    });
    // if the constuctor is passed data
    if (data) {
        if (typeof data === 'string') {
            data = Buffer.from((0, internal_1.stripHexPrefix)(data), 'hex');
        }
        if (Buffer.isBuffer(data)) {
            data = rlp.decode(data);
        }
        if (Array.isArray(data)) {
            if (data.length > self._fields.length) {
                throw new Error('wrong number of fields in data');
            }
            // make sure all the items are buffers
            data.forEach(function (d, i) {
                self[self._fields[i]] = (0, bytes_1.toBuffer)(d);
            });
        }
        else if (typeof data === 'object') {
            var keys_1 = Object.keys(data);
            fields.forEach(function (field) {
                if (keys_1.indexOf(field.name) !== -1)
                    self[field.name] = data[field.name];
                if (keys_1.indexOf(field.alias) !== -1)
                    self[field.alias] = data[field.alias];
            });
        }
        else {
            throw new Error('invalid data');
        }
    }
};
exports.defineProperties = defineProperties;

}).call(this,require("buffer").Buffer)
},{"./bytes":45,"./internal":51,"assert":121,"buffer":161,"rlp":55}],53:[function(require,module,exports){
(function (Buffer){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
var secp256k1_1 = require("ethereum-cryptography/secp256k1");
var bn_js_1 = __importDefault(require("bn.js"));
var bytes_1 = require("./bytes");
var hash_1 = require("./hash");
var helpers_1 = require("./helpers");
var types_1 = require("./types");
function ecsign(msgHash, privateKey, chainId) {
    var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature = _a.signature, recovery = _a.recid;
    var r = Buffer.from(signature.slice(0, 32));
    var s = Buffer.from(signature.slice(32, 64));
    if (!chainId || typeof chainId === 'number') {
        // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)
        if (chainId && !Number.isSafeInteger(chainId)) {
            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
        }
        var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;
        return { r: r, s: s, v: v_1 };
    }
    var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
    var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);
    return { r: r, s: s, v: v };
}
exports.ecsign = ecsign;
function calculateSigRecovery(v, chainId) {
    var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);
    if (!chainId) {
        return vBN.subn(27);
    }
    var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
    return vBN.sub(chainIdBN.muln(2).addn(35));
}
function isValidSigRecovery(recovery) {
    var rec = new bn_js_1.default(recovery);
    return rec.eqn(0) || rec.eqn(1);
}
/**
 * ECDSA public key recovery from signature.
 * @returns Recovered public key
 */
var ecrecover = function (msgHash, v, r, s, chainId) {
    var signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);
    var recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);
    return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));
};
exports.ecrecover = ecrecover;
/**
 * Convert signature parameters into the format of `eth_sign` RPC method.
 * @returns Signature
 */
var toRpcSig = function (v, r, s, chainId) {
    var recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));
};
exports.toRpcSig = toRpcSig;
/**
 * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).
 * @returns Signature
 */
var toCompactSig = function (v, r, s, chainId) {
    var recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);
    var ss = s;
    if ((vn > 28 && vn % 2 === 1) || vn === 1 || vn === 28) {
        ss = Buffer.from(s);
        ss[0] |= 0x80;
    }
    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));
};
exports.toCompactSig = toCompactSig;
/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 */
var fromRpcSig = function (sig) {
    var buf = (0, bytes_1.toBuffer)(sig);
    var r;
    var s;
    var v;
    if (buf.length >= 65) {
        r = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToInt)(buf.slice(64));
    }
    else if (buf.length === 64) {
        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)
        r = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;
        s[0] &= 0x7f;
    }
    else {
        throw new Error('Invalid signature length');
    }
    // support both versions of `eth_sign` responses
    if (v < 27) {
        v += 27;
    }
    return {
        v: v,
        r: r,
        s: s,
    };
};
exports.fromRpcSig = fromRpcSig;
/**
 * Validate a ECDSA signature.
 * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
 */
var isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
    if (homesteadOrLater === void 0) { homesteadOrLater = true; }
    var SECP256K1_N_DIV_2 = new bn_js_1.default('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    var SECP256K1_N = new bn_js_1.default('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
    if (r.length !== 32 || s.length !== 32) {
        return false;
    }
    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
    }
    var rBN = new bn_js_1.default(r);
    var sBN = new bn_js_1.default(s);
    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
        return false;
    }
    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
        return false;
    }
    return true;
};
exports.isValidSignature = isValidSignature;
/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 */
var hashPersonalMessage = function (message) {
    (0, helpers_1.assertIsBuffer)(message);
    var prefix = Buffer.from("\u0019Ethereum Signed Message:\n" + message.length, 'utf-8');
    return (0, hash_1.keccak)(Buffer.concat([prefix, message]));
};
exports.hashPersonalMessage = hashPersonalMessage;

}).call(this,require("buffer").Buffer)
},{"./bytes":45,"./hash":48,"./helpers":49,"./types":54,"bn.js":42,"buffer":161,"ethereum-cryptography/secp256k1":219}],54:[function(require,module,exports){
(function (Buffer){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
var internal_1 = require("./internal");
var bytes_1 = require("./bytes");
/**
 * Convert BN to 0x-prefixed hex string.
 */
function bnToHex(value) {
    return "0x" + value.toString(16);
}
exports.bnToHex = bnToHex;
/**
 * Convert value from BN to an unpadded Buffer
 * (useful for RLP transport)
 * @param value value to convert
 */
function bnToUnpaddedBuffer(value) {
    // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`
    // for compatibility with browserify and similar tools
    return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer));
}
exports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;
/**
 * Deprecated alias for {@link bnToUnpaddedBuffer}
 * @deprecated
 */
function bnToRlp(value) {
    return bnToUnpaddedBuffer(value);
}
exports.bnToRlp = bnToRlp;
/**
 * Type output options
 */
var TypeOutput;
(function (TypeOutput) {
    TypeOutput[TypeOutput["Number"] = 0] = "Number";
    TypeOutput[TypeOutput["BN"] = 1] = "BN";
    TypeOutput[TypeOutput["Buffer"] = 2] = "Buffer";
    TypeOutput[TypeOutput["PrefixedHexString"] = 3] = "PrefixedHexString";
})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));
function toType(input, outputType) {
    if (input === null) {
        return null;
    }
    if (input === undefined) {
        return undefined;
    }
    if (typeof input === 'string' && !(0, internal_1.isHexString)(input)) {
        throw new Error("A string must be provided with a 0x-prefix, given: " + input);
    }
    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {
        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
    }
    var output = (0, bytes_1.toBuffer)(input);
    if (outputType === TypeOutput.Buffer) {
        return output;
    }
    else if (outputType === TypeOutput.BN) {
        return new bn_js_1.default(output);
    }
    else if (outputType === TypeOutput.Number) {
        var bn = new bn_js_1.default(output);
        var max = new bn_js_1.default(Number.MAX_SAFE_INTEGER.toString());
        if (bn.gt(max)) {
            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');
        }
        return bn.toNumber();
    }
    else {
        // outputType === TypeOutput.PrefixedHexString
        return "0x" + output.toString('hex');
    }
}
exports.toType = toType;

}).call(this,require("buffer").Buffer)
},{"./bytes":45,"./internal":51,"bn.js":42,"buffer":161}],55:[function(require,module,exports){
(function (Buffer){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLength = exports.decode = exports.encode = void 0;
var BN = require("bn.js");
/**
 * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
 * This function takes in a data, convert it to buffer if not, and a length for recursion
 * @param input - will be converted to buffer
 * @returns returns buffer of encoded data
 **/
function encode(input) {
    if (Array.isArray(input)) {
        var output = [];
        for (var i = 0; i < input.length; i++) {
            output.push(encode(input[i]));
        }
        var buf = Buffer.concat(output);
        return Buffer.concat([encodeLength(buf.length, 192), buf]);
    }
    else {
        var inputBuf = toBuffer(input);
        return inputBuf.length === 1 && inputBuf[0] < 128
            ? inputBuf
            : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
    }
}
exports.encode = encode;
/**
 * Parse integers. Check if there is no leading zeros
 * @param v The value to parse
 * @param base The base to parse the integer into
 */
function safeParseInt(v, base) {
    if (v.slice(0, 2) === '00') {
        throw new Error('invalid RLP: extra zeros');
    }
    return parseInt(v, base);
}
function encodeLength(len, offset) {
    if (len < 56) {
        return Buffer.from([len + offset]);
    }
    else {
        var hexLength = intToHex(len);
        var lLength = hexLength.length / 2;
        var firstByte = intToHex(offset + 55 + lLength);
        return Buffer.from(firstByte + hexLength, 'hex');
    }
}
function decode(input, stream) {
    if (stream === void 0) { stream = false; }
    if (!input || input.length === 0) {
        return Buffer.from([]);
    }
    var inputBuffer = toBuffer(input);
    var decoded = _decode(inputBuffer);
    if (stream) {
        return decoded;
    }
    if (decoded.remainder.length !== 0) {
        throw new Error('invalid remainder');
    }
    return decoded.data;
}
exports.decode = decode;
/**
 * Get the length of the RLP input
 * @param input
 * @returns The length of the input or an empty Buffer if no input
 */
function getLength(input) {
    if (!input || input.length === 0) {
        return Buffer.from([]);
    }
    var inputBuffer = toBuffer(input);
    var firstByte = inputBuffer[0];
    if (firstByte <= 0x7f) {
        return inputBuffer.length;
    }
    else if (firstByte <= 0xb7) {
        return firstByte - 0x7f;
    }
    else if (firstByte <= 0xbf) {
        return firstByte - 0xb6;
    }
    else if (firstByte <= 0xf7) {
        // a list between  0-55 bytes long
        return firstByte - 0xbf;
    }
    else {
        // a list  over 55 bytes long
        var llength = firstByte - 0xf6;
        var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
        return llength + length;
    }
}
exports.getLength = getLength;
/** Decode an input with RLP */
function _decode(input) {
    var length, llength, data, innerRemainder, d;
    var decoded = [];
    var firstByte = input[0];
    if (firstByte <= 0x7f) {
        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
        return {
            data: input.slice(0, 1),
            remainder: input.slice(1),
        };
    }
    else if (firstByte <= 0xb7) {
        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
        // The range of the first byte is [0x80, 0xb7]
        length = firstByte - 0x7f;
        // set 0x80 null to 0
        if (firstByte === 0x80) {
            data = Buffer.from([]);
        }
        else {
            data = input.slice(1, length);
        }
        if (length === 2 && data[0] < 0x80) {
            throw new Error('invalid rlp encoding: byte must be less 0x80');
        }
        return {
            data: data,
            remainder: input.slice(length),
        };
    }
    else if (firstByte <= 0xbf) {
        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
        // followed by the length, followed by the string
        llength = firstByte - 0xb6;
        if (input.length - 1 < llength) {
            throw new Error('invalid RLP: not enough bytes for string length');
        }
        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
        if (length <= 55) {
            throw new Error('invalid RLP: expected string length to be greater than 55');
        }
        data = input.slice(llength, length + llength);
        if (data.length < length) {
            throw new Error('invalid RLP: not enough bytes for string');
        }
        return {
            data: data,
            remainder: input.slice(length + llength),
        };
    }
    else if (firstByte <= 0xf7) {
        // a list between  0-55 bytes long
        length = firstByte - 0xbf;
        innerRemainder = input.slice(1, length);
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(length),
        };
    }
    else {
        // a list  over 55 bytes long
        llength = firstByte - 0xf6;
        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
        var totalLength = llength + length;
        if (totalLength > input.length) {
            throw new Error('invalid rlp: total length is larger than the data');
        }
        innerRemainder = input.slice(llength, totalLength);
        if (innerRemainder.length === 0) {
            throw new Error('invalid rlp, List has a invalid length');
        }
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(totalLength),
        };
    }
}
/** Check if a string is prefixed by 0x */
function isHexPrefixed(str) {
    return str.slice(0, 2) === '0x';
}
/** Removes 0x from a given String */
function stripHexPrefix(str) {
    if (typeof str !== 'string') {
        return str;
    }
    return isHexPrefixed(str) ? str.slice(2) : str;
}
/** Transform an integer into its hexadecimal value */
function intToHex(integer) {
    if (integer < 0) {
        throw new Error('Invalid integer as argument, must be unsigned!');
    }
    var hex = integer.toString(16);
    return hex.length % 2 ? "0" + hex : hex;
}
/** Pad a string to be even */
function padToEven(a) {
    return a.length % 2 ? "0" + a : a;
}
/** Transform an integer into a Buffer */
function intToBuffer(integer) {
    var hex = intToHex(integer);
    return Buffer.from(hex, 'hex');
}
/** Transform anything into a Buffer */
function toBuffer(v) {
    if (!Buffer.isBuffer(v)) {
        if (typeof v === 'string') {
            if (isHexPrefixed(v)) {
                return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
            }
            else {
                return Buffer.from(v);
            }
        }
        else if (typeof v === 'number' || typeof v === 'bigint') {
            if (!v) {
                return Buffer.from([]);
            }
            else {
                return intToBuffer(v);
            }
        }
        else if (v === null || v === undefined) {
            return Buffer.from([]);
        }
        else if (v instanceof Uint8Array) {
            return Buffer.from(v);
        }
        else if (BN.isBN(v)) {
            // converts a BN to a Buffer
            return Buffer.from(v.toArray());
        }
        else {
            throw new Error('invalid type');
        }
    }
    return v;
}

}).call(this,require("buffer").Buffer)
},{"bn.js":56,"buffer":161}],56:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":160}],57:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseTransaction = void 0;
var common_1 = __importStar(require("@ethereumjs/common"));
var ethereumjs_util_1 = require("ethereumjs-util");
var types_1 = require("./types");
/**
 * This base class will likely be subject to further
 * refactoring along the introduction of additional tx types
 * on the Ethereum network.
 *
 * It is therefore not recommended to use directly.
 */
var BaseTransaction = /** @class */ (function () {
    function BaseTransaction(txData) {
        this.cache = {
            hash: undefined,
        };
        /**
         * List of tx type defining EIPs,
         * e.g. 1559 (fee market) and 2930 (access lists)
         * for FeeMarketEIP1559Transaction objects
         */
        this.activeCapabilities = [];
        /**
         * The default chain the tx falls back to if no Common
         * is provided and if the chain can't be derived from
         * a passed in chainId (only EIP-2718 typed txs) or
         * EIP-155 signature (legacy txs).
         *
         * @hidden
         */
        this.DEFAULT_CHAIN = common_1.Chain.Mainnet;
        /**
         * The default HF if the tx type is active on that HF
         * or the first greater HF where the tx is active.
         *
         * @hidden
         */
        this.DEFAULT_HARDFORK = common_1.Hardfork.Istanbul;
        var nonce = txData.nonce, gasLimit = txData.gasLimit, to = txData.to, value = txData.value, data = txData.data, v = txData.v, r = txData.r, s = txData.s, type = txData.type;
        this._type = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(type)).toNumber();
        var toB = (0, ethereumjs_util_1.toBuffer)(to === '' ? '0x' : to);
        var vB = (0, ethereumjs_util_1.toBuffer)(v === '' ? '0x' : v);
        var rB = (0, ethereumjs_util_1.toBuffer)(r === '' ? '0x' : r);
        var sB = (0, ethereumjs_util_1.toBuffer)(s === '' ? '0x' : s);
        this.nonce = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(nonce === '' ? '0x' : nonce));
        this.gasLimit = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasLimit === '' ? '0x' : gasLimit));
        this.to = toB.length > 0 ? new ethereumjs_util_1.Address(toB) : undefined;
        this.value = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(value === '' ? '0x' : value));
        this.data = (0, ethereumjs_util_1.toBuffer)(data === '' ? '0x' : data);
        this.v = vB.length > 0 ? new ethereumjs_util_1.BN(vB) : undefined;
        this.r = rB.length > 0 ? new ethereumjs_util_1.BN(rB) : undefined;
        this.s = sB.length > 0 ? new ethereumjs_util_1.BN(sB) : undefined;
        this._validateCannotExceedMaxInteger({
            nonce: this.nonce,
            gasLimit: this.gasLimit,
            value: this.value,
            r: this.r,
            s: this.s,
        });
    }
    Object.defineProperty(BaseTransaction.prototype, "transactionType", {
        /**
         * Alias for {@link BaseTransaction.type}
         *
         * @deprecated Use `type` instead
         */
        get: function () {
            return this.type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseTransaction.prototype, "type", {
        /**
         * Returns the transaction type.
         *
         * Note: legacy txs will return tx type `0`.
         */
        get: function () {
            return this._type;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Checks if a tx type defining capability is active
     * on a tx, for example the EIP-1559 fee market mechanism
     * or the EIP-2930 access list feature.
     *
     * Note that this is different from the tx type itself,
     * so EIP-2930 access lists can very well be active
     * on an EIP-1559 tx for example.
     *
     * This method can be useful for feature checks if the
     * tx type is unknown (e.g. when instantiated with
     * the tx factory).
     *
     * See `Capabilites` in the `types` module for a reference
     * on all supported capabilities.
     */
    BaseTransaction.prototype.supports = function (capability) {
        return this.activeCapabilities.includes(capability);
    };
    BaseTransaction.prototype.validate = function (stringError) {
        if (stringError === void 0) { stringError = false; }
        var errors = [];
        if (this.getBaseFee().gt(this.gasLimit)) {
            errors.push("gasLimit is too low. given " + this.gasLimit + ", need at least " + this.getBaseFee());
        }
        if (this.isSigned() && !this.verifySignature()) {
            errors.push('Invalid Signature');
        }
        return stringError ? errors : errors.length === 0;
    };
    /**
     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
     */
    BaseTransaction.prototype.getBaseFee = function () {
        var fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'));
        if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {
            fee.iaddn(this.common.param('gasPrices', 'txCreation'));
        }
        return fee;
    };
    /**
     * The amount of gas paid for the data in this tx
     */
    BaseTransaction.prototype.getDataFee = function () {
        var txDataZero = this.common.param('gasPrices', 'txDataZero');
        var txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');
        var cost = 0;
        for (var i = 0; i < this.data.length; i++) {
            this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);
        }
        return new ethereumjs_util_1.BN(cost);
    };
    /**
     * If the tx's `to` is to the creation address
     */
    BaseTransaction.prototype.toCreationAddress = function () {
        return this.to === undefined || this.to.buf.length === 0;
    };
    BaseTransaction.prototype.isSigned = function () {
        var _a = this, v = _a.v, r = _a.r, s = _a.s;
        if (this.type === 0) {
            if (!v || !r || !s) {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            if (v === undefined || !r || !s) {
                return false;
            }
            else {
                return true;
            }
        }
    };
    /**
     * Determines if the signature is valid
     */
    BaseTransaction.prototype.verifySignature = function () {
        try {
            // Main signature verification is done in `getSenderPublicKey()`
            var publicKey = this.getSenderPublicKey();
            return (0, ethereumjs_util_1.unpadBuffer)(publicKey).length !== 0;
        }
        catch (e) {
            return false;
        }
    };
    /**
     * Returns the sender's address
     */
    BaseTransaction.prototype.getSenderAddress = function () {
        return new ethereumjs_util_1.Address((0, ethereumjs_util_1.publicToAddress)(this.getSenderPublicKey()));
    };
    /**
     * Signs a transaction.
     *
     * Note that the signed tx is returned as a new object,
     * use as follows:
     * ```javascript
     * const signedTx = tx.sign(privateKey)
     * ```
     */
    BaseTransaction.prototype.sign = function (privateKey) {
        if (privateKey.length !== 32) {
            throw new Error('Private key must be 32 bytes in length.');
        }
        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature
        // and want to recreate a signature (where EIP155 should be applied)
        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail
        // 2021-06-23
        var hackApplied = false;
        if (this.type === 0 &&
            this.common.gteHardfork('spuriousDragon') &&
            !this.supports(types_1.Capability.EIP155ReplayProtection)) {
            this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);
            hackApplied = true;
        }
        var msgHash = this.getMessageToSign(true);
        var _a = (0, ethereumjs_util_1.ecsign)(msgHash, privateKey), v = _a.v, r = _a.r, s = _a.s;
        var tx = this._processSignature(v, r, s);
        // Hack part 2
        if (hackApplied) {
            var index = this.activeCapabilities.indexOf(types_1.Capability.EIP155ReplayProtection);
            if (index > -1) {
                this.activeCapabilities.splice(index, 1);
            }
        }
        return tx;
    };
    /**
     * Does chain ID checks on common and returns a common
     * to be used on instantiation
     * @hidden
     *
     * @param common - {@link Common} instance from tx options
     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)
     */
    BaseTransaction.prototype._getCommon = function (common, chainId) {
        var _a;
        // Chain ID provided
        if (chainId) {
            var chainIdBN = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(chainId));
            if (common) {
                if (!common.chainIdBN().eq(chainIdBN)) {
                    throw new Error('The chain ID does not match the chain ID of Common');
                }
                // Common provided, chain ID does match
                // -> Return provided Common
                return common.copy();
            }
            else {
                if (common_1.default.isSupportedChainId(chainIdBN)) {
                    // No Common, chain ID supported by Common
                    // -> Instantiate Common with chain ID
                    return new common_1.default({ chain: chainIdBN, hardfork: this.DEFAULT_HARDFORK });
                }
                else {
                    // No Common, chain ID not supported by Common
                    // -> Instantiate custom Common derived from DEFAULT_CHAIN
                    return common_1.default.forCustomChain(this.DEFAULT_CHAIN, {
                        name: 'custom-chain',
                        networkId: chainIdBN,
                        chainId: chainIdBN,
                    }, this.DEFAULT_HARDFORK);
                }
            }
        }
        else {
            // No chain ID provided
            // -> return Common provided or create new default Common
            return ((_a = common === null || common === void 0 ? void 0 : common.copy()) !== null && _a !== void 0 ? _a : new common_1.default({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK }));
        }
    };
    BaseTransaction.prototype._validateCannotExceedMaxInteger = function (values, bits) {
        var e_1, _a;
        if (bits === void 0) { bits = 53; }
        try {
            for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                if (bits === 53) {
                    if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_INTEGER)) {
                        throw new Error(key + " cannot exceed MAX_INTEGER, given " + value);
                    }
                }
                else if (bits === 256) {
                    if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.TWO_POW256)) {
                        throw new Error(key + " must be less than 2^256, given " + value);
                    }
                }
                else {
                    throw new Error('unimplemented bits value');
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    return BaseTransaction;
}());
exports.BaseTransaction = BaseTransaction;

},{"./types":63,"@ethereumjs/common":41,"ethereumjs-util":73}],58:[function(require,module,exports){
(function (Buffer){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethereumjs_util_1 = require("ethereumjs-util");
var baseTransaction_1 = require("./baseTransaction");
var types_1 = require("./types");
var util_1 = require("./util");
var TRANSACTION_TYPE = 2;
var TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');
/**
 * Typed transaction with a new gas fee market mechanism
 *
 * - TransactionType: 2
 * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)
 */
var FeeMarketEIP1559Transaction = /** @class */ (function (_super) {
    __extends(FeeMarketEIP1559Transaction, _super);
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static factory methods to assist in creating a Transaction object from
     * varying data types.
     */
    function FeeMarketEIP1559Transaction(txData, opts) {
        if (opts === void 0) { opts = {}; }
        var _a, _b;
        var _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;
        /**
         * The default HF if the tx type is active on that HF
         * or the first greater HF where the tx is active.
         *
         * @hidden
         */
        _this.DEFAULT_HARDFORK = 'london';
        var chainId = txData.chainId, accessList = txData.accessList, maxFeePerGas = txData.maxFeePerGas, maxPriorityFeePerGas = txData.maxPriorityFeePerGas;
        _this.common = _this._getCommon(opts.common, chainId);
        _this.chainId = _this.common.chainIdBN();
        if (!_this.common.isActivatedEIP(1559)) {
            throw new Error('EIP-1559 not enabled on Common');
        }
        _this.activeCapabilities = _this.activeCapabilities.concat([1559, 2718, 2930]);
        // Populate the access list fields
        var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);
        _this.accessList = accessListData.accessList;
        _this.AccessListJSON = accessListData.AccessListJSON;
        // Verify the access list format.
        util_1.AccessLists.verifyAccessList(_this.accessList);
        _this.maxFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxFeePerGas === '' ? '0x' : maxFeePerGas));
        _this.maxPriorityFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));
        _this._validateCannotExceedMaxInteger({
            maxFeePerGas: _this.maxFeePerGas,
            maxPriorityFeePerGas: _this.maxPriorityFeePerGas,
        }, 256);
        if (_this.maxFeePerGas.lt(_this.maxPriorityFeePerGas)) {
            throw new Error('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');
        }
        if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {
            throw new Error('The y-parity of the transaction should either be 0 or 1');
        }
        if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');
        }
        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;
        if (freeze) {
            Object.freeze(_this);
        }
        return _this;
    }
    Object.defineProperty(FeeMarketEIP1559Transaction.prototype, "senderR", {
        /**
         * EIP-2930 alias for `r`
         *
         * @deprecated use `r` instead
         */
        get: function () {
            return this.r;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FeeMarketEIP1559Transaction.prototype, "senderS", {
        /**
         * EIP-2930 alias for `s`
         *
         * @deprecated use `s` instead
         */
        get: function () {
            return this.s;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FeeMarketEIP1559Transaction.prototype, "yParity", {
        /**
         * EIP-2930 alias for `v`
         *
         * @deprecated use `v` instead
         */
        get: function () {
            return this.v;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Instantiate a transaction from a data dictionary.
     *
     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, v, r, s }
     *
     * Notes:
     * - `chainId` will be set automatically if not provided
     * - All parameters are optional and have some basic default values
     */
    FeeMarketEIP1559Transaction.fromTxData = function (txData, opts) {
        if (opts === void 0) { opts = {}; }
        return new FeeMarketEIP1559Transaction(txData, opts);
    };
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS])`
     */
    FeeMarketEIP1559Transaction.fromSerializedTx = function (serialized, opts) {
        if (opts === void 0) { opts = {}; }
        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {
            throw new Error("Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: " + TRANSACTION_TYPE + ", received: " + serialized
                .slice(0, 1)
                .toString('hex'));
        }
        var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized tx input: must be array');
        }
        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);
    };
    /**
     * Instantiate a transaction from the serialized tx.
     * (alias of {@link FeeMarketEIP1559Transaction.fromSerializedTx})
     *
     * Note: This means that the Buffer should start with 0x01.
     *
     * @deprecated this constructor alias is deprecated and will be removed
     * in favor of the {@link FeeMarketEIP1559Transaction.fromSerializedTx} constructor
     */
    FeeMarketEIP1559Transaction.fromRlpSerializedTx = function (serialized, opts) {
        if (opts === void 0) { opts = {}; }
        return FeeMarketEIP1559Transaction.fromSerializedTx(serialized, opts);
    };
    /**
     * Create a transaction from a values array.
     *
     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS]`
     */
    FeeMarketEIP1559Transaction.fromValuesArray = function (values, opts) {
        if (opts === void 0) { opts = {}; }
        if (values.length !== 9 && values.length !== 12) {
            throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');
        }
        var _a = __read(values, 12), chainId = _a[0], nonce = _a[1], maxPriorityFeePerGas = _a[2], maxFeePerGas = _a[3], gasLimit = _a[4], to = _a[5], value = _a[6], data = _a[7], accessList = _a[8], v = _a[9], r = _a[10], s = _a[11];
        return new FeeMarketEIP1559Transaction({
            chainId: new ethereumjs_util_1.BN(chainId),
            nonce: nonce,
            maxPriorityFeePerGas: maxPriorityFeePerGas,
            maxFeePerGas: maxFeePerGas,
            gasLimit: gasLimit,
            to: to,
            value: value,
            data: data,
            accessList: accessList !== null && accessList !== void 0 ? accessList : [],
            v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,
            r: r,
            s: s,
        }, opts);
    };
    /**
     * The amount of gas paid for the data in this tx
     */
    FeeMarketEIP1559Transaction.prototype.getDataFee = function () {
        var cost = _super.prototype.getDataFee.call(this);
        cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));
        return cost;
    };
    /**
     * The up front amount that an account must have for this transaction to be valid
     * @param baseFee The base fee of the block (will be set to 0 if not provided)
     */
    FeeMarketEIP1559Transaction.prototype.getUpfrontCost = function (baseFee) {
        if (baseFee === void 0) { baseFee = new ethereumjs_util_1.BN(0); }
        var inclusionFeePerGas = ethereumjs_util_1.BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee));
        var gasPrice = inclusionFeePerGas.add(baseFee);
        return this.gasLimit.mul(gasPrice).add(this.value);
    };
    /**
     * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.
     *
     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS]`
     *
     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block
     * with {@link Block.fromValuesArray}.
     *
     * For an unsigned tx this method uses the empty Buffer values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.
     */
    FeeMarketEIP1559Transaction.prototype.raw = function () {
        return [
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxPriorityFeePerGas),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxFeePerGas),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),
            this.to !== undefined ? this.to.buf : Buffer.from([]),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),
            this.data,
            this.accessList,
            this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),
            this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),
            this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([]),
        ];
    };
    /**
     * Returns the serialized encoding of the EIP-1559 transaction.
     *
     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS])`
     *
     * Note that in contrast to the legacy tx serialization format this is not
     * valid RLP any more due to the raw tx type preceding and concatenated to
     * the RLP encoding of the values.
     */
    FeeMarketEIP1559Transaction.prototype.serialize = function () {
        var base = this.raw();
        return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);
    };
    /**
     * Returns the serialized unsigned tx (hashed or raw), which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: in contrast to the legacy tx the raw message format is already
     * serialized and doesn't need to be RLP encoded any more.
     *
     * ```javascript
     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input
     * ```
     *
     * @param hashMessage - Return hashed message if set to true (default: true)
     */
    FeeMarketEIP1559Transaction.prototype.getMessageToSign = function (hashMessage) {
        if (hashMessage === void 0) { hashMessage = true; }
        var base = this.raw().slice(0, 9);
        var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);
        if (hashMessage) {
            return (0, ethereumjs_util_1.keccak256)(message);
        }
        else {
            return message;
        }
    };
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */
    FeeMarketEIP1559Transaction.prototype.hash = function () {
        if (!this.isSigned()) {
            throw new Error('Cannot call hash method if transaction is not signed');
        }
        if (Object.isFrozen(this)) {
            if (!this.cache.hash) {
                this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());
            }
            return this.cache.hash;
        }
        return (0, ethereumjs_util_1.keccak256)(this.serialize());
    };
    /**
     * Computes a sha3-256 hash which can be used to verify the signature
     */
    FeeMarketEIP1559Transaction.prototype.getMessageToVerifySignature = function () {
        return this.getMessageToSign();
    };
    /**
     * Returns the public key of the sender
     */
    FeeMarketEIP1559Transaction.prototype.getSenderPublicKey = function () {
        var _a;
        if (!this.isSigned()) {
            throw new Error('Cannot call this method if transaction is not signed');
        }
        var msgHash = this.getMessageToVerifySignature();
        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
        // Reasoning: https://ethereum.stackexchange.com/a/55728
        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');
        }
        var _b = this, v = _b.v, r = _b.r, s = _b.s;
        try {
            return (0, ethereumjs_util_1.ecrecover)(msgHash, v.addn(27), // Recover the 27 which was stripped from ecsign
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s));
        }
        catch (e) {
            throw new Error('Invalid Signature');
        }
    };
    FeeMarketEIP1559Transaction.prototype._processSignature = function (v, r, s) {
        var opts = {
            common: this.common,
        };
        return FeeMarketEIP1559Transaction.fromTxData({
            chainId: this.chainId,
            nonce: this.nonce,
            maxPriorityFeePerGas: this.maxPriorityFeePerGas,
            maxFeePerGas: this.maxFeePerGas,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            accessList: this.accessList,
            v: new ethereumjs_util_1.BN(v - 27),
            r: new ethereumjs_util_1.BN(r),
            s: new ethereumjs_util_1.BN(s),
        }, opts);
    };
    /**
     * Returns an object with the JSON representation of the transaction
     */
    FeeMarketEIP1559Transaction.prototype.toJSON = function () {
        var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);
        return {
            chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),
            nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),
            maxPriorityFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxPriorityFeePerGas),
            maxFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxFeePerGas),
            gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),
            to: this.to !== undefined ? this.to.toString() : undefined,
            value: (0, ethereumjs_util_1.bnToHex)(this.value),
            data: '0x' + this.data.toString('hex'),
            accessList: accessListJSON,
            v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,
            r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,
            s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined,
        };
    };
    return FeeMarketEIP1559Transaction;
}(baseTransaction_1.BaseTransaction));
exports.default = FeeMarketEIP1559Transaction;

}).call(this,require("buffer").Buffer)
},{"./baseTransaction":57,"./types":63,"./util":64,"buffer":161,"ethereumjs-util":73}],59:[function(require,module,exports){
(function (Buffer){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethereumjs_util_1 = require("ethereumjs-util");
var baseTransaction_1 = require("./baseTransaction");
var types_1 = require("./types");
var util_1 = require("./util");
var TRANSACTION_TYPE = 1;
var TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');
/**
 * Typed transaction with optional access lists
 *
 * - TransactionType: 1
 * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)
 */
var AccessListEIP2930Transaction = /** @class */ (function (_super) {
    __extends(AccessListEIP2930Transaction, _super);
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static factory methods to assist in creating a Transaction object from
     * varying data types.
     */
    function AccessListEIP2930Transaction(txData, opts) {
        if (opts === void 0) { opts = {}; }
        var _a, _b;
        var _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;
        /**
         * The default HF if the tx type is active on that HF
         * or the first greater HF where the tx is active.
         *
         * @hidden
         */
        _this.DEFAULT_HARDFORK = 'berlin';
        var chainId = txData.chainId, accessList = txData.accessList, gasPrice = txData.gasPrice;
        _this.common = _this._getCommon(opts.common, chainId);
        _this.chainId = _this.common.chainIdBN();
        // EIP-2718 check is done in Common
        if (!_this.common.isActivatedEIP(2930)) {
            throw new Error('EIP-2930 not enabled on Common');
        }
        _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]);
        // Populate the access list fields
        var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);
        _this.accessList = accessListData.accessList;
        _this.AccessListJSON = accessListData.AccessListJSON;
        // Verify the access list format.
        util_1.AccessLists.verifyAccessList(_this.accessList);
        _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasPrice === '' ? '0x' : gasPrice));
        _this._validateCannotExceedMaxInteger({ gasPrice: _this.gasPrice });
        if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {
            throw new Error('The y-parity of the transaction should either be 0 or 1');
        }
        if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');
        }
        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;
        if (freeze) {
            Object.freeze(_this);
        }
        return _this;
    }
    Object.defineProperty(AccessListEIP2930Transaction.prototype, "senderR", {
        /**
         * EIP-2930 alias for `r`
         *
         * @deprecated use `r` instead
         */
        get: function () {
            return this.r;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccessListEIP2930Transaction.prototype, "senderS", {
        /**
         * EIP-2930 alias for `s`
         *
         * @deprecated use `s` instead
         */
        get: function () {
            return this.s;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccessListEIP2930Transaction.prototype, "yParity", {
        /**
         * EIP-2930 alias for `v`
         *
         * @deprecated use `v` instead
         */
        get: function () {
            return this.v;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Instantiate a transaction from a data dictionary.
     *
     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * v, r, s }
     *
     * Notes:
     * - `chainId` will be set automatically if not provided
     * - All parameters are optional and have some basic default values
     */
    AccessListEIP2930Transaction.fromTxData = function (txData, opts) {
        if (opts === void 0) { opts = {}; }
        return new AccessListEIP2930Transaction(txData, opts);
    };
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)])`
     */
    AccessListEIP2930Transaction.fromSerializedTx = function (serialized, opts) {
        if (opts === void 0) { opts = {}; }
        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {
            throw new Error("Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: " + TRANSACTION_TYPE + ", received: " + serialized
                .slice(0, 1)
                .toString('hex'));
        }
        var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized tx input: must be array');
        }
        return AccessListEIP2930Transaction.fromValuesArray(values, opts);
    };
    /**
     * Instantiate a transaction from the serialized tx.
     * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})
     *
     * Note: This means that the Buffer should start with 0x01.
     *
     * @deprecated this constructor alias is deprecated and will be removed
     * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor
     */
    AccessListEIP2930Transaction.fromRlpSerializedTx = function (serialized, opts) {
        if (opts === void 0) { opts = {}; }
        return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts);
    };
    /**
     * Create a transaction from a values array.
     *
     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)]`
     */
    AccessListEIP2930Transaction.fromValuesArray = function (values, opts) {
        if (opts === void 0) { opts = {}; }
        if (values.length !== 8 && values.length !== 11) {
            throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');
        }
        var _a = __read(values, 11), chainId = _a[0], nonce = _a[1], gasPrice = _a[2], gasLimit = _a[3], to = _a[4], value = _a[5], data = _a[6], accessList = _a[7], v = _a[8], r = _a[9], s = _a[10];
        var emptyAccessList = [];
        return new AccessListEIP2930Transaction({
            chainId: new ethereumjs_util_1.BN(chainId),
            nonce: nonce,
            gasPrice: gasPrice,
            gasLimit: gasLimit,
            to: to,
            value: value,
            data: data,
            accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,
            v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,
            r: r,
            s: s,
        }, opts);
    };
    /**
     * The amount of gas paid for the data in this tx
     */
    AccessListEIP2930Transaction.prototype.getDataFee = function () {
        var cost = _super.prototype.getDataFee.call(this);
        cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));
        return cost;
    };
    /**
     * The up front amount that an account must have for this transaction to be valid
     */
    AccessListEIP2930Transaction.prototype.getUpfrontCost = function () {
        return this.gasLimit.mul(this.gasPrice).add(this.value);
    };
    /**
     * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.
     *
     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)]`
     *
     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block
     * with {@link Block.fromValuesArray}.
     *
     * For an unsigned tx this method uses the empty Buffer values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.
     */
    AccessListEIP2930Transaction.prototype.raw = function () {
        return [
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),
            this.to !== undefined ? this.to.buf : Buffer.from([]),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),
            this.data,
            this.accessList,
            this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),
            this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),
            this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([]),
        ];
    };
    /**
     * Returns the serialized encoding of the EIP-2930 transaction.
     *
     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)])`
     *
     * Note that in contrast to the legacy tx serialization format this is not
     * valid RLP any more due to the raw tx type preceding and concatenated to
     * the RLP encoding of the values.
     */
    AccessListEIP2930Transaction.prototype.serialize = function () {
        var base = this.raw();
        return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);
    };
    /**
     * Returns the serialized unsigned tx (hashed or raw), which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: in contrast to the legacy tx the raw message format is already
     * serialized and doesn't need to be RLP encoded any more.
     *
     * ```javascript
     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input
     * ```
     *
     * @param hashMessage - Return hashed message if set to true (default: true)
     */
    AccessListEIP2930Transaction.prototype.getMessageToSign = function (hashMessage) {
        if (hashMessage === void 0) { hashMessage = true; }
        var base = this.raw().slice(0, 8);
        var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);
        if (hashMessage) {
            return (0, ethereumjs_util_1.keccak256)(message);
        }
        else {
            return message;
        }
    };
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */
    AccessListEIP2930Transaction.prototype.hash = function () {
        if (!this.isSigned()) {
            throw new Error('Cannot call hash method if transaction is not signed');
        }
        if (Object.isFrozen(this)) {
            if (!this.cache.hash) {
                this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());
            }
            return this.cache.hash;
        }
        return (0, ethereumjs_util_1.keccak256)(this.serialize());
    };
    /**
     * Computes a sha3-256 hash which can be used to verify the signature
     */
    AccessListEIP2930Transaction.prototype.getMessageToVerifySignature = function () {
        return this.getMessageToSign();
    };
    /**
     * Returns the public key of the sender
     */
    AccessListEIP2930Transaction.prototype.getSenderPublicKey = function () {
        var _a;
        if (!this.isSigned()) {
            throw new Error('Cannot call this method if transaction is not signed');
        }
        var msgHash = this.getMessageToVerifySignature();
        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
        // Reasoning: https://ethereum.stackexchange.com/a/55728
        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');
        }
        var _b = this, yParity = _b.yParity, r = _b.r, s = _b.s;
        try {
            return (0, ethereumjs_util_1.ecrecover)(msgHash, yParity.addn(27), // Recover the 27 which was stripped from ecsign
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s));
        }
        catch (e) {
            throw new Error('Invalid Signature');
        }
    };
    AccessListEIP2930Transaction.prototype._processSignature = function (v, r, s) {
        var opts = {
            common: this.common,
        };
        return AccessListEIP2930Transaction.fromTxData({
            chainId: this.chainId,
            nonce: this.nonce,
            gasPrice: this.gasPrice,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            accessList: this.accessList,
            v: new ethereumjs_util_1.BN(v - 27),
            r: new ethereumjs_util_1.BN(r),
            s: new ethereumjs_util_1.BN(s),
        }, opts);
    };
    /**
     * Returns an object with the JSON representation of the transaction
     */
    AccessListEIP2930Transaction.prototype.toJSON = function () {
        var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);
        return {
            chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),
            nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),
            gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),
            gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),
            to: this.to !== undefined ? this.to.toString() : undefined,
            value: (0, ethereumjs_util_1.bnToHex)(this.value),
            data: '0x' + this.data.toString('hex'),
            accessList: accessListJSON,
            v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,
            r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,
            s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined,
        };
    };
    return AccessListEIP2930Transaction;
}(baseTransaction_1.BaseTransaction));
exports.default = AccessListEIP2930Transaction;

}).call(this,require("buffer").Buffer)
},{"./baseTransaction":57,"./types":63,"./util":64,"buffer":161,"ethereumjs-util":73}],60:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeeMarketEIP1559Transaction = exports.TransactionFactory = exports.AccessListEIP2930Transaction = exports.Transaction = void 0;
var legacyTransaction_1 = require("./legacyTransaction");
Object.defineProperty(exports, "Transaction", { enumerable: true, get: function () { return __importDefault(legacyTransaction_1).default; } });
var eip2930Transaction_1 = require("./eip2930Transaction");
Object.defineProperty(exports, "AccessListEIP2930Transaction", { enumerable: true, get: function () { return __importDefault(eip2930Transaction_1).default; } });
var transactionFactory_1 = require("./transactionFactory");
Object.defineProperty(exports, "TransactionFactory", { enumerable: true, get: function () { return __importDefault(transactionFactory_1).default; } });
var eip1559Transaction_1 = require("./eip1559Transaction");
Object.defineProperty(exports, "FeeMarketEIP1559Transaction", { enumerable: true, get: function () { return __importDefault(eip1559Transaction_1).default; } });
__exportStar(require("./types"), exports);

},{"./eip1559Transaction":58,"./eip2930Transaction":59,"./legacyTransaction":61,"./transactionFactory":62,"./types":63}],61:[function(require,module,exports){
(function (Buffer){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethereumjs_util_1 = require("ethereumjs-util");
var types_1 = require("./types");
var baseTransaction_1 = require("./baseTransaction");
var TRANSACTION_TYPE = 0;
/**
 * An Ethereum non-typed (legacy) transaction
 */
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static factory methods to assist in creating a Transaction object from
     * varying data types.
     */
    function Transaction(txData, opts) {
        if (opts === void 0) { opts = {}; }
        var _a;
        var _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;
        _this.common = _this._validateTxV(_this.v, opts.common);
        _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));
        _this._validateCannotExceedMaxInteger({ gasPrice: _this.gasPrice });
        if (_this.common.gteHardfork('spuriousDragon')) {
            if (!_this.isSigned()) {
                _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);
            }
            else {
                // EIP155 spec:
                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36
                // then when computing the hash of a transaction for purposes of signing or recovering
                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)
                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.
                var v = _this.v;
                var chainIdDoubled = _this.common.chainIdBN().muln(2);
                // v and chain ID meet EIP-155 conditions
                if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {
                    _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);
                }
            }
        }
        var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;
        if (freeze) {
            Object.freeze(_this);
        }
        return _this;
    }
    /**
     * Instantiate a transaction from a data dictionary.
     *
     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }
     *
     * Notes:
     * - All parameters are optional and have some basic default values
     */
    Transaction.fromTxData = function (txData, opts) {
        if (opts === void 0) { opts = {}; }
        return new Transaction(txData, opts);
    };
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
     */
    Transaction.fromSerializedTx = function (serialized, opts) {
        if (opts === void 0) { opts = {}; }
        var values = ethereumjs_util_1.rlp.decode(serialized);
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized tx input. Must be array');
        }
        return this.fromValuesArray(values, opts);
    };
    /**
     * Instantiate a transaction from the serialized tx.
     * (alias of {@link Transaction.fromSerializedTx})
     *
     * @deprecated this constructor alias is deprecated and will be removed
     * in favor of the {@link Transaction.fromSerializedTx} constructor
     */
    Transaction.fromRlpSerializedTx = function (serialized, opts) {
        if (opts === void 0) { opts = {}; }
        return Transaction.fromSerializedTx(serialized, opts);
    };
    /**
     * Create a transaction from a values array.
     *
     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
     */
    Transaction.fromValuesArray = function (values, opts) {
        if (opts === void 0) { opts = {}; }
        // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction
        // This happens if you get the RLP data from `raw()`
        if (values.length !== 6 && values.length !== 9) {
            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');
        }
        var _a = __read(values, 9), nonce = _a[0], gasPrice = _a[1], gasLimit = _a[2], to = _a[3], value = _a[4], data = _a[5], v = _a[6], r = _a[7], s = _a[8];
        return new Transaction({
            nonce: nonce,
            gasPrice: gasPrice,
            gasLimit: gasLimit,
            to: to,
            value: value,
            data: data,
            v: v,
            r: r,
            s: s,
        }, opts);
    };
    /**
     * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.
     *
     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
     *
     * For legacy txs this is also the correct format to add transactions
     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method
     * for typed txs).
     *
     * For an unsigned tx this method returns the empty Buffer values
     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant
     * representation have a look at {@link Transaction.getMessageToSign}.
     */
    Transaction.prototype.raw = function () {
        return [
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),
            this.to !== undefined ? this.to.buf : Buffer.from([]),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),
            this.data,
            this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),
            this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),
            this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([]),
        ];
    };
    /**
     * Returns the serialized encoding of the legacy transaction.
     *
     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
     *
     * For an unsigned tx this method uses the empty Buffer values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link Transaction.getMessageToSign}.
     */
    Transaction.prototype.serialize = function () {
        return ethereumjs_util_1.rlp.encode(this.raw());
    };
    Transaction.prototype._getMessageToSign = function () {
        var values = [
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),
            this.to !== undefined ? this.to.buf : Buffer.from([]),
            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),
            this.data,
        ];
        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {
            values.push((0, ethereumjs_util_1.toBuffer)(this.common.chainIdBN()));
            values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));
            values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));
        }
        return values;
    };
    Transaction.prototype.getMessageToSign = function (hashMessage) {
        if (hashMessage === void 0) { hashMessage = true; }
        var message = this._getMessageToSign();
        if (hashMessage) {
            return (0, ethereumjs_util_1.rlphash)(message);
        }
        else {
            return message;
        }
    };
    /**
     * The up front amount that an account must have for this transaction to be valid
     */
    Transaction.prototype.getUpfrontCost = function () {
        return this.gasLimit.mul(this.gasPrice).add(this.value);
    };
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */
    Transaction.prototype.hash = function () {
        // In contrast to the tx type transaction implementations the `hash()` function
        // for the legacy tx does not throw if the tx is not signed.
        // This has been considered for inclusion but lead to unexpected backwards
        // compatibility problems (no concrete reference found, needs validation).
        //
        // For context see also https://github.com/ethereumjs/ethereumjs-monorepo/pull/1445,
        // September, 2021 as well as work done before.
        //
        // This should be updated along the next major version release by adding:
        //
        //if (!this.isSigned()) {
        //  throw new Error('Cannot call hash method if transaction is not signed')
        //}
        if (Object.isFrozen(this)) {
            if (!this.cache.hash) {
                this.cache.hash = (0, ethereumjs_util_1.rlphash)(this.raw());
            }
            return this.cache.hash;
        }
        return (0, ethereumjs_util_1.rlphash)(this.raw());
    };
    /**
     * Computes a sha3-256 hash which can be used to verify the signature
     */
    Transaction.prototype.getMessageToVerifySignature = function () {
        if (!this.isSigned()) {
            throw Error('This transaction is not signed');
        }
        var message = this._getMessageToSign();
        return (0, ethereumjs_util_1.rlphash)(message);
    };
    /**
     * Returns the public key of the sender
     */
    Transaction.prototype.getSenderPublicKey = function () {
        var _a;
        var msgHash = this.getMessageToVerifySignature();
        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
        // Reasoning: https://ethereum.stackexchange.com/a/55728
        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');
        }
        var _b = this, v = _b.v, r = _b.r, s = _b.s;
        try {
            return (0, ethereumjs_util_1.ecrecover)(msgHash, v, (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);
        }
        catch (e) {
            throw new Error('Invalid Signature');
        }
    };
    /**
     * Process the v, r, s values from the `sign` method of the base transaction.
     */
    Transaction.prototype._processSignature = function (v, r, s) {
        var vBN = new ethereumjs_util_1.BN(v);
        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {
            vBN.iadd(this.common.chainIdBN().muln(2).addn(8));
        }
        var opts = {
            common: this.common,
        };
        return Transaction.fromTxData({
            nonce: this.nonce,
            gasPrice: this.gasPrice,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            v: vBN,
            r: new ethereumjs_util_1.BN(r),
            s: new ethereumjs_util_1.BN(s),
        }, opts);
    };
    /**
     * Returns an object with the JSON representation of the transaction.
     */
    Transaction.prototype.toJSON = function () {
        return {
            nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),
            gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),
            gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),
            to: this.to !== undefined ? this.to.toString() : undefined,
            value: (0, ethereumjs_util_1.bnToHex)(this.value),
            data: '0x' + this.data.toString('hex'),
            v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,
            r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,
            s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined,
        };
    };
    /**
     * Validates tx's `v` value
     */
    Transaction.prototype._validateTxV = function (v, common) {
        var chainIdBN;
        // No unsigned tx and EIP-155 activated and chain ID included
        if (v !== undefined &&
            !v.eqn(0) &&
            (!common || common.gteHardfork('spuriousDragon')) &&
            !v.eqn(27) &&
            !v.eqn(28)) {
            if (common) {
                var chainIdDoubled = common.chainIdBN().muln(2);
                var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));
                if (!isValidEIP155V) {
                    throw new Error("Incompatible EIP155-based V " + v.toString() + " and chain id " + common
                        .chainIdBN()
                        .toString() + ". See the Common parameter of the Transaction constructor to set the chain id.");
                }
            }
            else {
                // Derive the original chain ID
                var numSub = void 0;
                if (v.subn(35).isEven()) {
                    numSub = 35;
                }
                else {
                    numSub = 36;
                }
                // Use derived chain ID to create a proper Common
                chainIdBN = v.subn(numSub).divn(2);
            }
        }
        return this._getCommon(common, chainIdBN);
    };
    /**
     * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead
     */
    Transaction.prototype._unsignedTxImplementsEIP155 = function () {
        return this.common.gteHardfork('spuriousDragon');
    };
    /**
     * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead
     */
    Transaction.prototype._signedTxImplementsEIP155 = function () {
        if (!this.isSigned()) {
            throw Error('This transaction is not signed');
        }
        var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon');
        // EIP155 spec:
        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.
        var v = this.v;
        var chainIdDoubled = this.common.chainIdBN().muln(2);
        var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));
        return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;
    };
    return Transaction;
}(baseTransaction_1.BaseTransaction));
exports.default = Transaction;

}).call(this,require("buffer").Buffer)
},{"./baseTransaction":57,"./types":63,"buffer":161,"ethereumjs-util":73}],62:[function(require,module,exports){
(function (Buffer){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ethereumjs_util_1 = require("ethereumjs-util");
var _1 = require(".");
var TransactionFactory = /** @class */ (function () {
    // It is not possible to instantiate a TransactionFactory object.
    function TransactionFactory() {
    }
    /**
     * Create a transaction from a `txData` object
     *
     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)
     * @param txOptions - Options to pass on to the constructor of the transaction
     */
    TransactionFactory.fromTxData = function (txData, txOptions) {
        if (txOptions === void 0) { txOptions = {}; }
        if (!('type' in txData) || txData.type === undefined) {
            // Assume legacy transaction
            return _1.Transaction.fromTxData(txData, txOptions);
        }
        else {
            var txType = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.type)).toNumber();
            if (txType === 0) {
                return _1.Transaction.fromTxData(txData, txOptions);
            }
            else if (txType === 1) {
                return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);
            }
            else if (txType === 2) {
                return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);
            }
            else {
                throw new Error("Tx instantiation with type " + txType + " not supported");
            }
        }
    };
    /**
     * This method tries to decode serialized data.
     *
     * @param data - The data Buffer
     * @param txOptions - The transaction options
     */
    TransactionFactory.fromSerializedData = function (data, txOptions) {
        if (txOptions === void 0) { txOptions = {}; }
        if (data[0] <= 0x7f) {
            // Determine the type.
            var EIP = void 0;
            switch (data[0]) {
                case 1:
                    EIP = 2930;
                    break;
                case 2:
                    EIP = 1559;
                    break;
                default:
                    throw new Error("TypedTransaction with ID " + data[0] + " unknown");
            }
            if (EIP === 1559) {
                return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);
            }
            else {
                // EIP === 2930
                return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);
            }
        }
        else {
            return _1.Transaction.fromSerializedTx(data, txOptions);
        }
    };
    /**
     * When decoding a BlockBody, in the transactions field, a field is either:
     * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))
     * A Buffer[] (Legacy Transaction)
     * This method returns the right transaction.
     *
     * @param data - A Buffer or Buffer[]
     * @param txOptions - The transaction options
     */
    TransactionFactory.fromBlockBodyData = function (data, txOptions) {
        if (txOptions === void 0) { txOptions = {}; }
        if (Buffer.isBuffer(data)) {
            return this.fromSerializedData(data, txOptions);
        }
        else if (Array.isArray(data)) {
            // It is a legacy transaction
            return _1.Transaction.fromValuesArray(data, txOptions);
        }
        else {
            throw new Error('Cannot decode transaction: unknown type input');
        }
    };
    /**
     * This helper method allows one to retrieve the class which matches the transactionID
     * If transactionID is undefined, returns the legacy transaction class.
     * @deprecated - This method is deprecated and will be removed on the next major release
     * @param transactionID
     * @param _common - This option is not used
     */
    TransactionFactory.getTransactionClass = function (transactionID, _common) {
        if (transactionID === void 0) { transactionID = 0; }
        var legacyTxn = transactionID == 0 || (transactionID >= 0x80 && transactionID <= 0xff);
        if (legacyTxn) {
            return _1.Transaction;
        }
        switch (transactionID) {
            case 1:
                return _1.AccessListEIP2930Transaction;
            case 2:
                return _1.FeeMarketEIP1559Transaction;
            default:
                throw new Error("TypedTransaction with ID " + transactionID + " unknown");
        }
    };
    return TransactionFactory;
}());
exports.default = TransactionFactory;

}).call(this,{"isBuffer":require("../../../is-buffer/index.js")})
},{".":60,"../../../is-buffer/index.js":256,"ethereumjs-util":73}],63:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.N_DIV_2 = exports.isAccessList = exports.isAccessListBuffer = exports.Capability = void 0;
var ethereumjs_util_1 = require("ethereumjs-util");
/**
 * Can be used in conjunction with {@link Transaction.supports}
 * to query on tx capabilities
 */
var Capability;
(function (Capability) {
    /**
     * Tx supports EIP-155 replay protection
     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP
     */
    Capability[Capability["EIP155ReplayProtection"] = 155] = "EIP155ReplayProtection";
    /**
     * Tx supports EIP-1559 gas fee market mechansim
     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP
     */
    Capability[Capability["EIP1559FeeMarket"] = 1559] = "EIP1559FeeMarket";
    /**
     * Tx is a typed transaction as defined in EIP-2718
     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP
     */
    Capability[Capability["EIP2718TypedTransaction"] = 2718] = "EIP2718TypedTransaction";
    /**
     * Tx supports access list generation as defined in EIP-2930
     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP
     */
    Capability[Capability["EIP2930AccessLists"] = 2930] = "EIP2930AccessLists";
})(Capability = exports.Capability || (exports.Capability = {}));
function isAccessListBuffer(input) {
    if (input.length === 0) {
        return true;
    }
    var firstItem = input[0];
    if (Array.isArray(firstItem)) {
        return true;
    }
    return false;
}
exports.isAccessListBuffer = isAccessListBuffer;
function isAccessList(input) {
    return !isAccessListBuffer(input); // This is exactly the same method, except the output is negated.
}
exports.isAccessList = isAccessList;
/**
 * A const defining secp256k1n/2
 */
exports.N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);

},{"ethereumjs-util":73}],64:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessLists = void 0;
var ethereumjs_util_1 = require("ethereumjs-util");
var types_1 = require("./types");
var AccessLists = /** @class */ (function () {
    function AccessLists() {
    }
    AccessLists.getAccessListData = function (accessList) {
        var AccessListJSON;
        var bufferAccessList;
        if (accessList && (0, types_1.isAccessList)(accessList)) {
            AccessListJSON = accessList;
            var newAccessList = [];
            for (var i = 0; i < accessList.length; i++) {
                var item = accessList[i];
                var addressBuffer = (0, ethereumjs_util_1.toBuffer)(item.address);
                var storageItems = [];
                for (var index = 0; index < item.storageKeys.length; index++) {
                    storageItems.push((0, ethereumjs_util_1.toBuffer)(item.storageKeys[index]));
                }
                newAccessList.push([addressBuffer, storageItems]);
            }
            bufferAccessList = newAccessList;
        }
        else {
            bufferAccessList = accessList !== null && accessList !== void 0 ? accessList : [];
            // build the JSON
            var json = [];
            for (var i = 0; i < bufferAccessList.length; i++) {
                var data = bufferAccessList[i];
                var address = (0, ethereumjs_util_1.bufferToHex)(data[0]);
                var storageKeys = [];
                for (var item = 0; item < data[1].length; item++) {
                    storageKeys.push((0, ethereumjs_util_1.bufferToHex)(data[1][item]));
                }
                var jsonItem = {
                    address: address,
                    storageKeys: storageKeys,
                };
                json.push(jsonItem);
            }
            AccessListJSON = json;
        }
        return {
            AccessListJSON: AccessListJSON,
            accessList: bufferAccessList,
        };
    };
    AccessLists.verifyAccessList = function (accessList) {
        for (var key = 0; key < accessList.length; key++) {
            var accessListItem = accessList[key];
            var address = accessListItem[0];
            var storageSlots = accessListItem[1];
            if (accessListItem[2] !== undefined) {
                throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');
            }
            if (address.length != 20) {
                throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');
            }
            for (var storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {
                if (storageSlots[storageSlot].length != 32) {
                    throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');
                }
            }
        }
    };
    AccessLists.getAccessListJSON = function (accessList) {
        var accessListJSON = [];
        for (var index = 0; index < accessList.length; index++) {
            var item = accessList[index];
            var JSONItem = {
                address: '0x' + (0, ethereumjs_util_1.setLengthLeft)(item[0], 20).toString('hex'),
                storageKeys: [],
            };
            var storageSlots = item[1];
            for (var slot = 0; slot < storageSlots.length; slot++) {
                var storageSlot = storageSlots[slot];
                JSONItem.storageKeys.push('0x' + (0, ethereumjs_util_1.setLengthLeft)(storageSlot, 32).toString('hex'));
            }
            accessListJSON.push(JSONItem);
        }
        return accessListJSON;
    };
    AccessLists.getDataFeeEIP2930 = function (accessList, common) {
        var accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');
        var accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');
        var slots = 0;
        for (var index = 0; index < accessList.length; index++) {
            var item = accessList[index];
            var storageSlots = item[1];
            slots += storageSlots.length;
        }
        var addresses = accessList.length;
        return addresses * accessListAddressCost + slots * accessListStorageKeyCost;
    };
    return AccessLists;
}());
exports.AccessLists = AccessLists;

},{"./types":63,"ethereumjs-util":73}],65:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"buffer":160,"dup":42}],66:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"./bytes":68,"./constants":69,"./hash":71,"./helpers":72,"./internal":74,"./types":77,"assert":121,"bn.js":65,"buffer":161,"dup":43,"ethereum-cryptography/secp256k1":219,"rlp":78}],67:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"./account":66,"./bytes":68,"assert":121,"bn.js":65,"buffer":161,"dup":44}],68:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"./helpers":72,"./internal":74,"bn.js":65,"buffer":161,"dup":45}],69:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"bn.js":65,"buffer":161,"dup":46}],70:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"bn.js":65,"dup":47,"rlp":78}],71:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"./bytes":68,"./helpers":72,"buffer":161,"create-hash":169,"dup":48,"ethereum-cryptography/keccak":192,"rlp":78}],72:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"../../../../../is-buffer/index.js":256,"./internal":74,"dup":49}],73:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"./account":66,"./address":67,"./bytes":68,"./constants":69,"./externals":70,"./hash":71,"./internal":74,"./object":75,"./signature":76,"./types":77,"dup":50}],74:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"buffer":161,"dup":51}],75:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"./bytes":68,"./internal":74,"assert":121,"buffer":161,"dup":52,"rlp":78}],76:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./bytes":68,"./hash":71,"./helpers":72,"./types":77,"bn.js":65,"buffer":161,"dup":53,"ethereum-cryptography/secp256k1":219}],77:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"./bytes":68,"./internal":74,"bn.js":65,"buffer":161,"dup":54}],78:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"bn.js":79,"buffer":161,"dup":55}],79:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"buffer":160,"dup":56}],80:[function(require,module,exports){
const BaseFilter = require('./base-filter')

// tracks all results ever recorded
class BaseFilterWithHistory extends BaseFilter {

  constructor () {
    super()
    this.allResults = []
  }

  async update () {
    throw new Error('BaseFilterWithHistory - no update method specified')
  }

  addResults (newResults) {
    this.allResults = this.allResults.concat(newResults)
    super.addResults(newResults)
  }

  addInitialResults (newResults) {
    this.allResults = this.allResults.concat(newResults)
    super.addInitialResults(newResults)
  }

  getAllResults () {
    return this.allResults
  }

}

module.exports = BaseFilterWithHistory
},{"./base-filter":81}],81:[function(require,module,exports){
const SafeEventEmitter = require('safe-event-emitter')

class BaseFilter extends SafeEventEmitter {

  constructor () {
    super()
    this.updates = []
  }

  async initialize () {}

  async update () {
    throw new Error('BaseFilter - no update method specified')
  }

  addResults (newResults) {
    this.updates = this.updates.concat(newResults)
    newResults.forEach(result => this.emit('update', result))
  }

  addInitialResults (newResults) {}

  getChangesAndClear () {
    const updates = this.updates
    this.updates = []
    return updates
  }
  
}

module.exports = BaseFilter

},{"safe-event-emitter":334}],82:[function(require,module,exports){
const BaseFilter = require('./base-filter')
const getBlocksForRange = require('./getBlocksForRange')
const { incrementHexInt } = require('./hexUtils')

class BlockFilter extends BaseFilter {

  constructor ({ provider, params }) {
    super()
    this.type = 'block'
    this.provider = provider
  }

  async update ({ oldBlock, newBlock }) {
    const toBlock = newBlock
    const fromBlock = incrementHexInt(oldBlock)
    const blockBodies = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })
    const blockHashes = blockBodies.map((block) => block.hash)
    this.addResults(blockHashes)
  }

}

module.exports = BlockFilter

},{"./base-filter":81,"./getBlocksForRange":83,"./hexUtils":84}],83:[function(require,module,exports){
module.exports = getBlocksForRange

async function getBlocksForRange({ provider, fromBlock, toBlock }) {
  if (!fromBlock) fromBlock = toBlock

  const fromBlockNumber = hexToInt(fromBlock)
  const toBlockNumber = hexToInt(toBlock)
  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1
  // load all blocks from old to new (inclusive)
  const missingBlockNumbers = Array(blockCountToQuery).fill()
                              .map((_,index) => fromBlockNumber + index)
                              .map(intToHex)
  const blockBodies = await Promise.all(
    missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false]))
  )
  return blockBodies
}

function hexToInt(hexString) {
  if (hexString === undefined || hexString === null) return hexString
  return Number.parseInt(hexString, 16)
}

function incrementHexInt(hexString){
  if (hexString === undefined || hexString === null) return hexString
  const value = hexToInt(hexString)
  return intToHex(value + 1)
}

function intToHex(int) {
  if (int === undefined || int === null) return int
  const hexString = int.toString(16)
  return '0x' + hexString
}

function query(provider, method, params) {
  return new Promise((resolve, reject) => {
    provider.sendAsync({ id: 1, jsonrpc: '2.0', method, params }, (err, res) => {
      if (err) return reject(err)
      resolve(res.result)
    })
  })
}

},{}],84:[function(require,module,exports){

module.exports = {
  minBlockRef,
  maxBlockRef,
  sortBlockRefs,
  bnToHex,
  blockRefIsNumber,
  hexToInt,
  incrementHexInt,
  intToHex,
  unsafeRandomBytes,
}

function minBlockRef(...refs) {
  const sortedRefs = sortBlockRefs(refs)
  return sortedRefs[0]
}

function maxBlockRef(...refs) {
  const sortedRefs = sortBlockRefs(refs)
  return sortedRefs[sortedRefs.length-1]
}

function sortBlockRefs(refs) {
  return refs.sort((refA, refB) => {
    if (refA === 'latest' || refB === 'earliest') return 1
    if (refB === 'latest' || refA === 'earliest') return -1
    return hexToInt(refA) - hexToInt(refB)
  })
}

function bnToHex(bn) {
  return '0x' + bn.toString(16)
}

function blockRefIsNumber(blockRef){
  return blockRef && !['earliest', 'latest', 'pending'].includes(blockRef)
}

function hexToInt(hexString) {
  if (hexString === undefined || hexString === null) return hexString
  return Number.parseInt(hexString, 16)
}

function incrementHexInt(hexString){
  if (hexString === undefined || hexString === null) return hexString
  const value = hexToInt(hexString)
  return intToHex(value + 1)
}

function intToHex(int) {
  if (int === undefined || int === null) return int
  let hexString = int.toString(16)
  const needsLeftPad = hexString.length % 2
  if (needsLeftPad) hexString = '0' + hexString
  return '0x' + hexString
}

function unsafeRandomBytes(byteCount) {
  let result = '0x'
  for (let i = 0; i < byteCount; i++) {
    result += unsafeRandomNibble()
    result += unsafeRandomNibble()
  }
  return result
}

function unsafeRandomNibble() {
  return Math.floor(Math.random() * 16).toString(16)
}

},{}],85:[function(require,module,exports){
const Mutex = require('await-semaphore').Mutex
const createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')
const createJsonRpcMiddleware = require('@trufflesuite/eth-json-rpc-middleware/scaffold')
const LogFilter = require('./log-filter.js')
const BlockFilter = require('./block-filter.js')
const TxFilter = require('./tx-filter.js')
const { intToHex, hexToInt } = require('./hexUtils')

module.exports = createEthFilterMiddleware

function createEthFilterMiddleware({ blockTracker, provider }) {

  // create filter collection
  let filterIndex = 0
  let filters = {}
  // create update mutex
  const mutex = new Mutex()
  const waitForFree = mutexMiddlewareWrapper({ mutex })

  const middleware = createJsonRpcMiddleware({
    // install filters
    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),
    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),
    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),
    // uninstall filters
    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),
    // checking filter changes
    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),
    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),
  })

  // setup filter updating and destroy handler
  const filterUpdater = async ({ oldBlock, newBlock }) => {
    if (filters.length === 0) return
    // lock update reads
    const releaseLock = await mutex.acquire()
    try {
      // process all filters in parallel
      await Promise.all(objValues(filters).map(async (filter) => {
        try {
         await filter.update({ oldBlock, newBlock })
        } catch (err) {
          // handle each error individually so filter update errors don't affect other filters
          console.error(err)
        }
      }))
    } catch (err) {
      // log error so we don't skip the releaseLock
      console.error(err)
    }
    // unlock update reads
    releaseLock()
  }

  // expose filter methods directly
  middleware.newLogFilter = newLogFilter
  middleware.newBlockFilter = newBlockFilter
  middleware.newPendingTransactionFilter = newPendingTransactionFilter
  middleware.uninstallFilter = uninstallFilterHandler
  middleware.getFilterChanges = getFilterChanges
  middleware.getFilterLogs = getFilterLogs

  // expose destroy method for cleanup
  middleware.destroy = () => {
    uninstallAllFilters()
  }

  return middleware

  //
  // new filters
  //

  async function newLogFilter(params) {
    const filter = new LogFilter({ provider, params })
    const filterIndex = await installFilter(filter)
    return filter
  }

  async function newBlockFilter() {
    const filter = new BlockFilter({ provider })
    const filterIndex = await installFilter(filter)
    return filter
  }

  async function newPendingTransactionFilter() {
    const filter = new TxFilter({ provider })
    const filterIndex = await installFilter(filter)
    return filter
  }

  //
  // get filter changes
  //

  async function getFilterChanges(filterIndexHex) {
    const filterIndex = hexToInt(filterIndexHex)
    const filter = filters[filterIndex]
    if (!filter) {
      throw new Error(`No filter for index "${filterIndex}"`)
    }
    const results = filter.getChangesAndClear()
    return results
  }

  async function getFilterLogs(filterIndexHex) {
    const filterIndex = hexToInt(filterIndexHex)
    const filter = filters[filterIndex]
    if (!filter) {
      throw new Error(`No filter for index "${filterIndex}"`)
    }
    // only return results for log filters
    if (filter.type === 'log') {
      results = filter.getAllResults()
    } else {
      results = []
    }
    return results
  }


  //
  // remove filters
  //


  async function uninstallFilterHandler(filterIndexHex) {
    // check filter exists
    const filterIndex = hexToInt(filterIndexHex)
    const filter = filters[filterIndex]
    const result = Boolean(filter)
    // uninstall filter
    if (result) {
      await uninstallFilter(filterIndex)
    }
    return result
  }

  //
  // utils
  //

  async function installFilter(filter) {
    const prevFilterCount = objValues(filters).length
    // install filter
    const currentBlock = await blockTracker.getLatestBlock()
    await filter.initialize({ currentBlock })
    filterIndex++
    filters[filterIndex] = filter
    filter.id = filterIndex
    filter.idHex = intToHex(filterIndex)
    // update block tracker subs
    const newFilterCount = objValues(filters).length
    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })
    return filterIndex
  }

  async function uninstallFilter(filterIndex) {
    const prevFilterCount = objValues(filters).length
    delete filters[filterIndex]
    // update block tracker subs
    const newFilterCount = objValues(filters).length
    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })
  }

  async function uninstallAllFilters() {
    const prevFilterCount = objValues(filters).length
    filters = {}
    // update block tracker subs
    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })
  }

  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {
    // subscribe
    if (prevFilterCount === 0 && newFilterCount > 0) {
      blockTracker.on('sync', filterUpdater)
      return
    }
    // unsubscribe
    if (prevFilterCount > 0 && newFilterCount === 0) {
      blockTracker.removeListener('sync', filterUpdater)
      return
    }
  }

}

// helper for turning filter constructors into rpc middleware
function toFilterCreationMiddleware(createFilterFn) {
  return toAsyncRpcMiddleware(async (...args) => {
    const filter = await createFilterFn(...args)
    const result = intToHex(filter.id)
    return result
  })
}

// helper for pulling out req.params and setting res.result
function toAsyncRpcMiddleware(asyncFn) {
  return createAsyncMiddleware(async (req, res) => {
    const result = await asyncFn.apply(null, req.params)
    res.result = result
  })
}

function mutexMiddlewareWrapper({ mutex }) {
  return (middleware) => {
    return async (req, res, next, end) => {
      // wait for mutex available
      // we can release immediately because
      // we just need to make sure updates aren't active
      const releaseLock = await mutex.acquire()
      releaseLock()
      middleware(req, res, next, end)
    }
  }
}

function objValues(obj, fn){
  const values = []
  for (let key in obj) {
    values.push(obj[key])
  }
  return values
}

},{"./block-filter.js":82,"./hexUtils":84,"./log-filter.js":86,"./tx-filter.js":89,"@trufflesuite/eth-json-rpc-middleware/scaffold":119,"await-semaphore":149,"json-rpc-engine/src/createAsyncMiddleware":87}],86:[function(require,module,exports){
const EthQuery = require('eth-query')
const pify = require('pify')
const BaseFilterWithHistory = require('./base-filter-history')
const { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = require('./hexUtils')

class LogFilter extends BaseFilterWithHistory {

  constructor ({ provider, params }) {
    super()
    this.type = 'log'
    this.ethQuery = new EthQuery(provider)
    this.params = Object.assign({
      fromBlock: 'latest',
      toBlock: 'latest',
      address: undefined,
      topics: [],
    }, params)
    // normalize address parameter
    if (this.params.address) {
      // ensure array
      if (!Array.isArray(this.params.address)) {
        this.params.address = [this.params.address]
      }
      // ensure lowercase
      this.params.address = this.params.address.map(address => address.toLowerCase())
    }
  }

  async initialize({ currentBlock }) {
    // resolve params.fromBlock
    let fromBlock = this.params.fromBlock
    if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock
    if ('earliest' === fromBlock) fromBlock = '0x0'
    this.params.fromBlock = fromBlock
    // set toBlock for initial lookup
    const toBlock = minBlockRef(this.params.toBlock, currentBlock)
    const params = Object.assign({}, this.params, { toBlock })
    // fetch logs and add to results
    const newLogs = await this._fetchLogs(params)
    this.addInitialResults(newLogs)
  }

  async update ({ oldBlock, newBlock }) {
    // configure params for this update
    const toBlock = newBlock
    let fromBlock
    // oldBlock is empty on first sync
    if (oldBlock) {
      fromBlock = incrementHexInt(oldBlock)
    } else {
      fromBlock = newBlock
    }
    // fetch logs
    const params = Object.assign({}, this.params, { fromBlock, toBlock })
    const newLogs = await this._fetchLogs(params)
    const matchingLogs = newLogs.filter(log => this.matchLog(log))

    // add to results
    this.addResults(matchingLogs)
  }

  async _fetchLogs (params) {
    const newLogs = await pify(cb => this.ethQuery.getLogs(params, cb))()
    // add to results
    return newLogs
  }

  matchLog(log) {
    // check if block number in bounds:
    if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false
    if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false

    // address is correct:
    const normalizedLogAddress = log.address && log.address.toLowerCase()
    if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false

    // topics match:
    // topics are position-dependant
    // topics can be nested to represent `or` [[a || b], c]
    // topics can be null, representing a wild card for that position
    const topicsMatch = this.params.topics.every((topicPattern, index) => {
      // pattern is longer than actual topics
      let logTopic = log.topics[index]
      if (!logTopic) return false
      logTopic = logTopic.toLowerCase()
      // normalize subTopics
      let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]
      // check for wild card
      const subtopicsIncludeWildcard = subtopicsToMatch.includes(null)
      if (subtopicsIncludeWildcard) return true
      subtopicsToMatch = subtopicsToMatch.map(topic => topic.toLowerCase())
      // check each possible matching topic
      const topicDoesMatch = subtopicsToMatch.includes(logTopic)
      return topicDoesMatch
    })

    return topicsMatch
  }

}

module.exports = LogFilter

},{"./base-filter-history":80,"./hexUtils":84,"eth-query":190,"pify":304}],87:[function(require,module,exports){
const promiseToCallback = require('promise-to-callback')

module.exports = createAsyncMiddleware

function createAsyncMiddleware(asyncMiddleware) {
  return (req, res, next, end) => {
    let nextDonePromise = null
    const finishedPromise = asyncMiddleware(req, res, getNextPromise)
    promiseToCallback(finishedPromise)((err) => {
      // async middleware ended
      if (nextDonePromise) {
        // next handler was called - complete nextHandler
        promiseToCallback(nextDonePromise)((nextErr, nextHandlerSignalDone) => {
          // nextErr is only present if something went really wrong
          // if an error is thrown after `await next()` it appears as `err` and not `nextErr`
          if (nextErr) {
            console.error(nextErr)
            return end(nextErr)
          }
          nextHandlerSignalDone(err)
        })
      } else {
        // next handler was not called - complete middleware
        end(err)
      }
    })

    async function getNextPromise() {
      nextDonePromise = getNextDoneCallback()
      await nextDonePromise
      return undefined
    }

    function getNextDoneCallback() {
      return new Promise((resolve) => {
        next((cb) => resolve(cb))
      })
    }
  }
}

},{"promise-to-callback":310}],88:[function(require,module,exports){
const SafeEventEmitter = require('safe-event-emitter')
const createScaffoldMiddleware = require('@trufflesuite/eth-json-rpc-middleware/scaffold')
const createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')
const createFilterMiddleware = require('./index.js')
const { unsafeRandomBytes, incrementHexInt } = require('./hexUtils.js')
const getBlocksForRange = require('./getBlocksForRange.js')

module.exports = createSubscriptionMiddleware


function createSubscriptionMiddleware({ blockTracker, provider }) {
  // state and utilities for handling subscriptions
  const subscriptions = {}
  const filterManager = createFilterMiddleware({ blockTracker, provider })

  // internal flag
  let isDestroyed = false

  // create subscriptionManager api object
  const events = new SafeEventEmitter()
  const middleware = createScaffoldMiddleware({
    eth_subscribe: createAsyncMiddleware(subscribe),
    eth_unsubscribe: createAsyncMiddleware(unsubscribe),
  })
  middleware.destroy = destroy
  return { events, middleware }

  async function subscribe(req, res) {

    if (isDestroyed) throw new Error(
      'SubscriptionManager - attempting to use after destroying'
    )

    const subscriptionType = req.params[0]
    // subId is 16 byte hex string
    const subId = unsafeRandomBytes(16)

    // create sub
    let sub
    switch (subscriptionType) {
      case 'newHeads':
        sub = createSubNewHeads({ subId })
        break
      case 'logs':
        const filterParams = req.params[1]
        const filter = await filterManager.newLogFilter(filterParams)
        sub = createSubFromFilter({ subId, filter })
        break
      default:
        throw new Error(`SubscriptionManager - unsupported subscription type "${subscriptionType}"`)

    }
    subscriptions[subId] = sub

    res.result = subId
    return

    function createSubNewHeads({ subId }) {
      const sub = {
        type: subscriptionType,
        destroy: async () => {
          blockTracker.removeListener('sync', sub.update)
        },
        update: async ({ oldBlock, newBlock }) => {
          // for newHeads
          const toBlock = newBlock
          const fromBlock = incrementHexInt(oldBlock)
          const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock })
          const results = rawBlocks.map(normalizeBlock)
          results.forEach((value) => {
            _emitSubscriptionResult(subId, value)
          })
        }
      }
      // check for subscription updates on new block
      blockTracker.on('sync', sub.update)
      return sub
    }

    function createSubFromFilter({ subId, filter }){
      filter.on('update', result => _emitSubscriptionResult(subId, result))
      const sub = {
        type: subscriptionType,
        destroy: async () => {
          return await filterManager.uninstallFilter(filter.idHex)
        },
      }
      return sub
    }
  }

  async function unsubscribe(req, res) {

    if (isDestroyed) throw new Error(
      'SubscriptionManager - attempting to use after destroying'
    )

    const id = req.params[0]
    const subscription = subscriptions[id]
    // if missing, return "false" to indicate it was not removed
    if (!subscription) {
      res.result = false
      return
    }
    // cleanup subscription
    delete subscriptions[id]
    await subscription.destroy()
    res.result = true
  }

  function _emitSubscriptionResult(filterIdHex, value) {
    events.emit('notification', {
      jsonrpc: '2.0',
      method: 'eth_subscription',
      params: {
        subscription: filterIdHex,
        result: value,
      },
    })
  }

  function destroy () {
    events.removeAllListeners()
    for (const id in subscriptions) {
      subscriptions[id].destroy()
      delete subscriptions[id]
    }
    isDestroyed = true
  }
}

function normalizeBlock(block) {
  return {
    hash: block.hash,
    parentHash: block.parentHash,
    sha3Uncles: block.sha3Uncles,
    miner: block.miner,
    stateRoot: block.stateRoot,
    transactionsRoot: block.transactionsRoot,
    receiptsRoot: block.receiptsRoot,
    logsBloom: block.logsBloom,
    difficulty: block.difficulty,
    number: block.number,
    gasLimit: block.gasLimit,
    gasUsed: block.gasUsed,
    nonce: block.nonce,
    mixHash: block.mixHash,
    timestamp: block.timestamp,
    extraData: block.extraData,
  }
}

},{"./getBlocksForRange.js":83,"./hexUtils.js":84,"./index.js":85,"@trufflesuite/eth-json-rpc-middleware/scaffold":119,"json-rpc-engine/src/createAsyncMiddleware":87,"safe-event-emitter":334}],89:[function(require,module,exports){
const flatMap = require('lodash.flatmap')
const BaseFilter = require('./base-filter')
const getBlocksForRange = require('./getBlocksForRange')
const { incrementHexInt } = require('./hexUtils')

class TxFilter extends BaseFilter {

  constructor ({ provider }) {
    super()
    this.type = 'tx'
    this.provider = provider
  }

  async update ({ oldBlock }) {
    const toBlock = oldBlock
    const fromBlock = incrementHexInt(oldBlock)
    const blocks = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })
    const blockTxHashes = flatMap(blocks, (block) => block.transactions)
    // add to results
    this.addResults(blockTxHashes)
  }

}

module.exports = TxFilter

},{"./base-filter":81,"./getBlocksForRange":83,"./hexUtils":84,"lodash.flatmap":270}],90:[function(require,module,exports){

const { JsonRpcError, EthJsonRpcError } = require('./src/classes')
const {
  serializeError, getMessageFromCode,
} = require('./src/utils')
const errors = require('./src/errors')
const ERROR_CODES = require('./src/errorCodes.json')

module.exports = {
  errors,
  JsonRpcError,
  EthJsonRpcError,
  serializeError,
  getMessageFromCode,
  /** @type ErrorCodes */
  ERROR_CODES,
}

// Types

/**
 * @typedef {Object} EthJsonRpcErrorCodes
 * @property {number} userRejectedRequest
 * @property {number} unauthorized
 * @property {number} unsupportedMethod
 */

/**
 * @typedef {Object} JsonRpcErrorCodes
 * @property {number} parse
 * @property {number} invalidRequest
 * @property {number} invalidParams
 * @property {number} methodNotFound
 * @property {number} internal
 */

/**
 * @typedef ErrorCodes
 * @property {JsonRpcErrorCodes} jsonRpc
 * @property {EthJsonRpcErrorCodes} eth
 */

},{"./src/classes":91,"./src/errorCodes.json":92,"./src/errors":94,"./src/utils":95}],91:[function(require,module,exports){

const safeStringify = require('fast-safe-stringify')

/**
 * @class JsonRpcError
 * Error subclass implementing JSON RPC 2.0 errors.
 * Permits any integer error code.
 */
class JsonRpcError extends Error {

  /**
   * Create a JSON RPC error.
   * @param {number} code - The integer error code.
   * @param {string} message - The string message.
   * @param {any} [data] - The error data.
   */
  constructor (code, message, data) {

    if (!Number.isInteger(code)) throw new Error(
      '"code" must be an integer.'
    )
    if (!message || typeof message !== 'string') throw new Error(
      '"message" must be a nonempty string.'
    )

    super(message)
    this.code = code
    if (data !== undefined) this.data = data
  }

  /**
   * Returns a plain object with all public class properties.
   * @returns {object} The serialized error. 
   */
  serialize() {
    const serialized = {
      code: this.code,
      message: this.message,
    }
    if (this.data !== undefined) serialized.data = this.data
    if (this.stack) serialized.stack = this.stack
    return serialized
  }

  /**
   * Return a string representation of the serialized error, omitting
   * any circular references.
   * @returns {string} The serialized error as a string.
   */
  toString() {
    return safeStringify(
      this.serialize(),
      stringifyReplacer,
      2
    )
  }
}

/**
 * @class EthJsonRpcError
 * Error subclass implementing Ethereum JSON RPC errors.
 * Permits integer error codes in the [ 1000 <= 4999 ] range.
 */
class EthJsonRpcError extends JsonRpcError {
  /**
   * Create an Ethereum JSON RPC error.
   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.
   * @param {string} message - The string message.
   * @param {any} [data] - The error data.
   */
  constructor(code, message, data) {
    if (!isValidEthCode(code)) {
      throw new Error(
        '"code" must be an integer such that: 1000 <= code <= 4999'
      )
    }
    super(code, message, data)
  }
}

// Internal

function isValidEthCode(code) {
  return Number.isInteger(code) && code >= 1000 && code <= 4999
}

function stringifyReplacer(_, value) {
  if (value === '[Circular]') {
    return
  }
  return value
}

// Exports

module.exports =  {
  JsonRpcError,
  EthJsonRpcError,
}

},{"fast-safe-stringify":238}],92:[function(require,module,exports){
module.exports={
  "jsonRpc": {
      "parse": -32700,
      "invalidRequest": -32600,
      "methodNotFound": -32601,
      "invalidParams": -32602,
      "internal": -32603
  },
  "eth": {
    "userRejectedRequest": 4001,
    "unauthorized": 4100,
    "unsupportedMethod": 4200
  }
}

},{}],93:[function(require,module,exports){
module.exports={
  "-32700": {
    "standard": "JSON RPC 2.0",
    "message": "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
  },
  "-32600": {
    "standard": "JSON RPC 2.0",
    "message": "The JSON sent is not a valid Request object."
  },
  "-32601": {
    "standard": "JSON RPC 2.0",
    "message": "The method does not exist / is not available."
  },
  "-32602": {
    "standard": "JSON RPC 2.0",
    "message": "Invalid method parameter(s)."
  },
  "-32603": {
    "standard": "JSON RPC 2.0",
    "message": "Internal JSON-RPC error."
  },
  "4001": {
    "standard": "EIP 1193",
    "message": "User rejected the request."
  },
  "4100": {
    "standard": "EIP 1193",
    "message": "The requested account and/or method has not been authorized by the user."
  },
  "4200": {
    "standard": "EIP 1193",
    "message": "The requested method is not supported by this Ethereum provider."
  }
}

},{}],94:[function(require,module,exports){

const { JsonRpcError, EthJsonRpcError } = require('./classes')
const { getMessageFromCode } = require('./utils')
const ERROR_CODES = require('./errorCodes.json')

module.exports = {
  /**
   * Get a JSON RPC 2.0 Parse error.
   * @param {string} [message] - A custom message.
   * @param {any} [data] - Error data.
   * @return {JsonRpcError} The error.
   */
  parse: (message, data) => getJsonRpcError(
    ERROR_CODES.jsonRpc.parse, message, data
  ),

  /**
   * Get a JSON RPC 2.0 Invalid Request error.
   * @param {string} [message] - A custom message.
   * @param {any} [data] - Error data.
   * @return {JsonRpcError} The error.
   */
  invalidRequest: (message, data) => getJsonRpcError(
    ERROR_CODES.jsonRpc.invalidRequest, message, data
  ),

  /**
   * Get a JSON RPC 2.0 Invalid Params error.
   * @param {string} [message] - A custom message.
   * @param {any} [data] - Error data.
   * @return {JsonRpcError} The error.
   */
  invalidParams: (message, data) => getJsonRpcError(
    ERROR_CODES.jsonRpc.invalidParams, message, data
  ),

  /**
   * Get a JSON RPC 2.0 Method Not Found error.
   * @param {string} [message] - A custom message.
   * @param {any} [data] - Error data.
   * @return {JsonRpcError} The error.
   */
  methodNotFound: (message, data) => getJsonRpcError(
    ERROR_CODES.jsonRpc.methodNotFound, message, data
  ),

  /**
   * Get a JSON RPC 2.0 Internal error.
   * @param {string} [message] - A custom message.
   * @param {any} [data] - Error data.
   * @return {JsonRpcError} The error.
   */
  internal: (message, data) => getJsonRpcError(
    ERROR_CODES.jsonRpc.internal, message, data
  ),

  /**
   * Get a JSON RPC 2.0 Server error.
   * Permits integer error codes in the [ -32099 <= -32000 ] range.
   * @param {number} code - The integer error code.
   * @param {string} [message] - A custom message.
   * @param {any} [data] - Error data.
   * @return {JsonRpcError} The error.
   */
  server: (code, message, data) => {
    if (!Number.isInteger(code) || code > -32000 || code < -32099) {
      throw new Error(
        '"code" must be an integer such that: -32099 <= code <= -32000'
      )
    }
    return getJsonRpcError(code, message, data)
  },
  eth: {
    /**
     * Get an Ethereum JSON RPC User Rejected Request error.
     * @param {string} [message] - A custom message.
     * @param {any} [data] - Error data.
     * @return {EthJsonRpcError} The error.
     */
    userRejectedRequest: (message, data) => {
      return getEthJsonRpcError(
        ERROR_CODES.eth.userRejectedRequest, message, data
      )
    },

    /**
     * Get an Ethereum JSON RPC Unauthorized error.
     * @param {string} [message] - A custom message.
     * @param {any} [data] - Error data.
     * @return {EthJsonRpcError} The error.
     */
    unauthorized: (message, data) => {
      return getEthJsonRpcError(
        ERROR_CODES.eth.unauthorized, message, data
      )
    },

    /**
     * Get an Ethereum JSON RPC Unsupported Method error.
     * @param {string} [message] - A custom message.
     * @param {any} [data] - Error data.
     * @return {EthJsonRpcError} The error.
     */
    unsupportedMethod: (message, data) => {
      return getEthJsonRpcError(
        ERROR_CODES.eth.unsupportedMethod, message, data
      )
    },

    /**
     * Get a custom Ethereum JSON RPC error.
     * @param {string} code - The error code.
     * @param {string} message - The error message.
     * @param {any} [data] - Error data.
     * @return {EthJsonRpcError} The error.
     */
    custom: (code, message, data) => {
      if (!message || typeof message !== 'string') throw new Error(
        '"message" must be a nonempty string'
      )
      return new EthJsonRpcError(code, message, data)
    },
  },
}

// Internal

function getJsonRpcError(code, message, data) {
  return new JsonRpcError(
    code,
    message || getMessageFromCode(code),
    data
  )
}

function getEthJsonRpcError(code, message, data) {
  return new EthJsonRpcError(
    code,
    message || getMessageFromCode(code),
    data
  )
}

},{"./classes":91,"./errorCodes.json":92,"./utils":95}],95:[function(require,module,exports){

const errorValues = require('./errorValues.json')
const FALLBACK_ERROR_CODE = require('./errorCodes.json').jsonRpc.internal
const { JsonRpcError } = require('./classes')

const JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.'

const FALLBACK_MESSAGE = 'Unspecified error message. This is  bug, please report it.'

const FALLBACK_ERROR = {
  code: FALLBACK_ERROR_CODE,
  message: getMessageFromCode(FALLBACK_ERROR_CODE)
}

/**
 * Gets the message for a given code, or a fallback message if the code has
 * no corresponding message.
 * @param {number} code - The integer error code.
 * @param {string} fallbackMessage - The fallback message.
 * @return {string} The corresponding message or the fallback message.
 */
function getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {

  if (Number.isInteger(code)) {

    const codeString = code.toString()
    if (errorValues[codeString]) return errorValues[codeString].message

    if (isJsonRpcServerError(code)) return JSON_RPC_SERVER_ERROR_MESSAGE

    // TODO: allow valid codes and messages to be extended
    // // EIP 1193 Status Codes
    // if (code >= 4000 && code <= 4999) return Something?
  }
  return fallbackMessage
}

/**
 * Returns whether the given code is valid.
 * A code is only valid if it has a message.
 * @param {number} code - The code to check
 * @return {boolean} true if the code is valid, false otherwise.
 */
function isValidCode(code) {

  if (!Number.isInteger(code)) return false

  const codeString = code.toString()
  if (errorValues[codeString]) return true

  if (isJsonRpcServerError(code)) return true

  // TODO: allow valid codes and messages to be extended
  // // EIP 1193 Status Codes
  // if (code >= 4000 && code <= 4999) return true

  return false
}

/**
 * Serializes the given error to an ETH JSON RPC-compatible error object.
 * Merely copies the given error's values if it is already compatible.
 * If the given error is not fully compatible, it will be preserved on the
 * returned object's data.originalError property.
 * Adds a 'stack' property if it exists on the given error.
 *
 * @param {any} error - The error to serialize.
 * @param {object} fallbackError - The custom fallback error values if the
 * given error is invalid.
 * @return {object} A standardized error object.
 */
function serializeError (error, fallbackError = FALLBACK_ERROR) {

  if (
    !fallbackError || 
    !Number.isInteger(fallbackError.code) ||
    typeof fallbackError.message !== 'string'
  ) {
    throw new Error(
      'fallbackError must contain integer number code and string message.'
    )
  }

  if (typeof error === 'object' && error instanceof JsonRpcError) {
    return error.serialize()
  }

  const serialized = {}

  if (error && isValidCode(error.code)) {

    serialized.code = error.code

    if (error.message && typeof error.message === 'string') {
      serialized.message = error.message
      if (error.hasOwnProperty('data')) serialized.data = error.data
    } else {
      serialized.message = getMessageFromCode(serialized.code)
      serialized.data = { originalError: assignOriginalError(error) }
    }

  } else {
    serialized.code = fallbackError.code
    serialized.message = (
      error && error.message
        ? error.message
        : fallbackError.message
    )
    serialized.data = { originalError: assignOriginalError(error) }
  }

  if (error && error.stack) serialized.stack = error.stack
  return serialized
}

// Internal

function isJsonRpcServerError (code) {
  return code >= -32099 && code <= -32000
}

function assignOriginalError (error) {
  if (error && typeof error === 'object' && !Array.isArray(error)) {
    return Object.assign({}, error)
  }
  return error
}

// Exports

module.exports = {
  getMessageFromCode,
  isValidCode,
  serializeError,
  JSON_RPC_SERVER_ERROR_MESSAGE,
}

},{"./classes":91,"./errorCodes.json":92,"./errorValues.json":93}],96:[function(require,module,exports){

const { EthereumRpcError, EthereumProviderError } = require('./src/classes')
const {
  serializeError, getMessageFromCode,
} = require('./src/utils')
const ethErrors = require('./src/errors')
const ERROR_CODES = require('./src/errorCodes.json')

module.exports = {
  ethErrors,
  EthereumRpcError,
  EthereumProviderError,
  serializeError,
  getMessageFromCode,
  /** @type ErrorCodes */
  ERROR_CODES,
}

// Types

/**
 * @typedef {Object} EthereumProviderErrorCodes
 * @property {number} userRejectedRequest
 * @property {number} unauthorized
 * @property {number} unsupportedMethod
 */

/**
 * @typedef {Object} EthereumRpcErrorCodes
 * @property {number} parse
 * @property {number} invalidRequest
 * @property {number} invalidParams
 * @property {number} methodNotFound
 * @property {number} internal
 * @property {number} invalidInput
 * @property {number} resourceNotFound
 * @property {number} resourceUnavailable
 * @property {number} transactionRejected
 * @property {number} methodNotSupported
 */

/**
 * @typedef ErrorCodes
 * @property {EthereumRpcErrorCodes} rpc
 * @property {EthereumProviderErrorCodes} provider
 */

},{"./src/classes":97,"./src/errorCodes.json":98,"./src/errors":100,"./src/utils":101}],97:[function(require,module,exports){

const safeStringify = require('fast-safe-stringify')

/**
 * @class JsonRpcError
 * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors
 * per EIP 1474.
 * Permits any integer error code.
 */
class EthereumRpcError extends Error {

  /**
   * Create an Ethereum JSON RPC error.
   * 
   * @param {number} code - The integer error code.
   * @param {string} message - The string message.
   * @param {any} [data] - The error data.
   */
  constructor (code, message, data) {

    if (!Number.isInteger(code)) throw new Error(
      '"code" must be an integer.'
    )
    if (!message || typeof message !== 'string') throw new Error(
      '"message" must be a nonempty string.'
    )

    super(message)
    this.code = code
    if (data !== undefined) this.data = data
  }

  /**
   * Returns a plain object with all public class properties.
   * 
   * @returns {object} The serialized error. 
   */
  serialize() {
    const serialized = {
      code: this.code,
      message: this.message,
    }
    if (this.data !== undefined) serialized.data = this.data
    if (this.stack) serialized.stack = this.stack
    return serialized
  }

  /**
   * Return a string representation of the serialized error, omitting
   * any circular references.
   * 
   * @returns {string} The serialized error as a string.
   */
  toString() {
    return safeStringify(
      this.serialize(),
      stringifyReplacer,
      2
    )
  }
}

/**
 * @class EthereumRpcError
 * Error subclass implementing Ethereum Provider errors per EIP 1193.
 * Permits integer error codes in the [ 1000 <= 4999 ] range.
 */
class EthereumProviderError extends EthereumRpcError {

  /**
   * Create an Ethereum JSON RPC error.
   * 
   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.
   * @param {string} message - The string message.
   * @param {any} [data] - The error data.
   */
  constructor(code, message, data) {

    if (!isValidEthProviderCode(code)) {
      throw new Error(
        '"code" must be an integer such that: 1000 <= code <= 4999'
      )
    }

    super(code, message, data)
  }
}

// Internal

function isValidEthProviderCode(code) {
  return Number.isInteger(code) && code >= 1000 && code <= 4999
}

function stringifyReplacer(_, value) {
  if (value === '[Circular]') {
    return
  }
  return value
}

// Exports

module.exports =  {
  EthereumRpcError,
  EthereumProviderError
}

},{"fast-safe-stringify":238}],98:[function(require,module,exports){
module.exports={
  "rpc": {
    "invalidInput": -32000,
    "resourceNotFound": -32001,
    "resourceUnavailable": -32002,
    "transactionRejected": -32003,
    "methodNotSupported": -32004,
    "parse": -32700,
    "invalidRequest": -32600,
    "methodNotFound": -32601,
    "invalidParams": -32602,
    "internal": -32603
  },
  "provider": {
    "userRejectedRequest": 4001,
    "unauthorized": 4100,
    "unsupportedMethod": 4200
  }
}

},{}],99:[function(require,module,exports){
module.exports={
  "-32700": {
    "standard": "JSON RPC 2.0",
    "message": "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
  },
  "-32600": {
    "standard": "JSON RPC 2.0",
    "message": "The JSON sent is not a valid Request object."
  },
  "-32601": {
    "standard": "JSON RPC 2.0",
    "message": "The method does not exist / is not available."
  },
  "-32602": {
    "standard": "JSON RPC 2.0",
    "message": "Invalid method parameter(s)."
  },
  "-32603": {
    "standard": "JSON RPC 2.0",
    "message": "Internal JSON-RPC error."
  },
  "-32000": {
    "standard": "EIP 1474",
    "message": "Invalid input."
  },
  "-32001": {
    "standard": "EIP 1474",
    "message": "Resource not found."
  },
  "-32002": {
    "standard": "EIP 1474",
    "message": "Resource unavailable."
  },
  "-32003": {
    "standard": "EIP 1474",
    "message": "Transaction rejected."
  },
  "-32004": {
    "standard": "EIP 1474",
    "message": "Method not supported."
  },
  "4001": {
    "standard": "EIP 1193",
    "message": "User rejected the request."
  },
  "4100": {
    "standard": "EIP 1193",
    "message": "The requested account and/or method has not been authorized by the user."
  },
  "4200": {
    "standard": "EIP 1193",
    "message": "The requested method is not supported by this Ethereum provider."
  }
}

},{}],100:[function(require,module,exports){

const { EthereumRpcError, EthereumProviderError } = require('./classes')
const { getMessageFromCode } = require('./utils')
const ERROR_CODES = require('./errorCodes.json')

module.exports = {
  rpc: {
    /**
     * Get a JSON RPC 2.0 Parse (-32700) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumRpcError} The error
     */
    parse: (opts) => getEthJsonRpcError(
      ERROR_CODES.rpc.parse, opts
    ),

    /**
     * Get a JSON RPC 2.0 Invalid Request (-32600) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumRpcError} The error
     */
    invalidRequest: (opts) => getEthJsonRpcError(
      ERROR_CODES.rpc.invalidRequest, opts
    ),

    /**
     * Get a JSON RPC 2.0 Invalid Params (-32602) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumRpcError} The error
     */
    invalidParams: (opts) => getEthJsonRpcError(
      ERROR_CODES.rpc.invalidParams, opts
    ),

    /**
     * Get a JSON RPC 2.0 Method Not Found (-32601) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumRpcError} The error
     */
    methodNotFound: (opts) => getEthJsonRpcError(
      ERROR_CODES.rpc.methodNotFound, opts
    ),

    /**
     * Get a JSON RPC 2.0 Internal (-32603) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumRpcError} The error
     */
    internal: (opts) => getEthJsonRpcError(
      ERROR_CODES.rpc.internal, opts
    ),

    /**
     * Get a JSON RPC 2.0 Server error.
     * Permits integer error codes in the [ -32099 <= -32005 ] range.
     * Codes -32000 through -32004 are reserved by EIP 1474.
     * 
     * @param {Object|string} opts - Options object
     * @param {number} opts.code - The error code
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumRpcError} The error
     */
    server: (opts) => {
      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
        throw new Error('Ethereum RPC Server errors must provide single object argument.')
      }
      const { code } = opts
      if (!Number.isInteger(code) || code > -32005 || code < -32099) {
        throw new Error(
          '"code" must be an integer such that: -32099 <= code <= -32005'
        )
      }
      return getEthJsonRpcError(code, opts)
    },

    /**
     * Get an Ethereum JSON RPC Invalid Input (-32000) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumRpcError} The error
     */
    invalidInput: (opts) => getEthJsonRpcError(
      ERROR_CODES.rpc.invalidInput, opts
    ),

    /**
     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumRpcError} The error
     */
    resourceNotFound: (opts) => getEthJsonRpcError(
      ERROR_CODES.rpc.resourceNotFound, opts
    ),

    /**
     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumRpcError} The error
     */
    resourceUnavailable: (opts) => getEthJsonRpcError(
      ERROR_CODES.rpc.resourceUnavailable, opts
    ),

    /**
     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumRpcError} The error
     */
    transactionRejected: (opts) => getEthJsonRpcError(
      ERROR_CODES.rpc.transactionRejected, opts
    ),

    /**
     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumRpcError} The error
     */
    methodNotSupported: (opts) => getEthJsonRpcError(
      ERROR_CODES.rpc.methodNotSupported, opts
    ),
  },

  provider: {
    /**
     * Get an Ethereum Provider User Rejected Request (4001) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumProviderError} The error
     */
    userRejectedRequest: (opts) => {
      return getEthProviderError(
        ERROR_CODES.provider.userRejectedRequest, opts
      )
    },

    /**
     * Get an Ethereum Provider Unauthorized (4100) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumProviderError} The error
     */
    unauthorized: (opts) => {
      return getEthProviderError(
        ERROR_CODES.provider.unauthorized, opts
      )
    },

    /**
     * Get an Ethereum Provider Unsupported Method (4200) error.
     * 
     * @param {Object|string} [opts] - Options object or error message string
     * @param {string} [opts.message] - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumProviderError} The error
     */
    unsupportedMethod: (opts) => {
      return getEthProviderError(
        ERROR_CODES.provider.unsupportedMethod, opts
      )
    },

    /**
     * Get a custom Ethereum Provider error.
     * 
     * @param {Object|string} opts - Options object
     * @param {number} opts.code - The error code
     * @param {string} opts.message - The error message
     * @param {any} [opts.data] - Error data
     * @returns {EthereumProviderError} The error
     */
    custom: (opts) => {
      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
        throw new Error('Ethereum Provider custom errors must provide single object argument.')
      }
      const { code, message, data } = opts
      if (!message || typeof message !== 'string') throw new Error(
        '"message" must be a nonempty string'
      )
      return new EthereumProviderError(code, message, data)
    },
  },
}

// Internal

function getEthJsonRpcError(code, opts) {
  const [ message, data ] = validateOpts(opts)
  return new EthereumRpcError(
    code,
    message || getMessageFromCode(code),
    data
  )
}

function getEthProviderError(code, opts) {
  const [ message, data ] = validateOpts(opts)
  return new EthereumProviderError(
    code,
    message || getMessageFromCode(code),
    data
  )
}

function validateOpts (opts) {
  let message, data
  if (opts) {
    if (typeof opts === 'string') {
      message = opts
    } else if (typeof opts === 'object' && !Array.isArray(opts)) {
      message = opts.message
      data = opts.data
    }
  }
  return [ message, data ]
}

},{"./classes":97,"./errorCodes.json":98,"./utils":101}],101:[function(require,module,exports){

const errorValues = require('./errorValues.json')
const FALLBACK_ERROR_CODE = require('./errorCodes.json').rpc.internal
const { EthereumRpcError } = require('./classes')

const JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.'

const FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.'

const FALLBACK_ERROR = {
  code: FALLBACK_ERROR_CODE,
  message: getMessageFromCode(FALLBACK_ERROR_CODE)
}

/**
 * Gets the message for a given code, or a fallback message if the code has
 * no corresponding message.
 * 
 * @param {number} code - The integer error code
 * @param {string} fallbackMessage - The fallback message
 * @return {string} The corresponding message or the fallback message
 */
function getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {

  if (Number.isInteger(code)) {

    const codeString = code.toString()
    if (errorValues[codeString]) return errorValues[codeString].message

    if (isJsonRpcServerError(code)) return JSON_RPC_SERVER_ERROR_MESSAGE

    // TODO: allow valid codes and messages to be extended
    // // EIP 1193 Status Codes
    // if (code >= 4000 && code <= 4999) return Something?
  }
  return fallbackMessage
}

/**
 * Returns whether the given code is valid.
 * A code is only valid if it has a message.
 * 
 * @param {number} code - The code to check
 * @return {boolean} true if the code is valid, false otherwise.
 */
function isValidCode(code) {

  if (!Number.isInteger(code)) return false

  const codeString = code.toString()
  if (errorValues[codeString]) return true

  if (isJsonRpcServerError(code)) return true

  // TODO: allow valid codes and messages to be extended
  // // EIP 1193 Status Codes
  // if (code >= 4000 && code <= 4999) return true

  return false
}

/**
 * Serializes the given error to an Ethereum JSON RPC-compatible error object.
 * Merely copies the given error's values if it is already compatible.
 * If the given error is not fully compatible, it will be preserved on the
 * returned object's data.originalError property.
 * Adds a 'stack' property if it exists on the given error.
 *
 * @param {any} error - The error to serialize.
 * @param {object} fallbackError - The custom fallback error values if the
 * given error is invalid.
 * @return {object} A standardized error object.
 */
function serializeError (error, fallbackError = FALLBACK_ERROR) {

  if (
    !fallbackError || 
    !Number.isInteger(fallbackError.code) ||
    typeof fallbackError.message !== 'string'
  ) {
    throw new Error(
      'fallbackError must contain integer number code and string message.'
    )
  }

  if (error instanceof EthereumRpcError) {
    return error.serialize()
  }

  const serialized = {}

  if (error && isValidCode(error.code)) {

    serialized.code = error.code

    if (error.message && typeof error.message === 'string') {
      serialized.message = error.message
      if (error.hasOwnProperty('data')) serialized.data = error.data
    } else {
      serialized.message = getMessageFromCode(serialized.code)
      serialized.data = { originalError: assignOriginalError(error) }
    }

  } else {
    serialized.code = fallbackError.code
    serialized.message = (
      error && error.message
        ? error.message
        : fallbackError.message
    )
    serialized.data = { originalError: assignOriginalError(error) }
  }

  if (error && error.stack) serialized.stack = error.stack
  return serialized
}

// Internal

function isJsonRpcServerError (code) {
  return code >= -32099 && code <= -32000
}

function assignOriginalError (error) {
  if (error && typeof error === 'object' && !Array.isArray(error)) {
    return Object.assign({}, error)
  }
  return error
}

// Exports

module.exports = {
  getMessageFromCode,
  isValidCode,
  serializeError,
  JSON_RPC_SERVER_ERROR_MESSAGE,
}

},{"./classes":97,"./errorCodes.json":98,"./errorValues.json":99}],102:[function(require,module,exports){
arguments[4][87][0].apply(exports,arguments)
},{"dup":87,"promise-to-callback":310}],103:[function(require,module,exports){
'use strict'
const async = require('async')
const SafeEventEmitter = require('safe-event-emitter')
const {
  serializeError, EthereumRpcError, ERROR_CODES
} = require('eth-json-rpc-errors')

class RpcEngine extends SafeEventEmitter {
  constructor () {
    super()
    this._middleware = []
  }

  //
  // Public
  //

  push (middleware) {
    this._middleware.push(middleware)
  }

  handle (req, cb) {
    // batch request support
    if (Array.isArray(req)) {
      this._handleBatch(req, cb)
    } else {
      this._handle(req, cb)
    }
  }

  //
  // Private
  //

  async _handleBatch (reqs, cb) {

    // The order here is important
    try {
      const batchRes = await Promise.all( // 2. Wait for all requests to finish
        // 1. Begin executing each request in the order received
        reqs.map(this._promiseHandle.bind(this))
      )
      cb(null, batchRes) // 3a. Return batch response
    } catch (err) {
      cb(err) // 3b. Some kind of fatal error; all requests are lost
    }
  }

  _promiseHandle (req) {
    return new Promise((resolve, reject) => {
      this._handle(req, (err, res) => {
        if (!res) { // defensive programming
          reject(err || new EthereumRpcError(
            ERROR_CODES.rpc.internal,
            'JsonRpcEngine: Request handler returned neither error nor response.'
          ))
        } else {
          resolve(res)
        }
      })
    })
  }

  _handle (_req, cb) {
    // shallow clone request object
    const req = Object.assign({}, _req)
    // create response obj
    const res = {
      id: req.id,
      jsonrpc: req.jsonrpc
    }
    // process all middleware
    this._runMiddleware(req, res, (err) => {
      // take a clear any responseError
      const responseError = res._originalError
      delete res._originalError
      if (responseError) {
        // ensure no result is present on an errored response
        delete res.result
        // return originalError and response
        return cb(responseError, res)
      }
      // return response
      cb(err, res)
    })
  }

  _runMiddleware (req, res, onDone) {
    // flow
    async.waterfall([
      (cb) => this._runMiddlewareDown(req, res, cb),
      checkForCompletion,
      (returnHandlers, cb) => this._runReturnHandlersUp(returnHandlers, cb),
    ], onDone)

    function checkForCompletion({ isComplete, returnHandlers }, cb) {
      // fail if not completed
      if (!('result' in res) && !('error' in res)) {
        const requestBody = JSON.stringify(req, null, 2)
        const message = 'JsonRpcEngine: Response has no error or result for request:\n' + requestBody
        return cb(new EthereumRpcError(
          ERROR_CODES.rpc.internal, message, req
        ))
      }
      if (!isComplete) {
        const requestBody = JSON.stringify(req, null, 2)
        const message = 'JsonRpcEngine: Nothing ended request:\n' + requestBody
        return cb(new EthereumRpcError(
          ERROR_CODES.rpc.internal, message, req
        ))
      }
      // continue
      return cb(null, returnHandlers)
    }
  }

  // walks down stack of middleware
  _runMiddlewareDown (req, res, onDone) {
    // for climbing back up the stack
    let allReturnHandlers = []
    // flag for stack return
    let isComplete = false

    // down stack of middleware, call and collect optional allReturnHandlers
    async.mapSeries(this._middleware, eachMiddleware, completeRequest)

    // runs an individual middleware
    function eachMiddleware (middleware, cb) {
      // skip middleware if completed
      if (isComplete) return cb()
      // run individual middleware
      middleware(req, res, next, end)

      function next (returnHandler) {
        if (res.error) {
          end(res.error)
        } else {
          // add return handler
          allReturnHandlers.push(returnHandler)
          cb()
        }
      }

      function end (err) {
        // if errored, set the error but dont pass to callback
        const _err = err || (res && res.error)
        // const _err = err
        if (_err) {
          res.error = serializeError(_err)
          res._originalError = _err
        }
        // mark as completed
        isComplete = true
        cb()
      }
    }

    // returns, indicating whether or not it ended
    function completeRequest (err) {
      // this is an internal catastrophic error, not an error from middleware
      if (err) {
        // prepare error message
        res.error = serializeError(err)
        // remove result if present
        delete res.result
        // return error-first and res with err
        return onDone(err, res)
      }
      const returnHandlers = allReturnHandlers.filter(Boolean).reverse()
      onDone(null, { isComplete, returnHandlers })
    }
  }

  // climbs the stack calling return handlers
  _runReturnHandlersUp (returnHandlers, cb) {
    async.eachSeries(returnHandlers, (handler, next) => handler(next), cb)
  }
}

module.exports = RpcEngine

},{"async":126,"eth-json-rpc-errors":96,"safe-event-emitter":334}],104:[function(require,module,exports){
const RpcEngine = require('json-rpc-engine')
const providerFromEngine = require('@trufflesuite/eth-json-rpc-middleware/providerFromEngine')
const createInfuraMiddleware = require('./index')


module.exports = createProvider

function createProvider(opts){
  const engine = new RpcEngine()
  engine.push(createInfuraMiddleware(opts))
  return providerFromEngine(engine)
}

},{"./index":105,"@trufflesuite/eth-json-rpc-middleware/providerFromEngine":118,"json-rpc-engine":103}],105:[function(require,module,exports){
const createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')
const { errors: rpcErrors } = require('eth-json-rpc-errors')
const fetch = require('cross-fetch')

const POST_METHODS = ['eth_call', 'eth_estimateGas', 'eth_sendRawTransaction']
const RETRIABLE_ERRORS = [
  // ignore server overload errors
  'Gateway timeout',
  'ETIMEDOUT',
  'ECONNRESET',
  // ignore server sent html error pages
  // or truncated json responses
  'SyntaxError',
]

module.exports = createInfuraMiddleware
module.exports.fetchConfigFromReq = fetchConfigFromReq

function createInfuraMiddleware(opts = {}) {
  const network = opts.network || 'mainnet'
  const maxAttempts = opts.maxAttempts || 5
  const source = opts.source

  // validate options
  if (!maxAttempts) throw new Error(`Invalid value for 'maxAttempts': "${maxAttempts}" (${typeof maxAttempts})`)

  return createAsyncMiddleware(async (req, res, next) => {
    // retry MAX_ATTEMPTS times, if error matches filter
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        // attempt request
        await performFetch(network, req, res, source)
        // request was successful
        break
      } catch (err) {
        // an error was caught while performing the request
        // if not retriable, resolve with the encountered error
        if (!isRetriableError(err)) {
          // abort with error
          throw err
        }
        // if no more attempts remaining, throw an error
        const remainingAttempts = maxAttempts - attempt
        if (!remainingAttempts) {
          const errMsg = `InfuraProvider - cannot complete request. All retries exhausted.\nOriginal Error:\n${err.toString()}\n\n`
          const retriesExhaustedErr = new Error(errMsg)
          throw retriesExhaustedErr
        }
        // otherwise, ignore error and retry again after timeout
        await timeout(1000)
      }
    }
    // request was handled correctly, end
  })
}

function timeout(length) {
  return new Promise((resolve) => {
    setTimeout(resolve, length)
  })
}

function isRetriableError(err) {
  const errMessage = err.toString()
  return RETRIABLE_ERRORS.some(phrase => errMessage.includes(phrase))
}

async function performFetch(network, req, res, source){
  const { fetchUrl, fetchParams } = fetchConfigFromReq({ network, req, source })
  const response = await fetch(fetchUrl, fetchParams)
  const rawData = await response.text()
  // handle errors
  if (!response.ok) {
    switch (response.status) {
      case 405:
        throw rpcErrors.methodNotFound()

      case 418:
        throw createRatelimitError()

      case 503:
      case 504:
        throw createTimeoutError()

      default:
        throw createInternalError(rawData)
    }
  }

  // special case for now
  if (req.method === 'eth_getBlockByNumber' && rawData === 'Not Found') {
    res.result = null
    return
  }

  // parse JSON
  const data = JSON.parse(rawData)

  // finally return result
  res.result = data.result
  res.error = data.error
}

function fetchConfigFromReq({ network, req, source }) {
  const requestOrigin = req.origin || 'internal'
  const cleanReq = normalizeReq(req)
  const { method, params } = cleanReq

  const fetchParams = {}
  let fetchUrl = `https://api.infura.io/v1/jsonrpc/${network}`
  const isPostMethod = POST_METHODS.includes(method)
  if (isPostMethod) {
    fetchParams.method = 'POST'
    fetchParams.headers = {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    }
    if (source) fetchParams.headers['Infura-Source'] = `${source}/${requestOrigin}`
    fetchParams.body = JSON.stringify(cleanReq)
  } else {
    fetchParams.method = 'GET'
    if (source) {
      fetchParams.headers = {
        'Infura-Source': `${source}/${requestOrigin}`
      }
    }
    const paramsString = encodeURIComponent(JSON.stringify(params))
    fetchUrl += `/${method}?params=${paramsString}`
  }

  return { fetchUrl, fetchParams }
}

// strips out extra keys that could be rejected by strict nodes like parity
function normalizeReq(req) {
  return {
    id: req.id,
    jsonrpc: req.jsonrpc,
    method: req.method,
    params: req.params,
  }
}

function createRatelimitError () {
  let msg = `Request is being rate limited.`
  return createInternalError(msg)
}

function createTimeoutError () {
  let msg = `Gateway timeout. The request took too long to process. `
  msg += `This can happen when querying logs over too wide a block range.`
  return createInternalError(msg)
}

function createInternalError (msg) {
  return rpcErrors.internal(msg)
}

},{"cross-fetch":170,"eth-json-rpc-errors":90,"json-rpc-engine/src/createAsyncMiddleware":102}],106:[function(require,module,exports){
const cacheUtils = require('./cache-utils.js')
const createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')
// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925
const emptyValues = [undefined, null, '\u003cnil\u003e']

module.exports = createBlockCacheMiddleware


function createBlockCacheMiddleware(opts = {}) {
  // validate options
  const { blockTracker } = opts
  if (!blockTracker) throw new Error('createBlockCacheMiddleware - No BlockTracker specified')

  // create caching strategies
  const blockCache = new BlockCacheStrategy()
  const strategies = {
    perma: blockCache,
    block: blockCache,
    fork: blockCache,
  }

  return createAsyncMiddleware(async (req, res, next) => {
    // allow cach to be skipped if so specified
    if (req.skipCache) {
      return next()
    }
    // check type and matching strategy
    const type = cacheUtils.cacheTypeForPayload(req)
    const strategy = strategies[type]
    // If there's no strategy in place, pass it down the chain.
    if (!strategy) {
      return next()
    }
    // If the strategy can't cache this request, ignore it.
    if (!strategy.canCacheRequest(req)) {
      return next()
    }

    // get block reference (number or keyword)
    let blockTag = cacheUtils.blockTagForPayload(req)
    if (!blockTag) blockTag = 'latest'

    // get exact block number
    let requestedBlockNumber
    if (blockTag === 'earliest') {
      // this just exists for symmetry with "latest"
      requestedBlockNumber = '0x00'
    } else if (blockTag === 'latest') {
      // fetch latest block number
      const latestBlockNumber = await blockTracker.getLatestBlock()
      // clear all cache before latest block
      blockCache.clearBefore(latestBlockNumber)
      requestedBlockNumber = latestBlockNumber
    } else {
      // We have a hex number
      requestedBlockNumber = blockTag
    }

    // end on a hit, continue on a miss
    const cacheResult = await strategy.get(req, requestedBlockNumber)
    if (cacheResult === undefined) {
      // cache miss
      // wait for other middleware to handle request
      await next()
      // add result to cache
      await strategy.set(req, requestedBlockNumber, res.result)
    } else {
      // fill in result from cache
      res.result = cacheResult
    }
  })
}


//
// Cache Strategies
//

class BlockCacheStrategy {
  
  constructor () {
    this.cache = {}
  }

  getBlockCacheForPayload (payload, blockNumberHex) {
    const blockNumber = Number.parseInt(blockNumberHex, 16)
    let blockCache = this.cache[blockNumber]
    // create new cache if necesary
    if (!blockCache) {
      const newCache = {}
      this.cache[blockNumber] = newCache
      blockCache = newCache
    }
    return blockCache
  }

  async get (payload, requestedBlockNumber) {
    // lookup block cache
    const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)
    if (!blockCache) return
    // lookup payload in block cache
    const identifier = cacheUtils.cacheIdentifierForPayload(payload, true)
    const cached = blockCache[identifier]
    // may be undefined
    return cached
  }

  async set (payload, requestedBlockNumber, result) {
    // check if we can cached this result
    const canCache = this.canCacheResult(payload, result)
    if (!canCache) return
    // set the value in the cache
    const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)
    const identifier = cacheUtils.cacheIdentifierForPayload(payload, true)
    blockCache[identifier] = result
  }

  canCacheRequest (payload) {
    // check request method
    if (!cacheUtils.canCache(payload)) {
      return false
    }
    // check blockTag
    const blockTag = cacheUtils.blockTagForPayload(payload)
    if (blockTag === 'pending') {
      return false
    }
    // can be cached
    return true
  }

  canCacheResult (payload, result) {
    // never cache empty values (e.g. undefined)
    if (emptyValues.includes(result)) return
    // check if transactions have block reference before caching
    if (['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(payload.method)) {
      if (!result || !result.blockHash || result.blockHash === '0x0000000000000000000000000000000000000000000000000000000000000000') {
        return false
      }
    }
    // otherwise true
    return true
  }

  // removes all block caches with block number lower than `oldBlockHex`
  clearBefore (oldBlockHex){
    const self = this
    const oldBlockNumber = Number.parseInt(oldBlockHex, 16)
    // clear old caches
    Object.keys(self.cache)
      .map(Number)
      .filter(num => num < oldBlockNumber)
      .forEach(num => delete self.cache[num])
  }

}

},{"./cache-utils.js":107,"json-rpc-engine/src/createAsyncMiddleware":116}],107:[function(require,module,exports){
const stringify = require('json-stable-stringify')

module.exports = {
  cacheIdentifierForPayload: cacheIdentifierForPayload,
  canCache: canCache,
  blockTagForPayload: blockTagForPayload,
  paramsWithoutBlockTag: paramsWithoutBlockTag,
  blockTagParamIndex: blockTagParamIndex,
  cacheTypeForPayload: cacheTypeForPayload
}

function cacheIdentifierForPayload (payload, skipBlockRef) {
  const simpleParams = skipBlockRef ? paramsWithoutBlockTag(payload) : payload.params
  if (canCache(payload)) {
    return payload.method + ':' + stringify(simpleParams)
  } else {
    return null
  }
}

function canCache (payload) {
  return cacheTypeForPayload(payload) !== 'never'
}

function blockTagForPayload (payload) {
  let index = blockTagParamIndex(payload)

  // Block tag param not passed.
  if (index >= payload.params.length) {
    return null
  }

  return payload.params[index]
}

function paramsWithoutBlockTag (payload) {
  const index = blockTagParamIndex(payload)

  // Block tag param not passed.
  if (index >= payload.params.length) {
    return payload.params
  }

  // eth_getBlockByNumber has the block tag first, then the optional includeTx? param
  if (payload.method === 'eth_getBlockByNumber') {
    return payload.params.slice(1)
  }

  return payload.params.slice(0, index)
}

function blockTagParamIndex (payload) {
  switch (payload.method) {
    // blockTag is at index 2
    case 'eth_getStorageAt':
      return 2
    // blockTag is at index 1
    case 'eth_getBalance':
    case 'eth_getCode':
    case 'eth_getTransactionCount':
    case 'eth_call':
      return 1
    // blockTag is at index 0
    case 'eth_getBlockByNumber':
      return 0
    // there is no blockTag
    default:
      return undefined
  }
}

function cacheTypeForPayload (payload) {
  switch (payload.method) {
    // cache permanently
    case 'web3_clientVersion':
    case 'web3_sha3':
    case 'eth_protocolVersion':
    case 'eth_getBlockTransactionCountByHash':
    case 'eth_getUncleCountByBlockHash':
    case 'eth_getCode':
    case 'eth_getBlockByHash':
    case 'eth_getTransactionByHash':
    case 'eth_getTransactionByBlockHashAndIndex':
    case 'eth_getTransactionReceipt':
    case 'eth_getUncleByBlockHashAndIndex':
    case 'eth_getCompilers':
    case 'eth_compileLLL':
    case 'eth_compileSolidity':
    case 'eth_compileSerpent':
    case 'shh_version':
    case 'test_permaCache':
      return 'perma'

    // cache until fork
    case 'eth_getBlockByNumber':
    case 'eth_getBlockTransactionCountByNumber':
    case 'eth_getUncleCountByBlockNumber':
    case 'eth_getTransactionByBlockNumberAndIndex':
    case 'eth_getUncleByBlockNumberAndIndex':
    case 'test_forkCache':
      return 'fork'

    // cache for block
    case 'eth_gasPrice':
    case 'eth_blockNumber':
    case 'eth_getBalance':
    case 'eth_getStorageAt':
    case 'eth_getTransactionCount':
    case 'eth_call':
    case 'eth_estimateGas':
    case 'eth_getFilterLogs':
    case 'eth_getLogs':
    case 'test_blockCache':
      return 'block'

    // never cache
    case 'net_version':
    case 'net_peerCount':
    case 'net_listening':
    case 'eth_syncing':
    case 'eth_sign':
    case 'eth_coinbase':
    case 'eth_mining':
    case 'eth_hashrate':
    case 'eth_accounts':
    case 'eth_sendTransaction':
    case 'eth_sendRawTransaction':
    case 'eth_newFilter':
    case 'eth_newBlockFilter':
    case 'eth_newPendingTransactionFilter':
    case 'eth_uninstallFilter':
    case 'eth_getFilterChanges':
    case 'eth_getWork':
    case 'eth_submitWork':
    case 'eth_submitHashrate':
    case 'db_putString':
    case 'db_getString':
    case 'db_putHex':
    case 'db_getHex':
    case 'shh_post':
    case 'shh_newIdentity':
    case 'shh_hasIdentity':
    case 'shh_newGroup':
    case 'shh_addToGroup':
    case 'shh_newFilter':
    case 'shh_uninstallFilter':
    case 'shh_getFilterChanges':
    case 'shh_getMessages':
    case 'test_neverCache':
      return 'never'
  }
}

},{"json-stable-stringify":260}],108:[function(require,module,exports){
(function (global){
const fetch = global.fetch || require('fetch-ponyfill')().fetch
const url = require('url')
const { errors: rpcErrors } = require('eth-json-rpc-errors')
const btoa = require('btoa')
const createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')


module.exports = createFetchMiddleware
module.exports.createFetchConfigFromReq = createFetchConfigFromReq

const RETRIABLE_ERRORS = [
  // ignore server overload errors
  'Gateway timeout',
  'ETIMEDOUT',
  // ignore server sent html error pages
  // or truncated json responses
  'failed to parse response body',
  // ignore errors where http req failed to establish
  'Failed to fetch',
]

function createFetchMiddleware ({ rpcUrl, originHttpHeaderKey }) {
  return createAsyncMiddleware(async (req, res, next) => {
    const { fetchUrl, fetchParams } = createFetchConfigFromReq({ req, rpcUrl, originHttpHeaderKey })

    // attempt request multiple times
    const maxAttempts = 5
    const retryInterval = 1000
    for (let attempt = 0; attempt < maxAttempts; attempt++) {
      try {
        const fetchRes = await fetch(fetchUrl, fetchParams)
        // check for http errrors
        checkForHttpErrors(fetchRes)
        // parse response body
        const rawBody = await fetchRes.text()
        let fetchBody
        try {
          fetchBody = JSON.parse(rawBody)
        } catch (_) {
          throw new Error(`FetchMiddleware - failed to parse response body: "${rawBody}"`)
        }
        const result = parseResponse(fetchRes, fetchBody)
        // set result and exit retry loop
        res.result = result
        return
      } catch (err) {
        const errMsg = err.toString()
        const isRetriable = RETRIABLE_ERRORS.some(phrase => errMsg.includes(phrase))
        // re-throw error if not retriable
        if (!isRetriable) throw err
      }
      // delay before retrying
      await timeout(retryInterval)
    }
  })
}

function checkForHttpErrors (fetchRes) {
  // check for errors
  switch (fetchRes.status) {
    case 405:
      throw rpcErrors.methodNotFound()

    case 418:
      throw createRatelimitError()

    case 503:
    case 504:
      throw createTimeoutError()
  }
}

function parseResponse (fetchRes, body) {
  // check for error code
  if (fetchRes.status !== 200) {
    throw rpcErrors.internal(`Non-200 status code: '${fetchRes.status}'`, body)
  }
  // check for rpc error
  if (body.error) throw rpcErrors.internal(body.error.toString(), body.error)
  // return successful result
  return body.result
}

function createFetchConfigFromReq({ req, rpcUrl, originHttpHeaderKey }) {
  const parsedUrl = url.parse(rpcUrl)
  const fetchUrl = normalizeUrlFromParsed(parsedUrl)

  // prepare payload
  // copy only canonical json rpc properties
  const payload = {
    id: req.id,
    jsonrpc: req.jsonrpc,
    method: req.method,
    params: req.params,
  }

  // extract 'origin' parameter from request
  const originDomain = req.origin

  // serialize request body
  const serializedPayload = JSON.stringify(payload)

  // configure fetch params
  const fetchParams = {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: serializedPayload,
  }

  // encoded auth details as header (not allowed in fetch url)
  if (parsedUrl.auth) {
    const encodedAuth = btoa(parsedUrl.auth)
    fetchParams.headers['Authorization'] = `Basic ${encodedAuth}`
  }

  // optional: add request origin as header
  if (originHttpHeaderKey && originDomain) {
    fetchParams.headers[originHttpHeaderKey] = originDomain
  }

  return { fetchUrl, fetchParams }
}

function normalizeUrlFromParsed(parsedUrl) {
  let result = ''
  result += parsedUrl.protocol
  if (parsedUrl.slashes) result += '//'
  result += parsedUrl.hostname
  if (parsedUrl.port) {
    result += `:${parsedUrl.port}`
  }
  result += `${parsedUrl.path}`
  return result
}

function createRatelimitError () {
  let msg = `Request is being rate limited.`
  return rpcErrors.internal(msg)
}

function createTimeoutError () {
  let msg = `Gateway timeout. The request took too long to process. `
  msg += `This can happen when querying logs over too wide a block range.`
  return rpcErrors.internal(msg)
}

function timeout(duration) {
  return new Promise(resolve => setTimeout(resolve, duration))
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"btoa":164,"eth-json-rpc-errors":110,"fetch-ponyfill":239,"json-rpc-engine/src/createAsyncMiddleware":116,"url":355}],109:[function(require,module,exports){
const clone = require('clone')
const createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')
const cacheIdentifierForPayload = require('./cache-utils').cacheIdentifierForPayload

module.exports = createInflightCache


function createInflightCache () {
  const inflightRequests = {}

  return createAsyncMiddleware(async (req, res, next) => {
    // allow cach to be skipped if so specified
    if (req.skipCache) return next()
    // get cacheId, if cacheable
    const cacheId = cacheIdentifierForPayload(req)
    // if not cacheable, skip
    if (!cacheId) return next()
    // check for matching requests
    let activeRequestHandlers = inflightRequests[cacheId]
    // if found, wait for the active request to be handled
    if (activeRequestHandlers) {
      // setup the response listener and wait for it to be called
      // it will handle copying the result and request fields
      await createActiveRequestHandler(res, activeRequestHandlers)
      return
    }
    // setup response handler array for subsequent requests
    activeRequestHandlers = []
    inflightRequests[cacheId] = activeRequestHandlers
    // allow request to be handled normally
    await next()
    // clear inflight requests
    delete inflightRequests[cacheId]
    // schedule activeRequestHandlers to be handled
    handleActiveRequest(res, activeRequestHandlers)
    // complete
    return
  })

  function createActiveRequestHandler(res, activeRequestHandlers) {
    const { resolve, promise } = deferredPromise()
    activeRequestHandlers.push((handledRes) => {
      // append a copy of the result and error to the response
      res.result = clone(handledRes.result)
      res.error = clone(handledRes.error)
      resolve()
    })
    return promise
  }

  function handleActiveRequest(res, activeRequestHandlers) {
    // use setTimeout so we can resolve our original request first
    setTimeout(() => {
      activeRequestHandlers.forEach((handler) => {
        try {
          handler(res)
        } catch (err) {
          // catch error so all requests are handled correctly
          console.error(err)
        }
      })
    })
  }
}

function deferredPromise() {
  let resolve
  const promise = new Promise(_resolve => { resolve = _resolve })
  return { resolve, promise }
}

},{"./cache-utils":107,"clone":166,"json-rpc-engine/src/createAsyncMiddleware":116}],110:[function(require,module,exports){
arguments[4][90][0].apply(exports,arguments)
},{"./src/classes":111,"./src/errorCodes.json":112,"./src/errors":114,"./src/utils":115,"dup":90}],111:[function(require,module,exports){
arguments[4][91][0].apply(exports,arguments)
},{"dup":91,"fast-safe-stringify":238}],112:[function(require,module,exports){
arguments[4][92][0].apply(exports,arguments)
},{"dup":92}],113:[function(require,module,exports){
arguments[4][93][0].apply(exports,arguments)
},{"dup":93}],114:[function(require,module,exports){
arguments[4][94][0].apply(exports,arguments)
},{"./classes":111,"./errorCodes.json":112,"./utils":115,"dup":94}],115:[function(require,module,exports){
arguments[4][95][0].apply(exports,arguments)
},{"./classes":111,"./errorCodes.json":112,"./errorValues.json":113,"dup":95}],116:[function(require,module,exports){
arguments[4][87][0].apply(exports,arguments)
},{"dup":87,"promise-to-callback":310}],117:[function(require,module,exports){
module.exports = createScaffoldMiddleware

function createScaffoldMiddleware (handlers) {
  return (req, res, next, end) => {
    const handler = handlers[req.method]
    // if no handler, return
    if (handler === undefined) {
      return next()
    }
    // if handler is fn, call as middleware
    if (typeof handler === 'function') {
      return handler(req, res, next, end)
    }
    // if handler is some other value, use as result
    res.result = handler
    end()
  }
}

},{}],118:[function(require,module,exports){
const SafeEventEmitter = require('safe-event-emitter')

module.exports = providerFromEngine

function providerFromEngine (engine) {
  const provider = new SafeEventEmitter()
  // handle both rpc send methods
  provider.sendAsync = engine.handle.bind(engine)
  provider.send = (req, callback) => {
    if (!callback) throw new Error('Web3 Provider - must provider callback to "send" method')
    engine.handle(req, callback)
  }
  // forward notifications
  if (engine.on) {
    engine.on('notification', (message) => {
      provider.emit('data', null, message)
    })
  }
  return provider
}

},{"safe-event-emitter":334}],119:[function(require,module,exports){
// for backwards compat
module.exports = require('json-rpc-engine/src/createScaffoldMiddleware')

},{"json-rpc-engine/src/createScaffoldMiddleware":117}],120:[function(require,module,exports){
const ethUtil = require('ethereumjs-util')
const ethAbi = require('ethereumjs-abi')

module.exports = {

  concatSig: function (v, r, s) {
    const rSig = ethUtil.fromSigned(r)
    const sSig = ethUtil.fromSigned(s)
    const vSig = ethUtil.bufferToInt(v)
    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)
    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)
    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))
    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')
  },

  normalize: function (input) {
    if (!input) return

    if (typeof input === 'number') {
      const buffer = ethUtil.toBuffer(input)
      input = ethUtil.bufferToHex(buffer)
    }

    if (typeof input !== 'string') {
      var msg = 'eth-sig-util.normalize() requires hex string or integer input.'
      msg += ' received ' + (typeof input) + ': ' + input
      throw new Error(msg)
    }

    return ethUtil.addHexPrefix(input.toLowerCase())
  },

  personalSign: function (privateKey, msgParams) {
    var message = ethUtil.toBuffer(msgParams.data)
    var msgHash = ethUtil.hashPersonalMessage(message)
    var sig = ethUtil.ecsign(msgHash, privateKey)
    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))
    return serialized
  },

  recoverPersonalSignature: function (msgParams) {
    const publicKey = getPublicKeyFor(msgParams)
    const sender = ethUtil.publicToAddress(publicKey)
    const senderHex = ethUtil.bufferToHex(sender)
    return senderHex
  },

  extractPublicKey: function (msgParams) {
    const publicKey = getPublicKeyFor(msgParams)
    return '0x' + publicKey.toString('hex')
  },

  typedSignatureHash: function (typedData) {
    const hashBuffer = typedSignatureHash(typedData)
    return ethUtil.bufferToHex(hashBuffer)
  },

  signTypedData: function (privateKey, msgParams) {
    const msgHash = typedSignatureHash(msgParams.data)
    const sig = ethUtil.ecsign(msgHash, privateKey)
    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))
  },

  recoverTypedSignature: function (msgParams) {
    const msgHash = typedSignatureHash(msgParams.data)
    const publicKey = recoverPublicKey(msgHash, msgParams.sig)
    const sender = ethUtil.publicToAddress(publicKey)
    return ethUtil.bufferToHex(sender)
  }

}

/**
 * @param typedData - Array of data along with types, as per EIP712.
 * @returns Buffer
 */
function typedSignatureHash(typedData) {
  const error = new Error('Expect argument to be non-empty array')
  if (typeof typedData !== 'object' || !typedData.length) throw error

  const data = typedData.map(function (e) {
    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value
  })
  const types = typedData.map(function (e) { return e.type })
  const schema = typedData.map(function (e) {
    if (!e.name) throw error
    return e.type + ' ' + e.name
  })

  return ethAbi.soliditySHA3(
    ['bytes32', 'bytes32'],
    [
      ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),
      ethAbi.soliditySHA3(types, data)
    ]
  )
}

function recoverPublicKey(hash, sig) {
  const signature = ethUtil.toBuffer(sig)
  const sigParams = ethUtil.fromRpcSig(signature)
  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)
}

function getPublicKeyFor (msgParams) {
  const message = ethUtil.toBuffer(msgParams.data)
  const msgHash = ethUtil.hashPersonalMessage(message)
  return recoverPublicKey(msgHash, msgParams.sig)
}


function padWithZeroes (number, length) {
  var myString = '' + number
  while (myString.length < length) {
    myString = '0' + myString
  }
  return myString
}

},{"ethereumjs-abi":220,"ethereumjs-util":235}],121:[function(require,module,exports){
(function (global){
'use strict';

var objectAssign = require('object-assign');

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"object-assign":303,"util/":124}],122:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],123:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],124:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":123,"_process":309,"inherits":122}],125:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = asyncify;

var _isObject = require('lodash/isObject');

var _isObject2 = _interopRequireDefault(_isObject);

var _initialParams = require('./internal/initialParams');

var _initialParams2 = _interopRequireDefault(_initialParams);

var _setImmediate = require('./internal/setImmediate');

var _setImmediate2 = _interopRequireDefault(_setImmediate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */
function asyncify(func) {
    return (0, _initialParams2.default)(function (args, callback) {
        var result;
        try {
            result = func.apply(this, args);
        } catch (e) {
            return callback(e);
        }
        // if result is Promise object
        if ((0, _isObject2.default)(result) && typeof result.then === 'function') {
            result.then(function (value) {
                invokeCallback(callback, null, value);
            }, function (err) {
                invokeCallback(callback, err.message ? err : new Error(err));
            });
        } else {
            callback(null, result);
        }
    });
}

function invokeCallback(callback, error, value) {
    try {
        callback(error, value);
    } catch (e) {
        (0, _setImmediate2.default)(rethrow, e);
    }
}

function rethrow(error) {
    throw error;
}
module.exports = exports['default'];
},{"./internal/initialParams":136,"./internal/setImmediate":142,"lodash/isObject":294}],126:[function(require,module,exports){
(function (process,global,setImmediate){
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.async = global.async || {})));
}(this, (function (exports) { 'use strict';

function slice(arrayLike, start) {
    start = start|0;
    var newLen = Math.max(arrayLike.length - start, 0);
    var newArr = Array(newLen);
    for(var idx = 0; idx < newLen; idx++)  {
        newArr[idx] = arrayLike[start + idx];
    }
    return newArr;
}

/**
 * Creates a continuation function with some arguments already applied.
 *
 * Useful as a shorthand when combined with other control flow functions. Any
 * arguments passed to the returned function are added to the arguments
 * originally passed to apply.
 *
 * @name apply
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {Function} fn - The function you want to eventually apply all
 * arguments to. Invokes with (arguments...).
 * @param {...*} arguments... - Any number of arguments to automatically apply
 * when the continuation is called.
 * @returns {Function} the partially-applied function
 * @example
 *
 * // using apply
 * async.parallel([
 *     async.apply(fs.writeFile, 'testfile1', 'test1'),
 *     async.apply(fs.writeFile, 'testfile2', 'test2')
 * ]);
 *
 *
 * // the same process without using apply
 * async.parallel([
 *     function(callback) {
 *         fs.writeFile('testfile1', 'test1', callback);
 *     },
 *     function(callback) {
 *         fs.writeFile('testfile2', 'test2', callback);
 *     }
 * ]);
 *
 * // It's possible to pass any number of additional arguments when calling the
 * // continuation:
 *
 * node> var fn = async.apply(sys.puts, 'one');
 * node> fn('two', 'three');
 * one
 * two
 * three
 */
var apply = function(fn/*, ...args*/) {
    var args = slice(arguments, 1);
    return function(/*callArgs*/) {
        var callArgs = slice(arguments);
        return fn.apply(null, args.concat(callArgs));
    };
};

var initialParams = function (fn) {
    return function (/*...args, callback*/) {
        var args = slice(arguments);
        var callback = args.pop();
        fn.call(this, args, callback);
    };
};

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

function fallback(fn) {
    setTimeout(fn, 0);
}

function wrap(defer) {
    return function (fn/*, ...args*/) {
        var args = slice(arguments, 1);
        defer(function () {
            fn.apply(null, args);
        });
    };
}

var _defer;

if (hasSetImmediate) {
    _defer = setImmediate;
} else if (hasNextTick) {
    _defer = process.nextTick;
} else {
    _defer = fallback;
}

var setImmediate$1 = wrap(_defer);

/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */
function asyncify(func) {
    return initialParams(function (args, callback) {
        var result;
        try {
            result = func.apply(this, args);
        } catch (e) {
            return callback(e);
        }
        // if result is Promise object
        if (isObject(result) && typeof result.then === 'function') {
            result.then(function(value) {
                invokeCallback(callback, null, value);
            }, function(err) {
                invokeCallback(callback, err.message ? err : new Error(err));
            });
        } else {
            callback(null, result);
        }
    });
}

function invokeCallback(callback, error, value) {
    try {
        callback(error, value);
    } catch (e) {
        setImmediate$1(rethrow, e);
    }
}

function rethrow(error) {
    throw error;
}

var supportsSymbol = typeof Symbol === 'function';

function isAsync(fn) {
    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
}

function wrapAsync(asyncFn) {
    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
}

function applyEach$1(eachfn) {
    return function(fns/*, ...args*/) {
        var args = slice(arguments, 1);
        var go = initialParams(function(args, callback) {
            var that = this;
            return eachfn(fns, function (fn, cb) {
                wrapAsync(fn).apply(that, args.concat(cb));
            }, callback);
        });
        if (args.length) {
            return go.apply(this, args);
        }
        else {
            return go;
        }
    };
}

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Built-in value references. */
var Symbol$1 = root.Symbol;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$1.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

/** `Object#toString` result references. */
var nullTag = '[object Null]';
var undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]';
var funcTag = '[object Function]';
var genTag = '[object GeneratorFunction]';
var proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

// A temporary value used to identify if the loop should be broken.
// See #1064, #1293
var breakLoop = {};

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

function once(fn) {
    return function () {
        if (fn === null) return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}

var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;

var getIterator = function (coll) {
    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
};

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]';
var arrayTag = '[object Array]';
var boolTag = '[object Boolean]';
var dateTag = '[object Date]';
var errorTag = '[object Error]';
var funcTag$1 = '[object Function]';
var mapTag = '[object Map]';
var numberTag = '[object Number]';
var objectTag = '[object Object]';
var regexpTag = '[object RegExp]';
var setTag = '[object Set]';
var stringTag = '[object String]';
var weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]';
var dataViewTag = '[object DataView]';
var float32Tag = '[object Float32Array]';
var float64Tag = '[object Float64Array]';
var int8Tag = '[object Int8Array]';
var int16Tag = '[object Int16Array]';
var int32Tag = '[object Int32Array]';
var uint8Tag = '[object Uint8Array]';
var uint8ClampedTag = '[object Uint8ClampedArray]';
var uint16Tag = '[object Uint16Array]';
var uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/** Detect free variable `exports`. */
var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports$1 && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$1.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;

  return value === proto;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

function createArrayIterator(coll) {
    var i = -1;
    var len = coll.length;
    return function next() {
        return ++i < len ? {value: coll[i], key: i} : null;
    }
}

function createES2015Iterator(iterator) {
    var i = -1;
    return function next() {
        var item = iterator.next();
        if (item.done)
            return null;
        i++;
        return {value: item.value, key: i};
    }
}

function createObjectIterator(obj) {
    var okeys = keys(obj);
    var i = -1;
    var len = okeys.length;
    return function next() {
        var key = okeys[++i];
        return i < len ? {value: obj[key], key: key} : null;
    };
}

function iterator(coll) {
    if (isArrayLike(coll)) {
        return createArrayIterator(coll);
    }

    var iterator = getIterator(coll);
    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
}

function onlyOnce(fn) {
    return function() {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}

function _eachOfLimit(limit) {
    return function (obj, iteratee, callback) {
        callback = once(callback || noop);
        if (limit <= 0 || !obj) {
            return callback(null);
        }
        var nextElem = iterator(obj);
        var done = false;
        var running = 0;
        var looping = false;

        function iterateeCallback(err, value) {
            running -= 1;
            if (err) {
                done = true;
                callback(err);
            }
            else if (value === breakLoop || (done && running <= 0)) {
                done = true;
                return callback(null);
            }
            else if (!looping) {
                replenish();
            }
        }

        function replenish () {
            looping = true;
            while (running < limit && !done) {
                var elem = nextElem();
                if (elem === null) {
                    done = true;
                    if (running <= 0) {
                        callback(null);
                    }
                    return;
                }
                running += 1;
                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
            }
            looping = false;
        }

        replenish();
    };
}

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name eachOfLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`. The `key` is the item's key, or index in the case of an
 * array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
function eachOfLimit(coll, limit, iteratee, callback) {
    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);
}

function doLimit(fn, limit) {
    return function (iterable, iteratee, callback) {
        return fn(iterable, limit, iteratee, callback);
    };
}

// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll, iteratee, callback) {
    callback = once(callback || noop);
    var index = 0,
        completed = 0,
        length = coll.length;
    if (length === 0) {
        callback(null);
    }

    function iteratorCallback(err, value) {
        if (err) {
            callback(err);
        } else if ((++completed === length) || value === breakLoop) {
            callback(null);
        }
    }

    for (; index < length; index++) {
        iteratee(coll[index], index, onlyOnce(iteratorCallback));
    }
}

// a generic version of eachOf which can handle array, object, and iterator cases.
var eachOfGeneric = doLimit(eachOfLimit, Infinity);

/**
 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]{@link module:Collections.each}
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @example
 *
 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
 * var configs = {};
 *
 * async.forEachOf(obj, function (value, key, callback) {
 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
 *         if (err) return callback(err);
 *         try {
 *             configs[key] = JSON.parse(data);
 *         } catch (e) {
 *             return callback(e);
 *         }
 *         callback();
 *     });
 * }, function (err) {
 *     if (err) console.error(err.message);
 *     // configs is now a map of JSON data
 *     doSomethingWith(configs);
 * });
 */
var eachOf = function(coll, iteratee, callback) {
    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
    eachOfImplementation(coll, wrapAsync(iteratee), callback);
};

function doParallel(fn) {
    return function (obj, iteratee, callback) {
        return fn(eachOf, obj, wrapAsync(iteratee), callback);
    };
}

function _asyncMap(eachfn, arr, iteratee, callback) {
    callback = callback || noop;
    arr = arr || [];
    var results = [];
    var counter = 0;
    var _iteratee = wrapAsync(iteratee);

    eachfn(arr, function (value, _, callback) {
        var index = counter++;
        _iteratee(value, function (err, v) {
            results[index] = v;
            callback(err);
        });
    }, function (err) {
        callback(err, results);
    });
}

/**
 * Produces a new collection of values by mapping each value in `coll` through
 * the `iteratee` function. The `iteratee` is called with an item from `coll`
 * and a callback for when it has finished processing. Each of these callback
 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
 * `iteratee` passes an error to its callback, the main `callback` (for the
 * `map` function) is immediately called with the error.
 *
 * Note, that since this function applies the `iteratee` to each item in
 * parallel, there is no guarantee that the `iteratee` functions will complete
 * in order. However, the results array will be in the same order as the
 * original `coll`.
 *
 * If `map` is passed an Object, the results will be an Array.  The results
 * will roughly be in the order of the original Objects' keys (but this can
 * vary across JavaScript engines).
 *
 * @name map
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an Array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @example
 *
 * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
 *     // results is now an array of stats for each file
 * });
 */
var map = doParallel(_asyncMap);

/**
 * Applies the provided arguments to each function in the array, calling
 * `callback` after all functions have completed. If you only provide the first
 * argument, `fns`, then it will return a function which lets you pass in the
 * arguments as if it were a single function call. If more arguments are
 * provided, `callback` is required while `args` is still optional.
 *
 * @name applyEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s
 * to all call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {Function} - If only the first argument, `fns`, is provided, it will
 * return a function which lets you pass in the arguments as if it were a single
 * function call. The signature is `(..args, callback)`. If invoked with any
 * arguments, `callback` is required.
 * @example
 *
 * async.applyEach([enableSearch, updateSchema], 'bucket', callback);
 *
 * // partial application example:
 * async.each(
 *     buckets,
 *     async.applyEach([enableSearch, updateSchema]),
 *     callback
 * );
 */
var applyEach = applyEach$1(map);

function doParallelLimit(fn) {
    return function (obj, limit, iteratee, callback) {
        return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);
    };
}

/**
 * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
 *
 * @name mapLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 */
var mapLimit = doParallelLimit(_asyncMap);

/**
 * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
 *
 * @name mapSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 */
var mapSeries = doLimit(mapLimit, 1);

/**
 * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
 *
 * @name applyEachSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.applyEach]{@link module:ControlFlow.applyEach}
 * @category Control Flow
 * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all
 * call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {Function} - If only the first argument is provided, it will return
 * a function which lets you pass in the arguments as if it were a single
 * function call.
 */
var applyEachSeries = applyEach$1(mapSeries);

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

/**
 * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on
 * their requirements. Each function can optionally depend on other functions
 * being completed first, and each function is run as soon as its requirements
 * are satisfied.
 *
 * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence
 * will stop. Further tasks will not execute (so any other functions depending
 * on it will not run), and the main `callback` is immediately called with the
 * error.
 *
 * {@link AsyncFunction}s also receive an object containing the results of functions which
 * have completed so far as the first argument, if they have dependencies. If a
 * task function has no dependencies, it will only be passed a callback.
 *
 * @name auto
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Object} tasks - An object. Each of its properties is either a
 * function or an array of requirements, with the {@link AsyncFunction} itself the last item
 * in the array. The object's key of a property serves as the name of the task
 * defined by that property, i.e. can be used when specifying requirements for
 * other tasks. The function receives one or two arguments:
 * * a `results` object, containing the results of the previously executed
 *   functions, only passed if the task has any dependencies,
 * * a `callback(err, result)` function, which must be called when finished,
 *   passing an `error` (which can be `null`) and the result of the function's
 *   execution.
 * @param {number} [concurrency=Infinity] - An optional `integer` for
 * determining the maximum number of tasks that can be run in parallel. By
 * default, as many as possible.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback. Results are always returned; however, if an
 * error occurs, no further `tasks` will be performed, and the results object
 * will only contain partial results. Invoked with (err, results).
 * @returns undefined
 * @example
 *
 * async.auto({
 *     // this function will just be passed a callback
 *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
 *     showData: ['readData', function(results, cb) {
 *         // results.readData is the file's contents
 *         // ...
 *     }]
 * }, callback);
 *
 * async.auto({
 *     get_data: function(callback) {
 *         console.log('in get_data');
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         console.log('in make_folder');
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: ['get_data', 'make_folder', function(results, callback) {
 *         console.log('in write_file', JSON.stringify(results));
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(results, callback) {
 *         console.log('in email_link', JSON.stringify(results));
 *         // once the file is written let's email a link to it...
 *         // results.write_file contains the filename returned by write_file.
 *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *     }]
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('results = ', results);
 * });
 */
var auto = function (tasks, concurrency, callback) {
    if (typeof concurrency === 'function') {
        // concurrency is optional, shift the args.
        callback = concurrency;
        concurrency = null;
    }
    callback = once(callback || noop);
    var keys$$1 = keys(tasks);
    var numTasks = keys$$1.length;
    if (!numTasks) {
        return callback(null);
    }
    if (!concurrency) {
        concurrency = numTasks;
    }

    var results = {};
    var runningTasks = 0;
    var hasError = false;

    var listeners = Object.create(null);

    var readyTasks = [];

    // for cycle detection:
    var readyToCheck = []; // tasks that have been identified as reachable
    // without the possibility of returning to an ancestor task
    var uncheckedDependencies = {};

    baseForOwn(tasks, function (task, key) {
        if (!isArray(task)) {
            // no dependencies
            enqueueTask(key, [task]);
            readyToCheck.push(key);
            return;
        }

        var dependencies = task.slice(0, task.length - 1);
        var remainingDependencies = dependencies.length;
        if (remainingDependencies === 0) {
            enqueueTask(key, task);
            readyToCheck.push(key);
            return;
        }
        uncheckedDependencies[key] = remainingDependencies;

        arrayEach(dependencies, function (dependencyName) {
            if (!tasks[dependencyName]) {
                throw new Error('async.auto task `' + key +
                    '` has a non-existent dependency `' +
                    dependencyName + '` in ' +
                    dependencies.join(', '));
            }
            addListener(dependencyName, function () {
                remainingDependencies--;
                if (remainingDependencies === 0) {
                    enqueueTask(key, task);
                }
            });
        });
    });

    checkForDeadlocks();
    processQueue();

    function enqueueTask(key, task) {
        readyTasks.push(function () {
            runTask(key, task);
        });
    }

    function processQueue() {
        if (readyTasks.length === 0 && runningTasks === 0) {
            return callback(null, results);
        }
        while(readyTasks.length && runningTasks < concurrency) {
            var run = readyTasks.shift();
            run();
        }

    }

    function addListener(taskName, fn) {
        var taskListeners = listeners[taskName];
        if (!taskListeners) {
            taskListeners = listeners[taskName] = [];
        }

        taskListeners.push(fn);
    }

    function taskComplete(taskName) {
        var taskListeners = listeners[taskName] || [];
        arrayEach(taskListeners, function (fn) {
            fn();
        });
        processQueue();
    }


    function runTask(key, task) {
        if (hasError) return;

        var taskCallback = onlyOnce(function(err, result) {
            runningTasks--;
            if (arguments.length > 2) {
                result = slice(arguments, 1);
            }
            if (err) {
                var safeResults = {};
                baseForOwn(results, function(val, rkey) {
                    safeResults[rkey] = val;
                });
                safeResults[key] = result;
                hasError = true;
                listeners = Object.create(null);

                callback(err, safeResults);
            } else {
                results[key] = result;
                taskComplete(key);
            }
        });

        runningTasks++;
        var taskFn = wrapAsync(task[task.length - 1]);
        if (task.length > 1) {
            taskFn(results, taskCallback);
        } else {
            taskFn(taskCallback);
        }
    }

    function checkForDeadlocks() {
        // Kahn's algorithm
        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm
        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html
        var currentTask;
        var counter = 0;
        while (readyToCheck.length) {
            currentTask = readyToCheck.pop();
            counter++;
            arrayEach(getDependents(currentTask), function (dependent) {
                if (--uncheckedDependencies[dependent] === 0) {
                    readyToCheck.push(dependent);
                }
            });
        }

        if (counter !== numTasks) {
            throw new Error(
                'async.auto cannot execute tasks due to a recursive dependency'
            );
        }
    }

    function getDependents(taskName) {
        var result = [];
        baseForOwn(tasks, function (task, key) {
            if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {
                result.push(key);
            }
        });
        return result;
    }
};

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;
var symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the last unmatched string symbol.
 */
function charsEndIndex(strSymbols, chrSymbols) {
  var index = strSymbols.length;

  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

/**
 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the first unmatched string symbol.
 */
function charsStartIndex(strSymbols, chrSymbols) {
  var index = -1,
      length = strSymbols.length;

  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff';
var rsComboMarksRange = '\\u0300-\\u036f';
var reComboHalfMarksRange = '\\ufe20-\\ufe2f';
var rsComboSymbolsRange = '\\u20d0-\\u20ff';
var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
var rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

/** Used to compose unicode character classes. */
var rsAstralRange$1 = '\\ud800-\\udfff';
var rsComboMarksRange$1 = '\\u0300-\\u036f';
var reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f';
var rsComboSymbolsRange$1 = '\\u20d0-\\u20ff';
var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
var rsVarRange$1 = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange$1 + ']';
var rsCombo = '[' + rsComboRange$1 + ']';
var rsFitz = '\\ud83c[\\udffb-\\udfff]';
var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';
var rsNonAstral = '[^' + rsAstralRange$1 + ']';
var rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
var rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
var rsZWJ$1 = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?';
var rsOptVar = '[' + rsVarRange$1 + ']?';
var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';
var rsSeq = rsOptVar + reOptMod + rsOptJoin;
var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/**
 * Removes leading and trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trim('  abc  ');
 * // => 'abc'
 *
 * _.trim('-_-abc-_-', '_-');
 * // => 'abc'
 *
 * _.map(['  foo  ', '  bar  '], _.trim);
 * // => ['foo', 'bar']
 */
function trim(string, chars, guard) {
  string = toString(string);
  if (string && (guard || chars === undefined)) {
    return string.replace(reTrim, '');
  }
  if (!string || !(chars = baseToString(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      chrSymbols = stringToArray(chars),
      start = charsStartIndex(strSymbols, chrSymbols),
      end = charsEndIndex(strSymbols, chrSymbols) + 1;

  return castSlice(strSymbols, start, end).join('');
}

var FN_ARGS = /^(?:async\s+)?(function)?\s*[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /(=.+)?(\s*)$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;

function parseParams(func) {
    func = func.toString().replace(STRIP_COMMENTS, '');
    func = func.match(FN_ARGS)[2].replace(' ', '');
    func = func ? func.split(FN_ARG_SPLIT) : [];
    func = func.map(function (arg){
        return trim(arg.replace(FN_ARG, ''));
    });
    return func;
}

/**
 * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent
 * tasks are specified as parameters to the function, after the usual callback
 * parameter, with the parameter names matching the names of the tasks it
 * depends on. This can provide even more readable task graphs which can be
 * easier to maintain.
 *
 * If a final callback is specified, the task results are similarly injected,
 * specified as named parameters after the initial error parameter.
 *
 * The autoInject function is purely syntactic sugar and its semantics are
 * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.
 *
 * @name autoInject
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.auto]{@link module:ControlFlow.auto}
 * @category Control Flow
 * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of
 * the form 'func([dependencies...], callback). The object's key of a property
 * serves as the name of the task defined by that property, i.e. can be used
 * when specifying requirements for other tasks.
 * * The `callback` parameter is a `callback(err, result)` which must be called
 *   when finished, passing an `error` (which can be `null`) and the result of
 *   the function's execution. The remaining parameters name other tasks on
 *   which the task is dependent, and the results from those tasks are the
 *   arguments of those parameters.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback, and a `results` object with any completed
 * task results, similar to `auto`.
 * @example
 *
 * //  The example from `auto` can be rewritten as follows:
 * async.autoInject({
 *     get_data: function(callback) {
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: function(get_data, make_folder, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     },
 *     email_link: function(write_file, callback) {
 *         // once the file is written let's email a link to it...
 *         // write_file contains the filename returned by write_file.
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 *
 * // If you are using a JS minifier that mangles parameter names, `autoInject`
 * // will not work with plain functions, since the parameter names will be
 * // collapsed to a single letter identifier.  To work around this, you can
 * // explicitly specify the names of the parameters your task function needs
 * // in an array, similar to Angular.js dependency injection.
 *
 * // This still has an advantage over plain `auto`, since the results a task
 * // depends on are still spread into arguments.
 * async.autoInject({
 *     //...
 *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(write_file, callback) {
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }]
 *     //...
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 */
function autoInject(tasks, callback) {
    var newTasks = {};

    baseForOwn(tasks, function (taskFn, key) {
        var params;
        var fnIsAsync = isAsync(taskFn);
        var hasNoDeps =
            (!fnIsAsync && taskFn.length === 1) ||
            (fnIsAsync && taskFn.length === 0);

        if (isArray(taskFn)) {
            params = taskFn.slice(0, -1);
            taskFn = taskFn[taskFn.length - 1];

            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
        } else if (hasNoDeps) {
            // no dependencies, use the function as-is
            newTasks[key] = taskFn;
        } else {
            params = parseParams(taskFn);
            if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {
                throw new Error("autoInject task functions require explicit parameters.");
            }

            // remove callback param
            if (!fnIsAsync) params.pop();

            newTasks[key] = params.concat(newTask);
        }

        function newTask(results, taskCb) {
            var newArgs = arrayMap(params, function (name) {
                return results[name];
            });
            newArgs.push(taskCb);
            wrapAsync(taskFn).apply(null, newArgs);
        }
    });

    auto(newTasks, callback);
}

// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
// used for queues. This implementation assumes that the node provided by the user can be modified
// to adjust the next and last properties. We implement only the minimal functionality
// for queue support.
function DLL() {
    this.head = this.tail = null;
    this.length = 0;
}

function setInitial(dll, node) {
    dll.length = 1;
    dll.head = dll.tail = node;
}

DLL.prototype.removeLink = function(node) {
    if (node.prev) node.prev.next = node.next;
    else this.head = node.next;
    if (node.next) node.next.prev = node.prev;
    else this.tail = node.prev;

    node.prev = node.next = null;
    this.length -= 1;
    return node;
};

DLL.prototype.empty = function () {
    while(this.head) this.shift();
    return this;
};

DLL.prototype.insertAfter = function(node, newNode) {
    newNode.prev = node;
    newNode.next = node.next;
    if (node.next) node.next.prev = newNode;
    else this.tail = newNode;
    node.next = newNode;
    this.length += 1;
};

DLL.prototype.insertBefore = function(node, newNode) {
    newNode.prev = node.prev;
    newNode.next = node;
    if (node.prev) node.prev.next = newNode;
    else this.head = newNode;
    node.prev = newNode;
    this.length += 1;
};

DLL.prototype.unshift = function(node) {
    if (this.head) this.insertBefore(this.head, node);
    else setInitial(this, node);
};

DLL.prototype.push = function(node) {
    if (this.tail) this.insertAfter(this.tail, node);
    else setInitial(this, node);
};

DLL.prototype.shift = function() {
    return this.head && this.removeLink(this.head);
};

DLL.prototype.pop = function() {
    return this.tail && this.removeLink(this.tail);
};

DLL.prototype.toArray = function () {
    var arr = Array(this.length);
    var curr = this.head;
    for(var idx = 0; idx < this.length; idx++) {
        arr[idx] = curr.data;
        curr = curr.next;
    }
    return arr;
};

DLL.prototype.remove = function (testFn) {
    var curr = this.head;
    while(!!curr) {
        var next = curr.next;
        if (testFn(curr)) {
            this.removeLink(curr);
        }
        curr = next;
    }
    return this;
};

function queue(worker, concurrency, payload) {
    if (concurrency == null) {
        concurrency = 1;
    }
    else if(concurrency === 0) {
        throw new Error('Concurrency must not be zero');
    }

    var _worker = wrapAsync(worker);
    var numRunning = 0;
    var workersList = [];

    var processingScheduled = false;
    function _insert(data, insertAtFront, callback) {
        if (callback != null && typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;
        if (!isArray(data)) {
            data = [data];
        }
        if (data.length === 0 && q.idle()) {
            // call drain immediately if there are no tasks
            return setImmediate$1(function() {
                q.drain();
            });
        }

        for (var i = 0, l = data.length; i < l; i++) {
            var item = {
                data: data[i],
                callback: callback || noop
            };

            if (insertAtFront) {
                q._tasks.unshift(item);
            } else {
                q._tasks.push(item);
            }
        }

        if (!processingScheduled) {
            processingScheduled = true;
            setImmediate$1(function() {
                processingScheduled = false;
                q.process();
            });
        }
    }

    function _next(tasks) {
        return function(err){
            numRunning -= 1;

            for (var i = 0, l = tasks.length; i < l; i++) {
                var task = tasks[i];

                var index = baseIndexOf(workersList, task, 0);
                if (index === 0) {
                    workersList.shift();
                } else if (index > 0) {
                    workersList.splice(index, 1);
                }

                task.callback.apply(task, arguments);

                if (err != null) {
                    q.error(err, task.data);
                }
            }

            if (numRunning <= (q.concurrency - q.buffer) ) {
                q.unsaturated();
            }

            if (q.idle()) {
                q.drain();
            }
            q.process();
        };
    }

    var isProcessing = false;
    var q = {
        _tasks: new DLL(),
        concurrency: concurrency,
        payload: payload,
        saturated: noop,
        unsaturated:noop,
        buffer: concurrency / 4,
        empty: noop,
        drain: noop,
        error: noop,
        started: false,
        paused: false,
        push: function (data, callback) {
            _insert(data, false, callback);
        },
        kill: function () {
            q.drain = noop;
            q._tasks.empty();
        },
        unshift: function (data, callback) {
            _insert(data, true, callback);
        },
        remove: function (testFn) {
            q._tasks.remove(testFn);
        },
        process: function () {
            // Avoid trying to start too many processing operations. This can occur
            // when callbacks resolve synchronously (#1267).
            if (isProcessing) {
                return;
            }
            isProcessing = true;
            while(!q.paused && numRunning < q.concurrency && q._tasks.length){
                var tasks = [], data = [];
                var l = q._tasks.length;
                if (q.payload) l = Math.min(l, q.payload);
                for (var i = 0; i < l; i++) {
                    var node = q._tasks.shift();
                    tasks.push(node);
                    workersList.push(node);
                    data.push(node.data);
                }

                numRunning += 1;

                if (q._tasks.length === 0) {
                    q.empty();
                }

                if (numRunning === q.concurrency) {
                    q.saturated();
                }

                var cb = onlyOnce(_next(tasks));
                _worker(data, cb);
            }
            isProcessing = false;
        },
        length: function () {
            return q._tasks.length;
        },
        running: function () {
            return numRunning;
        },
        workersList: function () {
            return workersList;
        },
        idle: function() {
            return q._tasks.length + numRunning === 0;
        },
        pause: function () {
            q.paused = true;
        },
        resume: function () {
            if (q.paused === false) { return; }
            q.paused = false;
            setImmediate$1(q.process);
        }
    };
    return q;
}

/**
 * A cargo of tasks for the worker function to complete. Cargo inherits all of
 * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.
 * @typedef {Object} CargoObject
 * @memberOf module:ControlFlow
 * @property {Function} length - A function returning the number of items
 * waiting to be processed. Invoke like `cargo.length()`.
 * @property {number} payload - An `integer` for determining how many tasks
 * should be process per round. This property can be changed after a `cargo` is
 * created to alter the payload on-the-fly.
 * @property {Function} push - Adds `task` to the `queue`. The callback is
 * called once the `worker` has finished processing the task. Instead of a
 * single task, an array of `tasks` can be submitted. The respective callback is
 * used for every task in the list. Invoke like `cargo.push(task, [callback])`.
 * @property {Function} saturated - A callback that is called when the
 * `queue.length()` hits the concurrency and further tasks will be queued.
 * @property {Function} empty - A callback that is called when the last item
 * from the `queue` is given to a `worker`.
 * @property {Function} drain - A callback that is called when the last item
 * from the `queue` has returned from the `worker`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke like `cargo.idle()`.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke like `cargo.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke like `cargo.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.
 */

/**
 * Creates a `cargo` object with the specified payload. Tasks added to the
 * cargo will be processed altogether (up to the `payload` limit). If the
 * `worker` is in progress, the task is queued until it becomes available. Once
 * the `worker` has completed some tasks, each callback of those tasks is
 * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
 * for how `cargo` and `queue` work.
 *
 * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
 * at a time, cargo passes an array of tasks to a single worker, repeating
 * when the worker is finished.
 *
 * @name cargo
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An asynchronous function for processing an array
 * of queued tasks. Invoked with `(tasks, callback)`.
 * @param {number} [payload=Infinity] - An optional `integer` for determining
 * how many tasks should be processed per round; if omitted, the default is
 * unlimited.
 * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the cargo and inner queue.
 * @example
 *
 * // create a cargo object with payload 2
 * var cargo = async.cargo(function(tasks, callback) {
 *     for (var i=0; i<tasks.length; i++) {
 *         console.log('hello ' + tasks[i].name);
 *     }
 *     callback();
 * }, 2);
 *
 * // add some items
 * cargo.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * cargo.push({name: 'bar'}, function(err) {
 *     console.log('finished processing bar');
 * });
 * cargo.push({name: 'baz'}, function(err) {
 *     console.log('finished processing baz');
 * });
 */
function cargo(worker, payload) {
    return queue(worker, 1, payload);
}

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
 *
 * @name eachOfSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Invoked with (err).
 */
var eachOfSeries = doLimit(eachOfLimit, 1);

/**
 * Reduces `coll` into a single value using an async `iteratee` to return each
 * successive step. `memo` is the initial state of the reduction. This function
 * only operates in series.
 *
 * For performance reasons, it may make sense to split a call to this function
 * into a parallel map, and then use the normal `Array.prototype.reduce` on the
 * results. This function is for situations where each step in the reduction
 * needs to be async; if you can get the data before reducing it, then it's
 * probably a good idea to do so.
 *
 * @name reduce
 * @static
 * @memberOf module:Collections
 * @method
 * @alias inject
 * @alias foldl
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee complete with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @example
 *
 * async.reduce([1,2,3], 0, function(memo, item, callback) {
 *     // pointless async:
 *     process.nextTick(function() {
 *         callback(null, memo + item)
 *     });
 * }, function(err, result) {
 *     // result is now equal to the last value of memo, which is 6
 * });
 */
function reduce(coll, memo, iteratee, callback) {
    callback = once(callback || noop);
    var _iteratee = wrapAsync(iteratee);
    eachOfSeries(coll, function(x, i, callback) {
        _iteratee(memo, x, function(err, v) {
            memo = v;
            callback(err);
        });
    }, function(err) {
        callback(err, memo);
    });
}

/**
 * Version of the compose function that is more natural to read. Each function
 * consumes the return value of the previous function. It is the equivalent of
 * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name seq
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.compose]{@link module:ControlFlow.compose}
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} a function that composes the `functions` in order
 * @example
 *
 * // Requires lodash (or underscore), express3 and dresende's orm2.
 * // Part of an app, that fetches cats of the logged user.
 * // This example uses `seq` function to avoid overnesting and error
 * // handling clutter.
 * app.get('/cats', function(request, response) {
 *     var User = request.models.User;
 *     async.seq(
 *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
 *         function(user, fn) {
 *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
 *         }
 *     )(req.session.user_id, function (err, cats) {
 *         if (err) {
 *             console.error(err);
 *             response.json({ status: 'error', message: err.message });
 *         } else {
 *             response.json({ status: 'ok', message: 'Cats found', data: cats });
 *         }
 *     });
 * });
 */
function seq(/*...functions*/) {
    var _functions = arrayMap(arguments, wrapAsync);
    return function(/*...args*/) {
        var args = slice(arguments);
        var that = this;

        var cb = args[args.length - 1];
        if (typeof cb == 'function') {
            args.pop();
        } else {
            cb = noop;
        }

        reduce(_functions, args, function(newargs, fn, cb) {
            fn.apply(that, newargs.concat(function(err/*, ...nextargs*/) {
                var nextargs = slice(arguments, 1);
                cb(err, nextargs);
            }));
        },
        function(err, results) {
            cb.apply(that, [err].concat(results));
        });
    };
}

/**
 * Creates a function which is a composition of the passed asynchronous
 * functions. Each function consumes the return value of the function that
 * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
 * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name compose
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} an asynchronous function that is the composed
 * asynchronous `functions`
 * @example
 *
 * function add1(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n + 1);
 *     }, 10);
 * }
 *
 * function mul3(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n * 3);
 *     }, 10);
 * }
 *
 * var add1mul3 = async.compose(mul3, add1);
 * add1mul3(4, function (err, result) {
 *     // result now equals 15
 * });
 */
var compose = function(/*...args*/) {
    return seq.apply(null, slice(arguments).reverse());
};

var _concat = Array.prototype.concat;

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.
 *
 * @name concatLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 */
var concatLimit = function(coll, limit, iteratee, callback) {
    callback = callback || noop;
    var _iteratee = wrapAsync(iteratee);
    mapLimit(coll, limit, function(val, callback) {
        _iteratee(val, function(err /*, ...args*/) {
            if (err) return callback(err);
            return callback(null, slice(arguments, 1));
        });
    }, function(err, mapResults) {
        var result = [];
        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                result = _concat.apply(result, mapResults[i]);
            }
        }

        return callback(err, result);
    });
};

/**
 * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
 * the concatenated list. The `iteratee`s are called in parallel, and the
 * results are concatenated as they return. There is no guarantee that the
 * results array will be returned in the original order of `coll` passed to the
 * `iteratee` function.
 *
 * @name concat
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback(err)] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @example
 *
 * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
 *     // files is now a list of filenames that exist in the 3 directories
 * });
 */
var concat = doLimit(concatLimit, Infinity);

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
 *
 * @name concatSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.
 * The iteratee should complete with an array an array of results.
 * Invoked with (item, callback).
 * @param {Function} [callback(err)] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 */
var concatSeries = doLimit(concatLimit, 1);

/**
 * Returns a function that when called, calls-back with the values provided.
 * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
 * [`auto`]{@link module:ControlFlow.auto}.
 *
 * @name constant
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {...*} arguments... - Any number of arguments to automatically invoke
 * callback with.
 * @returns {AsyncFunction} Returns a function that when invoked, automatically
 * invokes the callback with the previous given arguments.
 * @example
 *
 * async.waterfall([
 *     async.constant(42),
 *     function (value, next) {
 *         // value === 42
 *     },
 *     //...
 * ], callback);
 *
 * async.waterfall([
 *     async.constant(filename, "utf8"),
 *     fs.readFile,
 *     function (fileData, next) {
 *         //...
 *     }
 *     //...
 * ], callback);
 *
 * async.auto({
 *     hostname: async.constant("https://server.net/"),
 *     port: findFreePort,
 *     launchServer: ["hostname", "port", function (options, cb) {
 *         startServer(options, cb);
 *     }],
 *     //...
 * }, callback);
 */
var constant = function(/*...values*/) {
    var values = slice(arguments);
    var args = [null].concat(values);
    return function (/*...ignoredArgs, callback*/) {
        var callback = arguments[arguments.length - 1];
        return callback.apply(this, args);
    };
};

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

function _createTester(check, getResult) {
    return function(eachfn, arr, iteratee, cb) {
        cb = cb || noop;
        var testPassed = false;
        var testResult;
        eachfn(arr, function(value, _, callback) {
            iteratee(value, function(err, result) {
                if (err) {
                    callback(err);
                } else if (check(result) && !testResult) {
                    testPassed = true;
                    testResult = getResult(true, value);
                    callback(null, breakLoop);
                } else {
                    callback();
                }
            });
        }, function(err) {
            if (err) {
                cb(err);
            } else {
                cb(null, testPassed ? testResult : getResult(false));
            }
        });
    };
}

function _findGetResult(v, x) {
    return x;
}

/**
 * Returns the first value in `coll` that passes an async truth test. The
 * `iteratee` is applied in parallel, meaning the first iteratee to return
 * `true` will fire the detect `callback` with that result. That means the
 * result might not be the first item in the original `coll` (in terms of order)
 * that passes the test.

 * If order within the original `coll` is important, then look at
 * [`detectSeries`]{@link module:Collections.detectSeries}.
 *
 * @name detect
 * @static
 * @memberOf module:Collections
 * @method
 * @alias find
 * @category Collections
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @example
 *
 * async.detect(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, result) {
 *     // result now equals the first file in the list that exists
 * });
 */
var detect = doParallel(_createTester(identity, _findGetResult));

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name detectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findLimit
 * @category Collections
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 */
var detectLimit = doParallelLimit(_createTester(identity, _findGetResult));

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
 *
 * @name detectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findSeries
 * @category Collections
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 */
var detectSeries = doLimit(detectLimit, 1);

function consoleFunc(name) {
    return function (fn/*, ...args*/) {
        var args = slice(arguments, 1);
        args.push(function (err/*, ...args*/) {
            var args = slice(arguments, 1);
            if (typeof console === 'object') {
                if (err) {
                    if (console.error) {
                        console.error(err);
                    }
                } else if (console[name]) {
                    arrayEach(args, function (x) {
                        console[name](x);
                    });
                }
            }
        });
        wrapAsync(fn).apply(null, args);
    };
}

/**
 * Logs the result of an [`async` function]{@link AsyncFunction} to the
 * `console` using `console.dir` to display the properties of the resulting object.
 * Only works in Node.js or in browsers that support `console.dir` and
 * `console.error` (such as FF and Chrome).
 * If multiple arguments are returned from the async function,
 * `console.dir` is called on each argument in order.
 *
 * @name dir
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, {hello: name});
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.dir(hello, 'world');
 * {hello: 'world'}
 */
var dir = consoleFunc('dir');

/**
 * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in
 * the order of operations, the arguments `test` and `fn` are switched.
 *
 * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.
 * @name doDuring
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.during]{@link module:ControlFlow.during}
 * @category Control Flow
 * @param {AsyncFunction} fn - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `fn`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `fn`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `fn` has stopped. `callback`
 * will be passed an error if one occurred, otherwise `null`.
 */
function doDuring(fn, test, callback) {
    callback = onlyOnce(callback || noop);
    var _fn = wrapAsync(fn);
    var _test = wrapAsync(test);

    function next(err/*, ...args*/) {
        if (err) return callback(err);
        var args = slice(arguments, 1);
        args.push(check);
        _test.apply(this, args);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (!truth) return callback(null);
        _fn(next);
    }

    check(null, true);

}

/**
 * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
 * the order of operations, the arguments `test` and `iteratee` are switched.
 *
 * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
 *
 * @name doWhilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - A function which is called each time `test`
 * passes. Invoked with (callback).
 * @param {Function} test - synchronous truth test to perform after each
 * execution of `iteratee`. Invoked with any non-error callback results of
 * `iteratee`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped.
 * `callback` will be passed an error and any arguments passed to the final
 * `iteratee`'s callback. Invoked with (err, [results]);
 */
function doWhilst(iteratee, test, callback) {
    callback = onlyOnce(callback || noop);
    var _iteratee = wrapAsync(iteratee);
    var next = function(err/*, ...args*/) {
        if (err) return callback(err);
        var args = slice(arguments, 1);
        if (test.apply(this, args)) return _iteratee(next);
        callback.apply(null, [null].concat(args));
    };
    _iteratee(next);
}

/**
 * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the
 * argument ordering differs from `until`.
 *
 * @name doUntil
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {Function} test - synchronous truth test to perform after each
 * execution of `iteratee`. Invoked with any non-error callback results of
 * `iteratee`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 */
function doUntil(iteratee, test, callback) {
    doWhilst(iteratee, function() {
        return !test.apply(this, arguments);
    }, callback);
}

/**
 * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that
 * is passed a callback in the form of `function (err, truth)`. If error is
 * passed to `test` or `fn`, the main callback is immediately called with the
 * value of the error.
 *
 * @name during
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `fn`. Invoked with (callback).
 * @param {AsyncFunction} fn - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `fn` has stopped. `callback`
 * will be passed an error, if one occurred, otherwise `null`.
 * @example
 *
 * var count = 0;
 *
 * async.during(
 *     function (callback) {
 *         return callback(null, count < 5);
 *     },
 *     function (callback) {
 *         count++;
 *         setTimeout(callback, 1000);
 *     },
 *     function (err) {
 *         // 5 seconds have passed
 *     }
 * );
 */
function during(test, fn, callback) {
    callback = onlyOnce(callback || noop);
    var _fn = wrapAsync(fn);
    var _test = wrapAsync(test);

    function next(err) {
        if (err) return callback(err);
        _test(check);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (!truth) return callback(null);
        _fn(next);
    }

    _test(check);
}

function _withoutIndex(iteratee) {
    return function (value, index, callback) {
        return iteratee(value, callback);
    };
}

/**
 * Applies the function `iteratee` to each item in `coll`, in parallel.
 * The `iteratee` is called with an item from the list, and a callback for when
 * it has finished. If the `iteratee` passes an error to its `callback`, the
 * main `callback` (for the `each` function) is immediately called with the
 * error.
 *
 * Note, that since this function applies `iteratee` to each item in parallel,
 * there is no guarantee that the iteratee functions will complete in order.
 *
 * @name each
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEach
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to
 * each item in `coll`. Invoked with (item, callback).
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOf`.
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @example
 *
 * // assuming openFiles is an array of file names and saveFile is a function
 * // to save the modified contents of that file:
 *
 * async.each(openFiles, saveFile, function(err){
 *   // if any of the saves produced an error, err would equal that error
 * });
 *
 * // assuming openFiles is an array of file names
 * async.each(openFiles, function(file, callback) {
 *
 *     // Perform operation on file here.
 *     console.log('Processing file ' + file);
 *
 *     if( file.length > 32 ) {
 *       console.log('This file name is too long');
 *       callback('File name too long');
 *     } else {
 *       // Do work to process file here
 *       console.log('File processed');
 *       callback();
 *     }
 * }, function(err) {
 *     // if any of the file processing produced an error, err would equal that error
 *     if( err ) {
 *       // One of the iterations produced an error.
 *       // All processing will now stop.
 *       console.log('A file failed to process');
 *     } else {
 *       console.log('All files have been processed successfully');
 *     }
 * });
 */
function eachLimit(coll, iteratee, callback) {
    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}

/**
 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
 *
 * @name eachLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfLimit`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
function eachLimit$1(coll, limit, iteratee, callback) {
    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}

/**
 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
 *
 * @name eachSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfSeries`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
var eachSeries = doLimit(eachLimit$1, 1);

/**
 * Wrap an async function and ensure it calls its callback on a later tick of
 * the event loop.  If the function already calls its callback on a next tick,
 * no extra deferral is added. This is useful for preventing stack overflows
 * (`RangeError: Maximum call stack size exceeded`) and generally keeping
 * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
 * contained. ES2017 `async` functions are returned as-is -- they are immune
 * to Zalgo's corrupting influences, as they always resolve on a later tick.
 *
 * @name ensureAsync
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - an async function, one that expects a node-style
 * callback as its last argument.
 * @returns {AsyncFunction} Returns a wrapped function with the exact same call
 * signature as the function passed in.
 * @example
 *
 * function sometimesAsync(arg, callback) {
 *     if (cache[arg]) {
 *         return callback(null, cache[arg]); // this would be synchronous!!
 *     } else {
 *         doSomeIO(arg, callback); // this IO would be asynchronous
 *     }
 * }
 *
 * // this has a risk of stack overflows if many results are cached in a row
 * async.mapSeries(args, sometimesAsync, done);
 *
 * // this will defer sometimesAsync's callback if necessary,
 * // preventing stack overflows
 * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
 */
function ensureAsync(fn) {
    if (isAsync(fn)) return fn;
    return initialParams(function (args, callback) {
        var sync = true;
        args.push(function () {
            var innerArgs = arguments;
            if (sync) {
                setImmediate$1(function () {
                    callback.apply(null, innerArgs);
                });
            } else {
                callback.apply(null, innerArgs);
            }
        });
        fn.apply(this, args);
        sync = false;
    });
}

function notId(v) {
    return !v;
}

/**
 * Returns `true` if every element in `coll` satisfies an async test. If any
 * iteratee call returns `false`, the main `callback` is immediately called.
 *
 * @name every
 * @static
 * @memberOf module:Collections
 * @method
 * @alias all
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @example
 *
 * async.every(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, result) {
 *     // if result is true then every file exists
 * });
 */
var every = doParallel(_createTester(notId, notId));

/**
 * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
 *
 * @name everyLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 */
var everyLimit = doParallelLimit(_createTester(notId, notId));

/**
 * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
 *
 * @name everySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in series.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 */
var everySeries = doLimit(everyLimit, 1);

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

function filterArray(eachfn, arr, iteratee, callback) {
    var truthValues = new Array(arr.length);
    eachfn(arr, function (x, index, callback) {
        iteratee(x, function (err, v) {
            truthValues[index] = !!v;
            callback(err);
        });
    }, function (err) {
        if (err) return callback(err);
        var results = [];
        for (var i = 0; i < arr.length; i++) {
            if (truthValues[i]) results.push(arr[i]);
        }
        callback(null, results);
    });
}

function filterGeneric(eachfn, coll, iteratee, callback) {
    var results = [];
    eachfn(coll, function (x, index, callback) {
        iteratee(x, function (err, v) {
            if (err) {
                callback(err);
            } else {
                if (v) {
                    results.push({index: index, value: x});
                }
                callback();
            }
        });
    }, function (err) {
        if (err) {
            callback(err);
        } else {
            callback(null, arrayMap(results.sort(function (a, b) {
                return a.index - b.index;
            }), baseProperty('value')));
        }
    });
}

function _filter(eachfn, coll, iteratee, callback) {
    var filter = isArrayLike(coll) ? filterArray : filterGeneric;
    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);
}

/**
 * Returns a new array of all the values in `coll` which pass an async truth
 * test. This operation is performed in parallel, but the results array will be
 * in the same order as the original.
 *
 * @name filter
 * @static
 * @memberOf module:Collections
 * @method
 * @alias select
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @example
 *
 * async.filter(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, results) {
 *     // results now equals an array of the existing files
 * });
 */
var filter = doParallel(_filter);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name filterLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 */
var filterLimit = doParallelLimit(_filter);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
 *
 * @name filterSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results)
 */
var filterSeries = doLimit(filterLimit, 1);

/**
 * Calls the asynchronous function `fn` with a callback parameter that allows it
 * to call itself again, in series, indefinitely.

 * If an error is passed to the callback then `errback` is called with the
 * error, and execution stops, otherwise it will never be called.
 *
 * @name forever
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} fn - an async function to call repeatedly.
 * Invoked with (next).
 * @param {Function} [errback] - when `fn` passes an error to it's callback,
 * this function will be called, and execution stops. Invoked with (err).
 * @example
 *
 * async.forever(
 *     function(next) {
 *         // next is suitable for passing to things that need a callback(err [, whatever]);
 *         // it will result in this function being called again.
 *     },
 *     function(err) {
 *         // if next is called with a value in its first parameter, it will appear
 *         // in here as 'err', and execution will stop.
 *     }
 * );
 */
function forever(fn, errback) {
    var done = onlyOnce(errback || noop);
    var task = wrapAsync(ensureAsync(fn));

    function next(err) {
        if (err) return done(err);
        task(next);
    }
    next();
}

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.
 *
 * @name groupByLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 */
var groupByLimit = function(coll, limit, iteratee, callback) {
    callback = callback || noop;
    var _iteratee = wrapAsync(iteratee);
    mapLimit(coll, limit, function(val, callback) {
        _iteratee(val, function(err, key) {
            if (err) return callback(err);
            return callback(null, {key: key, val: val});
        });
    }, function(err, mapResults) {
        var result = {};
        // from MDN, handle object having an `hasOwnProperty` prop
        var hasOwnProperty = Object.prototype.hasOwnProperty;

        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                var key = mapResults[i].key;
                var val = mapResults[i].val;

                if (hasOwnProperty.call(result, key)) {
                    result[key].push(val);
                } else {
                    result[key] = [val];
                }
            }
        }

        return callback(err, result);
    });
};

/**
 * Returns a new object, where each value corresponds to an array of items, from
 * `coll`, that returned the corresponding key. That is, the keys of the object
 * correspond to the values passed to the `iteratee` callback.
 *
 * Note: Since this function applies the `iteratee` to each item in parallel,
 * there is no guarantee that the `iteratee` functions will complete in order.
 * However, the values for each key in the `result` will be in the same order as
 * the original `coll`. For Objects, the values will roughly be in the order of
 * the original Objects' keys (but this can vary across JavaScript engines).
 *
 * @name groupBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @example
 *
 * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {
 *     db.findById(userId, function(err, user) {
 *         if (err) return callback(err);
 *         return callback(null, user.age);
 *     });
 * }, function(err, result) {
 *     // result is object containing the userIds grouped by age
 *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};
 * });
 */
var groupBy = doLimit(groupByLimit, Infinity);

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.
 *
 * @name groupBySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 */
var groupBySeries = doLimit(groupByLimit, 1);

/**
 * Logs the result of an `async` function to the `console`. Only works in
 * Node.js or in browsers that support `console.log` and `console.error` (such
 * as FF and Chrome). If multiple arguments are returned from the async
 * function, `console.log` is called on each argument in order.
 *
 * @name log
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, 'hello ' + name);
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.log(hello, 'world');
 * 'hello world'
 */
var log = consoleFunc('log');

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name mapValuesLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 */
function mapValuesLimit(obj, limit, iteratee, callback) {
    callback = once(callback || noop);
    var newObj = {};
    var _iteratee = wrapAsync(iteratee);
    eachOfLimit(obj, limit, function(val, key, next) {
        _iteratee(val, key, function (err, result) {
            if (err) return next(err);
            newObj[key] = result;
            next();
        });
    }, function (err) {
        callback(err, newObj);
    });
}

/**
 * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
 *
 * Produces a new Object by mapping each value of `obj` through the `iteratee`
 * function. The `iteratee` is called each `value` and `key` from `obj` and a
 * callback for when it has finished processing. Each of these callbacks takes
 * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
 * passes an error to its callback, the main `callback` (for the `mapValues`
 * function) is immediately called with the error.
 *
 * Note, the order of the keys in the result is not guaranteed.  The keys will
 * be roughly in the order they complete, (but this is very engine-specific)
 *
 * @name mapValues
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @example
 *
 * async.mapValues({
 *     f1: 'file1',
 *     f2: 'file2',
 *     f3: 'file3'
 * }, function (file, key, callback) {
 *   fs.stat(file, callback);
 * }, function(err, result) {
 *     // result is now a map of stats for each file, e.g.
 *     // {
 *     //     f1: [stats for file1],
 *     //     f2: [stats for file2],
 *     //     f3: [stats for file3]
 *     // }
 * });
 */

var mapValues = doLimit(mapValuesLimit, Infinity);

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
 *
 * @name mapValuesSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 */
var mapValuesSeries = doLimit(mapValuesLimit, 1);

function has(obj, key) {
    return key in obj;
}

/**
 * Caches the results of an async function. When creating a hash to store
 * function results against, the callback is omitted from the hash and an
 * optional hash function can be used.
 *
 * If no hash function is specified, the first argument is used as a hash key,
 * which may work reasonably if it is a string or a data type that converts to a
 * distinct string. Note that objects and arrays will not behave reasonably.
 * Neither will cases where the other arguments are significant. In such cases,
 * specify your own hash function.
 *
 * The cache of results is exposed as the `memo` property of the function
 * returned by `memoize`.
 *
 * @name memoize
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function to proxy and cache results from.
 * @param {Function} hasher - An optional function for generating a custom hash
 * for storing results. It has all the arguments applied to it apart from the
 * callback, and must be synchronous.
 * @returns {AsyncFunction} a memoized version of `fn`
 * @example
 *
 * var slow_fn = function(name, callback) {
 *     // do something
 *     callback(null, result);
 * };
 * var fn = async.memoize(slow_fn);
 *
 * // fn can now be used as if it were slow_fn
 * fn('some name', function() {
 *     // callback
 * });
 */
function memoize(fn, hasher) {
    var memo = Object.create(null);
    var queues = Object.create(null);
    hasher = hasher || identity;
    var _fn = wrapAsync(fn);
    var memoized = initialParams(function memoized(args, callback) {
        var key = hasher.apply(null, args);
        if (has(memo, key)) {
            setImmediate$1(function() {
                callback.apply(null, memo[key]);
            });
        } else if (has(queues, key)) {
            queues[key].push(callback);
        } else {
            queues[key] = [callback];
            _fn.apply(null, args.concat(function(/*args*/) {
                var args = slice(arguments);
                memo[key] = args;
                var q = queues[key];
                delete queues[key];
                for (var i = 0, l = q.length; i < l; i++) {
                    q[i].apply(null, args);
                }
            }));
        }
    });
    memoized.memo = memo;
    memoized.unmemoized = fn;
    return memoized;
}

/**
 * Calls `callback` on a later loop around the event loop. In Node.js this just
 * calls `process.nextTick`.  In the browser it will use `setImmediate` if
 * available, otherwise `setTimeout(callback, 0)`, which means other higher
 * priority events may precede the execution of `callback`.
 *
 * This is used internally for browser-compatibility purposes.
 *
 * @name nextTick
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.setImmediate]{@link module:Utils.setImmediate}
 * @category Util
 * @param {Function} callback - The function to call on a later loop around
 * the event loop. Invoked with (args...).
 * @param {...*} args... - any number of additional arguments to pass to the
 * callback on the next tick.
 * @example
 *
 * var call_order = [];
 * async.nextTick(function() {
 *     call_order.push('two');
 *     // call_order now equals ['one','two']
 * });
 * call_order.push('one');
 *
 * async.setImmediate(function (a, b, c) {
 *     // a, b, and c equal 1, 2, and 3
 * }, 1, 2, 3);
 */
var _defer$1;

if (hasNextTick) {
    _defer$1 = process.nextTick;
} else if (hasSetImmediate) {
    _defer$1 = setImmediate;
} else {
    _defer$1 = fallback;
}

var nextTick = wrap(_defer$1);

function _parallel(eachfn, tasks, callback) {
    callback = callback || noop;
    var results = isArrayLike(tasks) ? [] : {};

    eachfn(tasks, function (task, key, callback) {
        wrapAsync(task)(function (err, result) {
            if (arguments.length > 2) {
                result = slice(arguments, 1);
            }
            results[key] = result;
            callback(err);
        });
    }, function (err) {
        callback(err, results);
    });
}

/**
 * Run the `tasks` collection of functions in parallel, without waiting until
 * the previous function has completed. If any of the functions pass an error to
 * its callback, the main `callback` is immediately called with the value of the
 * error. Once the `tasks` have completed, the results are passed to the final
 * `callback` as an array.
 *
 * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
 * parallel execution of code.  If your tasks do not use any timers or perform
 * any I/O, they will actually be executed in series.  Any synchronous setup
 * sections for each task will happen one after the other.  JavaScript remains
 * single-threaded.
 *
 * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
 * execution of other tasks when a task fails.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 * results from {@link async.parallel}.
 *
 * @name parallel
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 *
 * @example
 * async.parallel([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     // the results array will equal ['one','two'] even though
 *     // the second function had a shorter timeout.
 * });
 *
 * // an example using an object instead of an array
 * async.parallel({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     // results is now equals to: {one: 1, two: 2}
 * });
 */
function parallelLimit(tasks, callback) {
    _parallel(eachOf, tasks, callback);
}

/**
 * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name parallelLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.parallel]{@link module:ControlFlow.parallel}
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 */
function parallelLimit$1(tasks, limit, callback) {
    _parallel(_eachOfLimit(limit), tasks, callback);
}

/**
 * A queue of tasks for the worker function to complete.
 * @typedef {Object} QueueObject
 * @memberOf module:ControlFlow
 * @property {Function} length - a function returning the number of items
 * waiting to be processed. Invoke with `queue.length()`.
 * @property {boolean} started - a boolean indicating whether or not any
 * items have been pushed and processed by the queue.
 * @property {Function} running - a function returning the number of items
 * currently being processed. Invoke with `queue.running()`.
 * @property {Function} workersList - a function returning the array of items
 * currently being processed. Invoke with `queue.workersList()`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
 * @property {number} concurrency - an integer for determining how many `worker`
 * functions should be run in parallel. This property can be changed after a
 * `queue` is created to alter the concurrency on-the-fly.
 * @property {Function} push - add a new task to the `queue`. Calls `callback`
 * once the `worker` has finished processing the task. Instead of a single task,
 * a `tasks` array can be submitted. The respective callback is used for every
 * task in the list. Invoke with `queue.push(task, [callback])`,
 * @property {Function} unshift - add a new task to the front of the `queue`.
 * Invoke with `queue.unshift(task, [callback])`.
 * @property {Function} remove - remove items from the queue that match a test
 * function.  The test function will be passed an object with a `data` property,
 * and a `priority` property, if this is a
 * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
 * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
 * `function ({data, priority}) {}` and returns a Boolean.
 * @property {Function} saturated - a callback that is called when the number of
 * running workers hits the `concurrency` limit, and further tasks will be
 * queued.
 * @property {Function} unsaturated - a callback that is called when the number
 * of running workers is less than the `concurrency` & `buffer` limits, and
 * further tasks will not be queued.
 * @property {number} buffer - A minimum threshold buffer in order to say that
 * the `queue` is `unsaturated`.
 * @property {Function} empty - a callback that is called when the last item
 * from the `queue` is given to a `worker`.
 * @property {Function} drain - a callback that is called when the last item
 * from the `queue` has returned from the `worker`.
 * @property {Function} error - a callback that is called when a task errors.
 * Has the signature `function(error, task)`.
 * @property {boolean} paused - a boolean for determining whether the queue is
 * in a paused state.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke with `queue.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. No more tasks
 * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
 */

/**
 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
 * `queue` are processed in parallel (up to the `concurrency` limit). If all
 * `worker`s are in progress, the task is queued until one becomes available.
 * Once a `worker` completes a `task`, that `task`'s callback is called.
 *
 * @name queue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`. Invoked with (task, callback).
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the queue.
 * @example
 *
 * // create a queue object with concurrency 2
 * var q = async.queue(function(task, callback) {
 *     console.log('hello ' + task.name);
 *     callback();
 * }, 2);
 *
 * // assign a callback
 * q.drain = function() {
 *     console.log('all items have been processed');
 * };
 *
 * // add some items to the queue
 * q.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * q.push({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 *
 * // add some items to the queue (batch-wise)
 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
 *     console.log('finished processing item');
 * });
 *
 * // add some items to the front of the queue
 * q.unshift({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 */
var queue$1 = function (worker, concurrency) {
    var _worker = wrapAsync(worker);
    return queue(function (items, cb) {
        _worker(items[0], cb);
    }, concurrency, 1);
};

/**
 * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
 * completed in ascending priority order.
 *
 * @name priorityQueue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`.
 * Invoked with (task, callback).
 * @param {number} concurrency - An `integer` for determining how many `worker`
 * functions should be run in parallel.  If omitted, the concurrency defaults to
 * `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
 * differences between `queue` and `priorityQueue` objects:
 * * `push(task, priority, [callback])` - `priority` should be a number. If an
 *   array of `tasks` is given, all tasks will be assigned the same priority.
 * * The `unshift` method was removed.
 */
var priorityQueue = function(worker, concurrency) {
    // Start with a normal queue
    var q = queue$1(worker, concurrency);

    // Override push to accept second parameter representing priority
    q.push = function(data, priority, callback) {
        if (callback == null) callback = noop;
        if (typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;
        if (!isArray(data)) {
            data = [data];
        }
        if (data.length === 0) {
            // call drain immediately if there are no tasks
            return setImmediate$1(function() {
                q.drain();
            });
        }

        priority = priority || 0;
        var nextNode = q._tasks.head;
        while (nextNode && priority >= nextNode.priority) {
            nextNode = nextNode.next;
        }

        for (var i = 0, l = data.length; i < l; i++) {
            var item = {
                data: data[i],
                priority: priority,
                callback: callback
            };

            if (nextNode) {
                q._tasks.insertBefore(nextNode, item);
            } else {
                q._tasks.push(item);
            }
        }
        setImmediate$1(q.process);
    };

    // Remove unshift function
    delete q.unshift;

    return q;
};

/**
 * Runs the `tasks` array of functions in parallel, without waiting until the
 * previous function has completed. Once any of the `tasks` complete or pass an
 * error to its callback, the main `callback` is immediately called. It's
 * equivalent to `Promise.race()`.
 *
 * @name race
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}
 * to run. Each function can complete with an optional `result` value.
 * @param {Function} callback - A callback to run once any of the functions have
 * completed. This function gets an error or result from the first function that
 * completed. Invoked with (err, result).
 * @returns undefined
 * @example
 *
 * async.race([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // main callback
 * function(err, result) {
 *     // the result will be equal to 'two' as it finishes earlier
 * });
 */
function race(tasks, callback) {
    callback = once(callback || noop);
    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
    if (!tasks.length) return callback();
    for (var i = 0, l = tasks.length; i < l; i++) {
        wrapAsync(tasks[i])(callback);
    }
}

/**
 * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.
 *
 * @name reduceRight
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reduce]{@link module:Collections.reduce}
 * @alias foldr
 * @category Collection
 * @param {Array} array - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee complete with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 */
function reduceRight (array, memo, iteratee, callback) {
    var reversed = slice(array).reverse();
    reduce(reversed, memo, iteratee, callback);
}

/**
 * Wraps the async function in another function that always completes with a
 * result object, even when it errors.
 *
 * The result object has either the property `error` or `value`.
 *
 * @name reflect
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function you want to wrap
 * @returns {Function} - A function that always passes null to it's callback as
 * the error. The second argument to the callback will be an `object` with
 * either an `error` or a `value` property.
 * @example
 *
 * async.parallel([
 *     async.reflect(function(callback) {
 *         // do some stuff ...
 *         callback(null, 'one');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff but error ...
 *         callback('bad stuff happened');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff ...
 *         callback(null, 'two');
 *     })
 * ],
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = 'bad stuff happened'
 *     // results[2].value = 'two'
 * });
 */
function reflect(fn) {
    var _fn = wrapAsync(fn);
    return initialParams(function reflectOn(args, reflectCallback) {
        args.push(function callback(error, cbArg) {
            if (error) {
                reflectCallback(null, { error: error });
            } else {
                var value;
                if (arguments.length <= 2) {
                    value = cbArg;
                } else {
                    value = slice(arguments, 1);
                }
                reflectCallback(null, { value: value });
            }
        });

        return _fn.apply(this, args);
    });
}

/**
 * A helper function that wraps an array or an object of functions with `reflect`.
 *
 * @name reflectAll
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.reflect]{@link module:Utils.reflect}
 * @category Util
 * @param {Array|Object|Iterable} tasks - The collection of
 * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.
 * @returns {Array} Returns an array of async functions, each wrapped in
 * `async.reflect`
 * @example
 *
 * let tasks = [
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         // do some more stuff but error ...
 *         callback(new Error('bad stuff happened'));
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ];
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = Error('bad stuff happened')
 *     // results[2].value = 'two'
 * });
 *
 * // an example using an object instead of an array
 * let tasks = {
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         callback('two');
 *     },
 *     three: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'three');
 *         }, 100);
 *     }
 * };
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results.one.value = 'one'
 *     // results.two.error = 'two'
 *     // results.three.value = 'three'
 * });
 */
function reflectAll(tasks) {
    var results;
    if (isArray(tasks)) {
        results = arrayMap(tasks, reflect);
    } else {
        results = {};
        baseForOwn(tasks, function(task, key) {
            results[key] = reflect.call(this, task);
        });
    }
    return results;
}

function reject$1(eachfn, arr, iteratee, callback) {
    _filter(eachfn, arr, function(value, cb) {
        iteratee(value, function(err, v) {
            cb(err, !v);
        });
    }, callback);
}

/**
 * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
 *
 * @name reject
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @example
 *
 * async.reject(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, results) {
 *     // results now equals an array of missing files
 *     createFiles(results);
 * });
 */
var reject = doParallel(reject$1);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name rejectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 */
var rejectLimit = doParallelLimit(reject$1);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
 *
 * @name rejectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 */
var rejectSeries = doLimit(rejectLimit, 1);

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant$1(value) {
  return function() {
    return value;
  };
}

/**
 * Attempts to get a successful response from `task` no more than `times` times
 * before returning an error. If the task is successful, the `callback` will be
 * passed the result of the successful task. If all attempts fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name retry
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @see [async.retryable]{@link module:ControlFlow.retryable}
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
 * object with `times` and `interval` or a number.
 * * `times` - The number of attempts to make before giving up.  The default
 *   is `5`.
 * * `interval` - The time to wait between retries, in milliseconds.  The
 *   default is `0`. The interval may also be specified as a function of the
 *   retry count (see example).
 * * `errorFilter` - An optional synchronous function that is invoked on
 *   erroneous result. If it returns `true` the retry attempts will continue;
 *   if the function returns `false` the retry flow is aborted with the current
 *   attempt's error and result being returned to the final callback.
 *   Invoked with (err).
 * * If `opts` is a number, the number specifies the number of times to retry,
 *   with the default interval of `0`.
 * @param {AsyncFunction} task - An async function to retry.
 * Invoked with (callback).
 * @param {Function} [callback] - An optional callback which is called when the
 * task has succeeded, or after the final failed attempt. It receives the `err`
 * and `result` arguments of the last attempt at completing the `task`. Invoked
 * with (err, results).
 *
 * @example
 *
 * // The `retry` function can be used as a stand-alone control flow by passing
 * // a callback, as shown below:
 *
 * // try calling apiMethod 3 times
 * async.retry(3, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 3 times, waiting 200 ms between each retry
 * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 10 times with exponential backoff
 * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
 * async.retry({
 *   times: 10,
 *   interval: function(retryCount) {
 *     return 50 * Math.pow(2, retryCount);
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod the default 5 times no delay between each retry
 * async.retry(apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod only when error condition satisfies, all other
 * // errors will abort the retry control flow and return to final callback
 * async.retry({
 *   errorFilter: function(err) {
 *     return err.message === 'Temporary error'; // only retry on a specific error
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // to retry individual methods that are not as reliable within other
 * // control flow functions, use the `retryable` wrapper:
 * async.auto({
 *     users: api.getUsers.bind(api),
 *     payments: async.retryable(3, api.getPayments.bind(api))
 * }, function(err, results) {
 *     // do something with the results
 * });
 *
 */
function retry(opts, task, callback) {
    var DEFAULT_TIMES = 5;
    var DEFAULT_INTERVAL = 0;

    var options = {
        times: DEFAULT_TIMES,
        intervalFunc: constant$1(DEFAULT_INTERVAL)
    };

    function parseTimes(acc, t) {
        if (typeof t === 'object') {
            acc.times = +t.times || DEFAULT_TIMES;

            acc.intervalFunc = typeof t.interval === 'function' ?
                t.interval :
                constant$1(+t.interval || DEFAULT_INTERVAL);

            acc.errorFilter = t.errorFilter;
        } else if (typeof t === 'number' || typeof t === 'string') {
            acc.times = +t || DEFAULT_TIMES;
        } else {
            throw new Error("Invalid arguments for async.retry");
        }
    }

    if (arguments.length < 3 && typeof opts === 'function') {
        callback = task || noop;
        task = opts;
    } else {
        parseTimes(options, opts);
        callback = callback || noop;
    }

    if (typeof task !== 'function') {
        throw new Error("Invalid arguments for async.retry");
    }

    var _task = wrapAsync(task);

    var attempt = 1;
    function retryAttempt() {
        _task(function(err) {
            if (err && attempt++ < options.times &&
                (typeof options.errorFilter != 'function' ||
                    options.errorFilter(err))) {
                setTimeout(retryAttempt, options.intervalFunc(attempt));
            } else {
                callback.apply(null, arguments);
            }
        });
    }

    retryAttempt();
}

/**
 * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method
 * wraps a task and makes it retryable, rather than immediately calling it
 * with retries.
 *
 * @name retryable
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.retry]{@link module:ControlFlow.retry}
 * @category Control Flow
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
 * options, exactly the same as from `retry`
 * @param {AsyncFunction} task - the asynchronous function to wrap.
 * This function will be passed any arguments passed to the returned wrapper.
 * Invoked with (...args, callback).
 * @returns {AsyncFunction} The wrapped function, which when invoked, will
 * retry on an error, based on the parameters specified in `opts`.
 * This function will accept the same parameters as `task`.
 * @example
 *
 * async.auto({
 *     dep1: async.retryable(3, getFromFlakyService),
 *     process: ["dep1", async.retryable(3, function (results, cb) {
 *         maybeProcessData(results.dep1, cb);
 *     })]
 * }, callback);
 */
var retryable = function (opts, task) {
    if (!task) {
        task = opts;
        opts = null;
    }
    var _task = wrapAsync(task);
    return initialParams(function (args, callback) {
        function taskFn(cb) {
            _task.apply(null, args.concat(cb));
        }

        if (opts) retry(opts, taskFn, callback);
        else retry(taskFn, callback);

    });
};

/**
 * Run the functions in the `tasks` collection in series, each one running once
 * the previous function has completed. If any functions in the series pass an
 * error to its callback, no more functions are run, and `callback` is
 * immediately called with the value of the error. Otherwise, `callback`
 * receives an array of results when `tasks` have completed.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function, and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 *  results from {@link async.series}.
 *
 * **Note** that while many implementations preserve the order of object
 * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
 * explicitly states that
 *
 * > The mechanics and order of enumerating the properties is not specified.
 *
 * So if you rely on the order in which your series of functions are executed,
 * and want this to work on all platforms, consider using an array.
 *
 * @name series
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection containing
 * [async functions]{@link AsyncFunction} to run in series.
 * Each function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This function gets a results array (or object)
 * containing all the result arguments passed to the `task` callbacks. Invoked
 * with (err, result).
 * @example
 * async.series([
 *     function(callback) {
 *         // do some stuff ...
 *         callback(null, 'one');
 *     },
 *     function(callback) {
 *         // do some more stuff ...
 *         callback(null, 'two');
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     // results is now equal to ['one', 'two']
 * });
 *
 * async.series({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback){
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     // results is now equal to: {one: 1, two: 2}
 * });
 */
function series(tasks, callback) {
    _parallel(eachOfSeries, tasks, callback);
}

/**
 * Returns `true` if at least one element in the `coll` satisfies an async test.
 * If any iteratee call returns `true`, the main `callback` is immediately
 * called.
 *
 * @name some
 * @static
 * @memberOf module:Collections
 * @method
 * @alias any
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @example
 *
 * async.some(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, result) {
 *     // if result is true then at least one of the files exists
 * });
 */
var some = doParallel(_createTester(Boolean, identity));

/**
 * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
 *
 * @name someLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anyLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 */
var someLimit = doParallelLimit(_createTester(Boolean, identity));

/**
 * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
 *
 * @name someSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anySeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in series.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 */
var someSeries = doLimit(someLimit, 1);

/**
 * Sorts a list by the results of running each `coll` value through an async
 * `iteratee`.
 *
 * @name sortBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a value to use as the sort criteria as
 * its `result`.
 * Invoked with (item, callback).
 * @param {Function} callback - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is the items
 * from the original `coll` sorted by the values returned by the `iteratee`
 * calls. Invoked with (err, results).
 * @example
 *
 * async.sortBy(['file1','file2','file3'], function(file, callback) {
 *     fs.stat(file, function(err, stats) {
 *         callback(err, stats.mtime);
 *     });
 * }, function(err, results) {
 *     // results is now the original array of files sorted by
 *     // modified date
 * });
 *
 * // By modifying the callback parameter the
 * // sorting order can be influenced:
 *
 * // ascending order
 * async.sortBy([1,9,3,5], function(x, callback) {
 *     callback(null, x);
 * }, function(err,result) {
 *     // result callback
 * });
 *
 * // descending order
 * async.sortBy([1,9,3,5], function(x, callback) {
 *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around
 * }, function(err,result) {
 *     // result callback
 * });
 */
function sortBy (coll, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    map(coll, function (x, callback) {
        _iteratee(x, function (err, criteria) {
            if (err) return callback(err);
            callback(null, {value: x, criteria: criteria});
        });
    }, function (err, results) {
        if (err) return callback(err);
        callback(null, arrayMap(results.sort(comparator), baseProperty('value')));
    });

    function comparator(left, right) {
        var a = left.criteria, b = right.criteria;
        return a < b ? -1 : a > b ? 1 : 0;
    }
}

/**
 * Sets a time limit on an asynchronous function. If the function does not call
 * its callback within the specified milliseconds, it will be called with a
 * timeout error. The code property for the error object will be `'ETIMEDOUT'`.
 *
 * @name timeout
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} asyncFn - The async function to limit in time.
 * @param {number} milliseconds - The specified time limit.
 * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)
 * to timeout Error for more information..
 * @returns {AsyncFunction} Returns a wrapped function that can be used with any
 * of the control flow functions.
 * Invoke this function with the same parameters as you would `asyncFunc`.
 * @example
 *
 * function myFunction(foo, callback) {
 *     doAsyncTask(foo, function(err, data) {
 *         // handle errors
 *         if (err) return callback(err);
 *
 *         // do some stuff ...
 *
 *         // return processed data
 *         return callback(null, data);
 *     });
 * }
 *
 * var wrapped = async.timeout(myFunction, 1000);
 *
 * // call `wrapped` as you would `myFunction`
 * wrapped({ bar: 'bar' }, function(err, data) {
 *     // if `myFunction` takes < 1000 ms to execute, `err`
 *     // and `data` will have their expected values
 *
 *     // else `err` will be an Error with the code 'ETIMEDOUT'
 * });
 */
function timeout(asyncFn, milliseconds, info) {
    var fn = wrapAsync(asyncFn);

    return initialParams(function (args, callback) {
        var timedOut = false;
        var timer;

        function timeoutCallback() {
            var name = asyncFn.name || 'anonymous';
            var error  = new Error('Callback function "' + name + '" timed out.');
            error.code = 'ETIMEDOUT';
            if (info) {
                error.info = info;
            }
            timedOut = true;
            callback(error);
        }

        args.push(function () {
            if (!timedOut) {
                callback.apply(null, arguments);
                clearTimeout(timer);
            }
        });

        // setup timer and call original function
        timer = setTimeout(timeoutCallback, milliseconds);
        fn.apply(null, args);
    });
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil;
var nativeMax = Math.max;

/**
 * The base implementation of `_.range` and `_.rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */
function baseRange(start, end, step, fromRight) {
  var index = -1,
      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
      result = Array(length);

  while (length--) {
    result[fromRight ? length : ++index] = start;
    start += step;
  }
  return result;
}

/**
 * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name timesLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} count - The number of times to run the function.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see [async.map]{@link module:Collections.map}.
 */
function timeLimit(count, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);
}

/**
 * Calls the `iteratee` function `n` times, and accumulates results in the same
 * manner you would use with [map]{@link module:Collections.map}.
 *
 * @name times
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 * @example
 *
 * // Pretend this is some complicated async factory
 * var createUser = function(id, callback) {
 *     callback(null, {
 *         id: 'user' + id
 *     });
 * };
 *
 * // generate 5 users
 * async.times(5, function(n, next) {
 *     createUser(n, function(err, user) {
 *         next(err, user);
 *     });
 * }, function(err, users) {
 *     // we should now have 5 users
 * });
 */
var times = doLimit(timeLimit, Infinity);

/**
 * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
 *
 * @name timesSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 */
var timesSeries = doLimit(timeLimit, 1);

/**
 * A relative of `reduce`.  Takes an Object or Array, and iterates over each
 * element in series, each step potentially mutating an `accumulator` value.
 * The type of the accumulator defaults to the type of collection passed in.
 *
 * @name transform
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {*} [accumulator] - The initial state of the transform.  If omitted,
 * it will default to an empty Object or Array, depending on the type of `coll`
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * collection that potentially modifies the accumulator.
 * Invoked with (accumulator, item, key, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the transformed accumulator.
 * Invoked with (err, result).
 * @example
 *
 * async.transform([1,2,3], function(acc, item, index, callback) {
 *     // pointless async:
 *     process.nextTick(function() {
 *         acc.push(item * 2)
 *         callback(null)
 *     });
 * }, function(err, result) {
 *     // result is now equal to [2, 4, 6]
 * });
 *
 * @example
 *
 * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {
 *     setImmediate(function () {
 *         obj[key] = val * 2;
 *         callback();
 *     })
 * }, function (err, result) {
 *     // result is equal to {a: 2, b: 4, c: 6}
 * })
 */
function transform (coll, accumulator, iteratee, callback) {
    if (arguments.length <= 3) {
        callback = iteratee;
        iteratee = accumulator;
        accumulator = isArray(coll) ? [] : {};
    }
    callback = once(callback || noop);
    var _iteratee = wrapAsync(iteratee);

    eachOf(coll, function(v, k, cb) {
        _iteratee(accumulator, v, k, cb);
    }, function(err) {
        callback(err, accumulator);
    });
}

/**
 * It runs each task in series but stops whenever any of the functions were
 * successful. If one of the tasks were successful, the `callback` will be
 * passed the result of the successful task. If all tasks fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name tryEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection containing functions to
 * run, each function is passed a `callback(err, result)` it must call on
 * completion with an error `err` (which can be `null`) and an optional `result`
 * value.
 * @param {Function} [callback] - An optional callback which is called when one
 * of the tasks has succeeded, or all have failed. It receives the `err` and
 * `result` arguments of the last attempt at completing the `task`. Invoked with
 * (err, results).
 * @example
 * async.tryEach([
 *     function getDataFromFirstWebsite(callback) {
 *         // Try getting the data from the first website
 *         callback(err, data);
 *     },
 *     function getDataFromSecondWebsite(callback) {
 *         // First website failed,
 *         // Try getting the data from the backup website
 *         callback(err, data);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     Now do something with the data.
 * });
 *
 */
function tryEach(tasks, callback) {
    var error = null;
    var result;
    callback = callback || noop;
    eachSeries(tasks, function(task, callback) {
        wrapAsync(task)(function (err, res/*, ...args*/) {
            if (arguments.length > 2) {
                result = slice(arguments, 1);
            } else {
                result = res;
            }
            error = err;
            callback(!err);
        });
    }, function () {
        callback(error, result);
    });
}

/**
 * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
 * unmemoized form. Handy for testing.
 *
 * @name unmemoize
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.memoize]{@link module:Utils.memoize}
 * @category Util
 * @param {AsyncFunction} fn - the memoized function
 * @returns {AsyncFunction} a function that calls the original unmemoized function
 */
function unmemoize(fn) {
    return function () {
        return (fn.unmemoized || fn).apply(null, arguments);
    };
}

/**
 * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs.
 *
 * @name whilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Function} test - synchronous truth test to perform before each
 * execution of `iteratee`. Invoked with ().
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns undefined
 * @example
 *
 * var count = 0;
 * async.whilst(
 *     function() { return count < 5; },
 *     function(callback) {
 *         count++;
 *         setTimeout(function() {
 *             callback(null, count);
 *         }, 1000);
 *     },
 *     function (err, n) {
 *         // 5 seconds have passed, n = 5
 *     }
 * );
 */
function whilst(test, iteratee, callback) {
    callback = onlyOnce(callback || noop);
    var _iteratee = wrapAsync(iteratee);
    if (!test()) return callback(null);
    var next = function(err/*, ...args*/) {
        if (err) return callback(err);
        if (test()) return _iteratee(next);
        var args = slice(arguments, 1);
        callback.apply(null, [null].concat(args));
    };
    _iteratee(next);
}

/**
 * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs. `callback` will be passed an error and any
 * arguments passed to the final `iteratee`'s callback.
 *
 * The inverse of [whilst]{@link module:ControlFlow.whilst}.
 *
 * @name until
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {Function} test - synchronous truth test to perform before each
 * execution of `iteratee`. Invoked with ().
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 */
function until(test, iteratee, callback) {
    whilst(function() {
        return !test.apply(this, arguments);
    }, iteratee, callback);
}

/**
 * Runs the `tasks` array of functions in series, each passing their results to
 * the next in the array. However, if any of the `tasks` pass an error to their
 * own callback, the next function is not executed, and the main `callback` is
 * immediately called with the error.
 *
 * @name waterfall
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
 * to run.
 * Each function should complete with any number of `result` values.
 * The `result` values will be passed as arguments, in order, to the next task.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This will be passed the results of the last task's
 * callback. Invoked with (err, [results]).
 * @returns undefined
 * @example
 *
 * async.waterfall([
 *     function(callback) {
 *         callback(null, 'one', 'two');
 *     },
 *     function(arg1, arg2, callback) {
 *         // arg1 now equals 'one' and arg2 now equals 'two'
 *         callback(null, 'three');
 *     },
 *     function(arg1, callback) {
 *         // arg1 now equals 'three'
 *         callback(null, 'done');
 *     }
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 *
 * // Or, with named functions:
 * async.waterfall([
 *     myFirstFunction,
 *     mySecondFunction,
 *     myLastFunction,
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 * function myFirstFunction(callback) {
 *     callback(null, 'one', 'two');
 * }
 * function mySecondFunction(arg1, arg2, callback) {
 *     // arg1 now equals 'one' and arg2 now equals 'two'
 *     callback(null, 'three');
 * }
 * function myLastFunction(arg1, callback) {
 *     // arg1 now equals 'three'
 *     callback(null, 'done');
 * }
 */
var waterfall = function(tasks, callback) {
    callback = once(callback || noop);
    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
    if (!tasks.length) return callback();
    var taskIndex = 0;

    function nextTask(args) {
        var task = wrapAsync(tasks[taskIndex++]);
        args.push(onlyOnce(next));
        task.apply(null, args);
    }

    function next(err/*, ...args*/) {
        if (err || taskIndex === tasks.length) {
            return callback.apply(null, arguments);
        }
        nextTask(slice(arguments, 1));
    }

    nextTask([]);
};

/**
 * An "async function" in the context of Async is an asynchronous function with
 * a variable number of parameters, with the final parameter being a callback.
 * (`function (arg1, arg2, ..., callback) {}`)
 * The final callback is of the form `callback(err, results...)`, which must be
 * called once the function is completed.  The callback should be called with a
 * Error as its first argument to signal that an error occurred.
 * Otherwise, if no error occurred, it should be called with `null` as the first
 * argument, and any additional `result` arguments that may apply, to signal
 * successful completion.
 * The callback must be called exactly once, ideally on a later tick of the
 * JavaScript event loop.
 *
 * This type of function is also referred to as a "Node-style async function",
 * or a "continuation passing-style function" (CPS). Most of the methods of this
 * library are themselves CPS/Node-style async functions, or functions that
 * return CPS/Node-style async functions.
 *
 * Wherever we accept a Node-style async function, we also directly accept an
 * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.
 * In this case, the `async` function will not be passed a final callback
 * argument, and any thrown error will be used as the `err` argument of the
 * implicit callback, and the return value will be used as the `result` value.
 * (i.e. a `rejected` of the returned Promise becomes the `err` callback
 * argument, and a `resolved` value becomes the `result`.)
 *
 * Note, due to JavaScript limitations, we can only detect native `async`
 * functions and not transpilied implementations.
 * Your environment must have `async`/`await` support for this to work.
 * (e.g. Node > v7.6, or a recent version of a modern browser).
 * If you are using `async` functions through a transpiler (e.g. Babel), you
 * must still wrap the function with [asyncify]{@link module:Utils.asyncify},
 * because the `async function` will be compiled to an ordinary function that
 * returns a promise.
 *
 * @typedef {Function} AsyncFunction
 * @static
 */

/**
 * Async is a utility module which provides straight-forward, powerful functions
 * for working with asynchronous JavaScript. Although originally designed for
 * use with [Node.js](http://nodejs.org) and installable via
 * `npm install --save async`, it can also be used directly in the browser.
 * @module async
 * @see AsyncFunction
 */


/**
 * A collection of `async` functions for manipulating collections, such as
 * arrays and objects.
 * @module Collections
 */

/**
 * A collection of `async` functions for controlling the flow through a script.
 * @module ControlFlow
 */

/**
 * A collection of `async` utility functions.
 * @module Utils
 */

var index = {
    apply: apply,
    applyEach: applyEach,
    applyEachSeries: applyEachSeries,
    asyncify: asyncify,
    auto: auto,
    autoInject: autoInject,
    cargo: cargo,
    compose: compose,
    concat: concat,
    concatLimit: concatLimit,
    concatSeries: concatSeries,
    constant: constant,
    detect: detect,
    detectLimit: detectLimit,
    detectSeries: detectSeries,
    dir: dir,
    doDuring: doDuring,
    doUntil: doUntil,
    doWhilst: doWhilst,
    during: during,
    each: eachLimit,
    eachLimit: eachLimit$1,
    eachOf: eachOf,
    eachOfLimit: eachOfLimit,
    eachOfSeries: eachOfSeries,
    eachSeries: eachSeries,
    ensureAsync: ensureAsync,
    every: every,
    everyLimit: everyLimit,
    everySeries: everySeries,
    filter: filter,
    filterLimit: filterLimit,
    filterSeries: filterSeries,
    forever: forever,
    groupBy: groupBy,
    groupByLimit: groupByLimit,
    groupBySeries: groupBySeries,
    log: log,
    map: map,
    mapLimit: mapLimit,
    mapSeries: mapSeries,
    mapValues: mapValues,
    mapValuesLimit: mapValuesLimit,
    mapValuesSeries: mapValuesSeries,
    memoize: memoize,
    nextTick: nextTick,
    parallel: parallelLimit,
    parallelLimit: parallelLimit$1,
    priorityQueue: priorityQueue,
    queue: queue$1,
    race: race,
    reduce: reduce,
    reduceRight: reduceRight,
    reflect: reflect,
    reflectAll: reflectAll,
    reject: reject,
    rejectLimit: rejectLimit,
    rejectSeries: rejectSeries,
    retry: retry,
    retryable: retryable,
    seq: seq,
    series: series,
    setImmediate: setImmediate$1,
    some: some,
    someLimit: someLimit,
    someSeries: someSeries,
    sortBy: sortBy,
    timeout: timeout,
    times: times,
    timesLimit: timeLimit,
    timesSeries: timesSeries,
    transform: transform,
    tryEach: tryEach,
    unmemoize: unmemoize,
    until: until,
    waterfall: waterfall,
    whilst: whilst,

    // aliases
    all: every,
    allLimit: everyLimit,
    allSeries: everySeries,
    any: some,
    anyLimit: someLimit,
    anySeries: someSeries,
    find: detect,
    findLimit: detectLimit,
    findSeries: detectSeries,
    forEach: eachLimit,
    forEachSeries: eachSeries,
    forEachLimit: eachLimit$1,
    forEachOf: eachOf,
    forEachOfSeries: eachOfSeries,
    forEachOfLimit: eachOfLimit,
    inject: reduce,
    foldl: reduce,
    foldr: reduceRight,
    select: filter,
    selectLimit: filterLimit,
    selectSeries: filterSeries,
    wrapSync: asyncify
};

exports['default'] = index;
exports.apply = apply;
exports.applyEach = applyEach;
exports.applyEachSeries = applyEachSeries;
exports.asyncify = asyncify;
exports.auto = auto;
exports.autoInject = autoInject;
exports.cargo = cargo;
exports.compose = compose;
exports.concat = concat;
exports.concatLimit = concatLimit;
exports.concatSeries = concatSeries;
exports.constant = constant;
exports.detect = detect;
exports.detectLimit = detectLimit;
exports.detectSeries = detectSeries;
exports.dir = dir;
exports.doDuring = doDuring;
exports.doUntil = doUntil;
exports.doWhilst = doWhilst;
exports.during = during;
exports.each = eachLimit;
exports.eachLimit = eachLimit$1;
exports.eachOf = eachOf;
exports.eachOfLimit = eachOfLimit;
exports.eachOfSeries = eachOfSeries;
exports.eachSeries = eachSeries;
exports.ensureAsync = ensureAsync;
exports.every = every;
exports.everyLimit = everyLimit;
exports.everySeries = everySeries;
exports.filter = filter;
exports.filterLimit = filterLimit;
exports.filterSeries = filterSeries;
exports.forever = forever;
exports.groupBy = groupBy;
exports.groupByLimit = groupByLimit;
exports.groupBySeries = groupBySeries;
exports.log = log;
exports.map = map;
exports.mapLimit = mapLimit;
exports.mapSeries = mapSeries;
exports.mapValues = mapValues;
exports.mapValuesLimit = mapValuesLimit;
exports.mapValuesSeries = mapValuesSeries;
exports.memoize = memoize;
exports.nextTick = nextTick;
exports.parallel = parallelLimit;
exports.parallelLimit = parallelLimit$1;
exports.priorityQueue = priorityQueue;
exports.queue = queue$1;
exports.race = race;
exports.reduce = reduce;
exports.reduceRight = reduceRight;
exports.reflect = reflect;
exports.reflectAll = reflectAll;
exports.reject = reject;
exports.rejectLimit = rejectLimit;
exports.rejectSeries = rejectSeries;
exports.retry = retry;
exports.retryable = retryable;
exports.seq = seq;
exports.series = series;
exports.setImmediate = setImmediate$1;
exports.some = some;
exports.someLimit = someLimit;
exports.someSeries = someSeries;
exports.sortBy = sortBy;
exports.timeout = timeout;
exports.times = times;
exports.timesLimit = timeLimit;
exports.timesSeries = timesSeries;
exports.transform = transform;
exports.tryEach = tryEach;
exports.unmemoize = unmemoize;
exports.until = until;
exports.waterfall = waterfall;
exports.whilst = whilst;
exports.all = every;
exports.allLimit = everyLimit;
exports.allSeries = everySeries;
exports.any = some;
exports.anyLimit = someLimit;
exports.anySeries = someSeries;
exports.find = detect;
exports.findLimit = detectLimit;
exports.findSeries = detectSeries;
exports.forEach = eachLimit;
exports.forEachSeries = eachSeries;
exports.forEachLimit = eachLimit$1;
exports.forEachOf = eachOf;
exports.forEachOfSeries = eachOfSeries;
exports.forEachOfLimit = eachOfLimit;
exports.inject = reduce;
exports.foldl = reduce;
exports.foldr = reduceRight;
exports.select = filter;
exports.selectLimit = filterLimit;
exports.selectSeries = filterSeries;
exports.wrapSync = asyncify;

Object.defineProperty(exports, '__esModule', { value: true });

})));

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)
},{"_process":309,"timers":354}],127:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = eachLimit;

var _eachOfLimit = require('./internal/eachOfLimit');

var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

var _withoutIndex = require('./internal/withoutIndex');

var _withoutIndex2 = _interopRequireDefault(_withoutIndex);

var _wrapAsync = require('./internal/wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
 *
 * @name eachLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfLimit`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
function eachLimit(coll, limit, iteratee, callback) {
  (0, _eachOfLimit2.default)(limit)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
}
module.exports = exports['default'];
},{"./internal/eachOfLimit":134,"./internal/withoutIndex":144,"./internal/wrapAsync":145}],128:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (coll, iteratee, callback) {
    var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
    eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
};

var _isArrayLike = require('lodash/isArrayLike');

var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

var _breakLoop = require('./internal/breakLoop');

var _breakLoop2 = _interopRequireDefault(_breakLoop);

var _eachOfLimit = require('./eachOfLimit');

var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

var _doLimit = require('./internal/doLimit');

var _doLimit2 = _interopRequireDefault(_doLimit);

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _once = require('./internal/once');

var _once2 = _interopRequireDefault(_once);

var _onlyOnce = require('./internal/onlyOnce');

var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

var _wrapAsync = require('./internal/wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll, iteratee, callback) {
    callback = (0, _once2.default)(callback || _noop2.default);
    var index = 0,
        completed = 0,
        length = coll.length;
    if (length === 0) {
        callback(null);
    }

    function iteratorCallback(err, value) {
        if (err) {
            callback(err);
        } else if (++completed === length || value === _breakLoop2.default) {
            callback(null);
        }
    }

    for (; index < length; index++) {
        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
    }
}

// a generic version of eachOf which can handle array, object, and iterator cases.
var eachOfGeneric = (0, _doLimit2.default)(_eachOfLimit2.default, Infinity);

/**
 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]{@link module:Collections.each}
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @example
 *
 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
 * var configs = {};
 *
 * async.forEachOf(obj, function (value, key, callback) {
 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
 *         if (err) return callback(err);
 *         try {
 *             configs[key] = JSON.parse(data);
 *         } catch (e) {
 *             return callback(e);
 *         }
 *         callback();
 *     });
 * }, function (err) {
 *     if (err) console.error(err.message);
 *     // configs is now a map of JSON data
 *     doSomethingWith(configs);
 * });
 */
module.exports = exports['default'];
},{"./eachOfLimit":129,"./internal/breakLoop":131,"./internal/doLimit":132,"./internal/once":139,"./internal/onlyOnce":140,"./internal/wrapAsync":145,"lodash/isArrayLike":290,"lodash/noop":298}],129:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = eachOfLimit;

var _eachOfLimit2 = require('./internal/eachOfLimit');

var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);

var _wrapAsync = require('./internal/wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name eachOfLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`. The `key` is the item's key, or index in the case of an
 * array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
function eachOfLimit(coll, limit, iteratee, callback) {
  (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
}
module.exports = exports['default'];
},{"./internal/eachOfLimit":134,"./internal/wrapAsync":145}],130:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _eachLimit = require('./eachLimit');

var _eachLimit2 = _interopRequireDefault(_eachLimit);

var _doLimit = require('./internal/doLimit');

var _doLimit2 = _interopRequireDefault(_doLimit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
 *
 * @name eachSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfSeries`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
exports.default = (0, _doLimit2.default)(_eachLimit2.default, 1);
module.exports = exports['default'];
},{"./eachLimit":127,"./internal/doLimit":132}],131:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
// A temporary value used to identify if the loop should be broken.
// See #1064, #1293
exports.default = {};
module.exports = exports["default"];
},{}],132:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = doLimit;
function doLimit(fn, limit) {
    return function (iterable, iteratee, callback) {
        return fn(iterable, limit, iteratee, callback);
    };
}
module.exports = exports["default"];
},{}],133:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = doParallel;

var _eachOf = require('../eachOf');

var _eachOf2 = _interopRequireDefault(_eachOf);

var _wrapAsync = require('./wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function doParallel(fn) {
    return function (obj, iteratee, callback) {
        return fn(_eachOf2.default, obj, (0, _wrapAsync2.default)(iteratee), callback);
    };
}
module.exports = exports['default'];
},{"../eachOf":128,"./wrapAsync":145}],134:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _eachOfLimit;

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _once = require('./once');

var _once2 = _interopRequireDefault(_once);

var _iterator = require('./iterator');

var _iterator2 = _interopRequireDefault(_iterator);

var _onlyOnce = require('./onlyOnce');

var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

var _breakLoop = require('./breakLoop');

var _breakLoop2 = _interopRequireDefault(_breakLoop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _eachOfLimit(limit) {
    return function (obj, iteratee, callback) {
        callback = (0, _once2.default)(callback || _noop2.default);
        if (limit <= 0 || !obj) {
            return callback(null);
        }
        var nextElem = (0, _iterator2.default)(obj);
        var done = false;
        var running = 0;
        var looping = false;

        function iterateeCallback(err, value) {
            running -= 1;
            if (err) {
                done = true;
                callback(err);
            } else if (value === _breakLoop2.default || done && running <= 0) {
                done = true;
                return callback(null);
            } else if (!looping) {
                replenish();
            }
        }

        function replenish() {
            looping = true;
            while (running < limit && !done) {
                var elem = nextElem();
                if (elem === null) {
                    done = true;
                    if (running <= 0) {
                        callback(null);
                    }
                    return;
                }
                running += 1;
                iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
            }
            looping = false;
        }

        replenish();
    };
}
module.exports = exports['default'];
},{"./breakLoop":131,"./iterator":137,"./once":139,"./onlyOnce":140,"lodash/noop":298}],135:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (coll) {
    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
};

var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;

module.exports = exports['default'];
},{}],136:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (fn) {
    return function () /*...args, callback*/{
        var args = (0, _slice2.default)(arguments);
        var callback = args.pop();
        fn.call(this, args, callback);
    };
};

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = exports['default'];
},{"./slice":143}],137:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = iterator;

var _isArrayLike = require('lodash/isArrayLike');

var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

var _getIterator = require('./getIterator');

var _getIterator2 = _interopRequireDefault(_getIterator);

var _keys = require('lodash/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createArrayIterator(coll) {
    var i = -1;
    var len = coll.length;
    return function next() {
        return ++i < len ? { value: coll[i], key: i } : null;
    };
}

function createES2015Iterator(iterator) {
    var i = -1;
    return function next() {
        var item = iterator.next();
        if (item.done) return null;
        i++;
        return { value: item.value, key: i };
    };
}

function createObjectIterator(obj) {
    var okeys = (0, _keys2.default)(obj);
    var i = -1;
    var len = okeys.length;
    return function next() {
        var key = okeys[++i];
        return i < len ? { value: obj[key], key: key } : null;
    };
}

function iterator(coll) {
    if ((0, _isArrayLike2.default)(coll)) {
        return createArrayIterator(coll);
    }

    var iterator = (0, _getIterator2.default)(coll);
    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
}
module.exports = exports['default'];
},{"./getIterator":135,"lodash/isArrayLike":290,"lodash/keys":297}],138:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _asyncMap;

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _wrapAsync = require('./wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncMap(eachfn, arr, iteratee, callback) {
    callback = callback || _noop2.default;
    arr = arr || [];
    var results = [];
    var counter = 0;
    var _iteratee = (0, _wrapAsync2.default)(iteratee);

    eachfn(arr, function (value, _, callback) {
        var index = counter++;
        _iteratee(value, function (err, v) {
            results[index] = v;
            callback(err);
        });
    }, function (err) {
        callback(err, results);
    });
}
module.exports = exports['default'];
},{"./wrapAsync":145,"lodash/noop":298}],139:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = once;
function once(fn) {
    return function () {
        if (fn === null) return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}
module.exports = exports["default"];
},{}],140:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = onlyOnce;
function onlyOnce(fn) {
    return function () {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}
module.exports = exports["default"];
},{}],141:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _parallel;

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _isArrayLike = require('lodash/isArrayLike');

var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

var _wrapAsync = require('./wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _parallel(eachfn, tasks, callback) {
    callback = callback || _noop2.default;
    var results = (0, _isArrayLike2.default)(tasks) ? [] : {};

    eachfn(tasks, function (task, key, callback) {
        (0, _wrapAsync2.default)(task)(function (err, result) {
            if (arguments.length > 2) {
                result = (0, _slice2.default)(arguments, 1);
            }
            results[key] = result;
            callback(err);
        });
    }, function (err) {
        callback(err, results);
    });
}
module.exports = exports['default'];
},{"./slice":143,"./wrapAsync":145,"lodash/isArrayLike":290,"lodash/noop":298}],142:[function(require,module,exports){
(function (process,setImmediate){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hasNextTick = exports.hasSetImmediate = undefined;
exports.fallback = fallback;
exports.wrap = wrap;

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

function fallback(fn) {
    setTimeout(fn, 0);
}

function wrap(defer) {
    return function (fn /*, ...args*/) {
        var args = (0, _slice2.default)(arguments, 1);
        defer(function () {
            fn.apply(null, args);
        });
    };
}

var _defer;

if (hasSetImmediate) {
    _defer = setImmediate;
} else if (hasNextTick) {
    _defer = process.nextTick;
} else {
    _defer = fallback;
}

exports.default = wrap(_defer);
}).call(this,require('_process'),require("timers").setImmediate)
},{"./slice":143,"_process":309,"timers":354}],143:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = slice;
function slice(arrayLike, start) {
    start = start | 0;
    var newLen = Math.max(arrayLike.length - start, 0);
    var newArr = Array(newLen);
    for (var idx = 0; idx < newLen; idx++) {
        newArr[idx] = arrayLike[start + idx];
    }
    return newArr;
}
module.exports = exports["default"];
},{}],144:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _withoutIndex;
function _withoutIndex(iteratee) {
    return function (value, index, callback) {
        return iteratee(value, callback);
    };
}
module.exports = exports["default"];
},{}],145:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isAsync = undefined;

var _asyncify = require('../asyncify');

var _asyncify2 = _interopRequireDefault(_asyncify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var supportsSymbol = typeof Symbol === 'function';

function isAsync(fn) {
    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
}

function wrapAsync(asyncFn) {
    return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
}

exports.default = wrapAsync;
exports.isAsync = isAsync;
},{"../asyncify":125}],146:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _doParallel = require('./internal/doParallel');

var _doParallel2 = _interopRequireDefault(_doParallel);

var _map = require('./internal/map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produces a new collection of values by mapping each value in `coll` through
 * the `iteratee` function. The `iteratee` is called with an item from `coll`
 * and a callback for when it has finished processing. Each of these callback
 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
 * `iteratee` passes an error to its callback, the main `callback` (for the
 * `map` function) is immediately called with the error.
 *
 * Note, that since this function applies the `iteratee` to each item in
 * parallel, there is no guarantee that the `iteratee` functions will complete
 * in order. However, the results array will be in the same order as the
 * original `coll`.
 *
 * If `map` is passed an Object, the results will be an Array.  The results
 * will roughly be in the order of the original Objects' keys (but this can
 * vary across JavaScript engines).
 *
 * @name map
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an Array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @example
 *
 * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
 *     // results is now an array of stats for each file
 * });
 */
exports.default = (0, _doParallel2.default)(_map2.default);
module.exports = exports['default'];
},{"./internal/doParallel":133,"./internal/map":138}],147:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parallelLimit;

var _eachOf = require('./eachOf');

var _eachOf2 = _interopRequireDefault(_eachOf);

var _parallel = require('./internal/parallel');

var _parallel2 = _interopRequireDefault(_parallel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Run the `tasks` collection of functions in parallel, without waiting until
 * the previous function has completed. If any of the functions pass an error to
 * its callback, the main `callback` is immediately called with the value of the
 * error. Once the `tasks` have completed, the results are passed to the final
 * `callback` as an array.
 *
 * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
 * parallel execution of code.  If your tasks do not use any timers or perform
 * any I/O, they will actually be executed in series.  Any synchronous setup
 * sections for each task will happen one after the other.  JavaScript remains
 * single-threaded.
 *
 * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
 * execution of other tasks when a task fails.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 * results from {@link async.parallel}.
 *
 * @name parallel
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 *
 * @example
 * async.parallel([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     // the results array will equal ['one','two'] even though
 *     // the second function had a shorter timeout.
 * });
 *
 * // an example using an object instead of an array
 * async.parallel({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     // results is now equals to: {one: 1, two: 2}
 * });
 */
function parallelLimit(tasks, callback) {
  (0, _parallel2.default)(_eachOf2.default, tasks, callback);
}
module.exports = exports['default'];
},{"./eachOf":128,"./internal/parallel":141}],148:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (tasks, callback) {
    callback = (0, _once2.default)(callback || _noop2.default);
    if (!(0, _isArray2.default)(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
    if (!tasks.length) return callback();
    var taskIndex = 0;

    function nextTask(args) {
        var task = (0, _wrapAsync2.default)(tasks[taskIndex++]);
        args.push((0, _onlyOnce2.default)(next));
        task.apply(null, args);
    }

    function next(err /*, ...args*/) {
        if (err || taskIndex === tasks.length) {
            return callback.apply(null, arguments);
        }
        nextTask((0, _slice2.default)(arguments, 1));
    }

    nextTask([]);
};

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _once = require('./internal/once');

var _once2 = _interopRequireDefault(_once);

var _slice = require('./internal/slice');

var _slice2 = _interopRequireDefault(_slice);

var _onlyOnce = require('./internal/onlyOnce');

var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

var _wrapAsync = require('./internal/wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = exports['default'];

/**
 * Runs the `tasks` array of functions in series, each passing their results to
 * the next in the array. However, if any of the `tasks` pass an error to their
 * own callback, the next function is not executed, and the main `callback` is
 * immediately called with the error.
 *
 * @name waterfall
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
 * to run.
 * Each function should complete with any number of `result` values.
 * The `result` values will be passed as arguments, in order, to the next task.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This will be passed the results of the last task's
 * callback. Invoked with (err, [results]).
 * @returns undefined
 * @example
 *
 * async.waterfall([
 *     function(callback) {
 *         callback(null, 'one', 'two');
 *     },
 *     function(arg1, arg2, callback) {
 *         // arg1 now equals 'one' and arg2 now equals 'two'
 *         callback(null, 'three');
 *     },
 *     function(arg1, callback) {
 *         // arg1 now equals 'three'
 *         callback(null, 'done');
 *     }
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 *
 * // Or, with named functions:
 * async.waterfall([
 *     myFirstFunction,
 *     mySecondFunction,
 *     myLastFunction,
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 * function myFirstFunction(callback) {
 *     callback(null, 'one', 'two');
 * }
 * function mySecondFunction(arg1, arg2, callback) {
 *     // arg1 now equals 'one' and arg2 now equals 'two'
 *     callback(null, 'three');
 * }
 * function myLastFunction(arg1, callback) {
 *     // arg1 now equals 'three'
 *     callback(null, 'done');
 * }
 */
},{"./internal/once":139,"./internal/onlyOnce":140,"./internal/slice":143,"./internal/wrapAsync":145,"lodash/isArray":289,"lodash/noop":298}],149:[function(require,module,exports){
(function (process,setImmediate){
"use strict";
class Semaphore {
    constructor(count) {
        this.tasks = [];
        this.count = count;
    }
    sched() {
        if (this.count > 0 && this.tasks.length > 0) {
            this.count--;
            let next = this.tasks.shift();
            if (next === undefined) {
                throw "Unexpected undefined value in tasks list";
            }
            next();
        }
    }
    acquire() {
        return new Promise((res, rej) => {
            var task = () => {
                var released = false;
                res(() => {
                    if (!released) {
                        released = true;
                        this.count++;
                        this.sched();
                    }
                });
            };
            this.tasks.push(task);
            if (process && process.nextTick) {
                process.nextTick(this.sched.bind(this));
            }
            else {
                setImmediate(this.sched.bind(this));
            }
        });
    }
    use(f) {
        return this.acquire()
            .then(release => {
            return f()
                .then((res) => {
                release();
                return res;
            })
                .catch((err) => {
                release();
                throw err;
            });
        });
    }
}
exports.Semaphore = Semaphore;
class Mutex extends Semaphore {
    constructor() {
        super(1);
    }
}
exports.Mutex = Mutex;

}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":309,"timers":354}],150:[function(require,module,exports){
//      Copyright (c) 2012 Mathieu Turcotte
//      Licensed under the MIT license.

var Backoff = require('./lib/backoff');
var ExponentialBackoffStrategy = require('./lib/strategy/exponential');
var FibonacciBackoffStrategy = require('./lib/strategy/fibonacci');
var FunctionCall = require('./lib/function_call.js');

module.exports.Backoff = Backoff;
module.exports.FunctionCall = FunctionCall;
module.exports.FibonacciStrategy = FibonacciBackoffStrategy;
module.exports.ExponentialStrategy = ExponentialBackoffStrategy;

// Constructs a Fibonacci backoff.
module.exports.fibonacci = function(options) {
    return new Backoff(new FibonacciBackoffStrategy(options));
};

// Constructs an exponential backoff.
module.exports.exponential = function(options) {
    return new Backoff(new ExponentialBackoffStrategy(options));
};

// Constructs a FunctionCall for the given function and arguments.
module.exports.call = function(fn, vargs, callback) {
    var args = Array.prototype.slice.call(arguments);
    fn = args[0];
    vargs = args.slice(1, args.length - 1);
    callback = args[args.length - 1];
    return new FunctionCall(fn, vargs, callback);
};

},{"./lib/backoff":151,"./lib/function_call.js":152,"./lib/strategy/exponential":153,"./lib/strategy/fibonacci":154}],151:[function(require,module,exports){
//      Copyright (c) 2012 Mathieu Turcotte
//      Licensed under the MIT license.

var events = require('events');
var precond = require('precond');
var util = require('util');

// A class to hold the state of a backoff operation. Accepts a backoff strategy
// to generate the backoff delays.
function Backoff(backoffStrategy) {
    events.EventEmitter.call(this);

    this.backoffStrategy_ = backoffStrategy;
    this.maxNumberOfRetry_ = -1;
    this.backoffNumber_ = 0;
    this.backoffDelay_ = 0;
    this.timeoutID_ = -1;

    this.handlers = {
        backoff: this.onBackoff_.bind(this)
    };
}
util.inherits(Backoff, events.EventEmitter);

// Sets a limit, greater than 0, on the maximum number of backoffs. A 'fail'
// event will be emitted when the limit is reached.
Backoff.prototype.failAfter = function(maxNumberOfRetry) {
    precond.checkArgument(maxNumberOfRetry > 0,
        'Expected a maximum number of retry greater than 0 but got %s.',
        maxNumberOfRetry);

    this.maxNumberOfRetry_ = maxNumberOfRetry;
};

// Starts a backoff operation. Accepts an optional parameter to let the
// listeners know why the backoff operation was started.
Backoff.prototype.backoff = function(err) {
    precond.checkState(this.timeoutID_ === -1, 'Backoff in progress.');

    if (this.backoffNumber_ === this.maxNumberOfRetry_) {
        this.emit('fail', err);
        this.reset();
    } else {
        this.backoffDelay_ = this.backoffStrategy_.next();
        this.timeoutID_ = setTimeout(this.handlers.backoff, this.backoffDelay_);
        this.emit('backoff', this.backoffNumber_, this.backoffDelay_, err);
    }
};

// Handles the backoff timeout completion.
Backoff.prototype.onBackoff_ = function() {
    this.timeoutID_ = -1;
    this.emit('ready', this.backoffNumber_, this.backoffDelay_);
    this.backoffNumber_++;
};

// Stops any backoff operation and resets the backoff delay to its inital value.
Backoff.prototype.reset = function() {
    this.backoffNumber_ = 0;
    this.backoffStrategy_.reset();
    clearTimeout(this.timeoutID_);
    this.timeoutID_ = -1;
};

module.exports = Backoff;

},{"events":237,"precond":305,"util":360}],152:[function(require,module,exports){
//      Copyright (c) 2012 Mathieu Turcotte
//      Licensed under the MIT license.

var events = require('events');
var precond = require('precond');
var util = require('util');

var Backoff = require('./backoff');
var FibonacciBackoffStrategy = require('./strategy/fibonacci');

// Wraps a function to be called in a backoff loop.
function FunctionCall(fn, args, callback) {
    events.EventEmitter.call(this);

    precond.checkIsFunction(fn, 'Expected fn to be a function.');
    precond.checkIsArray(args, 'Expected args to be an array.');
    precond.checkIsFunction(callback, 'Expected callback to be a function.');

    this.function_ = fn;
    this.arguments_ = args;
    this.callback_ = callback;
    this.lastResult_ = [];
    this.numRetries_ = 0;

    this.backoff_ = null;
    this.strategy_ = null;
    this.failAfter_ = -1;
    this.retryPredicate_ = FunctionCall.DEFAULT_RETRY_PREDICATE_;

    this.state_ = FunctionCall.State_.PENDING;
}
util.inherits(FunctionCall, events.EventEmitter);

// States in which the call can be.
FunctionCall.State_ = {
    // Call isn't started yet.
    PENDING: 0,
    // Call is in progress.
    RUNNING: 1,
    // Call completed successfully which means that either the wrapped function
    // returned successfully or the maximal number of backoffs was reached.
    COMPLETED: 2,
    // The call was aborted.
    ABORTED: 3
};

// The default retry predicate which considers any error as retriable.
FunctionCall.DEFAULT_RETRY_PREDICATE_ = function(err) {
  return true;
};

// Checks whether the call is pending.
FunctionCall.prototype.isPending = function() {
    return this.state_ == FunctionCall.State_.PENDING;
};

// Checks whether the call is in progress.
FunctionCall.prototype.isRunning = function() {
    return this.state_ == FunctionCall.State_.RUNNING;
};

// Checks whether the call is completed.
FunctionCall.prototype.isCompleted = function() {
    return this.state_ == FunctionCall.State_.COMPLETED;
};

// Checks whether the call is aborted.
FunctionCall.prototype.isAborted = function() {
    return this.state_ == FunctionCall.State_.ABORTED;
};

// Sets the backoff strategy to use. Can only be called before the call is
// started otherwise an exception will be thrown.
FunctionCall.prototype.setStrategy = function(strategy) {
    precond.checkState(this.isPending(), 'FunctionCall in progress.');
    this.strategy_ = strategy;
    return this; // Return this for chaining.
};

// Sets the predicate which will be used to determine whether the errors
// returned from the wrapped function should be retried or not, e.g. a
// network error would be retriable while a type error would stop the
// function call.
FunctionCall.prototype.retryIf = function(retryPredicate) {
    precond.checkState(this.isPending(), 'FunctionCall in progress.');
    this.retryPredicate_ = retryPredicate;
    return this;
};

// Returns all intermediary results returned by the wrapped function since
// the initial call.
FunctionCall.prototype.getLastResult = function() {
    return this.lastResult_.concat();
};

// Returns the number of times the wrapped function call was retried.
FunctionCall.prototype.getNumRetries = function() {
    return this.numRetries_;
};

// Sets the backoff limit.
FunctionCall.prototype.failAfter = function(maxNumberOfRetry) {
    precond.checkState(this.isPending(), 'FunctionCall in progress.');
    this.failAfter_ = maxNumberOfRetry;
    return this; // Return this for chaining.
};

// Aborts the call.
FunctionCall.prototype.abort = function() {
    if (this.isCompleted() || this.isAborted()) {
      return;
    }

    if (this.isRunning()) {
        this.backoff_.reset();
    }

    this.state_ = FunctionCall.State_.ABORTED;
    this.lastResult_ = [new Error('Backoff aborted.')];
    this.emit('abort');
    this.doCallback_();
};

// Initiates the call to the wrapped function. Accepts an optional factory
// function used to create the backoff instance; used when testing.
FunctionCall.prototype.start = function(backoffFactory) {
    precond.checkState(!this.isAborted(), 'FunctionCall is aborted.');
    precond.checkState(this.isPending(), 'FunctionCall already started.');

    var strategy = this.strategy_ || new FibonacciBackoffStrategy();

    this.backoff_ = backoffFactory ?
        backoffFactory(strategy) :
        new Backoff(strategy);

    this.backoff_.on('ready', this.doCall_.bind(this, true /* isRetry */));
    this.backoff_.on('fail', this.doCallback_.bind(this));
    this.backoff_.on('backoff', this.handleBackoff_.bind(this));

    if (this.failAfter_ > 0) {
        this.backoff_.failAfter(this.failAfter_);
    }

    this.state_ = FunctionCall.State_.RUNNING;
    this.doCall_(false /* isRetry */);
};

// Calls the wrapped function.
FunctionCall.prototype.doCall_ = function(isRetry) {
    if (isRetry) {
        this.numRetries_++;
    }
    var eventArgs = ['call'].concat(this.arguments_);
    events.EventEmitter.prototype.emit.apply(this, eventArgs);
    var callback = this.handleFunctionCallback_.bind(this);
    this.function_.apply(null, this.arguments_.concat(callback));
};

// Calls the wrapped function's callback with the last result returned by the
// wrapped function.
FunctionCall.prototype.doCallback_ = function() {
    this.callback_.apply(null, this.lastResult_);
};

// Handles wrapped function's completion. This method acts as a replacement
// for the original callback function.
FunctionCall.prototype.handleFunctionCallback_ = function() {
    if (this.isAborted()) {
        return;
    }

    var args = Array.prototype.slice.call(arguments);
    this.lastResult_ = args; // Save last callback arguments.
    events.EventEmitter.prototype.emit.apply(this, ['callback'].concat(args));

    var err = args[0];
    if (err && this.retryPredicate_(err)) {
        this.backoff_.backoff(err);
    } else {
        this.state_ = FunctionCall.State_.COMPLETED;
        this.doCallback_();
    }
};

// Handles the backoff event by reemitting it.
FunctionCall.prototype.handleBackoff_ = function(number, delay, err) {
    this.emit('backoff', number, delay, err);
};

module.exports = FunctionCall;

},{"./backoff":151,"./strategy/fibonacci":154,"events":237,"precond":305,"util":360}],153:[function(require,module,exports){
//      Copyright (c) 2012 Mathieu Turcotte
//      Licensed under the MIT license.

var util = require('util');
var precond = require('precond');

var BackoffStrategy = require('./strategy');

// Exponential backoff strategy.
function ExponentialBackoffStrategy(options) {
    BackoffStrategy.call(this, options);
    this.backoffDelay_ = 0;
    this.nextBackoffDelay_ = this.getInitialDelay();
    this.factor_ = ExponentialBackoffStrategy.DEFAULT_FACTOR;

    if (options && options.factor !== undefined) {
        precond.checkArgument(options.factor > 1,
            'Exponential factor should be greater than 1 but got %s.',
            options.factor);
        this.factor_ = options.factor;
    }
}
util.inherits(ExponentialBackoffStrategy, BackoffStrategy);

// Default multiplication factor used to compute the next backoff delay from
// the current one. The value can be overridden by passing a custom factor as
// part of the options.
ExponentialBackoffStrategy.DEFAULT_FACTOR = 2;

ExponentialBackoffStrategy.prototype.next_ = function() {
    this.backoffDelay_ = Math.min(this.nextBackoffDelay_, this.getMaxDelay());
    this.nextBackoffDelay_ = this.backoffDelay_ * this.factor_;
    return this.backoffDelay_;
};

ExponentialBackoffStrategy.prototype.reset_ = function() {
    this.backoffDelay_ = 0;
    this.nextBackoffDelay_ = this.getInitialDelay();
};

module.exports = ExponentialBackoffStrategy;

},{"./strategy":155,"precond":305,"util":360}],154:[function(require,module,exports){
//      Copyright (c) 2012 Mathieu Turcotte
//      Licensed under the MIT license.

var util = require('util');

var BackoffStrategy = require('./strategy');

// Fibonacci backoff strategy.
function FibonacciBackoffStrategy(options) {
    BackoffStrategy.call(this, options);
    this.backoffDelay_ = 0;
    this.nextBackoffDelay_ = this.getInitialDelay();
}
util.inherits(FibonacciBackoffStrategy, BackoffStrategy);

FibonacciBackoffStrategy.prototype.next_ = function() {
    var backoffDelay = Math.min(this.nextBackoffDelay_, this.getMaxDelay());
    this.nextBackoffDelay_ += this.backoffDelay_;
    this.backoffDelay_ = backoffDelay;
    return backoffDelay;
};

FibonacciBackoffStrategy.prototype.reset_ = function() {
    this.nextBackoffDelay_ = this.getInitialDelay();
    this.backoffDelay_ = 0;
};

module.exports = FibonacciBackoffStrategy;

},{"./strategy":155,"util":360}],155:[function(require,module,exports){
//      Copyright (c) 2012 Mathieu Turcotte
//      Licensed under the MIT license.

var events = require('events');
var util = require('util');

function isDef(value) {
    return value !== undefined && value !== null;
}

// Abstract class defining the skeleton for the backoff strategies. Accepts an
// object holding the options for the backoff strategy:
//
//  * `randomisationFactor`: The randomisation factor which must be between 0
//     and 1 where 1 equates to a randomization factor of 100% and 0 to no
//     randomization.
//  * `initialDelay`: The backoff initial delay in milliseconds.
//  * `maxDelay`: The backoff maximal delay in milliseconds.
function BackoffStrategy(options) {
    options = options || {};

    if (isDef(options.initialDelay) && options.initialDelay < 1) {
        throw new Error('The initial timeout must be greater than 0.');
    } else if (isDef(options.maxDelay) && options.maxDelay < 1) {
        throw new Error('The maximal timeout must be greater than 0.');
    }

    this.initialDelay_ = options.initialDelay || 100;
    this.maxDelay_ = options.maxDelay || 10000;

    if (this.maxDelay_ <= this.initialDelay_) {
        throw new Error('The maximal backoff delay must be ' +
                        'greater than the initial backoff delay.');
    }

    if (isDef(options.randomisationFactor) &&
        (options.randomisationFactor < 0 || options.randomisationFactor > 1)) {
        throw new Error('The randomisation factor must be between 0 and 1.');
    }

    this.randomisationFactor_ = options.randomisationFactor || 0;
}

// Gets the maximal backoff delay.
BackoffStrategy.prototype.getMaxDelay = function() {
    return this.maxDelay_;
};

// Gets the initial backoff delay.
BackoffStrategy.prototype.getInitialDelay = function() {
    return this.initialDelay_;
};

// Template method that computes and returns the next backoff delay in
// milliseconds.
BackoffStrategy.prototype.next = function() {
    var backoffDelay = this.next_();
    var randomisationMultiple = 1 + Math.random() * this.randomisationFactor_;
    var randomizedDelay = Math.round(backoffDelay * randomisationMultiple);
    return randomizedDelay;
};

// Computes and returns the next backoff delay. Intended to be overridden by
// subclasses.
BackoffStrategy.prototype.next_ = function() {
    throw new Error('BackoffStrategy.next_() unimplemented.');
};

// Template method that resets the backoff delay to its initial value.
BackoffStrategy.prototype.reset = function() {
    this.reset_();
};

// Resets the backoff delay to its initial value. Intended to be overridden by
// subclasses.
BackoffStrategy.prototype.reset_ = function() {
    throw new Error('BackoffStrategy.reset_() unimplemented.');
};

module.exports = BackoffStrategy;

},{"events":237,"util":360}],156:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],157:[function(require,module,exports){
// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
// NOTE: SIGHASH byte ignored AND restricted, truncate before use

var Buffer = require('safe-buffer').Buffer

function check (buffer) {
  if (buffer.length < 8) return false
  if (buffer.length > 72) return false
  if (buffer[0] !== 0x30) return false
  if (buffer[1] !== buffer.length - 2) return false
  if (buffer[2] !== 0x02) return false

  var lenR = buffer[3]
  if (lenR === 0) return false
  if (5 + lenR >= buffer.length) return false
  if (buffer[4 + lenR] !== 0x02) return false

  var lenS = buffer[5 + lenR]
  if (lenS === 0) return false
  if ((6 + lenR + lenS) !== buffer.length) return false

  if (buffer[4] & 0x80) return false
  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false

  if (buffer[lenR + 6] & 0x80) return false
  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false
  return true
}

function decode (buffer) {
  if (buffer.length < 8) throw new Error('DER sequence length is too short')
  if (buffer.length > 72) throw new Error('DER sequence length is too long')
  if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')
  if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')
  if (buffer[2] !== 0x02) throw new Error('Expected DER integer')

  var lenR = buffer[3]
  if (lenR === 0) throw new Error('R length is zero')
  if (5 + lenR >= buffer.length) throw new Error('R length is too long')
  if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')

  var lenS = buffer[5 + lenR]
  if (lenS === 0) throw new Error('S length is zero')
  if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')

  if (buffer[4] & 0x80) throw new Error('R value is negative')
  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')

  if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')
  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')

  // non-BIP66 - extract R, S values
  return {
    r: buffer.slice(4, 4 + lenR),
    s: buffer.slice(6 + lenR)
  }
}

/*
 * Expects r and s to be positive DER integers.
 *
 * The DER format uses the most significant bit as a sign bit (& 0x80).
 * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
 *
 * Examples:
 *
 *      0 =>     0x00
 *      1 =>     0x01
 *     -1 =>     0xff
 *    127 =>     0x7f
 *   -127 =>     0x81
 *    128 =>   0x0080
 *   -128 =>     0x80
 *    255 =>   0x00ff
 *   -255 =>   0xff01
 *  16300 =>   0x3fac
 * -16300 =>   0xc054
 *  62300 => 0x00f35c
 * -62300 => 0xff0ca4
*/
function encode (r, s) {
  var lenR = r.length
  var lenS = s.length
  if (lenR === 0) throw new Error('R length is zero')
  if (lenS === 0) throw new Error('S length is zero')
  if (lenR > 33) throw new Error('R length is too long')
  if (lenS > 33) throw new Error('S length is too long')
  if (r[0] & 0x80) throw new Error('R value is negative')
  if (s[0] & 0x80) throw new Error('S value is negative')
  if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')
  if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')

  var signature = Buffer.allocUnsafe(6 + lenR + lenS)

  // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
  signature[0] = 0x30
  signature[1] = signature.length - 2
  signature[2] = 0x02
  signature[3] = r.length
  r.copy(signature, 4)
  signature[4 + lenR] = 0x02
  signature[5 + lenR] = s.length
  s.copy(signature, 6 + lenR)

  return signature
}

module.exports = {
  check: check,
  decode: decode,
  encode: encode
}

},{"safe-buffer":333}],158:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"buffer":160,"dup":56}],159:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":160}],160:[function(require,module,exports){

},{}],161:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this,require("buffer").Buffer)
},{"base64-js":156,"buffer":161,"ieee754":254}],162:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],163:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":333}],164:[function(require,module,exports){
(function (Buffer){
(function () {
  "use strict";

  function btoa(str) {
    var buffer;

    if (str instanceof Buffer) {
      buffer = str;
    } else {
      buffer = Buffer.from(str.toString(), 'binary');
    }

    return buffer.toString('base64');
  }

  module.exports = btoa;
}());

}).call(this,require("buffer").Buffer)
},{"buffer":161}],165:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":255,"safe-buffer":333,"stream":352,"string_decoder":163}],166:[function(require,module,exports){
(function (Buffer){
var clone = (function() {
'use strict';

function _instanceof(obj, type) {
  return type != null && obj instanceof type;
}

var nativeMap;
try {
  nativeMap = Map;
} catch(_) {
  // maybe a reference error because no `Map`. Give it a dummy value that no
  // value will ever be an instanceof.
  nativeMap = function() {};
}

var nativeSet;
try {
  nativeSet = Set;
} catch(_) {
  nativeSet = function() {};
}

var nativePromise;
try {
  nativePromise = Promise;
} catch(_) {
  nativePromise = function() {};
}

/**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
 *    should be cloned as well. Non-enumerable properties on the prototype
 *    chain will be ignored. (optional - false by default)
*/
function clone(parent, circular, depth, prototype, includeNonEnumerable) {
  if (typeof circular === 'object') {
    depth = circular.depth;
    prototype = circular.prototype;
    includeNonEnumerable = circular.includeNonEnumerable;
    circular = circular.circular;
  }
  // maintain two arrays for circular references, where corresponding parents
  // and children have the same index
  var allParents = [];
  var allChildren = [];

  var useBuffer = typeof Buffer != 'undefined';

  if (typeof circular == 'undefined')
    circular = true;

  if (typeof depth == 'undefined')
    depth = Infinity;

  // recurse this function so we don't reset allParents and allChildren
  function _clone(parent, depth) {
    // cloning null always returns null
    if (parent === null)
      return null;

    if (depth === 0)
      return parent;

    var child;
    var proto;
    if (typeof parent != 'object') {
      return parent;
    }

    if (_instanceof(parent, nativeMap)) {
      child = new nativeMap();
    } else if (_instanceof(parent, nativeSet)) {
      child = new nativeSet();
    } else if (_instanceof(parent, nativePromise)) {
      child = new nativePromise(function (resolve, reject) {
        parent.then(function(value) {
          resolve(_clone(value, depth - 1));
        }, function(err) {
          reject(_clone(err, depth - 1));
        });
      });
    } else if (clone.__isArray(parent)) {
      child = [];
    } else if (clone.__isRegExp(parent)) {
      child = new RegExp(parent.source, __getRegExpFlags(parent));
      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    } else if (clone.__isDate(parent)) {
      child = new Date(parent.getTime());
    } else if (useBuffer && Buffer.isBuffer(parent)) {
      if (Buffer.allocUnsafe) {
        // Node.js >= 4.5.0
        child = Buffer.allocUnsafe(parent.length);
      } else {
        // Older Node.js versions
        child = new Buffer(parent.length);
      }
      parent.copy(child);
      return child;
    } else if (_instanceof(parent, Error)) {
      child = Object.create(parent);
    } else {
      if (typeof prototype == 'undefined') {
        proto = Object.getPrototypeOf(parent);
        child = Object.create(proto);
      }
      else {
        child = Object.create(prototype);
        proto = prototype;
      }
    }

    if (circular) {
      var index = allParents.indexOf(parent);

      if (index != -1) {
        return allChildren[index];
      }
      allParents.push(parent);
      allChildren.push(child);
    }

    if (_instanceof(parent, nativeMap)) {
      parent.forEach(function(value, key) {
        var keyChild = _clone(key, depth - 1);
        var valueChild = _clone(value, depth - 1);
        child.set(keyChild, valueChild);
      });
    }
    if (_instanceof(parent, nativeSet)) {
      parent.forEach(function(value) {
        var entryChild = _clone(value, depth - 1);
        child.add(entryChild);
      });
    }

    for (var i in parent) {
      var attrs;
      if (proto) {
        attrs = Object.getOwnPropertyDescriptor(proto, i);
      }

      if (attrs && attrs.set == null) {
        continue;
      }
      child[i] = _clone(parent[i], depth - 1);
    }

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(parent);
      for (var i = 0; i < symbols.length; i++) {
        // Don't need to worry about cloning a symbol because it is a primitive,
        // like a number or string.
        var symbol = symbols[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
          continue;
        }
        child[symbol] = _clone(parent[symbol], depth - 1);
        if (!descriptor.enumerable) {
          Object.defineProperty(child, symbol, {
            enumerable: false
          });
        }
      }
    }

    if (includeNonEnumerable) {
      var allPropertyNames = Object.getOwnPropertyNames(parent);
      for (var i = 0; i < allPropertyNames.length; i++) {
        var propertyName = allPropertyNames[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
        if (descriptor && descriptor.enumerable) {
          continue;
        }
        child[propertyName] = _clone(parent[propertyName], depth - 1);
        Object.defineProperty(child, propertyName, {
          enumerable: false
        });
      }
    }

    return child;
  }

  return _clone(parent, depth);
}

/**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */
clone.clonePrototype = function clonePrototype(parent) {
  if (parent === null)
    return null;

  var c = function () {};
  c.prototype = parent;
  return new c();
};

// private utility functions

function __objToStr(o) {
  return Object.prototype.toString.call(o);
}
clone.__objToStr = __objToStr;

function __isDate(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Date]';
}
clone.__isDate = __isDate;

function __isArray(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Array]';
}
clone.__isArray = __isArray;

function __isRegExp(o) {
  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
}
clone.__isRegExp = __isRegExp;

function __getRegExpFlags(re) {
  var flags = '';
  if (re.global) flags += 'g';
  if (re.ignoreCase) flags += 'i';
  if (re.multiline) flags += 'm';
  return flags;
}
clone.__getRegExpFlags = __getRegExpFlags;

return clone;
})();

if (typeof module === 'object' && module.exports) {
  module.exports = clone;
}

}).call(this,require("buffer").Buffer)
},{"buffer":161}],167:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":256}],168:[function(require,module,exports){
/* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */
/* vim: set ts=2: */
/*exported CRC32 */
var CRC32;
(function (factory) {
	/*jshint ignore:start */
	/*eslint-disable */
	if(typeof DO_NOT_EXPORT_CRC === 'undefined') {
		if('object' === typeof exports) {
			factory(exports);
		} else if ('function' === typeof define && define.amd) {
			define(function () {
				var module = {};
				factory(module);
				return module;
			});
		} else {
			factory(CRC32 = {});
		}
	} else {
		factory(CRC32 = {});
	}
	/*eslint-enable */
	/*jshint ignore:end */
}(function(CRC32) {
CRC32.version = '1.2.0';
/* see perf/crc32table.js */
/*global Int32Array */
function signed_crc_table() {
	var c = 0, table = new Array(256);

	for(var n =0; n != 256; ++n){
		c = n;
		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
		table[n] = c;
	}

	return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;
}

var T = signed_crc_table();
function crc32_bstr(bstr, seed) {
	var C = seed ^ -1, L = bstr.length - 1;
	for(var i = 0; i < L;) {
		C = (C>>>8) ^ T[(C^bstr.charCodeAt(i++))&0xFF];
		C = (C>>>8) ^ T[(C^bstr.charCodeAt(i++))&0xFF];
	}
	if(i === L) C = (C>>>8) ^ T[(C ^ bstr.charCodeAt(i))&0xFF];
	return C ^ -1;
}

function crc32_buf(buf, seed) {
	if(buf.length > 10000) return crc32_buf_8(buf, seed);
	var C = seed ^ -1, L = buf.length - 3;
	for(var i = 0; i < L;) {
		C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
		C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
		C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
		C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
	}
	while(i < L+3) C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
	return C ^ -1;
}

function crc32_buf_8(buf, seed) {
	var C = seed ^ -1, L = buf.length - 7;
	for(var i = 0; i < L;) {
		C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
		C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
		C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
		C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
		C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
		C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
		C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
		C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
	}
	while(i < L+7) C = (C>>>8) ^ T[(C^buf[i++])&0xFF];
	return C ^ -1;
}

function crc32_str(str, seed) {
	var C = seed ^ -1;
	for(var i = 0, L=str.length, c, d; i < L;) {
		c = str.charCodeAt(i++);
		if(c < 0x80) {
			C = (C>>>8) ^ T[(C ^ c)&0xFF];
		} else if(c < 0x800) {
			C = (C>>>8) ^ T[(C ^ (192|((c>>6)&31)))&0xFF];
			C = (C>>>8) ^ T[(C ^ (128|(c&63)))&0xFF];
		} else if(c >= 0xD800 && c < 0xE000) {
			c = (c&1023)+64; d = str.charCodeAt(i++)&1023;
			C = (C>>>8) ^ T[(C ^ (240|((c>>8)&7)))&0xFF];
			C = (C>>>8) ^ T[(C ^ (128|((c>>2)&63)))&0xFF];
			C = (C>>>8) ^ T[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];
			C = (C>>>8) ^ T[(C ^ (128|(d&63)))&0xFF];
		} else {
			C = (C>>>8) ^ T[(C ^ (224|((c>>12)&15)))&0xFF];
			C = (C>>>8) ^ T[(C ^ (128|((c>>6)&63)))&0xFF];
			C = (C>>>8) ^ T[(C ^ (128|(c&63)))&0xFF];
		}
	}
	return C ^ -1;
}
CRC32.table = T;
// $FlowIgnore
CRC32.bstr = crc32_bstr;
// $FlowIgnore
CRC32.buf = crc32_buf;
// $FlowIgnore
CRC32.str = crc32_str;
}));

},{}],169:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":165,"inherits":255,"md5.js":300,"ripemd160":331,"sha.js":345}],170:[function(require,module,exports){
var __root__ = (function (root) {
function F() { this.fetch = false; }
F.prototype = root;
return new F();
})(typeof self !== 'undefined' ? self : this);
(function(self) {

(function(self) {

  if (self.fetch) {
    return
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && (function() {
      try {
        new Blob();
        return true
      } catch(e) {
        return false
      }
    })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isDataView = function(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj)
    };

    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue+','+value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) { items.push(name); });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) { items.push(value); });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) { items.push([name, value]); });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        throw new Error('unsupported BodyInit type')
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return (methods.indexOf(upcased) > -1) ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'omit';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, { body: this._bodyInit })
  };

  function decode(body) {
    var form = new FormData();
    body.trim().split('&').forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=');
        var name = split.shift().replace(/\+/g, ' ');
        var value = split.join('=').replace(/\+/g, ' ');
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  self.Headers = Headers;
  self.Request = Request;
  self.Response = Response;

  self.fetch = function(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);
      var xhr = new XMLHttpRequest();

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  };
  self.fetch.polyfill = true;
})(typeof self !== 'undefined' ? self : this);
}).call(__root__, void(0));
var fetch = __root__.fetch;
var Response = fetch.Response = __root__.Response;
var Request = fetch.Request = __root__.Request;
var Headers = fetch.Headers = __root__.Headers;
if (typeof module === 'object' && module.exports) {
module.exports = fetch;
// Needed for TypeScript consumers without esModuleInterop.
module.exports.default = fetch;
}

},{}],171:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":186,"./elliptic/curve":174,"./elliptic/curves":177,"./elliptic/ec":178,"./elliptic/eddsa":181,"./elliptic/utils":185,"brorand":159}],172:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":185,"bn.js":158}],173:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":185,"./base":172,"bn.js":158,"inherits":255}],174:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":172,"./edwards":173,"./mont":175,"./short":176}],175:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":185,"./base":172,"bn.js":158,"inherits":255}],176:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":185,"./base":172,"bn.js":158,"inherits":255}],177:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"./curve":174,"./precomputed/secp256k1":184,"./utils":185,"hash.js":241}],178:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":177,"../utils":185,"./key":179,"./signature":180,"bn.js":158,"brorand":159,"hmac-drbg":253}],179:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":185,"bn.js":158}],180:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":185,"bn.js":158}],181:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":177,"../utils":185,"./key":182,"./signature":183,"hash.js":241}],182:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":185}],183:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":185,"bn.js":158}],184:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],185:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":158,"minimalistic-assert":301,"minimalistic-crypto-utils":302}],186:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "6.5.2",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "test": "npm run lint && npm run unit",
    "version": "grunt dist && git add dist/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:indutny/elliptic"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": "Fedor Indutny <fedor@indutny.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^3.0.8",
    "grunt": "^1.0.4",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.2",
    "jscs": "^3.0.7",
    "jshint": "^2.10.3",
    "mocha": "^6.2.2"
  },
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  }
}

},{}],187:[function(require,module,exports){
'use strict';

const processFn = (fn, opts) => function () {
	const P = opts.promiseModule;
	const args = new Array(arguments.length);

	for (let i = 0; i < arguments.length; i++) {
		args[i] = arguments[i];
	}

	return new P((resolve, reject) => {
		if (opts.errorFirst) {
			args.push(function (err, result) {
				if (opts.multiArgs) {
					const results = new Array(arguments.length - 1);

					for (let i = 1; i < arguments.length; i++) {
						results[i - 1] = arguments[i];
					}

					if (err) {
						results.unshift(err);
						reject(results);
					} else {
						resolve(results);
					}
				} else if (err) {
					reject(err);
				} else {
					resolve(result);
				}
			});
		} else {
			args.push(function (result) {
				if (opts.multiArgs) {
					const results = new Array(arguments.length - 1);

					for (let i = 0; i < arguments.length; i++) {
						results[i] = arguments[i];
					}

					resolve(results);
				} else {
					resolve(result);
				}
			});
		}

		fn.apply(this, args);
	});
};

module.exports = (obj, opts) => {
	opts = Object.assign({
		exclude: [/.+(Sync|Stream)$/],
		errorFirst: true,
		promiseModule: Promise
	}, opts);

	const filter = key => {
		const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);
		return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
	};

	let ret;
	if (typeof obj === 'function') {
		ret = function () {
			if (opts.excludeMain) {
				return obj.apply(this, arguments);
			}

			return processFn(obj, opts).apply(this, arguments);
		};
	} else {
		ret = Object.create(Object.getPrototypeOf(obj));
	}

	for (const key in obj) { // eslint-disable-line guard-for-in
		const x = obj[key];
		ret[key] = typeof x === 'function' && filter(key) ? processFn(x, opts) : x;
	}

	return ret;
};

},{}],188:[function(require,module,exports){
const EthQuery = require('eth-query')
const pify = require('pify')
const SafeEventEmitter = require('safe-event-emitter')

const sec = 1000

const calculateSum = (accumulator, currentValue) => accumulator + currentValue
const blockTrackerEvents = ['sync', 'latest']

class BaseBlockTracker extends SafeEventEmitter {

  //
  // public
  //

  constructor (opts = {}) {
    super()
    // config
    this._blockResetDuration = opts.blockResetDuration || 20 * sec
    // state
    this._blockResetTimeout
    this._currentBlock = null
    this._isRunning = false
    // bind functions for internal use
    this._onNewListener = this._onNewListener.bind(this)
    this._onRemoveListener = this._onRemoveListener.bind(this)
    this._resetCurrentBlock = this._resetCurrentBlock.bind(this)
    // listen for handler changes
    this._setupInternalEvents()
  }

  isRunning () {
    return this._isRunning
  }

  getCurrentBlock () {
    return this._currentBlock
  }

  async getLatestBlock () {
    // return if available
    if (this._currentBlock) return this._currentBlock
    // wait for a new latest block
    const latestBlock = await new Promise(resolve => this.once('latest', resolve))
    // return newly set current block
    return latestBlock
  }

  // dont allow module consumer to remove our internal event listeners
  removeAllListeners (eventName) {
    // perform default behavior, preserve fn arity
    if (eventName) {
      super.removeAllListeners(eventName)
    } else {
      super.removeAllListeners()
    }
    // re-add internal events
    this._setupInternalEvents()
    // trigger stop check just in case
    this._onRemoveListener()
  }

  //
  // to be implemented in subclass
  //

  _start () {
    // default behavior is noop
  }

  _end () {
    // default behavior is noop
  }

  //
  // private
  //

  _setupInternalEvents () {
    // first remove listeners for idempotence
    this.removeListener('newListener', this._onNewListener)
    this.removeListener('removeListener', this._onRemoveListener)
    // then add them
    this.on('newListener', this._onNewListener)
    this.on('removeListener', this._onRemoveListener)
  }

  _onNewListener (eventName, handler) {
    // `newListener` is called *before* the listener is added
    if (!blockTrackerEvents.includes(eventName)) return
    this._maybeStart()
  }

  _onRemoveListener (eventName, handler) {
    // `removeListener` is called *after* the listener is removed
    if (this._getBlockTrackerEventCount() > 0) return
    this._maybeEnd()
  }

  _maybeStart () {
    if (this._isRunning) return
    this._isRunning = true
    // cancel setting latest block to stale
    this._cancelBlockResetTimeout()
    this._start()
  }

  _maybeEnd () {
    if (!this._isRunning) return
    this._isRunning = false
    this._setupBlockResetTimeout()
    this._end()
  }

  _getBlockTrackerEventCount () {
    return blockTrackerEvents
      .map(eventName => this.listenerCount(eventName))
      .reduce(calculateSum)
  }

  _newPotentialLatest (newBlock) {
    const currentBlock = this._currentBlock
    // only update if blok number is higher
    if (currentBlock && (hexToInt(newBlock) <= hexToInt(currentBlock))) return
    this._setCurrentBlock(newBlock)
  }

  _setCurrentBlock (newBlock) {
    const oldBlock = this._currentBlock
    this._currentBlock = newBlock
    this.emit('latest', newBlock)
    this.emit('sync', { oldBlock, newBlock })
  }

  _setupBlockResetTimeout () {
    // clear any existing timeout
    this._cancelBlockResetTimeout()
    // clear latest block when stale
    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration)
    // nodejs - dont hold process open
    if (this._blockResetTimeout.unref) {
      this._blockResetTimeout.unref()
    }
  }

  _cancelBlockResetTimeout () {
    clearTimeout(this._blockResetTimeout)
  }

  _resetCurrentBlock () {
    this._currentBlock = null
  }

}

module.exports = BaseBlockTracker

function hexToInt(hexInt) {
  return Number.parseInt(hexInt, 16)
}

},{"eth-query":190,"pify":187,"safe-event-emitter":334}],189:[function(require,module,exports){
const pify = require('pify')
const BaseBlockTracker = require('./base')

const sec = 1000

class PollingBlockTracker extends BaseBlockTracker {

  constructor (opts = {}) {
    // parse + validate args
    if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.')
    const pollingInterval = opts.pollingInterval || 20 * sec
    const retryTimeout = opts.retryTimeout || pollingInterval / 10
    const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true
    const setSkipCacheFlag = opts.setSkipCacheFlag || false
    // BaseBlockTracker constructor
    super(Object.assign({
      blockResetDuration: pollingInterval,
    }, opts))
    // config
    this._provider = opts.provider
    this._pollingInterval = pollingInterval
    this._retryTimeout = retryTimeout
    this._keepEventLoopActive = keepEventLoopActive
    this._setSkipCacheFlag = setSkipCacheFlag
  }

  //
  // public
  //

  // trigger block polling
  async checkForLatestBlock () {
    await this._updateLatestBlock()
    return await this.getLatestBlock()
  }

  //
  // private
  //

  _start () {
    this._performSync().catch(err => this.emit('error', err))
  }

  async _performSync () {
    while (this._isRunning) {
      try {
        await this._updateLatestBlock()
        await timeout(this._pollingInterval, !this._keepEventLoopActive)
      } catch (err) {
        const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${err.stack}`)
        try {
          this.emit('error', newErr)
        } catch (emitErr) {
          console.error(newErr)
        }
        await timeout(this._retryTimeout, !this._keepEventLoopActive)
      }
    }
  }

  async _updateLatestBlock () {
    // fetch + set latest block
    const latestBlock = await this._fetchLatestBlock()
    this._newPotentialLatest(latestBlock)
  }

  async _fetchLatestBlock () {
    const req = { jsonrpc: "2.0", id: 1, method: 'eth_blockNumber', params: [] }
    if (this._setSkipCacheFlag) req.skipCache = true
    const res = await pify((cb) => this._provider.sendAsync(req, cb))()
    if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\n${res.error}`)
    return res.result
  }

}

module.exports = PollingBlockTracker

function timeout (duration, unref) {
  return new Promise(resolve => {
    const timoutRef = setTimeout(resolve, duration)
    // don't keep process open
    if (timoutRef.unref && unref) {
      timoutRef.unref()
    }
  })
}

},{"./base":188,"pify":187}],190:[function(require,module,exports){
const extend = require('xtend')
const createRandomId = require('json-rpc-random-id')()

module.exports = EthQuery


function EthQuery(provider){
  const self = this
  self.currentProvider = provider
}

//
// base queries
//

// default block
EthQuery.prototype.getBalance =                          generateFnWithDefaultBlockFor(2, 'eth_getBalance')
EthQuery.prototype.getCode =                             generateFnWithDefaultBlockFor(2, 'eth_getCode')
EthQuery.prototype.getTransactionCount =                 generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount')
EthQuery.prototype.getStorageAt =                        generateFnWithDefaultBlockFor(3, 'eth_getStorageAt')
EthQuery.prototype.call =                                generateFnWithDefaultBlockFor(2, 'eth_call')
// standard
EthQuery.prototype.protocolVersion =                     generateFnFor('eth_protocolVersion')
EthQuery.prototype.syncing =                             generateFnFor('eth_syncing')
EthQuery.prototype.coinbase =                            generateFnFor('eth_coinbase')
EthQuery.prototype.mining =                              generateFnFor('eth_mining')
EthQuery.prototype.hashrate =                            generateFnFor('eth_hashrate')
EthQuery.prototype.gasPrice =                            generateFnFor('eth_gasPrice')
EthQuery.prototype.accounts =                            generateFnFor('eth_accounts')
EthQuery.prototype.blockNumber =                         generateFnFor('eth_blockNumber')
EthQuery.prototype.getBlockTransactionCountByHash =      generateFnFor('eth_getBlockTransactionCountByHash')
EthQuery.prototype.getBlockTransactionCountByNumber =    generateFnFor('eth_getBlockTransactionCountByNumber')
EthQuery.prototype.getUncleCountByBlockHash =            generateFnFor('eth_getUncleCountByBlockHash')
EthQuery.prototype.getUncleCountByBlockNumber =          generateFnFor('eth_getUncleCountByBlockNumber')
EthQuery.prototype.sign =                                generateFnFor('eth_sign')
EthQuery.prototype.sendTransaction =                     generateFnFor('eth_sendTransaction')
EthQuery.prototype.sendRawTransaction =                  generateFnFor('eth_sendRawTransaction')
EthQuery.prototype.estimateGas =                         generateFnFor('eth_estimateGas')
EthQuery.prototype.getBlockByHash =                      generateFnFor('eth_getBlockByHash')
EthQuery.prototype.getBlockByNumber =                    generateFnFor('eth_getBlockByNumber')
EthQuery.prototype.getTransactionByHash =                generateFnFor('eth_getTransactionByHash')
EthQuery.prototype.getTransactionByBlockHashAndIndex =   generateFnFor('eth_getTransactionByBlockHashAndIndex')
EthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex')
EthQuery.prototype.getTransactionReceipt =               generateFnFor('eth_getTransactionReceipt')
EthQuery.prototype.getUncleByBlockHashAndIndex =         generateFnFor('eth_getUncleByBlockHashAndIndex')
EthQuery.prototype.getUncleByBlockNumberAndIndex =       generateFnFor('eth_getUncleByBlockNumberAndIndex')
EthQuery.prototype.getCompilers =                        generateFnFor('eth_getCompilers')
EthQuery.prototype.compileLLL =                          generateFnFor('eth_compileLLL')
EthQuery.prototype.compileSolidity =                     generateFnFor('eth_compileSolidity')
EthQuery.prototype.compileSerpent =                      generateFnFor('eth_compileSerpent')
EthQuery.prototype.newFilter =                           generateFnFor('eth_newFilter')
EthQuery.prototype.newBlockFilter =                      generateFnFor('eth_newBlockFilter')
EthQuery.prototype.newPendingTransactionFilter =         generateFnFor('eth_newPendingTransactionFilter')
EthQuery.prototype.uninstallFilter =                     generateFnFor('eth_uninstallFilter')
EthQuery.prototype.getFilterChanges =                    generateFnFor('eth_getFilterChanges')
EthQuery.prototype.getFilterLogs =                       generateFnFor('eth_getFilterLogs')
EthQuery.prototype.getLogs =                             generateFnFor('eth_getLogs')
EthQuery.prototype.getWork =                             generateFnFor('eth_getWork')
EthQuery.prototype.submitWork =                          generateFnFor('eth_submitWork')
EthQuery.prototype.submitHashrate =                      generateFnFor('eth_submitHashrate')

// network level

EthQuery.prototype.sendAsync = function(opts, cb){
  const self = this
  self.currentProvider.sendAsync(createPayload(opts), function(err, response){
    if (!err && response.error) err = new Error('EthQuery - RPC Error - '+response.error.message)
    if (err) return cb(err)
    cb(null, response.result)
  })
}

// util

function generateFnFor(methodName){
  return function(){
    const self = this
    var args = [].slice.call(arguments)
    var cb = args.pop()
    self.sendAsync({
      method: methodName,
      params: args,
    }, cb)
  }
}

function generateFnWithDefaultBlockFor(argCount, methodName){
  return function(){
    const self = this
    var args = [].slice.call(arguments)
    var cb = args.pop()
    // set optional default block param
    if (args.length < argCount) args.push('latest')
    self.sendAsync({
      method: methodName,
      params: args,
    }, cb)
  }
}

function createPayload(data){
  return extend({
    // defaults
    id: createRandomId(),
    jsonrpc: '2.0',
    params: [],
    // user-specified
  }, data)
}

},{"json-rpc-random-id":259,"xtend":361}],191:[function(require,module,exports){
(function (Buffer){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function createHashFunction(hashConstructor) {
    return function (msg) {
        var hash = hashConstructor();
        hash.update(msg);
        return Buffer.from(hash.digest());
    };
}
exports.createHashFunction = createHashFunction;

}).call(this,require("buffer").Buffer)
},{"buffer":161}],192:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hash_utils_1 = require("./hash-utils");
var createKeccakHash = require("keccak");
exports.keccak224 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak224");
});
exports.keccak256 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak256");
});
exports.keccak384 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak384");
});
exports.keccak512 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak512");
});

},{"./hash-utils":191,"keccak":193}],193:[function(require,module,exports){
module.exports = require('./lib/api')(require('./lib/keccak'))

},{"./lib/api":194,"./lib/keccak":198}],194:[function(require,module,exports){
const createKeccak = require('./keccak')
const createShake = require('./shake')

module.exports = function (KeccakState) {
  const Keccak = createKeccak(KeccakState)
  const Shake = createShake(KeccakState)

  return function (algorithm, options) {
    const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm
    switch (hash) {
      case 'keccak224': return new Keccak(1152, 448, null, 224, options)
      case 'keccak256': return new Keccak(1088, 512, null, 256, options)
      case 'keccak384': return new Keccak(832, 768, null, 384, options)
      case 'keccak512': return new Keccak(576, 1024, null, 512, options)

      case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)
      case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)
      case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)
      case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)

      case 'shake128': return new Shake(1344, 256, 0x1f, options)
      case 'shake256': return new Shake(1088, 512, 0x1f, options)

      default: throw new Error('Invald algorithm: ' + algorithm)
    }
  }
}

},{"./keccak":195,"./shake":196}],195:[function(require,module,exports){
(function (Buffer){
const { Transform } = require('readable-stream')

module.exports = (KeccakState) => class Keccak extends Transform {
  constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {
    super(options)

    this._rate = rate
    this._capacity = capacity
    this._delimitedSuffix = delimitedSuffix
    this._hashBitLength = hashBitLength
    this._options = options

    this._state = new KeccakState()
    this._state.initialize(rate, capacity)
    this._finalized = false
  }

  _transform (chunk, encoding, callback) {
    let error = null
    try {
      this.update(chunk, encoding)
    } catch (err) {
      error = err
    }

    callback(error)
  }

  _flush (callback) {
    let error = null
    try {
      this.push(this.digest())
    } catch (err) {
      error = err
    }

    callback(error)
  }

  update (data, encoding) {
    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
    if (this._finalized) throw new Error('Digest already called')
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

    this._state.absorb(data)

    return this
  }

  digest (encoding) {
    if (this._finalized) throw new Error('Digest already called')
    this._finalized = true

    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)
    let digest = this._state.squeeze(this._hashBitLength / 8)
    if (encoding !== undefined) digest = digest.toString(encoding)

    this._resetState()

    return digest
  }

  // remove result from memory
  _resetState () {
    this._state.initialize(this._rate, this._capacity)
    return this
  }

  // because sometimes we need hash right now and little later
  _clone () {
    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)
    this._state.copy(clone._state)
    clone._finalized = this._finalized

    return clone
  }
}

}).call(this,require("buffer").Buffer)
},{"buffer":161,"readable-stream":213}],196:[function(require,module,exports){
(function (Buffer){
const { Transform } = require('readable-stream')

module.exports = (KeccakState) => class Shake extends Transform {
  constructor (rate, capacity, delimitedSuffix, options) {
    super(options)

    this._rate = rate
    this._capacity = capacity
    this._delimitedSuffix = delimitedSuffix
    this._options = options

    this._state = new KeccakState()
    this._state.initialize(rate, capacity)
    this._finalized = false
  }

  _transform (chunk, encoding, callback) {
    let error = null
    try {
      this.update(chunk, encoding)
    } catch (err) {
      error = err
    }

    callback(error)
  }

  _flush () {}

  _read (size) {
    this.push(this.squeeze(size))
  }

  update (data, encoding) {
    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
    if (this._finalized) throw new Error('Squeeze already called')
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

    this._state.absorb(data)

    return this
  }

  squeeze (dataByteLength, encoding) {
    if (!this._finalized) {
      this._finalized = true
      this._state.absorbLastFewBits(this._delimitedSuffix)
    }

    let data = this._state.squeeze(dataByteLength)
    if (encoding !== undefined) data = data.toString(encoding)

    return data
  }

  _resetState () {
    this._state.initialize(this._rate, this._capacity)
    return this
  }

  _clone () {
    const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)
    this._state.copy(clone._state)
    clone._finalized = this._finalized

    return clone
  }
}

}).call(this,require("buffer").Buffer)
},{"buffer":161,"readable-stream":213}],197:[function(require,module,exports){
const P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]

exports.p1600 = function (s) {
  for (let round = 0; round < 24; ++round) {
    // theta
    const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]
    const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]
    const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]
    const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]
    const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]
    const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]
    const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]
    const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]
    const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]
    const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]

    let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31)
    let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31)
    const t1slo0 = s[0] ^ lo
    const t1shi0 = s[1] ^ hi
    const t1slo5 = s[10] ^ lo
    const t1shi5 = s[11] ^ hi
    const t1slo10 = s[20] ^ lo
    const t1shi10 = s[21] ^ hi
    const t1slo15 = s[30] ^ lo
    const t1shi15 = s[31] ^ hi
    const t1slo20 = s[40] ^ lo
    const t1shi20 = s[41] ^ hi
    lo = lo0 ^ (lo2 << 1 | hi2 >>> 31)
    hi = hi0 ^ (hi2 << 1 | lo2 >>> 31)
    const t1slo1 = s[2] ^ lo
    const t1shi1 = s[3] ^ hi
    const t1slo6 = s[12] ^ lo
    const t1shi6 = s[13] ^ hi
    const t1slo11 = s[22] ^ lo
    const t1shi11 = s[23] ^ hi
    const t1slo16 = s[32] ^ lo
    const t1shi16 = s[33] ^ hi
    const t1slo21 = s[42] ^ lo
    const t1shi21 = s[43] ^ hi
    lo = lo1 ^ (lo3 << 1 | hi3 >>> 31)
    hi = hi1 ^ (hi3 << 1 | lo3 >>> 31)
    const t1slo2 = s[4] ^ lo
    const t1shi2 = s[5] ^ hi
    const t1slo7 = s[14] ^ lo
    const t1shi7 = s[15] ^ hi
    const t1slo12 = s[24] ^ lo
    const t1shi12 = s[25] ^ hi
    const t1slo17 = s[34] ^ lo
    const t1shi17 = s[35] ^ hi
    const t1slo22 = s[44] ^ lo
    const t1shi22 = s[45] ^ hi
    lo = lo2 ^ (lo4 << 1 | hi4 >>> 31)
    hi = hi2 ^ (hi4 << 1 | lo4 >>> 31)
    const t1slo3 = s[6] ^ lo
    const t1shi3 = s[7] ^ hi
    const t1slo8 = s[16] ^ lo
    const t1shi8 = s[17] ^ hi
    const t1slo13 = s[26] ^ lo
    const t1shi13 = s[27] ^ hi
    const t1slo18 = s[36] ^ lo
    const t1shi18 = s[37] ^ hi
    const t1slo23 = s[46] ^ lo
    const t1shi23 = s[47] ^ hi
    lo = lo3 ^ (lo0 << 1 | hi0 >>> 31)
    hi = hi3 ^ (hi0 << 1 | lo0 >>> 31)
    const t1slo4 = s[8] ^ lo
    const t1shi4 = s[9] ^ hi
    const t1slo9 = s[18] ^ lo
    const t1shi9 = s[19] ^ hi
    const t1slo14 = s[28] ^ lo
    const t1shi14 = s[29] ^ hi
    const t1slo19 = s[38] ^ lo
    const t1shi19 = s[39] ^ hi
    const t1slo24 = s[48] ^ lo
    const t1shi24 = s[49] ^ hi

    // rho & pi
    const t2slo0 = t1slo0
    const t2shi0 = t1shi0
    const t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28)
    const t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28)
    const t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29)
    const t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29)
    const t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23)
    const t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23)
    const t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14)
    const t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14)
    const t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31)
    const t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31)
    const t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20)
    const t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20)
    const t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22)
    const t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22)
    const t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19)
    const t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19)
    const t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30)
    const t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30)
    const t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2)
    const t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2)
    const t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26)
    const t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26)
    const t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21)
    const t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21)
    const t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17)
    const t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17)
    const t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3)
    const t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3)
    const t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4)
    const t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4)
    const t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9)
    const t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9)
    const t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7)
    const t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7)
    const t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11)
    const t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11)
    const t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8)
    const t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8)
    const t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5)
    const t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5)
    const t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12)
    const t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12)
    const t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25)
    const t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25)
    const t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24)
    const t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24)
    const t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18)
    const t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18)

    // chi
    s[0] = t2slo0 ^ (~t2slo1 & t2slo2)
    s[1] = t2shi0 ^ (~t2shi1 & t2shi2)
    s[10] = t2slo5 ^ (~t2slo6 & t2slo7)
    s[11] = t2shi5 ^ (~t2shi6 & t2shi7)
    s[20] = t2slo10 ^ (~t2slo11 & t2slo12)
    s[21] = t2shi10 ^ (~t2shi11 & t2shi12)
    s[30] = t2slo15 ^ (~t2slo16 & t2slo17)
    s[31] = t2shi15 ^ (~t2shi16 & t2shi17)
    s[40] = t2slo20 ^ (~t2slo21 & t2slo22)
    s[41] = t2shi20 ^ (~t2shi21 & t2shi22)
    s[2] = t2slo1 ^ (~t2slo2 & t2slo3)
    s[3] = t2shi1 ^ (~t2shi2 & t2shi3)
    s[12] = t2slo6 ^ (~t2slo7 & t2slo8)
    s[13] = t2shi6 ^ (~t2shi7 & t2shi8)
    s[22] = t2slo11 ^ (~t2slo12 & t2slo13)
    s[23] = t2shi11 ^ (~t2shi12 & t2shi13)
    s[32] = t2slo16 ^ (~t2slo17 & t2slo18)
    s[33] = t2shi16 ^ (~t2shi17 & t2shi18)
    s[42] = t2slo21 ^ (~t2slo22 & t2slo23)
    s[43] = t2shi21 ^ (~t2shi22 & t2shi23)
    s[4] = t2slo2 ^ (~t2slo3 & t2slo4)
    s[5] = t2shi2 ^ (~t2shi3 & t2shi4)
    s[14] = t2slo7 ^ (~t2slo8 & t2slo9)
    s[15] = t2shi7 ^ (~t2shi8 & t2shi9)
    s[24] = t2slo12 ^ (~t2slo13 & t2slo14)
    s[25] = t2shi12 ^ (~t2shi13 & t2shi14)
    s[34] = t2slo17 ^ (~t2slo18 & t2slo19)
    s[35] = t2shi17 ^ (~t2shi18 & t2shi19)
    s[44] = t2slo22 ^ (~t2slo23 & t2slo24)
    s[45] = t2shi22 ^ (~t2shi23 & t2shi24)
    s[6] = t2slo3 ^ (~t2slo4 & t2slo0)
    s[7] = t2shi3 ^ (~t2shi4 & t2shi0)
    s[16] = t2slo8 ^ (~t2slo9 & t2slo5)
    s[17] = t2shi8 ^ (~t2shi9 & t2shi5)
    s[26] = t2slo13 ^ (~t2slo14 & t2slo10)
    s[27] = t2shi13 ^ (~t2shi14 & t2shi10)
    s[36] = t2slo18 ^ (~t2slo19 & t2slo15)
    s[37] = t2shi18 ^ (~t2shi19 & t2shi15)
    s[46] = t2slo23 ^ (~t2slo24 & t2slo20)
    s[47] = t2shi23 ^ (~t2shi24 & t2shi20)
    s[8] = t2slo4 ^ (~t2slo0 & t2slo1)
    s[9] = t2shi4 ^ (~t2shi0 & t2shi1)
    s[18] = t2slo9 ^ (~t2slo5 & t2slo6)
    s[19] = t2shi9 ^ (~t2shi5 & t2shi6)
    s[28] = t2slo14 ^ (~t2slo10 & t2slo11)
    s[29] = t2shi14 ^ (~t2shi10 & t2shi11)
    s[38] = t2slo19 ^ (~t2slo15 & t2slo16)
    s[39] = t2shi19 ^ (~t2shi15 & t2shi16)
    s[48] = t2slo24 ^ (~t2slo20 & t2slo21)
    s[49] = t2shi24 ^ (~t2shi20 & t2shi21)

    // iota
    s[0] ^= P1600_ROUND_CONSTANTS[round * 2]
    s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1]
  }
}

},{}],198:[function(require,module,exports){
(function (Buffer){
const keccakState = require('./keccak-state-unroll')

function Keccak () {
  // much faster than `new Array(50)`
  this.state = [
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0
  ]

  this.blockSize = null
  this.count = 0
  this.squeezing = false
}

Keccak.prototype.initialize = function (rate, capacity) {
  for (let i = 0; i < 50; ++i) this.state[i] = 0
  this.blockSize = rate / 8
  this.count = 0
  this.squeezing = false
}

Keccak.prototype.absorb = function (data) {
  for (let i = 0; i < data.length; ++i) {
    this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))
    this.count += 1
    if (this.count === this.blockSize) {
      keccakState.p1600(this.state)
      this.count = 0
    }
  }
}

Keccak.prototype.absorbLastFewBits = function (bits) {
  this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))
  if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)
  this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))
  keccakState.p1600(this.state)
  this.count = 0
  this.squeezing = true
}

Keccak.prototype.squeeze = function (length) {
  if (!this.squeezing) this.absorbLastFewBits(0x01)

  const output = Buffer.alloc(length)
  for (let i = 0; i < length; ++i) {
    output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff
    this.count += 1
    if (this.count === this.blockSize) {
      keccakState.p1600(this.state)
      this.count = 0
    }
  }

  return output
}

Keccak.prototype.copy = function (dest) {
  for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i]
  dest.blockSize = this.blockSize
  dest.count = this.count
  dest.squeezing = this.squeezing
}

module.exports = Keccak

}).call(this,require("buffer").Buffer)
},{"./keccak-state-unroll":197,"buffer":161}],199:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],200:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this,require('_process'))
},{"./_stream_readable":202,"./_stream_writable":204,"_process":309,"inherits":255}],201:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":203,"inherits":255}],202:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":199,"./_stream_duplex":200,"./internal/streams/async_iterator":205,"./internal/streams/buffer_list":206,"./internal/streams/destroy":207,"./internal/streams/from":209,"./internal/streams/state":211,"./internal/streams/stream":212,"_process":309,"buffer":161,"events":237,"inherits":255,"string_decoder/":217,"util":160}],203:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":199,"./_stream_duplex":200,"inherits":255}],204:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":199,"./_stream_duplex":200,"./internal/streams/destroy":207,"./internal/streams/state":211,"./internal/streams/stream":212,"_process":309,"buffer":161,"inherits":255,"util-deprecate":357}],205:[function(require,module,exports){
(function (process){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this,require('_process'))
},{"./end-of-stream":208,"_process":309}],206:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":161,"util":160}],207:[function(require,module,exports){
(function (process){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this,require('_process'))
},{"_process":309}],208:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":199}],209:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],210:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":199,"./end-of-stream":208}],211:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":199}],212:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":237}],213:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":200,"./lib/_stream_passthrough.js":201,"./lib/_stream_readable.js":202,"./lib/_stream_transform.js":203,"./lib/_stream_writable.js":204,"./lib/internal/streams/end-of-stream.js":208,"./lib/internal/streams/pipeline.js":210}],214:[function(require,module,exports){
module.exports = require('./lib')(require('./lib/elliptic'))

},{"./lib":216,"./lib/elliptic":215}],215:[function(require,module,exports){
const EC = require('elliptic').ec

const ec = new EC('secp256k1')
const ecparams = ec.curve

// Hack, we can not use bn.js@5, while elliptic uses bn.js@4
// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
const BN = ecparams.n.constructor

function loadCompressedPublicKey (first, xbuf) {
  let x = new BN(xbuf)

  // overflow
  if (x.cmp(ecparams.p) >= 0) return null
  x = x.toRed(ecparams.red)

  // compute corresponding Y
  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()

  return ec.keyPair({ pub: { x: x, y: y } })
}

function loadUncompressedPublicKey (first, xbuf, ybuf) {
  let x = new BN(xbuf)
  let y = new BN(ybuf)

  // overflow
  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

  x = x.toRed(ecparams.red)
  y = y.toRed(ecparams.red)

  // is odd flag
  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

  // x*x*x + b = y*y
  const x3 = x.redSqr().redIMul(x)
  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

  return ec.keyPair({ pub: { x: x, y: y } })
}

function loadPublicKey (pubkey) {
  // length should be validated in interface
  const first = pubkey[0]
  switch (first) {
    case 0x02:
    case 0x03:
      if (pubkey.length !== 33) return null
      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))
    case 0x04:
    case 0x06:
    case 0x07:
      if (pubkey.length !== 65) return null
      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))
    default:
      return null
  }
}

function savePublicKey (output, point) {
  const pubkey = point.encode(null, output.length === 33)
  // Loop should be faster because we do not need create extra Uint8Array
  // output.set(new Uint8Array(pubkey))
  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]
}

module.exports = {
  contextRandomize () {
    return 0
  },

  privateKeyVerify (seckey) {
    const bn = new BN(seckey)
    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1
  },

  privateKeyNegate (seckey) {
    const bn = new BN(seckey)
    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)
    seckey.set(negate)
    return 0
  },

  privateKeyTweakAdd (seckey, tweak) {
    const bn = new BN(tweak)
    if (bn.cmp(ecparams.n) >= 0) return 1

    bn.iadd(new BN(seckey))
    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
    if (bn.isZero()) return 1

    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
    seckey.set(tweaked)

    return 0
  },

  privateKeyTweakMul (seckey, tweak) {
    let bn = new BN(tweak)
    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

    bn.imul(new BN(seckey))
    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)

    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
    seckey.set(tweaked)

    return 0
  },

  publicKeyVerify (pubkey) {
    const pair = loadPublicKey(pubkey)
    return pair === null ? 1 : 0
  },

  publicKeyCreate (output, seckey) {
    const bn = new BN(seckey)
    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

    const point = ec.keyFromPrivate(seckey).getPublic()
    savePublicKey(output, point)

    return 0
  },

  publicKeyConvert (output, pubkey) {
    const pair = loadPublicKey(pubkey)
    if (pair === null) return 1

    const point = pair.getPublic()
    savePublicKey(output, point)

    return 0
  },

  publicKeyNegate (output, pubkey) {
    const pair = loadPublicKey(pubkey)
    if (pair === null) return 1

    const point = pair.getPublic()
    point.y = point.y.redNeg()
    savePublicKey(output, point)

    return 0
  },

  publicKeyCombine (output, pubkeys) {
    const pairs = new Array(pubkeys.length)
    for (let i = 0; i < pubkeys.length; ++i) {
      pairs[i] = loadPublicKey(pubkeys[i])
      if (pairs[i] === null) return 1
    }

    let point = pairs[0].getPublic()
    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)
    if (point.isInfinity()) return 2

    savePublicKey(output, point)

    return 0
  },

  publicKeyTweakAdd (output, pubkey, tweak) {
    const pair = loadPublicKey(pubkey)
    if (pair === null) return 1

    tweak = new BN(tweak)
    if (tweak.cmp(ecparams.n) >= 0) return 2

    const point = pair.getPublic().add(ecparams.g.mul(tweak))
    if (point.isInfinity()) return 2

    savePublicKey(output, point)

    return 0
  },

  publicKeyTweakMul (output, pubkey, tweak) {
    const pair = loadPublicKey(pubkey)
    if (pair === null) return 1

    tweak = new BN(tweak)
    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2

    const point = pair.getPublic().mul(tweak)
    savePublicKey(output, point)

    return 0
  },

  signatureNormalize (sig) {
    const r = new BN(sig.subarray(0, 32))
    const s = new BN(sig.subarray(32, 64))
    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1

    if (s.cmp(ec.nh) === 1) {
      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)
    }

    return 0
  },

  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
  // Adapted for Uint8Array instead Buffer
  signatureExport (obj, sig) {
    const sigR = sig.subarray(0, 32)
    const sigS = sig.subarray(32, 64)
    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1
    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1

    const { output } = obj

    // Prepare R
    let r = output.subarray(4, 4 + 33)
    r[0] = 0x00
    r.set(sigR, 1)

    let lenR = 33
    let posR = 0
    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

    r = r.subarray(posR)
    if (r[0] & 0x80) return 1
    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1

    // Prepare S
    let s = output.subarray(6 + 33, 6 + 33 + 33)
    s[0] = 0x00
    s.set(sigS, 1)

    let lenS = 33
    let posS = 0
    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

    s = s.subarray(posS)
    if (s[0] & 0x80) return 1
    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1

    // Set output length for return
    obj.outputlen = 6 + lenR + lenS

    // Output in specified format
    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
    output[0] = 0x30
    output[1] = obj.outputlen - 2
    output[2] = 0x02
    output[3] = r.length
    output.set(r, 4)
    output[4 + lenR] = 0x02
    output[5 + lenR] = s.length
    output.set(s, 6 + lenR)

    return 0
  },

  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
  // Adapted for Uint8Array instead Buffer
  signatureImport (output, sig) {
    if (sig.length < 8) return 1
    if (sig.length > 72) return 1
    if (sig[0] !== 0x30) return 1
    if (sig[1] !== sig.length - 2) return 1
    if (sig[2] !== 0x02) return 1

    const lenR = sig[3]
    if (lenR === 0) return 1
    if (5 + lenR >= sig.length) return 1
    if (sig[4 + lenR] !== 0x02) return 1

    const lenS = sig[5 + lenR]
    if (lenS === 0) return 1
    if ((6 + lenR + lenS) !== sig.length) return 1

    if (sig[4] & 0x80) return 1
    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1

    if (sig[lenR + 6] & 0x80) return 1
    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1

    let sigR = sig.subarray(4, 4 + lenR)
    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)
    if (sigR.length > 32) return 1

    let sigS = sig.subarray(6 + lenR)
    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)
    if (sigS.length > 32) throw new Error('S length is too long')

    let r = new BN(sigR)
    if (r.cmp(ecparams.n) >= 0) r = new BN(0)

    let s = new BN(sig.subarray(6 + lenR))
    if (s.cmp(ecparams.n) >= 0) s = new BN(0)

    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)
    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)

    return 0
  },

  ecdsaSign (obj, message, seckey, data, noncefn) {
    if (noncefn) {
      const _noncefn = noncefn
      noncefn = (counter) => {
        const nonce = _noncefn(message, seckey, null, data, counter)

        const isValid = nonce instanceof Uint8Array && nonce.length === 32
        if (!isValid) throw new Error('This is the way')

        return new BN(nonce)
      }
    }

    const d = new BN(seckey)
    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1

    let sig
    try {
      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })
    } catch (err) {
      return 1
    }

    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)
    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)
    obj.recid = sig.recoveryParam

    return 0
  },

  ecdsaVerify (sig, msg32, pubkey) {
    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }

    const sigr = new BN(sigObj.r)
    const sigs = new BN(sigObj.s)
    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3

    const pair = loadPublicKey(pubkey)
    if (pair === null) return 2

    const point = pair.getPublic()
    const isValid = ec.verify(msg32, sigObj, point)
    return isValid ? 0 : 3
  },

  ecdsaRecover (output, sig, recid, msg32) {
    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }

    const sigr = new BN(sigObj.r)
    const sigs = new BN(sigObj.s)
    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1

    if (sigr.isZero() || sigs.isZero()) return 2

    // Can throw `throw new Error('Unable to find sencond key candinate');`
    let point
    try {
      point = ec.recoverPubKey(msg32, sigObj, recid)
    } catch (err) {
      return 2
    }

    savePublicKey(output, point)

    return 0
  },

  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
    const pair = loadPublicKey(pubkey)
    if (pair === null) return 1

    const scalar = new BN(seckey)
    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2

    const point = pair.getPublic().mul(scalar)

    if (hashfn === undefined) {
      const data = point.encode(null, true)
      const sha256 = ec.hash().update(data).digest()
      for (let i = 0; i < 32; ++i) output[i] = sha256[i]
    } else {
      if (!xbuf) xbuf = new Uint8Array(32)
      const x = point.getX().toArray('be', 32)
      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]

      if (!ybuf) ybuf = new Uint8Array(32)
      const y = point.getY().toArray('be', 32)
      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]

      const hash = hashfn(xbuf, ybuf, data)

      const isValid = hash instanceof Uint8Array && hash.length === output.length
      if (!isValid) return 2

      output.set(hash)
    }

    return 0
  }
}

},{"elliptic":171}],216:[function(require,module,exports){
const errors = {
  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
  TWEAK_ADD:
    'The tweak was out of range or the resulted private key is invalid',
  TWEAK_MUL: 'The tweak was out of range or equal to zero',
  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
  SECKEY_INVALID: 'Private Key is invalid',
  PUBKEY_PARSE: 'Public Key could not be parsed',
  PUBKEY_SERIALIZE: 'Public Key serialization error',
  PUBKEY_COMBINE: 'The sum of the public keys is not valid',
  SIG_PARSE: 'Signature could not be parsed',
  SIGN: 'The nonce generation function failed, or the private key was invalid',
  RECOVER: 'Public key could not be recover',
  ECDH: 'Scalar was invalid (zero or overflow)'
}

function assert (cond, msg) {
  if (!cond) throw new Error(msg)
}

function isUint8Array (name, value, length) {
  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)

  if (length !== undefined) {
    if (Array.isArray(length)) {
      const numbers = length.join(', ')
      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`
      assert(length.includes(value.length), msg)
    } else {
      const msg = `Expected ${name} to be an Uint8Array with length ${length}`
      assert(value.length === length, msg)
    }
  }
}

function isCompressed (value) {
  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')
}

function getAssertedOutput (output = (len) => new Uint8Array(len), length) {
  if (typeof output === 'function') output = output(length)
  isUint8Array('output', output, length)
  return output
}

function toTypeString (value) {
  return Object.prototype.toString.call(value).slice(8, -1)
}

module.exports = (secp256k1) => {
  return {
    contextRandomize (seed) {
      assert(
        seed === null || seed instanceof Uint8Array,
        'Expected seed to be an Uint8Array or null'
      )
      if (seed !== null) isUint8Array('seed', seed, 32)

      switch (secp256k1.contextRandomize(seed)) {
        case 1:
          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)
      }
    },

    privateKeyVerify (seckey) {
      isUint8Array('private key', seckey, 32)

      return secp256k1.privateKeyVerify(seckey) === 0
    },

    privateKeyNegate (seckey) {
      isUint8Array('private key', seckey, 32)

      switch (secp256k1.privateKeyNegate(seckey)) {
        case 0:
          return seckey
        case 1:
          throw new Error(errors.IMPOSSIBLE_CASE)
      }
    },

    privateKeyTweakAdd (seckey, tweak) {
      isUint8Array('private key', seckey, 32)
      isUint8Array('tweak', tweak, 32)

      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
        case 0:
          return seckey
        case 1:
          throw new Error(errors.TWEAK_ADD)
      }
    },

    privateKeyTweakMul (seckey, tweak) {
      isUint8Array('private key', seckey, 32)
      isUint8Array('tweak', tweak, 32)

      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
        case 0:
          return seckey
        case 1:
          throw new Error(errors.TWEAK_MUL)
      }
    },

    publicKeyVerify (pubkey) {
      isUint8Array('public key', pubkey, [33, 65])

      return secp256k1.publicKeyVerify(pubkey) === 0
    },

    publicKeyCreate (seckey, compressed = true, output) {
      isUint8Array('private key', seckey, 32)
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.publicKeyCreate(output, seckey)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.SECKEY_INVALID)
        case 2:
          throw new Error(errors.PUBKEY_SERIALIZE)
      }
    },

    publicKeyConvert (pubkey, compressed = true, output) {
      isUint8Array('public key', pubkey, [33, 65])
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.publicKeyConvert(output, pubkey)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.PUBKEY_PARSE)
        case 2:
          throw new Error(errors.PUBKEY_SERIALIZE)
      }
    },

    publicKeyNegate (pubkey, compressed = true, output) {
      isUint8Array('public key', pubkey, [33, 65])
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.publicKeyNegate(output, pubkey)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.PUBKEY_PARSE)
        case 2:
          throw new Error(errors.IMPOSSIBLE_CASE)
        case 3:
          throw new Error(errors.PUBKEY_SERIALIZE)
      }
    },

    publicKeyCombine (pubkeys, compressed = true, output) {
      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')
      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')
      for (const pubkey of pubkeys) {
        isUint8Array('public key', pubkey, [33, 65])
      }
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.publicKeyCombine(output, pubkeys)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.PUBKEY_PARSE)
        case 2:
          throw new Error(errors.PUBKEY_COMBINE)
        case 3:
          throw new Error(errors.PUBKEY_SERIALIZE)
      }
    },

    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {
      isUint8Array('public key', pubkey, [33, 65])
      isUint8Array('tweak', tweak, 32)
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.PUBKEY_PARSE)
        case 2:
          throw new Error(errors.TWEAK_ADD)
      }
    },

    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {
      isUint8Array('public key', pubkey, [33, 65])
      isUint8Array('tweak', tweak, 32)
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.PUBKEY_PARSE)
        case 2:
          throw new Error(errors.TWEAK_MUL)
      }
    },

    signatureNormalize (sig) {
      isUint8Array('signature', sig, 64)

      switch (secp256k1.signatureNormalize(sig)) {
        case 0:
          return sig
        case 1:
          throw new Error(errors.SIG_PARSE)
      }
    },

    signatureExport (sig, output) {
      isUint8Array('signature', sig, 64)
      output = getAssertedOutput(output, 72)

      const obj = { output, outputlen: 72 }
      switch (secp256k1.signatureExport(obj, sig)) {
        case 0:
          return output.slice(0, obj.outputlen)
        case 1:
          throw new Error(errors.SIG_PARSE)
        case 2:
          throw new Error(errors.IMPOSSIBLE_CASE)
      }
    },

    signatureImport (sig, output) {
      isUint8Array('signature', sig)
      output = getAssertedOutput(output, 64)

      switch (secp256k1.signatureImport(output, sig)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.SIG_PARSE)
        case 2:
          throw new Error(errors.IMPOSSIBLE_CASE)
      }
    },

    ecdsaSign (msg32, seckey, options = {}, output) {
      isUint8Array('message', msg32, 32)
      isUint8Array('private key', seckey, 32)
      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
      if (options.data !== undefined) isUint8Array('options.data', options.data)
      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')
      output = getAssertedOutput(output, 64)

      const obj = { signature: output, recid: null }
      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
        case 0:
          return obj
        case 1:
          throw new Error(errors.SIGN)
        case 2:
          throw new Error(errors.IMPOSSIBLE_CASE)
      }
    },

    ecdsaVerify (sig, msg32, pubkey) {
      isUint8Array('signature', sig, 64)
      isUint8Array('message', msg32, 32)
      isUint8Array('public key', pubkey, [33, 65])

      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
        case 0:
          return true
        case 3:
          return false
        case 1:
          throw new Error(errors.SIG_PARSE)
        case 2:
          throw new Error(errors.PUBKEY_PARSE)
      }
    },

    ecdsaRecover (sig, recid, msg32, compressed = true, output) {
      isUint8Array('signature', sig, 64)
      assert(
        toTypeString(recid) === 'Number' &&
          recid >= 0 &&
          recid <= 3,
        'Expected recovery id to be a Number within interval [0, 3]'
      )
      isUint8Array('message', msg32, 32)
      isCompressed(compressed)
      output = getAssertedOutput(output, compressed ? 33 : 65)

      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.SIG_PARSE)
        case 2:
          throw new Error(errors.RECOVER)
        case 3:
          throw new Error(errors.IMPOSSIBLE_CASE)
      }
    },

    ecdh (pubkey, seckey, options = {}, output) {
      isUint8Array('public key', pubkey, [33, 65])
      isUint8Array('private key', seckey, 32)
      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
      if (options.data !== undefined) isUint8Array('options.data', options.data)
      if (options.hashfn !== undefined) {
        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')
        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)
        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)
        isUint8Array('output', output)
      } else {
        output = getAssertedOutput(output, 32)
      }

      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
        case 0:
          return output
        case 1:
          throw new Error(errors.PUBKEY_PARSE)
        case 2:
          throw new Error(errors.ECDH)
      }
    }
  }
}

},{}],217:[function(require,module,exports){
arguments[4][163][0].apply(exports,arguments)
},{"dup":163,"safe-buffer":333}],218:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var randombytes = require("randombytes");
function getRandomBytes(bytes) {
    return new Promise(function (resolve, reject) {
        randombytes(bytes, function (err, resp) {
            if (err) {
                reject(err);
                return;
            }
            resolve(resp);
        });
    });
}
exports.getRandomBytes = getRandomBytes;
function getRandomBytesSync(bytes) {
    return randombytes(bytes);
}
exports.getRandomBytesSync = getRandomBytesSync;

},{"randombytes":314}],219:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var secp256k1_1 = require("secp256k1");
var random_1 = require("./random");
var SECP256K1_PRIVATE_KEY_SIZE = 32;
function createPrivateKey() {
    return __awaiter(this, void 0, void 0, function () {
        var pk;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!true) return [3 /*break*/, 2];
                    return [4 /*yield*/, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
                case 1:
                    pk = _a.sent();
                    if (secp256k1_1.privateKeyVerify(pk)) {
                        return [2 /*return*/, pk];
                    }
                    return [3 /*break*/, 0];
                case 2: return [2 /*return*/];
            }
        });
    });
}
exports.createPrivateKey = createPrivateKey;
function createPrivateKeySync() {
    while (true) {
        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
        if (secp256k1_1.privateKeyVerify(pk)) {
            return pk;
        }
    }
}
exports.createPrivateKeySync = createPrivateKeySync;
__export(require("secp256k1"));

},{"./random":218,"secp256k1":214}],220:[function(require,module,exports){
module.exports = require('./lib/index.js')

},{"./lib/index.js":221}],221:[function(require,module,exports){
(function (Buffer){
/* eslint-disable no-useless-escape */
const utils = require('ethereumjs-util')
const BN = require('bn.js')

var ABI = function () {
}

// Convert from short to canonical names
// FIXME: optimise or make this nicer?
function elementaryName (name) {
  if (name.startsWith('int[')) {
    return 'int256' + name.slice(3)
  } else if (name === 'int') {
    return 'int256'
  } else if (name.startsWith('uint[')) {
    return 'uint256' + name.slice(4)
  } else if (name === 'uint') {
    return 'uint256'
  } else if (name.startsWith('fixed[')) {
    return 'fixed128x128' + name.slice(5)
  } else if (name === 'fixed') {
    return 'fixed128x128'
  } else if (name.startsWith('ufixed[')) {
    return 'ufixed128x128' + name.slice(6)
  } else if (name === 'ufixed') {
    return 'ufixed128x128'
  }
  return name
}

ABI.eventID = function (name, types) {
  // FIXME: use node.js util.format?
  var sig = name + '(' + types.map(elementaryName).join(',') + ')'
  return utils.keccak256(Buffer.from(sig))
}

ABI.methodID = function (name, types) {
  return ABI.eventID(name, types).slice(0, 4)
}

// Parse N from type<N>
function parseTypeN (type) {
  return parseInt(/^\D+(\d+)$/.exec(type)[1], 10)
}

// Parse N,M from type<N>x<M>
function parseTypeNxM (type) {
  var tmp = /^\D+(\d+)x(\d+)$/.exec(type)
  return [ parseInt(tmp[1], 10), parseInt(tmp[2], 10) ]
}

// Parse N in type[<N>] where "type" can itself be an array type.
function parseTypeArray (type) {
  var tmp = type.match(/(.*)\[(.*?)\]$/)
  if (tmp) {
    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10)
  }
  return null
}

function parseNumber (arg) {
  var type = typeof arg
  if (type === 'string') {
    if (utils.isHexPrefixed(arg)) {
      return new BN(utils.stripHexPrefix(arg), 16)
    } else {
      return new BN(arg, 10)
    }
  } else if (type === 'number') {
    return new BN(arg)
  } else if (arg.toArray) {
    // assume this is a BN for the moment, replace with BN.isBN soon
    return arg
  } else {
    throw new Error('Argument is not a number')
  }
}

// someMethod(bytes,uint)
// someMethod(bytes,uint):(boolean)
function parseSignature (sig) {
  var tmp = /^(\w+)\((.*)\)$/.exec(sig)

  if (tmp.length !== 3) {
    throw new Error('Invalid method signature')
  }

  var args = /^(.+)\):\((.+)$/.exec(tmp[2])

  if (args !== null && args.length === 3) {
    return {
      method: tmp[1],
      args: args[1].split(','),
      retargs: args[2].split(',')
    }
  } else {
    var params = tmp[2].split(',')
    if (params.length === 1 && params[0] === '') {
      // Special-case (possibly naive) fixup for functions that take no arguments.
      // TODO: special cases are always bad, but this makes the function return
      // match what the calling functions expect
      params = []
    }
    return {
      method: tmp[1],
      args: params
    }
  }
}

// Encodes a single item (can be dynamic array)
// @returns: Buffer
function encodeSingle (type, arg) {
  var size, num, ret, i

  if (type === 'address') {
    return encodeSingle('uint160', parseNumber(arg))
  } else if (type === 'bool') {
    return encodeSingle('uint8', arg ? 1 : 0)
  } else if (type === 'string') {
    return encodeSingle('bytes', Buffer.from(arg, 'utf8'))
  } else if (isArray(type)) {
    // this part handles fixed-length ([2]) and variable length ([]) arrays
    // NOTE: we catch here all calls to arrays, that simplifies the rest
    if (typeof arg.length === 'undefined') {
      throw new Error('Not an array?')
    }
    size = parseTypeArray(type)
    if (size !== 'dynamic' && size !== 0 && arg.length > size) {
      throw new Error('Elements exceed array size: ' + size)
    }
    ret = []
    type = type.slice(0, type.lastIndexOf('['))
    if (typeof arg === 'string') {
      arg = JSON.parse(arg)
    }
    for (i in arg) {
      ret.push(encodeSingle(type, arg[i]))
    }
    if (size === 'dynamic') {
      var length = encodeSingle('uint256', arg.length)
      ret.unshift(length)
    }
    return Buffer.concat(ret)
  } else if (type === 'bytes') {
    arg = Buffer.from(arg)

    ret = Buffer.concat([ encodeSingle('uint256', arg.length), arg ])

    if ((arg.length % 32) !== 0) {
      ret = Buffer.concat([ ret, utils.zeros(32 - (arg.length % 32)) ])
    }

    return ret
  } else if (type.startsWith('bytes')) {
    size = parseTypeN(type)
    if (size < 1 || size > 32) {
      throw new Error('Invalid bytes<N> width: ' + size)
    }

    return utils.setLengthRight(arg, 32)
  } else if (type.startsWith('uint')) {
    size = parseTypeN(type)
    if ((size % 8) || (size < 8) || (size > 256)) {
      throw new Error('Invalid uint<N> width: ' + size)
    }

    num = parseNumber(arg)
    if (num.bitLength() > size) {
      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
    }

    if (num < 0) {
      throw new Error('Supplied uint is negative')
    }

    return num.toArrayLike(Buffer, 'be', 32)
  } else if (type.startsWith('int')) {
    size = parseTypeN(type)
    if ((size % 8) || (size < 8) || (size > 256)) {
      throw new Error('Invalid int<N> width: ' + size)
    }

    num = parseNumber(arg)
    if (num.bitLength() > size) {
      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
    }

    return num.toTwos(256).toArrayLike(Buffer, 'be', 32)
  } else if (type.startsWith('ufixed')) {
    size = parseTypeNxM(type)

    num = parseNumber(arg)

    if (num < 0) {
      throw new Error('Supplied ufixed is negative')
    }

    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))))
  } else if (type.startsWith('fixed')) {
    size = parseTypeNxM(type)

    return encodeSingle('int256', parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))))
  }

  throw new Error('Unsupported or invalid type: ' + type)
}

// Decodes a single item (can be dynamic array)
// @returns: array
// FIXME: this method will need a lot of attention at checking limits and validation
function decodeSingle (parsedType, data, offset) {
  if (typeof parsedType === 'string') {
    parsedType = parseType(parsedType)
  }
  var size, num, ret, i

  if (parsedType.name === 'address') {
    return decodeSingle(parsedType.rawType, data, offset).toArrayLike(Buffer, 'be', 20).toString('hex')
  } else if (parsedType.name === 'bool') {
    return decodeSingle(parsedType.rawType, data, offset).toString() === new BN(1).toString()
  } else if (parsedType.name === 'string') {
    var bytes = decodeSingle(parsedType.rawType, data, offset)
    return Buffer.from(bytes, 'utf8').toString()
  } else if (parsedType.isArray) {
    // this part handles fixed-length arrays ([2]) and variable length ([]) arrays
    // NOTE: we catch here all calls to arrays, that simplifies the rest
    ret = []
    size = parsedType.size

    if (parsedType.size === 'dynamic') {
      offset = decodeSingle('uint256', data, offset).toNumber()
      size = decodeSingle('uint256', data, offset).toNumber()
      offset = offset + 32
    }
    for (i = 0; i < size; i++) {
      var decoded = decodeSingle(parsedType.subArray, data, offset)
      ret.push(decoded)
      offset += parsedType.subArray.memoryUsage
    }
    return ret
  } else if (parsedType.name === 'bytes') {
    offset = decodeSingle('uint256', data, offset).toNumber()
    size = decodeSingle('uint256', data, offset).toNumber()
    return data.slice(offset + 32, offset + 32 + size)
  } else if (parsedType.name.startsWith('bytes')) {
    return data.slice(offset, offset + parsedType.size)
  } else if (parsedType.name.startsWith('uint')) {
    num = new BN(data.slice(offset, offset + 32), 16, 'be')
    if (num.bitLength() > parsedType.size) {
      throw new Error('Decoded int exceeds width: ' + parsedType.size + ' vs ' + num.bitLength())
    }
    return num
  } else if (parsedType.name.startsWith('int')) {
    num = new BN(data.slice(offset, offset + 32), 16, 'be').fromTwos(256)
    if (num.bitLength() > parsedType.size) {
      throw new Error('Decoded uint exceeds width: ' + parsedType.size + ' vs ' + num.bitLength())
    }

    return num
  } else if (parsedType.name.startsWith('ufixed')) {
    size = new BN(2).pow(new BN(parsedType.size[1]))
    num = decodeSingle('uint256', data, offset)
    if (!num.mod(size).isZero()) {
      throw new Error('Decimals not supported yet')
    }
    return num.div(size)
  } else if (parsedType.name.startsWith('fixed')) {
    size = new BN(2).pow(new BN(parsedType.size[1]))
    num = decodeSingle('int256', data, offset)
    if (!num.mod(size).isZero()) {
      throw new Error('Decimals not supported yet')
    }
    return num.div(size)
  }
  throw new Error('Unsupported or invalid type: ' + parsedType.name)
}

// Parse the given type
// @returns: {} containing the type itself, memory usage and (including size and subArray if applicable)
function parseType (type) {
  var size
  var ret
  if (isArray(type)) {
    size = parseTypeArray(type)
    var subArray = type.slice(0, type.lastIndexOf('['))
    subArray = parseType(subArray)
    ret = {
      isArray: true,
      name: type,
      size: size,
      memoryUsage: size === 'dynamic' ? 32 : subArray.memoryUsage * size,
      subArray: subArray
    }
    return ret
  } else {
    var rawType
    switch (type) {
      case 'address':
        rawType = 'uint160'
        break
      case 'bool':
        rawType = 'uint8'
        break
      case 'string':
        rawType = 'bytes'
        break
    }
    ret = {
      rawType: rawType,
      name: type,
      memoryUsage: 32
    }

    if ((type.startsWith('bytes') && type !== 'bytes') || type.startsWith('uint') || type.startsWith('int')) {
      ret.size = parseTypeN(type)
    } else if (type.startsWith('ufixed') || type.startsWith('fixed')) {
      ret.size = parseTypeNxM(type)
    }

    if (type.startsWith('bytes') && type !== 'bytes' && (ret.size < 1 || ret.size > 32)) {
      throw new Error('Invalid bytes<N> width: ' + ret.size)
    }
    if ((type.startsWith('uint') || type.startsWith('int')) && (ret.size % 8 || ret.size < 8 || ret.size > 256)) {
      throw new Error('Invalid int/uint<N> width: ' + ret.size)
    }
    return ret
  }
}

// Is a type dynamic?
function isDynamic (type) {
  // FIXME: handle all types? I don't think anything is missing now
  return (type === 'string') || (type === 'bytes') || (parseTypeArray(type) === 'dynamic')
}

// Is a type an array?
function isArray (type) {
  return type.lastIndexOf(']') === type.length - 1
}

// Encode a method/event with arguments
// @types an array of string type names
// @args  an array of the appropriate values
ABI.rawEncode = function (types, values) {
  var output = []
  var data = []

  var headLength = 0

  types.forEach(function (type) {
    if (isArray(type)) {
      var size = parseTypeArray(type)

      if (size !== 'dynamic') {
        headLength += 32 * size
      } else {
        headLength += 32
      }
    } else {
      headLength += 32
    }
  })

  for (var i = 0; i < types.length; i++) {
    var type = elementaryName(types[i])
    var value = values[i]
    var cur = encodeSingle(type, value)

    // Use the head/tail method for storing dynamic data
    if (isDynamic(type)) {
      output.push(encodeSingle('uint256', headLength))
      data.push(cur)
      headLength += cur.length
    } else {
      output.push(cur)
    }
  }

  return Buffer.concat(output.concat(data))
}

ABI.rawDecode = function (types, data) {
  var ret = []
  data = Buffer.from(data)
  var offset = 0
  for (var i = 0; i < types.length; i++) {
    var type = elementaryName(types[i])
    var parsed = parseType(type, data, offset)
    var decoded = decodeSingle(parsed, data, offset)
    offset += parsed.memoryUsage
    ret.push(decoded)
  }
  return ret
}

ABI.simpleEncode = function (method) {
  var args = Array.prototype.slice.call(arguments).slice(1)
  var sig = parseSignature(method)

  // FIXME: validate/convert arguments
  if (args.length !== sig.args.length) {
    throw new Error('Argument count mismatch')
  }

  return Buffer.concat([ ABI.methodID(sig.method, sig.args), ABI.rawEncode(sig.args, args) ])
}

ABI.simpleDecode = function (method, data) {
  var sig = parseSignature(method)

  // FIXME: validate/convert arguments
  if (!sig.retargs) {
    throw new Error('No return values in method')
  }

  return ABI.rawDecode(sig.retargs, data)
}

function stringify (type, value) {
  if (type.startsWith('address') || type.startsWith('bytes')) {
    return '0x' + value.toString('hex')
  } else {
    return value.toString()
  }
}

ABI.stringify = function (types, values) {
  var ret = []

  for (var i in types) {
    var type = types[i]
    var value = values[i]

    // if it is an array type, concat the items
    if (/^[^\[]+\[.*\]$/.test(type)) {
      value = value.map(function (item) {
        return stringify(type, item)
      }).join(', ')
    } else {
      value = stringify(type, value)
    }

    ret.push(value)
  }

  return ret
}

ABI.solidityHexValue = function (type, value, bitsize) {
  // pass in bitsize = null if use default bitsize
  var size, num
  if (isArray(type)) {
    var subType = type.replace(/\[.*?\]/, '')
    if (!isArray(subType)) {
      var arraySize = parseTypeArray(type)
      if (arraySize !== 'dynamic' && arraySize !== 0 && value.length > arraySize) {
        throw new Error('Elements exceed array size: ' + arraySize)
      }
    }
    var arrayValues = value.map(function (v) {
      return ABI.solidityHexValue(subType, v, 256)
    })
    return Buffer.concat(arrayValues)
  } else if (type === 'bytes') {
    return value
  } else if (type === 'string') {
    return Buffer.from(value, 'utf8')
  } else if (type === 'bool') {
    bitsize = bitsize || 8
    var padding = Array((bitsize) / 4).join('0')
    return Buffer.from(value ? padding + '1' : padding + '0', 'hex')
  } else if (type === 'address') {
    var bytesize = 20
    if (bitsize) {
      bytesize = bitsize / 8
    }
    return utils.setLengthLeft(value, bytesize)
  } else if (type.startsWith('bytes')) {
    size = parseTypeN(type)
    if (size < 1 || size > 32) {
      throw new Error('Invalid bytes<N> width: ' + size)
    }

    return utils.setLengthRight(value, size)
  } else if (type.startsWith('uint')) {
    size = parseTypeN(type)
    if ((size % 8) || (size < 8) || (size > 256)) {
      throw new Error('Invalid uint<N> width: ' + size)
    }

    num = parseNumber(value)
    if (num.bitLength() > size) {
      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
    }

    bitsize = bitsize || size
    return num.toArrayLike(Buffer, 'be', bitsize / 8)
  } else if (type.startsWith('int')) {
    size = parseTypeN(type)
    if ((size % 8) || (size < 8) || (size > 256)) {
      throw new Error('Invalid int<N> width: ' + size)
    }

    num = parseNumber(value)
    if (num.bitLength() > size) {
      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
    }

    bitsize = bitsize || size
    return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8)
  } else {
    // FIXME: support all other types
    throw new Error('Unsupported or invalid type: ' + type)
  }
}

ABI.solidityPack = function (types, values) {
  if (types.length !== values.length) {
    throw new Error('Number of types are not matching the values')
  }

  var ret = []

  for (var i = 0; i < types.length; i++) {
    var type = elementaryName(types[i])
    var value = values[i]
    ret.push(ABI.solidityHexValue(type, value, null))
  }

  return Buffer.concat(ret)
}

ABI.soliditySHA3 = function (types, values) {
  return utils.keccak256(ABI.solidityPack(types, values))
}

ABI.soliditySHA256 = function (types, values) {
  return utils.sha256(ABI.solidityPack(types, values))
}

ABI.solidityRIPEMD160 = function (types, values) {
  return utils.ripemd160(ABI.solidityPack(types, values), true)
}

// Serpent's users are familiar with this encoding
// - s: string
// - b: bytes
// - b<N>: bytes<N>
// - i: int256
// - a: int256[]

function isNumeric (c) {
  // FIXME: is this correct? Seems to work
  return (c >= '0') && (c <= '9')
}

// For a "documentation" refer to https://github.com/ethereum/serpent/blob/develop/preprocess.cpp
ABI.fromSerpent = function (sig) {
  var ret = []
  for (var i = 0; i < sig.length; i++) {
    var type = sig[i]
    if (type === 's') {
      ret.push('bytes')
    } else if (type === 'b') {
      var tmp = 'bytes'
      var j = i + 1
      while ((j < sig.length) && isNumeric(sig[j])) {
        tmp += sig[j] - '0'
        j++
      }
      i = j - 1
      ret.push(tmp)
    } else if (type === 'i') {
      ret.push('int256')
    } else if (type === 'a') {
      ret.push('int256[]')
    } else {
      throw new Error('Unsupported or invalid type: ' + type)
    }
  }
  return ret
}

ABI.toSerpent = function (types) {
  var ret = []
  for (var i = 0; i < types.length; i++) {
    var type = types[i]
    if (type === 'bytes') {
      ret.push('s')
    } else if (type.startsWith('bytes')) {
      ret.push('b' + parseTypeN(type))
    } else if (type === 'int256') {
      ret.push('i')
    } else if (type === 'int256[]') {
      ret.push('a')
    } else {
      throw new Error('Unsupported or invalid type: ' + type)
    }
  }
  return ret.join('')
}

module.exports = ABI

}).call(this,require("buffer").Buffer)
},{"bn.js":158,"buffer":161,"ethereumjs-util":226}],222:[function(require,module,exports){
(function (Buffer){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require('assert');
var ethjsUtil = require('ethjs-util');
var secp256k1 = require('secp256k1');
var BN = require("bn.js");
var bytes_1 = require("./bytes");
var hash_1 = require("./hash");
/**
 * Returns a zero address.
 */
exports.zeroAddress = function () {
    var addressLength = 20;
    var addr = bytes_1.zeros(addressLength);
    return bytes_1.bufferToHex(addr);
};
/**
 * Checks if the address is a valid. Accepts checksummed addresses too.
 */
exports.isValidAddress = function (address) {
    return /^0x[0-9a-fA-F]{40}$/.test(address);
};
/**
 * Checks if a given address is a zero address.
 */
exports.isZeroAddress = function (address) {
    var zeroAddr = exports.zeroAddress();
    return zeroAddr === bytes_1.addHexPrefix(address);
};
/**
 * Returns a checksummed address.
 *
 * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
 * has the effect of checksummed addresses for one chain having invalid checksums for others.
 * For more details, consult EIP-1191.
 *
 * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly
 * used variation in Ethereum was without the chainId. This may change in the future.
 */
exports.toChecksumAddress = function (address, eip1191ChainId) {
    address = ethjsUtil.stripHexPrefix(address).toLowerCase();
    var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';
    var hash = hash_1.keccak(prefix + address).toString('hex');
    var ret = '0x';
    for (var i = 0; i < address.length; i++) {
        if (parseInt(hash[i], 16) >= 8) {
            ret += address[i].toUpperCase();
        }
        else {
            ret += address[i];
        }
    }
    return ret;
};
/**
 * Checks if the address is a valid checksummed address.
 *
 * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
 */
exports.isValidChecksumAddress = function (address, eip1191ChainId) {
    return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;
};
/**
 * Generates an address of a newly created contract.
 * @param from The address which is creating this new address
 * @param nonce The nonce of the from account
 */
exports.generateAddress = function (from, nonce) {
    from = bytes_1.toBuffer(from);
    var nonceBN = new BN(nonce);
    if (nonceBN.isZero()) {
        // in RLP we want to encode null in the case of zero nonce
        // read the RLP documentation for an answer if you dare
        return hash_1.rlphash([from, null]).slice(-20);
    }
    // Only take the lower 160bits of the hash
    return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);
};
/**
 * Generates an address for a contract created using CREATE2.
 * @param from The address which is creating this new address
 * @param salt A salt
 * @param initCode The init code of the contract being created
 */
exports.generateAddress2 = function (from, salt, initCode) {
    var fromBuf = bytes_1.toBuffer(from);
    var saltBuf = bytes_1.toBuffer(salt);
    var initCodeBuf = bytes_1.toBuffer(initCode);
    assert(fromBuf.length === 20);
    assert(saltBuf.length === 32);
    var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), fromBuf, saltBuf, hash_1.keccak256(initCodeBuf)]));
    return address.slice(-20);
};
/**
 * Returns true if the supplied address belongs to a precompiled account (Byzantium).
 */
exports.isPrecompiled = function (address) {
    var a = bytes_1.unpad(address);
    return a.length === 1 && a[0] >= 1 && a[0] <= 8;
};
/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 */
exports.isValidPrivate = function (privateKey) {
    return secp256k1.privateKeyVerify(privateKey);
};
/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param sanitize Accept public keys in other formats
 */
exports.isValidPublic = function (publicKey, sanitize) {
    if (sanitize === void 0) { sanitize = false; }
    if (publicKey.length === 64) {
        // Convert to SEC1 for secp256k1
        return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
    }
    if (!sanitize) {
        return false;
    }
    return secp256k1.publicKeyVerify(publicKey);
};
/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param sanitize Accept public keys in other formats
 */
exports.pubToAddress = function (pubKey, sanitize) {
    if (sanitize === void 0) { sanitize = false; }
    pubKey = bytes_1.toBuffer(pubKey);
    if (sanitize && pubKey.length !== 64) {
        pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
    }
    assert(pubKey.length === 64);
    // Only take the lower 160bits of the hash
    return hash_1.keccak(pubKey).slice(-20);
};
exports.publicToAddress = exports.pubToAddress;
/**
 * Returns the ethereum address of a given private key.
 * @param privateKey A private key must be 256 bits wide
 */
exports.privateToAddress = function (privateKey) {
    return exports.publicToAddress(exports.privateToPublic(privateKey));
};
/**
 * Returns the ethereum public key of a given private key.
 * @param privateKey A private key must be 256 bits wide
 */
exports.privateToPublic = function (privateKey) {
    privateKey = bytes_1.toBuffer(privateKey);
    // skip the type flag and use the X, Y points
    return secp256k1.publicKeyCreate(privateKey, false).slice(1);
};
/**
 * Converts a public key to the Ethereum format.
 */
exports.importPublic = function (publicKey) {
    publicKey = bytes_1.toBuffer(publicKey);
    if (publicKey.length !== 64) {
        publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
    }
    return publicKey;
};

}).call(this,require("buffer").Buffer)
},{"./bytes":223,"./hash":225,"assert":121,"bn.js":158,"buffer":161,"ethjs-util":236,"secp256k1":336}],223:[function(require,module,exports){
(function (Buffer){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ethjsUtil = require('ethjs-util');
var BN = require("bn.js");
/**
 * Returns a buffer filled with 0s.
 * @param bytes the number of bytes the buffer should be
 */
exports.zeros = function (bytes) {
    return Buffer.allocUnsafe(bytes).fill(0);
};
/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param msg the value to pad (Buffer|Array)
 * @param length the number of bytes the output should be
 * @param right whether to start padding form the left or right
 * @return (Buffer|Array)
 */
exports.setLengthLeft = function (msg, length, right) {
    if (right === void 0) { right = false; }
    var buf = exports.zeros(length);
    msg = exports.toBuffer(msg);
    if (right) {
        if (msg.length < length) {
            msg.copy(buf);
            return buf;
        }
        return msg.slice(0, length);
    }
    else {
        if (msg.length < length) {
            msg.copy(buf, length - msg.length);
            return buf;
        }
        return msg.slice(-length);
    }
};
exports.setLength = exports.setLengthLeft;
/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param msg the value to pad (Buffer|Array)
 * @param length the number of bytes the output should be
 * @return (Buffer|Array)
 */
exports.setLengthRight = function (msg, length) {
    return exports.setLength(msg, length, true);
};
/**
 * Trims leading zeros from a `Buffer` or an `Array`.
 * @param a (Buffer|Array|String)
 * @return (Buffer|Array|String)
 */
exports.unpad = function (a) {
    a = ethjsUtil.stripHexPrefix(a);
    var first = a[0];
    while (a.length > 0 && first.toString() === '0') {
        a = a.slice(1);
        first = a[0];
    }
    return a;
};
exports.stripZeros = exports.unpad;
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param v the value
 */
exports.toBuffer = function (v) {
    if (!Buffer.isBuffer(v)) {
        if (Array.isArray(v)) {
            v = Buffer.from(v);
        }
        else if (typeof v === 'string') {
            if (ethjsUtil.isHexString(v)) {
                v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');
            }
            else {
                throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + v);
            }
        }
        else if (typeof v === 'number') {
            v = ethjsUtil.intToBuffer(v);
        }
        else if (v === null || v === undefined) {
            v = Buffer.allocUnsafe(0);
        }
        else if (BN.isBN(v)) {
            v = v.toArrayLike(Buffer);
        }
        else if (v.toArray) {
            // converts a BN to a Buffer
            v = Buffer.from(v.toArray());
        }
        else {
            throw new Error('invalid type');
        }
    }
    return v;
};
/**
 * Converts a `Buffer` to a `Number`.
 * @param buf `Buffer` object to convert
 * @throws If the input number exceeds 53 bits.
 */
exports.bufferToInt = function (buf) {
    return new BN(exports.toBuffer(buf)).toNumber();
};
/**
 * Converts a `Buffer` into a `0x`-prefixed hex `String`.
 * @param buf `Buffer` object to convert
 */
exports.bufferToHex = function (buf) {
    buf = exports.toBuffer(buf);
    return '0x' + buf.toString('hex');
};
/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param num Signed integer value
 */
exports.fromSigned = function (num) {
    return new BN(num).fromTwos(256);
};
/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param num
 */
exports.toUnsigned = function (num) {
    return Buffer.from(num.toTwos(256).toArray());
};
/**
 * Adds "0x" to a given `String` if it does not already start with "0x".
 */
exports.addHexPrefix = function (str) {
    if (typeof str !== 'string') {
        return str;
    }
    return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;
};
/**
 * Converts a `Buffer` or `Array` to JSON.
 * @param ba (Buffer|Array)
 * @return (Array|String|null)
 */
exports.baToJSON = function (ba) {
    if (Buffer.isBuffer(ba)) {
        return "0x" + ba.toString('hex');
    }
    else if (ba instanceof Array) {
        var array = [];
        for (var i = 0; i < ba.length; i++) {
            array.push(exports.baToJSON(ba[i]));
        }
        return array;
    }
};

}).call(this,require("buffer").Buffer)
},{"bn.js":158,"buffer":161,"ethjs-util":236}],224:[function(require,module,exports){
(function (Buffer){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BN = require("bn.js");
/**
 * The max integer that this VM can handle
 */
exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
/**
 * 2^256
 */
exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
/**
 * Keccak-256 hash of null
 */
exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
/**
 * Keccak-256 hash of null
 */
exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
/**
 * Keccak-256 of an RLP of an empty array
 */
exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
/**
 * Keccak-256 of an RLP of an empty array
 */
exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
/**
 * Keccak-256 hash of the RLP of null
 */
exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
/**
 * Keccak-256 hash of the RLP of null
 */
exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');

}).call(this,require("buffer").Buffer)
},{"bn.js":158,"buffer":161}],225:[function(require,module,exports){
(function (Buffer){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var createKeccakHash = require('keccak');
var createHash = require('create-hash');
var ethjsUtil = require('ethjs-util');
var rlp = require("rlp");
var bytes_1 = require("./bytes");
/**
 * Creates Keccak hash of the input
 * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value
 * it's interpreted as hexadecimal, otherwise as utf8.
 * @param bits The Keccak width
 */
exports.keccak = function (a, bits) {
    if (bits === void 0) { bits = 256; }
    if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {
        a = Buffer.from(a, 'utf8');
    }
    else {
        a = bytes_1.toBuffer(a);
    }
    if (!bits)
        bits = 256;
    return createKeccakHash("keccak" + bits)
        .update(a)
        .digest();
};
/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
 * @param a The input data (Buffer|Array|String|Number)
 */
exports.keccak256 = function (a) {
    return exports.keccak(a);
};
/**
 * Creates SHA256 hash of the input.
 * @param a The input data (Buffer|Array|String|Number)
 */
exports.sha256 = function (a) {
    a = bytes_1.toBuffer(a);
    return createHash('sha256')
        .update(a)
        .digest();
};
/**
 * Creates RIPEMD160 hash of the input.
 * @param a The input data (Buffer|Array|String|Number)
 * @param padded Whether it should be padded to 256 bits or not
 */
exports.ripemd160 = function (a, padded) {
    a = bytes_1.toBuffer(a);
    var hash = createHash('rmd160')
        .update(a)
        .digest();
    if (padded === true) {
        return bytes_1.setLength(hash, 32);
    }
    else {
        return hash;
    }
};
/**
 * Creates SHA-3 hash of the RLP encoded version of the input.
 * @param a The input data
 */
exports.rlphash = function (a) {
    return exports.keccak(rlp.encode(a));
};

}).call(this,require("buffer").Buffer)
},{"./bytes":223,"buffer":161,"create-hash":169,"ethjs-util":236,"keccak":229,"rlp":332}],226:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var secp256k1 = require('secp256k1');
exports.secp256k1 = secp256k1;
var ethjsUtil = require('ethjs-util');
var BN = require("bn.js");
exports.BN = BN;
var rlp = require("rlp");
exports.rlp = rlp;
Object.assign(exports, ethjsUtil);
/**
 * Constants
 */
__export(require("./constants"));
/**
 * Public-key cryptography (secp256k1) and addresses
 */
__export(require("./account"));
/**
 * Hash functions
 */
__export(require("./hash"));
/**
 * ECDSA signature
 */
__export(require("./signature"));
/**
 * Utilities for manipulating Buffers, byte arrays, etc.
 */
__export(require("./bytes"));
/**
 * Function for definining properties on an object
 */
__export(require("./object"));

},{"./account":222,"./bytes":223,"./constants":224,"./hash":225,"./object":227,"./signature":228,"bn.js":158,"ethjs-util":236,"rlp":332,"secp256k1":336}],227:[function(require,module,exports){
(function (Buffer){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require('assert');
var ethjsUtil = require('ethjs-util');
var rlp = require("rlp");
var bytes_1 = require("./bytes");
/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param self the `Object` to define properties on
 * @param fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param data data to be validated against the definitions
 * @deprecated
 */
exports.defineProperties = function (self, fields, data) {
    self.raw = [];
    self._fields = [];
    // attach the `toJSON`
    self.toJSON = function (label) {
        if (label === void 0) { label = false; }
        if (label) {
            var obj_1 = {};
            self._fields.forEach(function (field) {
                obj_1[field] = "0x" + self[field].toString('hex');
            });
            return obj_1;
        }
        return bytes_1.baToJSON(self.raw);
    };
    self.serialize = function serialize() {
        return rlp.encode(self.raw);
    };
    fields.forEach(function (field, i) {
        self._fields.push(field.name);
        function getter() {
            return self.raw[i];
        }
        function setter(v) {
            v = bytes_1.toBuffer(v);
            if (v.toString('hex') === '00' && !field.allowZero) {
                v = Buffer.allocUnsafe(0);
            }
            if (field.allowLess && field.length) {
                v = bytes_1.stripZeros(v);
                assert(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
            }
            else if (!(field.allowZero && v.length === 0) && field.length) {
                assert(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
            }
            self.raw[i] = v;
        }
        Object.defineProperty(self, field.name, {
            enumerable: true,
            configurable: true,
            get: getter,
            set: setter,
        });
        if (field.default) {
            self[field.name] = field.default;
        }
        // attach alias
        if (field.alias) {
            Object.defineProperty(self, field.alias, {
                enumerable: false,
                configurable: true,
                set: setter,
                get: getter,
            });
        }
    });
    // if the constuctor is passed data
    if (data) {
        if (typeof data === 'string') {
            data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');
        }
        if (Buffer.isBuffer(data)) {
            data = rlp.decode(data);
        }
        if (Array.isArray(data)) {
            if (data.length > self._fields.length) {
                throw new Error('wrong number of fields in data');
            }
            // make sure all the items are buffers
            data.forEach(function (d, i) {
                self[self._fields[i]] = bytes_1.toBuffer(d);
            });
        }
        else if (typeof data === 'object') {
            var keys_1 = Object.keys(data);
            fields.forEach(function (field) {
                if (keys_1.indexOf(field.name) !== -1)
                    self[field.name] = data[field.name];
                if (keys_1.indexOf(field.alias) !== -1)
                    self[field.alias] = data[field.alias];
            });
        }
        else {
            throw new Error('invalid data');
        }
    }
};

}).call(this,require("buffer").Buffer)
},{"./bytes":223,"assert":121,"buffer":161,"ethjs-util":236,"rlp":332}],228:[function(require,module,exports){
(function (Buffer){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var secp256k1 = require('secp256k1');
var BN = require("bn.js");
var bytes_1 = require("./bytes");
var hash_1 = require("./hash");
/**
 * Returns the ECDSA signature of a message hash.
 */
exports.ecsign = function (msgHash, privateKey, chainId) {
    var sig = secp256k1.sign(msgHash, privateKey);
    var recovery = sig.recovery;
    var ret = {
        r: sig.signature.slice(0, 32),
        s: sig.signature.slice(32, 64),
        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,
    };
    return ret;
};
/**
 * ECDSA public key recovery from signature.
 * @returns Recovered public key
 */
exports.ecrecover = function (msgHash, v, r, s, chainId) {
    var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);
    var recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
};
/**
 * Convert signature parameters into the format of `eth_sign` RPC method.
 * @returns Signature
 */
exports.toRpcSig = function (v, r, s, chainId) {
    var recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));
};
/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 */
exports.fromRpcSig = function (sig) {
    var buf = bytes_1.toBuffer(sig);
    // NOTE: with potential introduction of chainId this might need to be updated
    if (buf.length !== 65) {
        throw new Error('Invalid signature length');
    }
    var v = buf[64];
    // support both versions of `eth_sign` responses
    if (v < 27) {
        v += 27;
    }
    return {
        v: v,
        r: buf.slice(0, 32),
        s: buf.slice(32, 64),
    };
};
/**
 * Validate a ECDSA signature.
 * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
 */
exports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
    if (homesteadOrLater === void 0) { homesteadOrLater = true; }
    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
    if (r.length !== 32 || s.length !== 32) {
        return false;
    }
    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
    }
    var rBN = new BN(r);
    var sBN = new BN(s);
    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
        return false;
    }
    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
        return false;
    }
    return true;
};
/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 */
exports.hashPersonalMessage = function (message) {
    var prefix = Buffer.from("\u0019Ethereum Signed Message:\n" + message.length.toString(), 'utf-8');
    return hash_1.keccak(Buffer.concat([prefix, message]));
};
function calculateSigRecovery(v, chainId) {
    return chainId ? v - (2 * chainId + 35) : v - 27;
}
function isValidSigRecovery(recovery) {
    return recovery === 0 || recovery === 1;
}

}).call(this,require("buffer").Buffer)
},{"./bytes":223,"./hash":225,"bn.js":158,"buffer":161,"secp256k1":336}],229:[function(require,module,exports){
'use strict'
module.exports = require('./lib/api')(require('./lib/keccak'))

},{"./lib/api":230,"./lib/keccak":234}],230:[function(require,module,exports){
'use strict'
const createKeccak = require('./keccak')
const createShake = require('./shake')

module.exports = function (KeccakState) {
  const Keccak = createKeccak(KeccakState)
  const Shake = createShake(KeccakState)

  return function (algorithm, options) {
    const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm
    switch (hash) {
      case 'keccak224': return new Keccak(1152, 448, null, 224, options)
      case 'keccak256': return new Keccak(1088, 512, null, 256, options)
      case 'keccak384': return new Keccak(832, 768, null, 384, options)
      case 'keccak512': return new Keccak(576, 1024, null, 512, options)

      case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)
      case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)
      case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)
      case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)

      case 'shake128': return new Shake(1344, 256, 0x1f, options)
      case 'shake256': return new Shake(1088, 512, 0x1f, options)

      default: throw new Error('Invald algorithm: ' + algorithm)
    }
  }
}

},{"./keccak":231,"./shake":232}],231:[function(require,module,exports){
'use strict'
const Buffer = require('safe-buffer').Buffer
const Transform = require('stream').Transform
const inherits = require('inherits')

module.exports = function (KeccakState) {
  function Keccak (rate, capacity, delimitedSuffix, hashBitLength, options) {
    Transform.call(this, options)

    this._rate = rate
    this._capacity = capacity
    this._delimitedSuffix = delimitedSuffix
    this._hashBitLength = hashBitLength
    this._options = options

    this._state = new KeccakState()
    this._state.initialize(rate, capacity)
    this._finalized = false
  }

  inherits(Keccak, Transform)

  Keccak.prototype._transform = function (chunk, encoding, callback) {
    let error = null
    try {
      this.update(chunk, encoding)
    } catch (err) {
      error = err
    }

    callback(error)
  }

  Keccak.prototype._flush = function (callback) {
    let error = null
    try {
      this.push(this.digest())
    } catch (err) {
      error = err
    }

    callback(error)
  }

  Keccak.prototype.update = function (data, encoding) {
    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
    if (this._finalized) throw new Error('Digest already called')
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

    this._state.absorb(data)

    return this
  }

  Keccak.prototype.digest = function (encoding) {
    if (this._finalized) throw new Error('Digest already called')
    this._finalized = true

    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)
    let digest = this._state.squeeze(this._hashBitLength / 8)
    if (encoding !== undefined) digest = digest.toString(encoding)

    this._resetState()

    return digest
  }

  // remove result from memory
  Keccak.prototype._resetState = function () {
    this._state.initialize(this._rate, this._capacity)
    return this
  }

  // because sometimes we need hash right now and little later
  Keccak.prototype._clone = function () {
    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)
    this._state.copy(clone._state)
    clone._finalized = this._finalized

    return clone
  }

  return Keccak
}

},{"inherits":255,"safe-buffer":333,"stream":352}],232:[function(require,module,exports){
'use strict'
const Buffer = require('safe-buffer').Buffer
const Transform = require('stream').Transform
const inherits = require('inherits')

module.exports = function (KeccakState) {
  function Shake (rate, capacity, delimitedSuffix, options) {
    Transform.call(this, options)

    this._rate = rate
    this._capacity = capacity
    this._delimitedSuffix = delimitedSuffix
    this._options = options

    this._state = new KeccakState()
    this._state.initialize(rate, capacity)
    this._finalized = false
  }

  inherits(Shake, Transform)

  Shake.prototype._transform = function (chunk, encoding, callback) {
    let error = null
    try {
      this.update(chunk, encoding)
    } catch (err) {
      error = err
    }

    callback(error)
  }

  Shake.prototype._flush = function () {}

  Shake.prototype._read = function (size) {
    this.push(this.squeeze(size))
  }

  Shake.prototype.update = function (data, encoding) {
    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
    if (this._finalized) throw new Error('Squeeze already called')
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

    this._state.absorb(data)

    return this
  }

  Shake.prototype.squeeze = function (dataByteLength, encoding) {
    if (!this._finalized) {
      this._finalized = true
      this._state.absorbLastFewBits(this._delimitedSuffix)
    }

    let data = this._state.squeeze(dataByteLength)
    if (encoding !== undefined) data = data.toString(encoding)

    return data
  }

  Shake.prototype._resetState = function () {
    this._state.initialize(this._rate, this._capacity)
    return this
  }

  Shake.prototype._clone = function () {
    const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)
    this._state.copy(clone._state)
    clone._finalized = this._finalized

    return clone
  }

  return Shake
}

},{"inherits":255,"safe-buffer":333,"stream":352}],233:[function(require,module,exports){
'use strict'
const P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]

exports.p1600 = function (s) {
  for (let round = 0; round < 24; ++round) {
    // theta
    const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]
    const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]
    const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]
    const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]
    const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]
    const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]
    const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]
    const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]
    const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]
    const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]

    let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31)
    let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31)
    const t1slo0 = s[0] ^ lo
    const t1shi0 = s[1] ^ hi
    const t1slo5 = s[10] ^ lo
    const t1shi5 = s[11] ^ hi
    const t1slo10 = s[20] ^ lo
    const t1shi10 = s[21] ^ hi
    const t1slo15 = s[30] ^ lo
    const t1shi15 = s[31] ^ hi
    const t1slo20 = s[40] ^ lo
    const t1shi20 = s[41] ^ hi
    lo = lo0 ^ (lo2 << 1 | hi2 >>> 31)
    hi = hi0 ^ (hi2 << 1 | lo2 >>> 31)
    const t1slo1 = s[2] ^ lo
    const t1shi1 = s[3] ^ hi
    const t1slo6 = s[12] ^ lo
    const t1shi6 = s[13] ^ hi
    const t1slo11 = s[22] ^ lo
    const t1shi11 = s[23] ^ hi
    const t1slo16 = s[32] ^ lo
    const t1shi16 = s[33] ^ hi
    const t1slo21 = s[42] ^ lo
    const t1shi21 = s[43] ^ hi
    lo = lo1 ^ (lo3 << 1 | hi3 >>> 31)
    hi = hi1 ^ (hi3 << 1 | lo3 >>> 31)
    const t1slo2 = s[4] ^ lo
    const t1shi2 = s[5] ^ hi
    const t1slo7 = s[14] ^ lo
    const t1shi7 = s[15] ^ hi
    const t1slo12 = s[24] ^ lo
    const t1shi12 = s[25] ^ hi
    const t1slo17 = s[34] ^ lo
    const t1shi17 = s[35] ^ hi
    const t1slo22 = s[44] ^ lo
    const t1shi22 = s[45] ^ hi
    lo = lo2 ^ (lo4 << 1 | hi4 >>> 31)
    hi = hi2 ^ (hi4 << 1 | lo4 >>> 31)
    const t1slo3 = s[6] ^ lo
    const t1shi3 = s[7] ^ hi
    const t1slo8 = s[16] ^ lo
    const t1shi8 = s[17] ^ hi
    const t1slo13 = s[26] ^ lo
    const t1shi13 = s[27] ^ hi
    const t1slo18 = s[36] ^ lo
    const t1shi18 = s[37] ^ hi
    const t1slo23 = s[46] ^ lo
    const t1shi23 = s[47] ^ hi
    lo = lo3 ^ (lo0 << 1 | hi0 >>> 31)
    hi = hi3 ^ (hi0 << 1 | lo0 >>> 31)
    const t1slo4 = s[8] ^ lo
    const t1shi4 = s[9] ^ hi
    const t1slo9 = s[18] ^ lo
    const t1shi9 = s[19] ^ hi
    const t1slo14 = s[28] ^ lo
    const t1shi14 = s[29] ^ hi
    const t1slo19 = s[38] ^ lo
    const t1shi19 = s[39] ^ hi
    const t1slo24 = s[48] ^ lo
    const t1shi24 = s[49] ^ hi

    // rho & pi
    const t2slo0 = t1slo0
    const t2shi0 = t1shi0
    const t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28)
    const t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28)
    const t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29)
    const t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29)
    const t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23)
    const t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23)
    const t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14)
    const t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14)
    const t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31)
    const t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31)
    const t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20)
    const t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20)
    const t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22)
    const t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22)
    const t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19)
    const t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19)
    const t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30)
    const t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30)
    const t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2)
    const t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2)
    const t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26)
    const t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26)
    const t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21)
    const t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21)
    const t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17)
    const t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17)
    const t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3)
    const t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3)
    const t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4)
    const t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4)
    const t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9)
    const t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9)
    const t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7)
    const t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7)
    const t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11)
    const t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11)
    const t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8)
    const t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8)
    const t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5)
    const t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5)
    const t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12)
    const t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12)
    const t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25)
    const t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25)
    const t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24)
    const t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24)
    const t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18)
    const t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18)

    // chi
    s[0] = t2slo0 ^ (~t2slo1 & t2slo2)
    s[1] = t2shi0 ^ (~t2shi1 & t2shi2)
    s[10] = t2slo5 ^ (~t2slo6 & t2slo7)
    s[11] = t2shi5 ^ (~t2shi6 & t2shi7)
    s[20] = t2slo10 ^ (~t2slo11 & t2slo12)
    s[21] = t2shi10 ^ (~t2shi11 & t2shi12)
    s[30] = t2slo15 ^ (~t2slo16 & t2slo17)
    s[31] = t2shi15 ^ (~t2shi16 & t2shi17)
    s[40] = t2slo20 ^ (~t2slo21 & t2slo22)
    s[41] = t2shi20 ^ (~t2shi21 & t2shi22)
    s[2] = t2slo1 ^ (~t2slo2 & t2slo3)
    s[3] = t2shi1 ^ (~t2shi2 & t2shi3)
    s[12] = t2slo6 ^ (~t2slo7 & t2slo8)
    s[13] = t2shi6 ^ (~t2shi7 & t2shi8)
    s[22] = t2slo11 ^ (~t2slo12 & t2slo13)
    s[23] = t2shi11 ^ (~t2shi12 & t2shi13)
    s[32] = t2slo16 ^ (~t2slo17 & t2slo18)
    s[33] = t2shi16 ^ (~t2shi17 & t2shi18)
    s[42] = t2slo21 ^ (~t2slo22 & t2slo23)
    s[43] = t2shi21 ^ (~t2shi22 & t2shi23)
    s[4] = t2slo2 ^ (~t2slo3 & t2slo4)
    s[5] = t2shi2 ^ (~t2shi3 & t2shi4)
    s[14] = t2slo7 ^ (~t2slo8 & t2slo9)
    s[15] = t2shi7 ^ (~t2shi8 & t2shi9)
    s[24] = t2slo12 ^ (~t2slo13 & t2slo14)
    s[25] = t2shi12 ^ (~t2shi13 & t2shi14)
    s[34] = t2slo17 ^ (~t2slo18 & t2slo19)
    s[35] = t2shi17 ^ (~t2shi18 & t2shi19)
    s[44] = t2slo22 ^ (~t2slo23 & t2slo24)
    s[45] = t2shi22 ^ (~t2shi23 & t2shi24)
    s[6] = t2slo3 ^ (~t2slo4 & t2slo0)
    s[7] = t2shi3 ^ (~t2shi4 & t2shi0)
    s[16] = t2slo8 ^ (~t2slo9 & t2slo5)
    s[17] = t2shi8 ^ (~t2shi9 & t2shi5)
    s[26] = t2slo13 ^ (~t2slo14 & t2slo10)
    s[27] = t2shi13 ^ (~t2shi14 & t2shi10)
    s[36] = t2slo18 ^ (~t2slo19 & t2slo15)
    s[37] = t2shi18 ^ (~t2shi19 & t2shi15)
    s[46] = t2slo23 ^ (~t2slo24 & t2slo20)
    s[47] = t2shi23 ^ (~t2shi24 & t2shi20)
    s[8] = t2slo4 ^ (~t2slo0 & t2slo1)
    s[9] = t2shi4 ^ (~t2shi0 & t2shi1)
    s[18] = t2slo9 ^ (~t2slo5 & t2slo6)
    s[19] = t2shi9 ^ (~t2shi5 & t2shi6)
    s[28] = t2slo14 ^ (~t2slo10 & t2slo11)
    s[29] = t2shi14 ^ (~t2shi10 & t2shi11)
    s[38] = t2slo19 ^ (~t2slo15 & t2slo16)
    s[39] = t2shi19 ^ (~t2shi15 & t2shi16)
    s[48] = t2slo24 ^ (~t2slo20 & t2slo21)
    s[49] = t2shi24 ^ (~t2shi20 & t2shi21)

    // iota
    s[0] ^= P1600_ROUND_CONSTANTS[round * 2]
    s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1]
  }
}

},{}],234:[function(require,module,exports){
'use strict'
const Buffer = require('safe-buffer').Buffer
const keccakState = require('./keccak-state-unroll')

function Keccak () {
  // much faster than `new Array(50)`
  this.state = [
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0
  ]

  this.blockSize = null
  this.count = 0
  this.squeezing = false
}

Keccak.prototype.initialize = function (rate, capacity) {
  for (let i = 0; i < 50; ++i) this.state[i] = 0
  this.blockSize = rate / 8
  this.count = 0
  this.squeezing = false
}

Keccak.prototype.absorb = function (data) {
  for (let i = 0; i < data.length; ++i) {
    this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))
    this.count += 1
    if (this.count === this.blockSize) {
      keccakState.p1600(this.state)
      this.count = 0
    }
  }
}

Keccak.prototype.absorbLastFewBits = function (bits) {
  this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))
  if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)
  this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))
  keccakState.p1600(this.state)
  this.count = 0
  this.squeezing = true
}

Keccak.prototype.squeeze = function (length) {
  if (!this.squeezing) this.absorbLastFewBits(0x01)

  const output = Buffer.alloc(length)
  for (var i = 0; i < length; ++i) {
    output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff
    this.count += 1
    if (this.count === this.blockSize) {
      keccakState.p1600(this.state)
      this.count = 0
    }
  }

  return output
}

Keccak.prototype.copy = function (dest) {
  for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i]
  dest.blockSize = this.blockSize
  dest.count = this.count
  dest.squeezing = this.squeezing
}

module.exports = Keccak

},{"./keccak-state-unroll":233,"safe-buffer":333}],235:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var createKeccakHash = require('keccak');
var secp256k1 = require('secp256k1');
var assert = require('assert');
var rlp = require('rlp');
var BN = require('bn.js');
var createHash = require('create-hash');
var Buffer = require('safe-buffer').Buffer;
Object.assign(exports, require('ethjs-util'));

/**
 * the max integer that this VM can handle (a ```BN```)
 * @var {BN} MAX_INTEGER
 */
exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);

/**
 * 2^256 (a ```BN```)
 * @var {BN} TWO_POW256
 */
exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);

/**
 * Keccak-256 hash of null (a ```String```)
 * @var {String} KECCAK256_NULL_S
 */
exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;

/**
 * Keccak-256 hash of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_NULL
 */
exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
exports.SHA3_NULL = exports.KECCAK256_NULL;

/**
 * Keccak-256 of an RLP of an empty array (a ```String```)
 * @var {String} KECCAK256_RLP_ARRAY_S
 */
exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;

/**
 * Keccak-256 of an RLP of an empty array (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP_ARRAY
 */
exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;

/**
 * Keccak-256 hash of the RLP of null  (a ```String```)
 * @var {String} KECCAK256_RLP_S
 */
exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;

/**
 * Keccak-256 hash of the RLP of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP
 */
exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
exports.SHA3_RLP = exports.KECCAK256_RLP;

/**
 * [`BN`](https://github.com/indutny/bn.js)
 * @var {Function}
 */
exports.BN = BN;

/**
 * [`rlp`](https://github.com/ethereumjs/rlp)
 * @var {Function}
 */
exports.rlp = rlp;

/**
 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
 * @var {Object}
 */
exports.secp256k1 = secp256k1;

/**
 * Returns a buffer filled with 0s
 * @method zeros
 * @param {Number} bytes  the number of bytes the buffer should be
 * @return {Buffer}
 */
exports.zeros = function (bytes) {
  return Buffer.allocUnsafe(bytes).fill(0);
};

/**
  * Returns a zero address
  * @method zeroAddress
  * @return {String}
  */
exports.zeroAddress = function () {
  var addressLength = 20;
  var zeroAddress = exports.zeros(addressLength);
  return exports.bufferToHex(zeroAddress);
};

/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @method lsetLength
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @param {Boolean} [right=false] whether to start padding form the left or right
 * @return {Buffer|Array}
 */
exports.setLengthLeft = exports.setLength = function (msg, length, right) {
  var buf = exports.zeros(length);
  msg = exports.toBuffer(msg);
  if (right) {
    if (msg.length < length) {
      msg.copy(buf);
      return buf;
    }
    return msg.slice(0, length);
  } else {
    if (msg.length < length) {
      msg.copy(buf, length - msg.length);
      return buf;
    }
    return msg.slice(-length);
  }
};

/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @return {Buffer|Array}
 */
exports.setLengthRight = function (msg, length) {
  return exports.setLength(msg, length, true);
};

/**
 * Trims leading zeros from a `Buffer` or an `Array`
 * @param {Buffer|Array|String} a
 * @return {Buffer|Array|String}
 */
exports.unpad = exports.stripZeros = function (a) {
  a = exports.stripHexPrefix(a);
  var first = a[0];
  while (a.length > 0 && first.toString() === '0') {
    a = a.slice(1);
    first = a[0];
  }
  return a;
};
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param {*} v the value
 */
exports.toBuffer = function (v) {
  if (!Buffer.isBuffer(v)) {
    if (Array.isArray(v)) {
      v = Buffer.from(v);
    } else if (typeof v === 'string') {
      if (exports.isHexString(v)) {
        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
      } else {
        v = Buffer.from(v);
      }
    } else if (typeof v === 'number') {
      v = exports.intToBuffer(v);
    } else if (v === null || v === undefined) {
      v = Buffer.allocUnsafe(0);
    } else if (BN.isBN(v)) {
      v = v.toArrayLike(Buffer);
    } else if (v.toArray) {
      // converts a BN to a Buffer
      v = Buffer.from(v.toArray());
    } else {
      throw new Error('invalid type');
    }
  }
  return v;
};

/**
 * Converts a `Buffer` to a `Number`
 * @param {Buffer} buf
 * @return {Number}
 * @throws If the input number exceeds 53 bits.
 */
exports.bufferToInt = function (buf) {
  return new BN(exports.toBuffer(buf)).toNumber();
};

/**
 * Converts a `Buffer` into a hex `String`
 * @param {Buffer} buf
 * @return {String}
 */
exports.bufferToHex = function (buf) {
  buf = exports.toBuffer(buf);
  return '0x' + buf.toString('hex');
};

/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param {Buffer} num
 * @return {BN}
 */
exports.fromSigned = function (num) {
  return new BN(num).fromTwos(256);
};

/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param {BN} num
 * @return {Buffer}
 */
exports.toUnsigned = function (num) {
  return Buffer.from(num.toTwos(256).toArray());
};

/**
 * Creates Keccak hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the Keccak width
 * @return {Buffer}
 */
exports.keccak = function (a, bits) {
  a = exports.toBuffer(a);
  if (!bits) bits = 256;

  return createKeccakHash('keccak' + bits).update(a).digest();
};

/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.keccak256 = function (a) {
  return exports.keccak(a);
};

/**
 * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the SHA-3 width
 * @return {Buffer}
 */
exports.sha3 = exports.keccak;

/**
 * Creates SHA256 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.sha256 = function (a) {
  a = exports.toBuffer(a);
  return createHash('sha256').update(a).digest();
};

/**
 * Creates RIPEMD160 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Boolean} padded whether it should be padded to 256 bits or not
 * @return {Buffer}
 */
exports.ripemd160 = function (a, padded) {
  a = exports.toBuffer(a);
  var hash = createHash('rmd160').update(a).digest();
  if (padded === true) {
    return exports.setLength(hash, 32);
  } else {
    return hash;
  }
};

/**
 * Creates SHA-3 hash of the RLP encoded version of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.rlphash = function (a) {
  return exports.keccak(rlp.encode(a));
};

/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 * @param {Buffer} privateKey
 * @return {Boolean}
 */
exports.isValidPrivate = function (privateKey) {
  return secp256k1.privateKeyVerify(privateKey);
};

/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Boolean}
 */
exports.isValidPublic = function (publicKey, sanitize) {
  if (publicKey.length === 64) {
    // Convert to SEC1 for secp256k1
    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
  }

  if (!sanitize) {
    return false;
  }

  return secp256k1.publicKeyVerify(publicKey);
};

/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Buffer}
 */
exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
  pubKey = exports.toBuffer(pubKey);
  if (sanitize && pubKey.length !== 64) {
    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
  }
  assert(pubKey.length === 64);
  // Only take the lower 160bits of the hash
  return exports.keccak(pubKey).slice(-20);
};

/**
 * Returns the ethereum public key of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
var privateToPublic = exports.privateToPublic = function (privateKey) {
  privateKey = exports.toBuffer(privateKey);
  // skip the type flag and use the X, Y points
  return secp256k1.publicKeyCreate(privateKey, false).slice(1);
};

/**
 * Converts a public key to the Ethereum format.
 * @param {Buffer} publicKey
 * @return {Buffer}
 */
exports.importPublic = function (publicKey) {
  publicKey = exports.toBuffer(publicKey);
  if (publicKey.length !== 64) {
    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
  }
  return publicKey;
};

/**
 * ECDSA sign
 * @param {Buffer} msgHash
 * @param {Buffer} privateKey
 * @return {Object}
 */
exports.ecsign = function (msgHash, privateKey) {
  var sig = secp256k1.sign(msgHash, privateKey);

  var ret = {};
  ret.r = sig.signature.slice(0, 32);
  ret.s = sig.signature.slice(32, 64);
  ret.v = sig.recovery + 27;
  return ret;
};

/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 * @param message
 * @returns {Buffer} hash
 */
exports.hashPersonalMessage = function (message) {
  var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
  return exports.keccak(Buffer.concat([prefix, message]));
};

/**
 * ECDSA public key recovery from signature
 * @param {Buffer} msgHash
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {Buffer} publicKey
 */
exports.ecrecover = function (msgHash, v, r, s) {
  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
  var recovery = v - 27;
  if (recovery !== 0 && recovery !== 1) {
    throw new Error('Invalid signature v value');
  }
  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
};

/**
 * Convert signature parameters into the format of `eth_sign` RPC method
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {String} sig
 */
exports.toRpcSig = function (v, r, s) {
  // NOTE: with potential introduction of chainId this might need to be updated
  if (v !== 27 && v !== 28) {
    throw new Error('Invalid recovery id');
  }

  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
};

/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 * @param {String} sig
 * @return {Object}
 */
exports.fromRpcSig = function (sig) {
  sig = exports.toBuffer(sig);

  // NOTE: with potential introduction of chainId this might need to be updated
  if (sig.length !== 65) {
    throw new Error('Invalid signature length');
  }

  var v = sig[64];
  // support both versions of `eth_sign` responses
  if (v < 27) {
    v += 27;
  }

  return {
    v: v,
    r: sig.slice(0, 32),
    s: sig.slice(32, 64)
  };
};

/**
 * Returns the ethereum address of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
exports.privateToAddress = function (privateKey) {
  return exports.publicToAddress(privateToPublic(privateKey));
};

/**
 * Checks if the address is a valid. Accepts checksummed addresses too
 * @param {String} address
 * @return {Boolean}
 */
exports.isValidAddress = function (address) {
  return (/^0x[0-9a-fA-F]{40}$/.test(address)
  );
};

/**
  * Checks if a given address is a zero address
  * @method isZeroAddress
  * @param {String} address
  * @return {Boolean}
  */
exports.isZeroAddress = function (address) {
  var zeroAddress = exports.zeroAddress();
  return zeroAddress === exports.addHexPrefix(address);
};

/**
 * Returns a checksummed address
 * @param {String} address
 * @return {String}
 */
exports.toChecksumAddress = function (address) {
  address = exports.stripHexPrefix(address).toLowerCase();
  var hash = exports.keccak(address).toString('hex');
  var ret = '0x';

  for (var i = 0; i < address.length; i++) {
    if (parseInt(hash[i], 16) >= 8) {
      ret += address[i].toUpperCase();
    } else {
      ret += address[i];
    }
  }

  return ret;
};

/**
 * Checks if the address is a valid checksummed address
 * @param {Buffer} address
 * @return {Boolean}
 */
exports.isValidChecksumAddress = function (address) {
  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
};

/**
 * Generates an address of a newly created contract
 * @param {Buffer} from the address which is creating this new address
 * @param {Buffer} nonce the nonce of the from account
 * @return {Buffer}
 */
exports.generateAddress = function (from, nonce) {
  from = exports.toBuffer(from);
  nonce = new BN(nonce);

  if (nonce.isZero()) {
    // in RLP we want to encode null in the case of zero nonce
    // read the RLP documentation for an answer if you dare
    nonce = null;
  } else {
    nonce = Buffer.from(nonce.toArray());
  }

  // Only take the lower 160bits of the hash
  return exports.rlphash([from, nonce]).slice(-20);
};

/**
 * Returns true if the supplied address belongs to a precompiled account (Byzantium)
 * @param {Buffer|String} address
 * @return {Boolean}
 */
exports.isPrecompiled = function (address) {
  var a = exports.unpad(address);
  return a.length === 1 && a[0] >= 1 && a[0] <= 8;
};

/**
 * Adds "0x" to a given `String` if it does not already start with "0x"
 * @param {String} str
 * @return {String}
 */
exports.addHexPrefix = function (str) {
  if (typeof str !== 'string') {
    return str;
  }

  return exports.isHexPrefixed(str) ? str : '0x' + str;
};

/**
 * Validate ECDSA signature
 * @method isValidSignature
 * @param {Buffer} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @param {Boolean} [homestead=true]
 * @return {Boolean}
 */

exports.isValidSignature = function (v, r, s, homestead) {
  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);

  if (r.length !== 32 || s.length !== 32) {
    return false;
  }

  if (v !== 27 && v !== 28) {
    return false;
  }

  r = new BN(r);
  s = new BN(s);

  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
    return false;
  }

  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
    return false;
  }

  return true;
};

/**
 * Converts a `Buffer` or `Array` to JSON
 * @param {Buffer|Array} ba
 * @return {Array|String|null}
 */
exports.baToJSON = function (ba) {
  if (Buffer.isBuffer(ba)) {
    return '0x' + ba.toString('hex');
  } else if (ba instanceof Array) {
    var array = [];
    for (var i = 0; i < ba.length; i++) {
      array.push(exports.baToJSON(ba[i]));
    }
    return array;
  }
};

/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param {Object} self the `Object` to define properties on
 * @param {Array} fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param {*} data data to be validated against the definitions
 */
exports.defineProperties = function (self, fields, data) {
  self.raw = [];
  self._fields = [];

  // attach the `toJSON`
  self.toJSON = function (label) {
    if (label) {
      var obj = {};
      self._fields.forEach(function (field) {
        obj[field] = '0x' + self[field].toString('hex');
      });
      return obj;
    }
    return exports.baToJSON(this.raw);
  };

  self.serialize = function serialize() {
    return rlp.encode(self.raw);
  };

  fields.forEach(function (field, i) {
    self._fields.push(field.name);
    function getter() {
      return self.raw[i];
    }
    function setter(v) {
      v = exports.toBuffer(v);

      if (v.toString('hex') === '00' && !field.allowZero) {
        v = Buffer.allocUnsafe(0);
      }

      if (field.allowLess && field.length) {
        v = exports.stripZeros(v);
        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
      } else if (!(field.allowZero && v.length === 0) && field.length) {
        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
      }

      self.raw[i] = v;
    }

    Object.defineProperty(self, field.name, {
      enumerable: true,
      configurable: true,
      get: getter,
      set: setter
    });

    if (field.default) {
      self[field.name] = field.default;
    }

    // attach alias
    if (field.alias) {
      Object.defineProperty(self, field.alias, {
        enumerable: false,
        configurable: true,
        set: setter,
        get: getter
      });
    }
  });

  // if the constuctor is passed data
  if (data) {
    if (typeof data === 'string') {
      data = Buffer.from(exports.stripHexPrefix(data), 'hex');
    }

    if (Buffer.isBuffer(data)) {
      data = rlp.decode(data);
    }

    if (Array.isArray(data)) {
      if (data.length > self._fields.length) {
        throw new Error('wrong number of fields in data');
      }

      // make sure all the items are buffers
      data.forEach(function (d, i) {
        self[self._fields[i]] = exports.toBuffer(d);
      });
    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
      var keys = Object.keys(data);
      fields.forEach(function (field) {
        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
      });
    } else {
      throw new Error('invalid data');
    }
  }
};
},{"assert":121,"bn.js":158,"create-hash":169,"ethjs-util":236,"keccak":264,"rlp":332,"safe-buffer":333,"secp256k1":336}],236:[function(require,module,exports){
(function (Buffer){
'use strict';

var isHexPrefixed = require('is-hex-prefixed');
var stripHexPrefix = require('strip-hex-prefix');

/**
 * Pads a `String` to have an even length
 * @param {String} value
 * @return {String} output
 */
function padToEven(value) {
  var a = value; // eslint-disable-line

  if (typeof a !== 'string') {
    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
  }

  if (a.length % 2) {
    a = '0' + a;
  }

  return a;
}

/**
 * Converts a `Number` into a hex `String`
 * @param {Number} i
 * @return {String}
 */
function intToHex(i) {
  var hex = i.toString(16); // eslint-disable-line

  return '0x' + hex;
}

/**
 * Converts an `Number` to a `Buffer`
 * @param {Number} i
 * @return {Buffer}
 */
function intToBuffer(i) {
  var hex = intToHex(i);

  return new Buffer(padToEven(hex.slice(2)), 'hex');
}

/**
 * Get the binary size of a string
 * @param {String} str
 * @return {Number}
 */
function getBinarySize(str) {
  if (typeof str !== 'string') {
    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
  }

  return Buffer.byteLength(str, 'utf8');
}

/**
 * Returns TRUE if the first specified array contains all elements
 * from the second one. FALSE otherwise.
 *
 * @param {array} superset
 * @param {array} subset
 *
 * @returns {boolean}
 */
function arrayContainsArray(superset, subset, some) {
  if (Array.isArray(superset) !== true) {
    throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
  }
  if (Array.isArray(subset) !== true) {
    throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
  }

  return subset[Boolean(some) && 'some' || 'every'](function (value) {
    return superset.indexOf(value) >= 0;
  });
}

/**
 * Should be called to get utf8 from it's hex representation
 *
 * @method toUtf8
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */
function toUtf8(hex) {
  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');

  return bufferValue.toString('utf8');
}

/**
 * Should be called to get ascii from it's hex representation
 *
 * @method toAscii
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */
function toAscii(hex) {
  var str = ''; // eslint-disable-line
  var i = 0,
      l = hex.length; // eslint-disable-line

  if (hex.substring(0, 2) === '0x') {
    i = 2;
  }

  for (; i < l; i += 2) {
    var code = parseInt(hex.substr(i, 2), 16);
    str += String.fromCharCode(code);
  }

  return str;
}

/**
 * Should be called to get hex representation (prefixed by 0x) of utf8 string
 *
 * @method fromUtf8
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */
function fromUtf8(stringValue) {
  var str = new Buffer(stringValue, 'utf8');

  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
}

/**
 * Should be called to get hex representation (prefixed by 0x) of ascii string
 *
 * @method fromAscii
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */
function fromAscii(stringValue) {
  var hex = ''; // eslint-disable-line
  for (var i = 0; i < stringValue.length; i++) {
    // eslint-disable-line
    var code = stringValue.charCodeAt(i);
    var n = code.toString(16);
    hex += n.length < 2 ? '0' + n : n;
  }

  return '0x' + hex;
}

/**
 * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
 *
 * @method getKeys get specific key from inner object array of objects
 * @param {String} params
 * @param {String} key
 * @param {Boolean} allowEmpty
 * @returns {Array} output just a simple array of output keys
 */
function getKeys(params, key, allowEmpty) {
  if (!Array.isArray(params)) {
    throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
  }
  if (typeof key !== 'string') {
    throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
  }

  var result = []; // eslint-disable-line

  for (var i = 0; i < params.length; i++) {
    // eslint-disable-line
    var value = params[i][key]; // eslint-disable-line
    if (allowEmpty && !value) {
      value = '';
    } else if (typeof value !== 'string') {
      throw new Error('invalid abi');
    }
    result.push(value);
  }

  return result;
}

/**
 * Is the string a hex string.
 *
 * @method check if string is hex string of specific length
 * @param {String} value
 * @param {Number} length
 * @returns {Boolean} output the string is a hex string
 */
function isHexString(value, length) {
  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }

  if (length && value.length !== 2 + 2 * length) {
    return false;
  }

  return true;
}

module.exports = {
  arrayContainsArray: arrayContainsArray,
  intToBuffer: intToBuffer,
  getBinarySize: getBinarySize,
  isHexPrefixed: isHexPrefixed,
  stripHexPrefix: stripHexPrefix,
  padToEven: padToEven,
  intToHex: intToHex,
  fromAscii: fromAscii,
  fromUtf8: fromUtf8,
  toAscii: toAscii,
  toUtf8: toUtf8,
  getKeys: getKeys,
  isHexString: isHexString
};
}).call(this,require("buffer").Buffer)
},{"buffer":161,"is-hex-prefixed":258,"strip-hex-prefix":353}],237:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],238:[function(require,module,exports){
module.exports = stringify
stringify.default = stringify
stringify.stable = deterministicStringify
stringify.stableStringify = deterministicStringify

var arr = []
var replacerStack = []

// Regular stringify
function stringify (obj, replacer, spacer) {
  decirc(obj, '', [], undefined)
  var res
  if (replacerStack.length === 0) {
    res = JSON.stringify(obj, replacer, spacer)
  } else {
    res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)
  }
  while (arr.length !== 0) {
    var part = arr.pop()
    if (part.length === 4) {
      Object.defineProperty(part[0], part[1], part[3])
    } else {
      part[0][part[1]] = part[2]
    }
  }
  return res
}
function decirc (val, k, stack, parent) {
  var i
  if (typeof val === 'object' && val !== null) {
    for (i = 0; i < stack.length; i++) {
      if (stack[i] === val) {
        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)
        if (propertyDescriptor.get !== undefined) {
          if (propertyDescriptor.configurable) {
            Object.defineProperty(parent, k, { value: '[Circular]' })
            arr.push([parent, k, val, propertyDescriptor])
          } else {
            replacerStack.push([val, k])
          }
        } else {
          parent[k] = '[Circular]'
          arr.push([parent, k, val])
        }
        return
      }
    }
    stack.push(val)
    // Optimize for Arrays. Big arrays could kill the performance otherwise!
    if (Array.isArray(val)) {
      for (i = 0; i < val.length; i++) {
        decirc(val[i], i, stack, val)
      }
    } else {
      var keys = Object.keys(val)
      for (i = 0; i < keys.length; i++) {
        var key = keys[i]
        decirc(val[key], key, stack, val)
      }
    }
    stack.pop()
  }
}

// Stable-stringify
function compareFunction (a, b) {
  if (a < b) {
    return -1
  }
  if (a > b) {
    return 1
  }
  return 0
}

function deterministicStringify (obj, replacer, spacer) {
  var tmp = deterministicDecirc(obj, '', [], undefined) || obj
  var res
  if (replacerStack.length === 0) {
    res = JSON.stringify(tmp, replacer, spacer)
  } else {
    res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)
  }
  while (arr.length !== 0) {
    var part = arr.pop()
    if (part.length === 4) {
      Object.defineProperty(part[0], part[1], part[3])
    } else {
      part[0][part[1]] = part[2]
    }
  }
  return res
}

function deterministicDecirc (val, k, stack, parent) {
  var i
  if (typeof val === 'object' && val !== null) {
    for (i = 0; i < stack.length; i++) {
      if (stack[i] === val) {
        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)
        if (propertyDescriptor.get !== undefined) {
          if (propertyDescriptor.configurable) {
            Object.defineProperty(parent, k, { value: '[Circular]' })
            arr.push([parent, k, val, propertyDescriptor])
          } else {
            replacerStack.push([val, k])
          }
        } else {
          parent[k] = '[Circular]'
          arr.push([parent, k, val])
        }
        return
      }
    }
    if (typeof val.toJSON === 'function') {
      return
    }
    stack.push(val)
    // Optimize for Arrays. Big arrays could kill the performance otherwise!
    if (Array.isArray(val)) {
      for (i = 0; i < val.length; i++) {
        deterministicDecirc(val[i], i, stack, val)
      }
    } else {
      // Create a temporary object in the required way
      var tmp = {}
      var keys = Object.keys(val).sort(compareFunction)
      for (i = 0; i < keys.length; i++) {
        var key = keys[i]
        deterministicDecirc(val[key], key, stack, val)
        tmp[key] = val[key]
      }
      if (parent !== undefined) {
        arr.push([parent, k, val])
        parent[k] = tmp
      } else {
        return tmp
      }
    }
    stack.pop()
  }
}

// wraps replacer function to handle values we couldn't replace
// and mark them as [Circular]
function replaceGetterValues (replacer) {
  replacer = replacer !== undefined ? replacer : function (k, v) { return v }
  return function (key, val) {
    if (replacerStack.length > 0) {
      for (var i = 0; i < replacerStack.length; i++) {
        var part = replacerStack[i]
        if (part[1] === key && part[0] === val) {
          val = '[Circular]'
          replacerStack.splice(i, 1)
          break
        }
      }
    }
    return replacer.call(this, key, val)
  }
}

},{}],239:[function(require,module,exports){
(function (self) {
  'use strict';

  function fetchPonyfill(options) {
    var Promise = options && options.Promise || self.Promise;
    var XMLHttpRequest = options && options.XMLHttpRequest || self.XMLHttpRequest;
    var global = self;

    return (function () {
      var self = Object.create(global, {
        fetch: {
          value: undefined,
          writable: true
        }
      });

      (function(self) {
        'use strict';

        if (self.fetch) {
          return
        }

        var support = {
          searchParams: 'URLSearchParams' in self,
          iterable: 'Symbol' in self && 'iterator' in Symbol,
          blob: 'FileReader' in self && 'Blob' in self && (function() {
            try {
              new Blob()
              return true
            } catch(e) {
              return false
            }
          })(),
          formData: 'FormData' in self,
          arrayBuffer: 'ArrayBuffer' in self
        }

        if (support.arrayBuffer) {
          var viewClasses = [
            '[object Int8Array]',
            '[object Uint8Array]',
            '[object Uint8ClampedArray]',
            '[object Int16Array]',
            '[object Uint16Array]',
            '[object Int32Array]',
            '[object Uint32Array]',
            '[object Float32Array]',
            '[object Float64Array]'
          ]

          var isDataView = function(obj) {
            return obj && DataView.prototype.isPrototypeOf(obj)
          }

          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
          }
        }

        function normalizeName(name) {
          if (typeof name !== 'string') {
            name = String(name)
          }
          if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
            throw new TypeError('Invalid character in header field name')
          }
          return name.toLowerCase()
        }

        function normalizeValue(value) {
          if (typeof value !== 'string') {
            value = String(value)
          }
          return value
        }

        // Build a destructive iterator for the value list
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift()
              return {done: value === undefined, value: value}
            }
          }

          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator
            }
          }

          return iterator
        }

        function Headers(headers) {
          this.map = {}

          if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
              this.append(name, value)
            }, this)
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1])
            }, this)
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name])
            }, this)
          }
        }

        Headers.prototype.append = function(name, value) {
          name = normalizeName(name)
          value = normalizeValue(value)
          var oldValue = this.map[name]
          this.map[name] = oldValue ? oldValue+','+value : value
        }

        Headers.prototype['delete'] = function(name) {
          delete this.map[normalizeName(name)]
        }

        Headers.prototype.get = function(name) {
          name = normalizeName(name)
          return this.has(name) ? this.map[name] : null
        }

        Headers.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name))
        }

        Headers.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value)
        }

        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this)
            }
          }
        }

        Headers.prototype.keys = function() {
          var items = []
          this.forEach(function(value, name) { items.push(name) })
          return iteratorFor(items)
        }

        Headers.prototype.values = function() {
          var items = []
          this.forEach(function(value) { items.push(value) })
          return iteratorFor(items)
        }

        Headers.prototype.entries = function() {
          var items = []
          this.forEach(function(value, name) { items.push([name, value]) })
          return iteratorFor(items)
        }

        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries
        }

        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError('Already read'))
          }
          body.bodyUsed = true
        }

        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result)
            }
            reader.onerror = function() {
              reject(reader.error)
            }
          })
        }

        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader()
          var promise = fileReaderReady(reader)
          reader.readAsArrayBuffer(blob)
          return promise
        }

        function readBlobAsText(blob) {
          var reader = new FileReader()
          var promise = fileReaderReady(reader)
          reader.readAsText(blob)
          return promise
        }

        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf)
          var chars = new Array(view.length)

          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i])
          }
          return chars.join('')
        }

        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0)
          } else {
            var view = new Uint8Array(buf.byteLength)
            view.set(new Uint8Array(buf))
            return view.buffer
          }
        }

        function Body() {
          this.bodyUsed = false

          this._initBody = function(body) {
            this._bodyInit = body
            if (!body) {
              this._bodyText = ''
            } else if (typeof body === 'string') {
              this._bodyText = body
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString()
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer)
              // IE 10-11 can't handle a DataView body.
              this._bodyInit = new Blob([this._bodyArrayBuffer])
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body)
            } else {
              throw new Error('unsupported BodyInit type')
            }

            if (!this.headers.get('content-type')) {
              if (typeof body === 'string') {
                this.headers.set('content-type', 'text/plain;charset=UTF-8')
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set('content-type', this._bodyBlob.type)
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
              }
            }
          }

          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this)
              if (rejected) {
                return rejected
              }

              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob)
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]))
              } else if (this._bodyFormData) {
                throw new Error('could not read FormData body as blob')
              } else {
                return Promise.resolve(new Blob([this._bodyText]))
              }
            }

            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
              } else {
                return this.blob().then(readBlobAsArrayBuffer)
              }
            }
          }

          this.text = function() {
            var rejected = consumed(this)
            if (rejected) {
              return rejected
            }

            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob)
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as text')
            } else {
              return Promise.resolve(this._bodyText)
            }
          }

          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode)
            }
          }

          this.json = function() {
            return this.text().then(JSON.parse)
          }

          return this
        }

        // HTTP methods whose capitalization should be normalized
        var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

        function normalizeMethod(method) {
          var upcased = method.toUpperCase()
          return (methods.indexOf(upcased) > -1) ? upcased : method
        }

        function Request(input, options) {
          options = options || {}
          var body = options.body

          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError('Already read')
            }
            this.url = input.url
            this.credentials = input.credentials
            if (!options.headers) {
              this.headers = new Headers(input.headers)
            }
            this.method = input.method
            this.mode = input.mode
            if (!body && input._bodyInit != null) {
              body = input._bodyInit
              input.bodyUsed = true
            }
          } else {
            this.url = String(input)
          }

          this.credentials = options.credentials || this.credentials || 'omit'
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers)
          }
          this.method = normalizeMethod(options.method || this.method || 'GET')
          this.mode = options.mode || this.mode || null
          this.referrer = null

          if ((this.method === 'GET' || this.method === 'HEAD') && body) {
            throw new TypeError('Body not allowed for GET or HEAD requests')
          }
          this._initBody(body)
        }

        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit })
        }

        function decode(body) {
          var form = new FormData()
          body.trim().split('&').forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split('=')
              var name = split.shift().replace(/\+/g, ' ')
              var value = split.join('=').replace(/\+/g, ' ')
              form.append(decodeURIComponent(name), decodeURIComponent(value))
            }
          })
          return form
        }

        function parseHeaders(rawHeaders) {
          var headers = new Headers()
          rawHeaders.split(/\r?\n/).forEach(function(line) {
            var parts = line.split(':')
            var key = parts.shift().trim()
            if (key) {
              var value = parts.join(':').trim()
              headers.append(key, value)
            }
          })
          return headers
        }

        Body.call(Request.prototype)

        function Response(bodyInit, options) {
          if (!options) {
            options = {}
          }

          this.type = 'default'
          this.status = 'status' in options ? options.status : 200
          this.ok = this.status >= 200 && this.status < 300
          this.statusText = 'statusText' in options ? options.statusText : 'OK'
          this.headers = new Headers(options.headers)
          this.url = options.url || ''
          this._initBody(bodyInit)
        }

        Body.call(Response.prototype)

        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          })
        }

        Response.error = function() {
          var response = new Response(null, {status: 0, statusText: ''})
          response.type = 'error'
          return response
        }

        var redirectStatuses = [301, 302, 303, 307, 308]

        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError('Invalid status code')
          }

          return new Response(null, {status: status, headers: {location: url}})
        }

        self.Headers = Headers
        self.Request = Request
        self.Response = Response

        self.fetch = function(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request(input, init)
            var xhr = new XMLHttpRequest()

            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || '')
              }
              options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
              var body = 'response' in xhr ? xhr.response : xhr.responseText
              resolve(new Response(body, options))
            }

            xhr.onerror = function() {
              reject(new TypeError('Network request failed'))
            }

            xhr.ontimeout = function() {
              reject(new TypeError('Network request failed'))
            }

            xhr.open(request.method, request.url, true)

            if (request.credentials === 'include') {
              xhr.withCredentials = true
            }

            if ('responseType' in xhr && support.blob) {
              xhr.responseType = 'blob'
            }

            request.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value)
            })

            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
          })
        }
        self.fetch.polyfill = true
      })(typeof self !== 'undefined' ? self : this);


      return {
        fetch: self.fetch,
        Headers: self.Headers,
        Request: self.Request,
        Response: self.Response
      };
    }());
  }

  if (typeof define === 'function' && define.amd) {
    define(function () {
      return fetchPonyfill;
    });
  } else if (typeof exports === 'object') {
    module.exports = fetchPonyfill;
  } else {
    self.fetchPonyfill = fetchPonyfill;
  }
}(typeof self === 'undefined' ? this : self));


},{}],240:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":255,"safe-buffer":333,"stream":352}],241:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":242,"./hash/hmac":243,"./hash/ripemd":244,"./hash/sha":245,"./hash/utils":252}],242:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":252,"minimalistic-assert":301}],243:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":252,"minimalistic-assert":301}],244:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":242,"./utils":252}],245:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":246,"./sha/224":247,"./sha/256":248,"./sha/384":249,"./sha/512":250}],246:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":242,"../utils":252,"./common":251}],247:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":252,"./256":248}],248:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":242,"../utils":252,"./common":251,"minimalistic-assert":301}],249:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":252,"./512":250}],250:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":242,"../utils":252,"minimalistic-assert":301}],251:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":252}],252:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":255,"minimalistic-assert":301}],253:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":241,"minimalistic-assert":301,"minimalistic-crypto-utils":302}],254:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],255:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],256:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],257:[function(require,module,exports){
'use strict';
var toString = Object.prototype.toString;

module.exports = function (x) {
	return toString.call(x) === '[object Function]';
};

},{}],258:[function(require,module,exports){
/**
 * Returns a `Boolean` on whether or not the a `String` starts with '0x'
 * @param {String} str the string input value
 * @return {Boolean} a boolean if it is or is not hex prefixed
 * @throws if the str input is not a string
 */
module.exports = function isHexPrefixed(str) {
  if (typeof str !== 'string') {
    throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
  }

  return str.slice(0, 2) === '0x';
}

},{}],259:[function(require,module,exports){
module.exports = IdIterator

function IdIterator(opts){
  opts = opts || {}
  var max = opts.max || Number.MAX_SAFE_INTEGER
  var idCounter = typeof opts.start !== 'undefined' ? opts.start : Math.floor(Math.random() * max)

  return function createRandomId () {
    idCounter = idCounter % max
    return idCounter++
  }

}
},{}],260:[function(require,module,exports){
var json = typeof JSON !== 'undefined' ? JSON : require('jsonify');

module.exports = function (obj, opts) {
    if (!opts) opts = {};
    if (typeof opts === 'function') opts = { cmp: opts };
    var space = opts.space || '';
    if (typeof space === 'number') space = Array(space+1).join(' ');
    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
    var replacer = opts.replacer || function(key, value) { return value; };

    var cmp = opts.cmp && (function (f) {
        return function (node) {
            return function (a, b) {
                var aobj = { key: a, value: node[a] };
                var bobj = { key: b, value: node[b] };
                return f(aobj, bobj);
            };
        };
    })(opts.cmp);

    var seen = [];
    return (function stringify (parent, key, node, level) {
        var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
        var colonSeparator = space ? ': ' : ':';

        if (node && node.toJSON && typeof node.toJSON === 'function') {
            node = node.toJSON();
        }

        node = replacer.call(parent, key, node);

        if (node === undefined) {
            return;
        }
        if (typeof node !== 'object' || node === null) {
            return json.stringify(node);
        }
        if (isArray(node)) {
            var out = [];
            for (var i = 0; i < node.length; i++) {
                var item = stringify(node, i, node[i], level+1) || json.stringify(null);
                out.push(indent + space + item);
            }
            return '[' + out.join(',') + indent + ']';
        }
        else {
            if (seen.indexOf(node) !== -1) {
                if (cycles) return json.stringify('__cycle__');
                throw new TypeError('Converting circular structure to JSON');
            }
            else seen.push(node);

            var keys = objectKeys(node).sort(cmp && cmp(node));
            var out = [];
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var value = stringify(node, key, node[key], level+1);

                if(!value) continue;

                var keyValue = json.stringify(key)
                    + colonSeparator
                    + value;
                ;
                out.push(indent + space + keyValue);
            }
            seen.splice(seen.indexOf(node), 1);
            return '{' + out.join(',') + indent + '}';
        }
    })({ '': obj }, '', obj, 0);
};

var isArray = Array.isArray || function (x) {
    return {}.toString.call(x) === '[object Array]';
};

var objectKeys = Object.keys || function (obj) {
    var has = Object.prototype.hasOwnProperty || function () { return true };
    var keys = [];
    for (var key in obj) {
        if (has.call(obj, key)) keys.push(key);
    }
    return keys;
};

},{"jsonify":261}],261:[function(require,module,exports){
exports.parse = require('./lib/parse');
exports.stringify = require('./lib/stringify');

},{"./lib/parse":262,"./lib/stringify":263}],262:[function(require,module,exports){
var at, // The index of the current character
    ch, // The current character
    escapee = {
        '"':  '"',
        '\\': '\\',
        '/':  '/',
        b:    '\b',
        f:    '\f',
        n:    '\n',
        r:    '\r',
        t:    '\t'
    },
    text,

    error = function (m) {
        // Call error when something is wrong.
        throw {
            name:    'SyntaxError',
            message: m,
            at:      at,
            text:    text
        };
    },
    
    next = function (c) {
        // If a c parameter is provided, verify that it matches the current character.
        if (c && c !== ch) {
            error("Expected '" + c + "' instead of '" + ch + "'");
        }
        
        // Get the next character. When there are no more characters,
        // return the empty string.
        
        ch = text.charAt(at);
        at += 1;
        return ch;
    },
    
    number = function () {
        // Parse a number value.
        var number,
            string = '';
        
        if (ch === '-') {
            string = '-';
            next('-');
        }
        while (ch >= '0' && ch <= '9') {
            string += ch;
            next();
        }
        if (ch === '.') {
            string += '.';
            while (next() && ch >= '0' && ch <= '9') {
                string += ch;
            }
        }
        if (ch === 'e' || ch === 'E') {
            string += ch;
            next();
            if (ch === '-' || ch === '+') {
                string += ch;
                next();
            }
            while (ch >= '0' && ch <= '9') {
                string += ch;
                next();
            }
        }
        number = +string;
        if (!isFinite(number)) {
            error("Bad number");
        } else {
            return number;
        }
    },
    
    string = function () {
        // Parse a string value.
        var hex,
            i,
            string = '',
            uffff;
        
        // When parsing for string values, we must look for " and \ characters.
        if (ch === '"') {
            while (next()) {
                if (ch === '"') {
                    next();
                    return string;
                } else if (ch === '\\') {
                    next();
                    if (ch === 'u') {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                            hex = parseInt(next(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                    } else if (typeof escapee[ch] === 'string') {
                        string += escapee[ch];
                    } else {
                        break;
                    }
                } else {
                    string += ch;
                }
            }
        }
        error("Bad string");
    },

    white = function () {

// Skip whitespace.

        while (ch && ch <= ' ') {
            next();
        }
    },

    word = function () {

// true, false, or null.

        switch (ch) {
        case 't':
            next('t');
            next('r');
            next('u');
            next('e');
            return true;
        case 'f':
            next('f');
            next('a');
            next('l');
            next('s');
            next('e');
            return false;
        case 'n':
            next('n');
            next('u');
            next('l');
            next('l');
            return null;
        }
        error("Unexpected '" + ch + "'");
    },

    value,  // Place holder for the value function.

    array = function () {

// Parse an array value.

        var array = [];

        if (ch === '[') {
            next('[');
            white();
            if (ch === ']') {
                next(']');
                return array;   // empty array
            }
            while (ch) {
                array.push(value());
                white();
                if (ch === ']') {
                    next(']');
                    return array;
                }
                next(',');
                white();
            }
        }
        error("Bad array");
    },

    object = function () {

// Parse an object value.

        var key,
            object = {};

        if (ch === '{') {
            next('{');
            white();
            if (ch === '}') {
                next('}');
                return object;   // empty object
            }
            while (ch) {
                key = string();
                white();
                next(':');
                if (Object.hasOwnProperty.call(object, key)) {
                    error('Duplicate key "' + key + '"');
                }
                object[key] = value();
                white();
                if (ch === '}') {
                    next('}');
                    return object;
                }
                next(',');
                white();
            }
        }
        error("Bad object");
    };

value = function () {

// Parse a JSON value. It could be an object, an array, a string, a number,
// or a word.

    white();
    switch (ch) {
    case '{':
        return object();
    case '[':
        return array();
    case '"':
        return string();
    case '-':
        return number();
    default:
        return ch >= '0' && ch <= '9' ? number() : word();
    }
};

// Return the json_parse function. It will have access to all of the above
// functions and variables.

module.exports = function (source, reviver) {
    var result;
    
    text = source;
    at = 0;
    ch = ' ';
    result = value();
    white();
    if (ch) {
        error("Syntax error");
    }

    // If there is a reviver function, we recursively walk the new structure,
    // passing each name/value pair to the reviver function for possible
    // transformation, starting with a temporary root object that holds the result
    // in an empty key. If there is not a reviver function, we simply return the
    // result.

    return typeof reviver === 'function' ? (function walk(holder, key) {
        var k, v, value = holder[key];
        if (value && typeof value === 'object') {
            for (k in value) {
                if (Object.prototype.hasOwnProperty.call(value, k)) {
                    v = walk(value, k);
                    if (v !== undefined) {
                        value[k] = v;
                    } else {
                        delete value[k];
                    }
                }
            }
        }
        return reviver.call(holder, key, value);
    }({'': result}, '')) : result;
};

},{}],263:[function(require,module,exports){
var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    gap,
    indent,
    meta = {    // table of character substitutions
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"' : '\\"',
        '\\': '\\\\'
    },
    rep;

function quote(string) {
    // If the string contains no control characters, no quote characters, and no
    // backslash characters, then we can safely slap some quotes around it.
    // Otherwise we must also replace the offending characters with safe escape
    // sequences.
    
    escapable.lastIndex = 0;
    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
        var c = meta[a];
        return typeof c === 'string' ? c :
            '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + string + '"';
}

function str(key, holder) {
    // Produce a string from holder[key].
    var i,          // The loop counter.
        k,          // The member key.
        v,          // The member value.
        length,
        mind = gap,
        partial,
        value = holder[key];
    
    // If the value has a toJSON method, call it to obtain a replacement value.
    if (value && typeof value === 'object' &&
            typeof value.toJSON === 'function') {
        value = value.toJSON(key);
    }
    
    // If we were called with a replacer function, then call the replacer to
    // obtain a replacement value.
    if (typeof rep === 'function') {
        value = rep.call(holder, key, value);
    }
    
    // What happens next depends on the value's type.
    switch (typeof value) {
        case 'string':
            return quote(value);
        
        case 'number':
            // JSON numbers must be finite. Encode non-finite numbers as null.
            return isFinite(value) ? String(value) : 'null';
        
        case 'boolean':
        case 'null':
            // If the value is a boolean or null, convert it to a string. Note:
            // typeof null does not produce 'null'. The case is included here in
            // the remote chance that this gets fixed someday.
            return String(value);
            
        case 'object':
            if (!value) return 'null';
            gap += indent;
            partial = [];
            
            // Array.isArray
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }
                
                // Join all of the elements together, separated with commas, and
                // wrap them in brackets.
                v = partial.length === 0 ? '[]' : gap ?
                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                    '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }
            
            // If the replacer is an array, use it to select the members to be
            // stringified.
            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === 'string') {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            else {
                // Otherwise, iterate through all of the keys in the object.
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            
        // Join all of the member texts together, separated with commas,
        // and wrap them in braces.

        v = partial.length === 0 ? '{}' : gap ?
            '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
            '{' + partial.join(',') + '}';
        gap = mind;
        return v;
    }
}

module.exports = function (value, replacer, space) {
    var i;
    gap = '';
    indent = '';
    
    // If the space parameter is a number, make an indent string containing that
    // many spaces.
    if (typeof space === 'number') {
        for (i = 0; i < space; i += 1) {
            indent += ' ';
        }
    }
    // If the space parameter is a string, it will be used as the indent string.
    else if (typeof space === 'string') {
        indent = space;
    }

    // If there is a replacer, it must be a function or an array.
    // Otherwise, throw an error.
    rep = replacer;
    if (replacer && typeof replacer !== 'function'
    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
        throw new Error('JSON.stringify');
    }
    
    // Make a fake root object containing our value under the key of ''.
    // Return the result of stringifying the value.
    return str('', {'': value});
};

},{}],264:[function(require,module,exports){
arguments[4][229][0].apply(exports,arguments)
},{"./lib/api":265,"./lib/keccak":269,"dup":229}],265:[function(require,module,exports){
'use strict'
var createKeccak = require('./keccak')
var createShake = require('./shake')

module.exports = function (KeccakState) {
  var Keccak = createKeccak(KeccakState)
  var Shake = createShake(KeccakState)

  return function (algorithm, options) {
    var hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm
    switch (hash) {
      case 'keccak224': return new Keccak(1152, 448, null, 224, options)
      case 'keccak256': return new Keccak(1088, 512, null, 256, options)
      case 'keccak384': return new Keccak(832, 768, null, 384, options)
      case 'keccak512': return new Keccak(576, 1024, null, 512, options)

      case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)
      case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)
      case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)
      case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)

      case 'shake128': return new Shake(1344, 256, 0x1f, options)
      case 'shake256': return new Shake(1088, 512, 0x1f, options)

      default: throw new Error('Invald algorithm: ' + algorithm)
    }
  }
}

},{"./keccak":266,"./shake":267}],266:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var inherits = require('inherits')

module.exports = function (KeccakState) {
  function Keccak (rate, capacity, delimitedSuffix, hashBitLength, options) {
    Transform.call(this, options)

    this._rate = rate
    this._capacity = capacity
    this._delimitedSuffix = delimitedSuffix
    this._hashBitLength = hashBitLength
    this._options = options

    this._state = new KeccakState()
    this._state.initialize(rate, capacity)
    this._finalized = false
  }

  inherits(Keccak, Transform)

  Keccak.prototype._transform = function (chunk, encoding, callback) {
    var error = null
    try {
      this.update(chunk, encoding)
    } catch (err) {
      error = err
    }

    callback(error)
  }

  Keccak.prototype._flush = function (callback) {
    var error = null
    try {
      this.push(this.digest())
    } catch (err) {
      error = err
    }

    callback(error)
  }

  Keccak.prototype.update = function (data, encoding) {
    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
    if (this._finalized) throw new Error('Digest already called')
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

    this._state.absorb(data)

    return this
  }

  Keccak.prototype.digest = function (encoding) {
    if (this._finalized) throw new Error('Digest already called')
    this._finalized = true

    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)
    var digest = this._state.squeeze(this._hashBitLength / 8)
    if (encoding !== undefined) digest = digest.toString(encoding)

    this._resetState()

    return digest
  }

  // remove result from memory
  Keccak.prototype._resetState = function () {
    this._state.initialize(this._rate, this._capacity)
    return this
  }

  // because sometimes we need hash right now and little later
  Keccak.prototype._clone = function () {
    var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)
    this._state.copy(clone._state)
    clone._finalized = this._finalized

    return clone
  }

  return Keccak
}

},{"inherits":255,"safe-buffer":333,"stream":352}],267:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var inherits = require('inherits')

module.exports = function (KeccakState) {
  function Shake (rate, capacity, delimitedSuffix, options) {
    Transform.call(this, options)

    this._rate = rate
    this._capacity = capacity
    this._delimitedSuffix = delimitedSuffix
    this._options = options

    this._state = new KeccakState()
    this._state.initialize(rate, capacity)
    this._finalized = false
  }

  inherits(Shake, Transform)

  Shake.prototype._transform = function (chunk, encoding, callback) {
    var error = null
    try {
      this.update(chunk, encoding)
    } catch (err) {
      error = err
    }

    callback(error)
  }

  Shake.prototype._flush = function () {}

  Shake.prototype._read = function (size) {
    this.push(this.squeeze(size))
  }

  Shake.prototype.update = function (data, encoding) {
    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
    if (this._finalized) throw new Error('Squeeze already called')
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

    this._state.absorb(data)

    return this
  }

  Shake.prototype.squeeze = function (dataByteLength, encoding) {
    if (!this._finalized) {
      this._finalized = true
      this._state.absorbLastFewBits(this._delimitedSuffix)
    }

    var data = this._state.squeeze(dataByteLength)
    if (encoding !== undefined) data = data.toString(encoding)

    return data
  }

  Shake.prototype._resetState = function () {
    this._state.initialize(this._rate, this._capacity)
    return this
  }

  Shake.prototype._clone = function () {
    var clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)
    this._state.copy(clone._state)
    clone._finalized = this._finalized

    return clone
  }

  return Shake
}

},{"inherits":255,"safe-buffer":333,"stream":352}],268:[function(require,module,exports){
'use strict'
var P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]

exports.p1600 = function (s) {
  for (var round = 0; round < 24; ++round) {
    // theta
    var lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]
    var hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]
    var lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]
    var hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]
    var lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]
    var hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]
    var lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]
    var hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]
    var lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]
    var hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]

    var lo = lo4 ^ (lo1 << 1 | hi1 >>> 31)
    var hi = hi4 ^ (hi1 << 1 | lo1 >>> 31)
    var t1slo0 = s[0] ^ lo
    var t1shi0 = s[1] ^ hi
    var t1slo5 = s[10] ^ lo
    var t1shi5 = s[11] ^ hi
    var t1slo10 = s[20] ^ lo
    var t1shi10 = s[21] ^ hi
    var t1slo15 = s[30] ^ lo
    var t1shi15 = s[31] ^ hi
    var t1slo20 = s[40] ^ lo
    var t1shi20 = s[41] ^ hi
    lo = lo0 ^ (lo2 << 1 | hi2 >>> 31)
    hi = hi0 ^ (hi2 << 1 | lo2 >>> 31)
    var t1slo1 = s[2] ^ lo
    var t1shi1 = s[3] ^ hi
    var t1slo6 = s[12] ^ lo
    var t1shi6 = s[13] ^ hi
    var t1slo11 = s[22] ^ lo
    var t1shi11 = s[23] ^ hi
    var t1slo16 = s[32] ^ lo
    var t1shi16 = s[33] ^ hi
    var t1slo21 = s[42] ^ lo
    var t1shi21 = s[43] ^ hi
    lo = lo1 ^ (lo3 << 1 | hi3 >>> 31)
    hi = hi1 ^ (hi3 << 1 | lo3 >>> 31)
    var t1slo2 = s[4] ^ lo
    var t1shi2 = s[5] ^ hi
    var t1slo7 = s[14] ^ lo
    var t1shi7 = s[15] ^ hi
    var t1slo12 = s[24] ^ lo
    var t1shi12 = s[25] ^ hi
    var t1slo17 = s[34] ^ lo
    var t1shi17 = s[35] ^ hi
    var t1slo22 = s[44] ^ lo
    var t1shi22 = s[45] ^ hi
    lo = lo2 ^ (lo4 << 1 | hi4 >>> 31)
    hi = hi2 ^ (hi4 << 1 | lo4 >>> 31)
    var t1slo3 = s[6] ^ lo
    var t1shi3 = s[7] ^ hi
    var t1slo8 = s[16] ^ lo
    var t1shi8 = s[17] ^ hi
    var t1slo13 = s[26] ^ lo
    var t1shi13 = s[27] ^ hi
    var t1slo18 = s[36] ^ lo
    var t1shi18 = s[37] ^ hi
    var t1slo23 = s[46] ^ lo
    var t1shi23 = s[47] ^ hi
    lo = lo3 ^ (lo0 << 1 | hi0 >>> 31)
    hi = hi3 ^ (hi0 << 1 | lo0 >>> 31)
    var t1slo4 = s[8] ^ lo
    var t1shi4 = s[9] ^ hi
    var t1slo9 = s[18] ^ lo
    var t1shi9 = s[19] ^ hi
    var t1slo14 = s[28] ^ lo
    var t1shi14 = s[29] ^ hi
    var t1slo19 = s[38] ^ lo
    var t1shi19 = s[39] ^ hi
    var t1slo24 = s[48] ^ lo
    var t1shi24 = s[49] ^ hi

    // rho & pi
    var t2slo0 = t1slo0
    var t2shi0 = t1shi0
    var t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28)
    var t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28)
    var t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29)
    var t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29)
    var t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23)
    var t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23)
    var t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14)
    var t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14)
    var t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31)
    var t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31)
    var t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20)
    var t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20)
    var t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22)
    var t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22)
    var t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19)
    var t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19)
    var t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30)
    var t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30)
    var t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2)
    var t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2)
    var t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26)
    var t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26)
    var t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21)
    var t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21)
    var t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17)
    var t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17)
    var t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3)
    var t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3)
    var t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4)
    var t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4)
    var t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9)
    var t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9)
    var t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7)
    var t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7)
    var t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11)
    var t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11)
    var t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8)
    var t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8)
    var t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5)
    var t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5)
    var t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12)
    var t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12)
    var t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25)
    var t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25)
    var t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24)
    var t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24)
    var t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18)
    var t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18)

    // chi
    s[0] = t2slo0 ^ (~t2slo1 & t2slo2)
    s[1] = t2shi0 ^ (~t2shi1 & t2shi2)
    s[10] = t2slo5 ^ (~t2slo6 & t2slo7)
    s[11] = t2shi5 ^ (~t2shi6 & t2shi7)
    s[20] = t2slo10 ^ (~t2slo11 & t2slo12)
    s[21] = t2shi10 ^ (~t2shi11 & t2shi12)
    s[30] = t2slo15 ^ (~t2slo16 & t2slo17)
    s[31] = t2shi15 ^ (~t2shi16 & t2shi17)
    s[40] = t2slo20 ^ (~t2slo21 & t2slo22)
    s[41] = t2shi20 ^ (~t2shi21 & t2shi22)
    s[2] = t2slo1 ^ (~t2slo2 & t2slo3)
    s[3] = t2shi1 ^ (~t2shi2 & t2shi3)
    s[12] = t2slo6 ^ (~t2slo7 & t2slo8)
    s[13] = t2shi6 ^ (~t2shi7 & t2shi8)
    s[22] = t2slo11 ^ (~t2slo12 & t2slo13)
    s[23] = t2shi11 ^ (~t2shi12 & t2shi13)
    s[32] = t2slo16 ^ (~t2slo17 & t2slo18)
    s[33] = t2shi16 ^ (~t2shi17 & t2shi18)
    s[42] = t2slo21 ^ (~t2slo22 & t2slo23)
    s[43] = t2shi21 ^ (~t2shi22 & t2shi23)
    s[4] = t2slo2 ^ (~t2slo3 & t2slo4)
    s[5] = t2shi2 ^ (~t2shi3 & t2shi4)
    s[14] = t2slo7 ^ (~t2slo8 & t2slo9)
    s[15] = t2shi7 ^ (~t2shi8 & t2shi9)
    s[24] = t2slo12 ^ (~t2slo13 & t2slo14)
    s[25] = t2shi12 ^ (~t2shi13 & t2shi14)
    s[34] = t2slo17 ^ (~t2slo18 & t2slo19)
    s[35] = t2shi17 ^ (~t2shi18 & t2shi19)
    s[44] = t2slo22 ^ (~t2slo23 & t2slo24)
    s[45] = t2shi22 ^ (~t2shi23 & t2shi24)
    s[6] = t2slo3 ^ (~t2slo4 & t2slo0)
    s[7] = t2shi3 ^ (~t2shi4 & t2shi0)
    s[16] = t2slo8 ^ (~t2slo9 & t2slo5)
    s[17] = t2shi8 ^ (~t2shi9 & t2shi5)
    s[26] = t2slo13 ^ (~t2slo14 & t2slo10)
    s[27] = t2shi13 ^ (~t2shi14 & t2shi10)
    s[36] = t2slo18 ^ (~t2slo19 & t2slo15)
    s[37] = t2shi18 ^ (~t2shi19 & t2shi15)
    s[46] = t2slo23 ^ (~t2slo24 & t2slo20)
    s[47] = t2shi23 ^ (~t2shi24 & t2shi20)
    s[8] = t2slo4 ^ (~t2slo0 & t2slo1)
    s[9] = t2shi4 ^ (~t2shi0 & t2shi1)
    s[18] = t2slo9 ^ (~t2slo5 & t2slo6)
    s[19] = t2shi9 ^ (~t2shi5 & t2shi6)
    s[28] = t2slo14 ^ (~t2slo10 & t2slo11)
    s[29] = t2shi14 ^ (~t2shi10 & t2shi11)
    s[38] = t2slo19 ^ (~t2slo15 & t2slo16)
    s[39] = t2shi19 ^ (~t2shi15 & t2shi16)
    s[48] = t2slo24 ^ (~t2slo20 & t2slo21)
    s[49] = t2shi24 ^ (~t2shi20 & t2shi21)

    // iota
    s[0] ^= P1600_ROUND_CONSTANTS[round * 2]
    s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1]
  }
}

},{}],269:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var keccakState = require('./keccak-state-unroll')

function Keccak () {
  // much faster than `new Array(50)`
  this.state = [
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0
  ]

  this.blockSize = null
  this.count = 0
  this.squeezing = false
}

Keccak.prototype.initialize = function (rate, capacity) {
  for (var i = 0; i < 50; ++i) this.state[i] = 0
  this.blockSize = rate / 8
  this.count = 0
  this.squeezing = false
}

Keccak.prototype.absorb = function (data) {
  for (var i = 0; i < data.length; ++i) {
    this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))
    this.count += 1
    if (this.count === this.blockSize) {
      keccakState.p1600(this.state)
      this.count = 0
    }
  }
}

Keccak.prototype.absorbLastFewBits = function (bits) {
  this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))
  if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)
  this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))
  keccakState.p1600(this.state)
  this.count = 0
  this.squeezing = true
}

Keccak.prototype.squeeze = function (length) {
  if (!this.squeezing) this.absorbLastFewBits(0x01)

  var output = Buffer.alloc(length)
  for (var i = 0; i < length; ++i) {
    output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff
    this.count += 1
    if (this.count === this.blockSize) {
      keccakState.p1600(this.state)
      this.count = 0
    }
  }

  return output
}

Keccak.prototype.copy = function (dest) {
  for (var i = 0; i < 50; ++i) dest.state[i] = this.state[i]
  dest.blockSize = this.blockSize
  dest.count = this.count
  dest.squeezing = this.squeezing
}

module.exports = Keccak

},{"./keccak-state-unroll":268,"safe-buffer":333}],270:[function(require,module,exports){
(function (global){
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice,
    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }
  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!seen.has(othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, customizer, bitmask, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= UNORDERED_COMPARE_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);

  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result) {
    return result;
  }
  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates a flattened array of values by running each element in `collection`
 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
 * with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity]
 *  The function invoked per iteration.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [n, n];
 * }
 *
 * _.flatMap([1, 2], duplicate);
 * // => [1, 1, 2, 2]
 */
function flatMap(collection, iteratee) {
  return baseFlatten(map(collection, iteratee), 1);
}

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = flatMap;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],271:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":287}],272:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":277,"./_isIndex":281,"./isArguments":288,"./isArray":289,"./isBuffer":291,"./isTypedArray":296}],273:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":271,"./_getRawTag":280,"./_objectToString":285}],274:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":273,"./isObjectLike":295}],275:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":273,"./isLength":293,"./isObjectLike":295}],276:[function(require,module,exports){
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":282,"./_nativeKeys":283}],277:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],278:[function(require,module,exports){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],279:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],280:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":271}],281:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],282:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],283:[function(require,module,exports){
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":286}],284:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

},{"./_freeGlobal":279}],285:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],286:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],287:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":279}],288:[function(require,module,exports){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":274,"./isObjectLike":295}],289:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],290:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":292,"./isLength":293}],291:[function(require,module,exports){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":287,"./stubFalse":299}],292:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":273,"./isObject":294}],293:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],294:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],295:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],296:[function(require,module,exports){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":275,"./_baseUnary":278,"./_nodeUtil":284}],297:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":272,"./_baseKeys":276,"./isArrayLike":290}],298:[function(require,module,exports){
/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = noop;

},{}],299:[function(require,module,exports){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],300:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":240,"inherits":255,"safe-buffer":333}],301:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],302:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],303:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],304:[function(require,module,exports){
'use strict';

var processFn = function (fn, P, opts) {
	return function () {
		var that = this;
		var args = new Array(arguments.length);

		for (var i = 0; i < arguments.length; i++) {
			args[i] = arguments[i];
		}

		return new P(function (resolve, reject) {
			args.push(function (err, result) {
				if (err) {
					reject(err);
				} else if (opts.multiArgs) {
					var results = new Array(arguments.length - 1);

					for (var i = 1; i < arguments.length; i++) {
						results[i - 1] = arguments[i];
					}

					resolve(results);
				} else {
					resolve(result);
				}
			});

			fn.apply(that, args);
		});
	};
};

var pify = module.exports = function (obj, P, opts) {
	if (typeof P !== 'function') {
		opts = P;
		P = Promise;
	}

	opts = opts || {};
	opts.exclude = opts.exclude || [/.+Sync$/];

	var filter = function (key) {
		var match = function (pattern) {
			return typeof pattern === 'string' ? key === pattern : pattern.test(key);
		};

		return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
	};

	var ret = typeof obj === 'function' ? function () {
		if (opts.excludeMain) {
			return obj.apply(this, arguments);
		}

		return processFn(obj, P, opts).apply(this, arguments);
	} : {};

	return Object.keys(obj).reduce(function (ret, key) {
		var x = obj[key];

		ret[key] = typeof x === 'function' && filter(key) ? processFn(x, P, opts) : x;

		return ret;
	}, ret);
};

pify.all = pify;

},{}],305:[function(require,module,exports){
/*
 * Copyright (c) 2012 Mathieu Turcotte
 * Licensed under the MIT license.
 */

module.exports = require('./lib/checks');
},{"./lib/checks":306}],306:[function(require,module,exports){
/*
 * Copyright (c) 2012 Mathieu Turcotte
 * Licensed under the MIT license.
 */

var util = require('util');

var errors = module.exports = require('./errors');

function failCheck(ExceptionConstructor, callee, messageFormat, formatArgs) {
    messageFormat = messageFormat || '';
    var message = util.format.apply(this, [messageFormat].concat(formatArgs));
    var error = new ExceptionConstructor(message);
    Error.captureStackTrace(error, callee);
    throw error;
}

function failArgumentCheck(callee, message, formatArgs) {
    failCheck(errors.IllegalArgumentError, callee, message, formatArgs);
}

function failStateCheck(callee, message, formatArgs) {
    failCheck(errors.IllegalStateError, callee, message, formatArgs);
}

module.exports.checkArgument = function(value, message) {
    if (!value) {
        failArgumentCheck(arguments.callee, message,
            Array.prototype.slice.call(arguments, 2));
    }
};

module.exports.checkState = function(value, message) {
    if (!value) {
        failStateCheck(arguments.callee, message,
            Array.prototype.slice.call(arguments, 2));
    }
};

module.exports.checkIsDef = function(value, message) {
    if (value !== undefined) {
        return value;
    }

    failArgumentCheck(arguments.callee, message ||
        'Expected value to be defined but was undefined.',
        Array.prototype.slice.call(arguments, 2));
};

module.exports.checkIsDefAndNotNull = function(value, message) {
    // Note that undefined == null.
    if (value != null) {
        return value;
    }

    failArgumentCheck(arguments.callee, message ||
        'Expected value to be defined and not null but got "' +
        typeOf(value) + '".', Array.prototype.slice.call(arguments, 2));
};

// Fixed version of the typeOf operator which returns 'null' for null values
// and 'array' for arrays.
function typeOf(value) {
    var s = typeof value;
    if (s == 'object') {
        if (!value) {
            return 'null';
        } else if (value instanceof Array) {
            return 'array';
        }
    }
    return s;
}

function typeCheck(expect) {
    return function(value, message) {
        var type = typeOf(value);

        if (type == expect) {
            return value;
        }

        failArgumentCheck(arguments.callee, message ||
            'Expected "' + expect + '" but got "' + type + '".',
            Array.prototype.slice.call(arguments, 2));
    };
}

module.exports.checkIsString = typeCheck('string');
module.exports.checkIsArray = typeCheck('array');
module.exports.checkIsNumber = typeCheck('number');
module.exports.checkIsBoolean = typeCheck('boolean');
module.exports.checkIsFunction = typeCheck('function');
module.exports.checkIsObject = typeCheck('object');

},{"./errors":307,"util":360}],307:[function(require,module,exports){
/*
 * Copyright (c) 2012 Mathieu Turcotte
 * Licensed under the MIT license.
 */

var util = require('util');

function IllegalArgumentError(message) {
    Error.call(this, message);
    this.message = message;
}
util.inherits(IllegalArgumentError, Error);

IllegalArgumentError.prototype.name = 'IllegalArgumentError';

function IllegalStateError(message) {
    Error.call(this, message);
    this.message = message;
}
util.inherits(IllegalStateError, Error);

IllegalStateError.prototype.name = 'IllegalStateError';

module.exports.IllegalStateError = IllegalStateError;
module.exports.IllegalArgumentError = IllegalArgumentError;
},{"util":360}],308:[function(require,module,exports){
(function (process){
'use strict';

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


}).call(this,require('_process'))
},{"_process":309}],309:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],310:[function(require,module,exports){
'use strict';
var isFn = require('is-fn');
var setImmediate = require('set-immediate-shim');

module.exports = function (promise) {
	if (!isFn(promise.then)) {
		throw new TypeError('Expected a promise');
	}

	return function (cb) {
		promise.then(function (data) {
			setImmediate(cb, null, data);
		}, function (err) {
			setImmediate(cb, err);
		});
	};
};

},{"is-fn":257,"set-immediate-shim":343}],311:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],312:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],313:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":311,"./encode":312}],314:[function(require,module,exports){
(function (process,global){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":309,"safe-buffer":333}],315:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":316}],316:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"./_stream_readable":318,"./_stream_writable":320,"core-util-is":167,"inherits":255,"process-nextick-args":308}],317:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":319,"core-util-is":167,"inherits":255}],318:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":316,"./internal/streams/BufferList":321,"./internal/streams/destroy":322,"./internal/streams/stream":323,"_process":309,"core-util-is":167,"events":237,"inherits":255,"isarray":324,"process-nextick-args":308,"safe-buffer":325,"string_decoder/":326,"util":160}],319:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":316,"core-util-is":167,"inherits":255}],320:[function(require,module,exports){
(function (process,global,setImmediate){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)
},{"./_stream_duplex":316,"./internal/streams/destroy":322,"./internal/streams/stream":323,"_process":309,"core-util-is":167,"inherits":255,"process-nextick-args":308,"safe-buffer":325,"timers":354,"util-deprecate":357}],321:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":325,"util":160}],322:[function(require,module,exports){
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":308}],323:[function(require,module,exports){
arguments[4][212][0].apply(exports,arguments)
},{"dup":212,"events":237}],324:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],325:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":161}],326:[function(require,module,exports){
arguments[4][163][0].apply(exports,arguments)
},{"dup":163,"safe-buffer":325}],327:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":328}],328:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":316,"./lib/_stream_passthrough.js":317,"./lib/_stream_readable.js":318,"./lib/_stream_transform.js":319,"./lib/_stream_writable.js":320}],329:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":328}],330:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":320}],331:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":161,"hash-base":240,"inherits":255}],332:[function(require,module,exports){
(function (Buffer){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BN = require("bn.js");
/**
 * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
 * This function takes in a data, convert it to buffer if not, and a length for recursion
 * @param input - will be converted to buffer
 * @returns returns buffer of encoded data
 **/
function encode(input) {
    if (Array.isArray(input)) {
        var output = [];
        for (var i = 0; i < input.length; i++) {
            output.push(encode(input[i]));
        }
        var buf = Buffer.concat(output);
        return Buffer.concat([encodeLength(buf.length, 192), buf]);
    }
    else {
        var inputBuf = toBuffer(input);
        return inputBuf.length === 1 && inputBuf[0] < 128
            ? inputBuf
            : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
    }
}
exports.encode = encode;
/**
 * Parse integers. Check if there is no leading zeros
 * @param v The value to parse
 * @param base The base to parse the integer into
 */
function safeParseInt(v, base) {
    if (v.slice(0, 2) === '00') {
        throw new Error('invalid RLP: extra zeros');
    }
    return parseInt(v, base);
}
function encodeLength(len, offset) {
    if (len < 56) {
        return Buffer.from([len + offset]);
    }
    else {
        var hexLength = intToHex(len);
        var lLength = hexLength.length / 2;
        var firstByte = intToHex(offset + 55 + lLength);
        return Buffer.from(firstByte + hexLength, 'hex');
    }
}
function decode(input, stream) {
    if (stream === void 0) { stream = false; }
    if (!input || input.length === 0) {
        return Buffer.from([]);
    }
    var inputBuffer = toBuffer(input);
    var decoded = _decode(inputBuffer);
    if (stream) {
        return decoded;
    }
    if (decoded.remainder.length !== 0) {
        throw new Error('invalid remainder');
    }
    return decoded.data;
}
exports.decode = decode;
/**
 * Get the length of the RLP input
 * @param input
 * @returns The length of the input or an empty Buffer if no input
 */
function getLength(input) {
    if (!input || input.length === 0) {
        return Buffer.from([]);
    }
    var inputBuffer = toBuffer(input);
    var firstByte = inputBuffer[0];
    if (firstByte <= 0x7f) {
        return inputBuffer.length;
    }
    else if (firstByte <= 0xb7) {
        return firstByte - 0x7f;
    }
    else if (firstByte <= 0xbf) {
        return firstByte - 0xb6;
    }
    else if (firstByte <= 0xf7) {
        // a list between  0-55 bytes long
        return firstByte - 0xbf;
    }
    else {
        // a list  over 55 bytes long
        var llength = firstByte - 0xf6;
        var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
        return llength + length;
    }
}
exports.getLength = getLength;
/** Decode an input with RLP */
function _decode(input) {
    var length, llength, data, innerRemainder, d;
    var decoded = [];
    var firstByte = input[0];
    if (firstByte <= 0x7f) {
        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
        return {
            data: input.slice(0, 1),
            remainder: input.slice(1),
        };
    }
    else if (firstByte <= 0xb7) {
        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
        // The range of the first byte is [0x80, 0xb7]
        length = firstByte - 0x7f;
        // set 0x80 null to 0
        if (firstByte === 0x80) {
            data = Buffer.from([]);
        }
        else {
            data = input.slice(1, length);
        }
        if (length === 2 && data[0] < 0x80) {
            throw new Error('invalid rlp encoding: byte must be less 0x80');
        }
        return {
            data: data,
            remainder: input.slice(length),
        };
    }
    else if (firstByte <= 0xbf) {
        llength = firstByte - 0xb6;
        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
        data = input.slice(llength, length + llength);
        if (data.length < length) {
            throw new Error('invalid RLP');
        }
        return {
            data: data,
            remainder: input.slice(length + llength),
        };
    }
    else if (firstByte <= 0xf7) {
        // a list between  0-55 bytes long
        length = firstByte - 0xbf;
        innerRemainder = input.slice(1, length);
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(length),
        };
    }
    else {
        // a list  over 55 bytes long
        llength = firstByte - 0xf6;
        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
        var totalLength = llength + length;
        if (totalLength > input.length) {
            throw new Error('invalid rlp: total length is larger than the data');
        }
        innerRemainder = input.slice(llength, totalLength);
        if (innerRemainder.length === 0) {
            throw new Error('invalid rlp, List has a invalid length');
        }
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(totalLength),
        };
    }
}
/** Check if a string is prefixed by 0x */
function isHexPrefixed(str) {
    return str.slice(0, 2) === '0x';
}
/** Removes 0x from a given String */
function stripHexPrefix(str) {
    if (typeof str !== 'string') {
        return str;
    }
    return isHexPrefixed(str) ? str.slice(2) : str;
}
/** Transform an integer into its hexadecimal value */
function intToHex(integer) {
    if (integer < 0) {
        throw new Error('Invalid integer as argument, must be unsigned!');
    }
    var hex = integer.toString(16);
    return hex.length % 2 ? "0" + hex : hex;
}
/** Pad a string to be even */
function padToEven(a) {
    return a.length % 2 ? "0" + a : a;
}
/** Transform an integer into a Buffer */
function intToBuffer(integer) {
    var hex = intToHex(integer);
    return Buffer.from(hex, 'hex');
}
/** Transform anything into a Buffer */
function toBuffer(v) {
    if (!Buffer.isBuffer(v)) {
        if (typeof v === 'string') {
            if (isHexPrefixed(v)) {
                return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
            }
            else {
                return Buffer.from(v);
            }
        }
        else if (typeof v === 'number') {
            if (!v) {
                return Buffer.from([]);
            }
            else {
                return intToBuffer(v);
            }
        }
        else if (v === null || v === undefined) {
            return Buffer.from([]);
        }
        else if (v instanceof Uint8Array) {
            return Buffer.from(v);
        }
        else if (BN.isBN(v)) {
            // converts a BN to a Buffer
            return Buffer.from(v.toArray());
        }
        else {
            throw new Error('invalid type');
        }
    }
    return v;
}

}).call(this,require("buffer").Buffer)
},{"bn.js":158,"buffer":161}],333:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":161}],334:[function(require,module,exports){
const util = require('util')
const EventEmitter = require('events/')

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
}

module.exports = SafeEventEmitter


function SafeEventEmitter() {
  EventEmitter.call(this)
}

util.inherits(SafeEventEmitter, EventEmitter)

SafeEventEmitter.prototype.emit = function (type) {
  // copied from https://github.com/Gozala/events/blob/master/events.js
  // modified lines are commented with "edited:"
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    // edited: using safeApply
    safeApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      // edited: using safeApply
      safeApply(listeners[i], this, args);
  }

  return true;
}

function safeApply(handler, context, args) {
  try {
    ReflectApply(handler, context, args)
  } catch (err) {
    // throw error after timeout so as not to interupt the stack
    setTimeout(() => {
      throw err
    })
  }
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

},{"events/":335,"util":360}],335:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

},{}],336:[function(require,module,exports){
'use strict'
module.exports = require('./lib')(require('./lib/elliptic'))

},{"./lib":340,"./lib/elliptic":339}],337:[function(require,module,exports){
(function (Buffer){
'use strict'
var toString = Object.prototype.toString

// TypeError
exports.isArray = function (value, message) {
  if (!Array.isArray(value)) throw TypeError(message)
}

exports.isBoolean = function (value, message) {
  if (toString.call(value) !== '[object Boolean]') throw TypeError(message)
}

exports.isBuffer = function (value, message) {
  if (!Buffer.isBuffer(value)) throw TypeError(message)
}

exports.isFunction = function (value, message) {
  if (toString.call(value) !== '[object Function]') throw TypeError(message)
}

exports.isNumber = function (value, message) {
  if (toString.call(value) !== '[object Number]') throw TypeError(message)
}

exports.isObject = function (value, message) {
  if (toString.call(value) !== '[object Object]') throw TypeError(message)
}

// RangeError
exports.isBufferLength = function (buffer, length, message) {
  if (buffer.length !== length) throw RangeError(message)
}

exports.isBufferLength2 = function (buffer, length1, length2, message) {
  if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message)
}

exports.isLengthGTZero = function (value, message) {
  if (value.length === 0) throw RangeError(message)
}

exports.isNumberInInterval = function (number, x, y, message) {
  if (number <= x || number >= y) throw RangeError(message)
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":256}],338:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var bip66 = require('bip66')

var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
  // begin
  0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
  // private key
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // middle
  0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
  0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
  0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
  // public key
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00
])

var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
  // begin
  0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
  // private key
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // middle
  0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
  0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
  0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,
  0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,
  0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
  // public key
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00
])

exports.privateKeyExport = function (privateKey, publicKey, compressed) {
  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED)
  privateKey.copy(result, compressed ? 8 : 9)
  publicKey.copy(result, compressed ? 181 : 214)
  return result
}

exports.privateKeyImport = function (privateKey) {
  var length = privateKey.length

  // sequence header
  var index = 0
  if (length < index + 1 || privateKey[index] !== 0x30) return
  index += 1

  // sequence length constructor
  if (length < index + 1 || !(privateKey[index] & 0x80)) return

  var lenb = privateKey[index] & 0x7f
  index += 1
  if (lenb < 1 || lenb > 2) return
  if (length < index + lenb) return

  // sequence length
  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0)
  index += lenb
  if (length < index + len) return

  // sequence element 0: version number (=1)
  if (length < index + 3 ||
      privateKey[index] !== 0x02 ||
      privateKey[index + 1] !== 0x01 ||
      privateKey[index + 2] !== 0x01) {
    return
  }
  index += 3

  // sequence element 1: octet string, up to 32 bytes
  if (length < index + 2 ||
      privateKey[index] !== 0x04 ||
      privateKey[index + 1] > 0x20 ||
      length < index + 2 + privateKey[index + 1]) {
    return
  }

  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])
}

exports.signatureExport = function (sigObj) {
  var r = Buffer.concat([Buffer.from([0]), sigObj.r])
  for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

  var s = Buffer.concat([Buffer.from([0]), sigObj.s])
  for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

  return bip66.encode(r.slice(posR), s.slice(posS))
}

exports.signatureImport = function (sig) {
  var r = Buffer.alloc(32, 0)
  var s = Buffer.alloc(32, 0)

  try {
    var sigObj = bip66.decode(sig)
    if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1)
    if (sigObj.r.length > 32) throw new Error('R length is too long')
    if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1)
    if (sigObj.s.length > 32) throw new Error('S length is too long')
  } catch (err) {
    return
  }

  sigObj.r.copy(r, 32 - sigObj.r.length)
  sigObj.s.copy(s, 32 - sigObj.s.length)

  return { r: r, s: s }
}

exports.signatureImportLax = function (sig) {
  var r = Buffer.alloc(32, 0)
  var s = Buffer.alloc(32, 0)

  var length = sig.length
  var index = 0

  // sequence tag byte
  if (sig[index++] !== 0x30) return

  // sequence length byte
  var lenbyte = sig[index++]
  if (lenbyte & 0x80) {
    index += lenbyte - 0x80
    if (index > length) return
  }

  // sequence tag byte for r
  if (sig[index++] !== 0x02) return

  // length for r
  var rlen = sig[index++]
  if (rlen & 0x80) {
    lenbyte = rlen - 0x80
    if (index + lenbyte > length) return
    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index]
  }
  if (rlen > length - index) return
  var rindex = index
  index += rlen

  // sequence tag byte for s
  if (sig[index++] !== 0x02) return

  // length for s
  var slen = sig[index++]
  if (slen & 0x80) {
    lenbyte = slen - 0x80
    if (index + lenbyte > length) return
    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index]
  }
  if (slen > length - index) return
  var sindex = index
  index += slen

  // ignore leading zeros in r
  for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);
  // copy r value
  if (rlen > 32) return
  var rvalue = sig.slice(rindex, rindex + rlen)
  rvalue.copy(r, 32 - rvalue.length)

  // ignore leading zeros in s
  for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);
  // copy s value
  if (slen > 32) return
  var svalue = sig.slice(sindex, sindex + slen)
  svalue.copy(s, 32 - svalue.length)

  return { r: r, s: s }
}

},{"bip66":157,"safe-buffer":333}],339:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var createHash = require('create-hash')
var BN = require('bn.js')
var EC = require('elliptic').ec

var messages = require('../messages.json')

var ec = new EC('secp256k1')
var ecparams = ec.curve

function loadCompressedPublicKey (first, xBuffer) {
  var x = new BN(xBuffer)

  // overflow
  if (x.cmp(ecparams.p) >= 0) return null
  x = x.toRed(ecparams.red)

  // compute corresponding Y
  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()

  return ec.keyPair({ pub: { x: x, y: y } })
}

function loadUncompressedPublicKey (first, xBuffer, yBuffer) {
  var x = new BN(xBuffer)
  var y = new BN(yBuffer)

  // overflow
  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

  x = x.toRed(ecparams.red)
  y = y.toRed(ecparams.red)

  // is odd flag
  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

  // x*x*x + b = y*y
  var x3 = x.redSqr().redIMul(x)
  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

  return ec.keyPair({ pub: { x: x, y: y } })
}

function loadPublicKey (publicKey) {
  var first = publicKey[0]
  switch (first) {
    case 0x02:
    case 0x03:
      if (publicKey.length !== 33) return null
      return loadCompressedPublicKey(first, publicKey.slice(1, 33))
    case 0x04:
    case 0x06:
    case 0x07:
      if (publicKey.length !== 65) return null
      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))
    default:
      return null
  }
}

exports.privateKeyVerify = function (privateKey) {
  var bn = new BN(privateKey)
  return bn.cmp(ecparams.n) < 0 && !bn.isZero()
}

exports.privateKeyExport = function (privateKey, compressed) {
  var d = new BN(privateKey)
  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)

  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
}

exports.privateKeyNegate = function (privateKey) {
  var bn = new BN(privateKey)
  return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)
}

exports.privateKeyModInverse = function (privateKey) {
  var bn = new BN(privateKey)
  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)

  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)
}

exports.privateKeyTweakAdd = function (privateKey, tweak) {
  var bn = new BN(tweak)
  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

  bn.iadd(new BN(privateKey))
  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

  return bn.toArrayLike(Buffer, 'be', 32)
}

exports.privateKeyTweakMul = function (privateKey, tweak) {
  var bn = new BN(tweak)
  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)

  bn.imul(new BN(privateKey))
  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)

  return bn.toArrayLike(Buffer, 'be', 32)
}

exports.publicKeyCreate = function (privateKey, compressed) {
  var d = new BN(privateKey)
  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)

  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
}

exports.publicKeyConvert = function (publicKey, compressed) {
  var pair = loadPublicKey(publicKey)
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

  return Buffer.from(pair.getPublic(compressed, true))
}

exports.publicKeyVerify = function (publicKey) {
  return loadPublicKey(publicKey) !== null
}

exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
  var pair = loadPublicKey(publicKey)
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

  tweak = new BN(tweak)
  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

  var point = ecparams.g.mul(tweak).add(pair.pub)
  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

  return Buffer.from(point.encode(true, compressed))
}

exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
  var pair = loadPublicKey(publicKey)
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

  tweak = new BN(tweak)
  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)

  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))
}

exports.publicKeyCombine = function (publicKeys, compressed) {
  var pairs = new Array(publicKeys.length)
  for (var i = 0; i < publicKeys.length; ++i) {
    pairs[i] = loadPublicKey(publicKeys[i])
    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)
  }

  var point = pairs[0].pub
  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)
  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)

  return Buffer.from(point.encode(true, compressed))
}

exports.signatureNormalize = function (signature) {
  var r = new BN(signature.slice(0, 32))
  var s = new BN(signature.slice(32, 64))
  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

  var result = Buffer.from(signature)
  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)

  return result
}

exports.signatureExport = function (signature) {
  var r = signature.slice(0, 32)
  var s = signature.slice(32, 64)
  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

  return { r: r, s: s }
}

exports.signatureImport = function (sigObj) {
  var r = new BN(sigObj.r)
  if (r.cmp(ecparams.n) >= 0) r = new BN(0)

  var s = new BN(sigObj.s)
  if (s.cmp(ecparams.n) >= 0) s = new BN(0)

  return Buffer.concat([
    r.toArrayLike(Buffer, 'be', 32),
    s.toArrayLike(Buffer, 'be', 32)
  ])
}

exports.sign = function (message, privateKey, noncefn, data) {
  if (typeof noncefn === 'function') {
    var getNonce = noncefn
    noncefn = function (counter) {
      var nonce = getNonce(message, privateKey, null, data, counter)
      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)

      return new BN(nonce)
    }
  }

  var d = new BN(privateKey)
  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)

  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })
  return {
    signature: Buffer.concat([
      result.r.toArrayLike(Buffer, 'be', 32),
      result.s.toArrayLike(Buffer, 'be', 32)
    ]),
    recovery: result.recoveryParam
  }
}

exports.verify = function (message, signature, publicKey) {
  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }

  var sigr = new BN(sigObj.r)
  var sigs = new BN(sigObj.s)
  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)
  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false

  var pair = loadPublicKey(publicKey)
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

  return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y })
}

exports.recover = function (message, signature, recovery, compressed) {
  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }

  var sigr = new BN(sigObj.r)
  var sigs = new BN(sigObj.s)
  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

  try {
    if (sigr.isZero() || sigs.isZero()) throw new Error()

    var point = ec.recoverPubKey(message, sigObj, recovery)
    return Buffer.from(point.encode(true, compressed))
  } catch (err) {
    throw new Error(messages.ECDSA_RECOVER_FAIL)
  }
}

exports.ecdh = function (publicKey, privateKey) {
  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)
  return createHash('sha256').update(shared).digest()
}

exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
  var pair = loadPublicKey(publicKey)
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

  var scalar = new BN(privateKey)
  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)

  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))
}

},{"../messages.json":341,"bn.js":158,"create-hash":169,"elliptic":171,"safe-buffer":333}],340:[function(require,module,exports){
'use strict'
var assert = require('./assert')
var der = require('./der')
var messages = require('./messages.json')

function initCompressedValue (value, defaultValue) {
  if (value === undefined) return defaultValue

  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)
  return value
}

module.exports = function (secp256k1) {
  return {
    privateKeyVerify: function (privateKey) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)
    },

    privateKeyExport: function (privateKey, compressed) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      compressed = initCompressedValue(compressed, true)
      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)

      return der.privateKeyExport(privateKey, publicKey, compressed)
    },

    privateKeyImport: function (privateKey) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)

      privateKey = der.privateKeyImport(privateKey)
      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey

      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)
    },

    privateKeyNegate: function (privateKey) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      return secp256k1.privateKeyNegate(privateKey)
    },

    privateKeyModInverse: function (privateKey) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      return secp256k1.privateKeyModInverse(privateKey)
    },

    privateKeyTweakAdd: function (privateKey, tweak) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

      return secp256k1.privateKeyTweakAdd(privateKey, tweak)
    },

    privateKeyTweakMul: function (privateKey, tweak) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

      return secp256k1.privateKeyTweakMul(privateKey, tweak)
    },

    publicKeyCreate: function (privateKey, compressed) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      compressed = initCompressedValue(compressed, true)

      return secp256k1.publicKeyCreate(privateKey, compressed)
    },

    publicKeyConvert: function (publicKey, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

      compressed = initCompressedValue(compressed, true)

      return secp256k1.publicKeyConvert(publicKey, compressed)
    },

    publicKeyVerify: function (publicKey) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      return secp256k1.publicKeyVerify(publicKey)
    },

    publicKeyTweakAdd: function (publicKey, tweak, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

      compressed = initCompressedValue(compressed, true)

      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)
    },

    publicKeyTweakMul: function (publicKey, tweak, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

      compressed = initCompressedValue(compressed, true)

      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)
    },

    publicKeyCombine: function (publicKeys, compressed) {
      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)
      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)
      for (var i = 0; i < publicKeys.length; ++i) {
        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)
        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)
      }

      compressed = initCompressedValue(compressed, true)

      return secp256k1.publicKeyCombine(publicKeys, compressed)
    },

    signatureNormalize: function (signature) {
      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

      return secp256k1.signatureNormalize(signature)
    },

    signatureExport: function (signature) {
      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

      var sigObj = secp256k1.signatureExport(signature)
      return der.signatureExport(sigObj)
    },

    signatureImport: function (sig) {
      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)
      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

      var sigObj = der.signatureImport(sig)
      if (sigObj) return secp256k1.signatureImport(sigObj)

      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)
    },

    signatureImportLax: function (sig) {
      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)
      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

      var sigObj = der.signatureImportLax(sig)
      if (sigObj) return secp256k1.signatureImport(sigObj)

      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)
    },

    sign: function (message, privateKey, options) {
      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      var data = null
      var noncefn = null
      if (options !== undefined) {
        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)

        if (options.data !== undefined) {
          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)
          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)
          data = options.data
        }

        if (options.noncefn !== undefined) {
          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)
          noncefn = options.noncefn
        }
      }

      return secp256k1.sign(message, privateKey, noncefn, data)
    },

    verify: function (message, signature, publicKey) {
      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

      return secp256k1.verify(message, signature, publicKey)
    },

    recover: function (message, signature, recovery, compressed) {
      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)
      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)

      compressed = initCompressedValue(compressed, true)

      return secp256k1.recover(message, signature, recovery, compressed)
    },

    ecdh: function (publicKey, privateKey) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      return secp256k1.ecdh(publicKey, privateKey)
    },

    ecdhUnsafe: function (publicKey, privateKey, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      compressed = initCompressedValue(compressed, true)

      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)
    }
  }
}

},{"./assert":337,"./der":338,"./messages.json":341}],341:[function(require,module,exports){
module.exports={
  "COMPRESSED_TYPE_INVALID": "compressed should be a boolean",
  "EC_PRIVATE_KEY_TYPE_INVALID": "private key should be a Buffer",
  "EC_PRIVATE_KEY_LENGTH_INVALID": "private key length is invalid",
  "EC_PRIVATE_KEY_RANGE_INVALID": "private key range is invalid",
  "EC_PRIVATE_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting private key is invalid",
  "EC_PRIVATE_KEY_TWEAK_MUL_FAIL": "tweak out of range",
  "EC_PRIVATE_KEY_EXPORT_DER_FAIL": "couldn't export to DER format",
  "EC_PRIVATE_KEY_IMPORT_DER_FAIL": "couldn't import from DER format",
  "EC_PUBLIC_KEYS_TYPE_INVALID": "public keys should be an Array",
  "EC_PUBLIC_KEYS_LENGTH_INVALID": "public keys Array should have at least 1 element",
  "EC_PUBLIC_KEY_TYPE_INVALID": "public key should be a Buffer",
  "EC_PUBLIC_KEY_LENGTH_INVALID": "public key length is invalid",
  "EC_PUBLIC_KEY_PARSE_FAIL": "the public key could not be parsed or is invalid",
  "EC_PUBLIC_KEY_CREATE_FAIL": "private was invalid, try again",
  "EC_PUBLIC_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting public key is invalid",
  "EC_PUBLIC_KEY_TWEAK_MUL_FAIL": "tweak out of range",
  "EC_PUBLIC_KEY_COMBINE_FAIL": "the sum of the public keys is not valid",
  "ECDH_FAIL": "scalar was invalid (zero or overflow)",
  "ECDSA_SIGNATURE_TYPE_INVALID": "signature should be a Buffer",
  "ECDSA_SIGNATURE_LENGTH_INVALID": "signature length is invalid",
  "ECDSA_SIGNATURE_PARSE_FAIL": "couldn't parse signature",
  "ECDSA_SIGNATURE_PARSE_DER_FAIL": "couldn't parse DER signature",
  "ECDSA_SIGNATURE_SERIALIZE_DER_FAIL": "couldn't serialize signature to DER format",
  "ECDSA_SIGN_FAIL": "nonce generation function failed or private key is invalid",
  "ECDSA_RECOVER_FAIL": "couldn't recover public key from signature",
  "MSG32_TYPE_INVALID": "message should be a Buffer",
  "MSG32_LENGTH_INVALID": "message length is invalid",
  "OPTIONS_TYPE_INVALID": "options should be an Object",
  "OPTIONS_DATA_TYPE_INVALID": "options.data should be a Buffer",
  "OPTIONS_DATA_LENGTH_INVALID": "options.data length is invalid",
  "OPTIONS_NONCEFN_TYPE_INVALID": "options.noncefn should be a Function",
  "RECOVERY_ID_TYPE_INVALID": "recovery should be a Number",
  "RECOVERY_ID_VALUE_INVALID": "recovery should have value between -1 and 4",
  "TWEAK_TYPE_INVALID": "tweak should be a Buffer",
  "TWEAK_LENGTH_INVALID": "tweak length is invalid"
}

},{}],342:[function(require,module,exports){
(function (process){
;(function(global) {

'use strict';

var nextTick = function (fn) { setTimeout(fn, 0); }
if (typeof process != 'undefined' && process && typeof process.nextTick == 'function') {
	// node.js and the like
	nextTick = process.nextTick;
}

function semaphore(capacity) {
	var semaphore = {
		capacity: capacity || 1,
		current: 0,
		queue: [],
		firstHere: false,

		take: function() {
			if (semaphore.firstHere === false) {
        			semaphore.current++;
        			semaphore.firstHere = true;
        			var isFirst = 1;
      			} else {
        			var isFirst = 0;
      			}
			var item = { n: 1 };

			if (typeof arguments[0] == 'function') {
				item.task = arguments[0];
			} else {
				item.n = arguments[0];
			}

			if (arguments.length >= 2)  {
				if (typeof arguments[1] == 'function') item.task = arguments[1];
				else item.n = arguments[1];
			}

			var task = item.task;
			item.task = function() { task(semaphore.leave); };

			if (semaphore.current + item.n - isFirst > semaphore.capacity) {
        			if (isFirst === 1) {
        				semaphore.current--;
        				semaphore.firstHere = false;
        			}
				return semaphore.queue.push(item);
			}

			semaphore.current += item.n - isFirst;
			item.task(semaphore.leave);
      			if (isFirst === 1) semaphore.firstHere = false;
		},

		leave: function(n) {
			n = n || 1;

			semaphore.current -= n;

			if (!semaphore.queue.length) {
				if (semaphore.current < 0) {
					throw new Error('leave called too many times.');
				}

				return;
			}

			var item = semaphore.queue[0];

			if (item.n + semaphore.current > semaphore.capacity) {
				return;
			}

			semaphore.queue.shift();
			semaphore.current += item.n;

			nextTick(item.task);
		},

		available: function(n) {
			n = n || 1;
			return(semaphore.current + n <= semaphore.capacity);
		}
	};

	return semaphore;
};

if (typeof exports === 'object') {
    // node export
    module.exports = semaphore;
} else if (typeof define === 'function' && define.amd) {
    // amd export
    define(function () {
        return semaphore;
    });
} else {
    // browser global
    global.semaphore = semaphore;
}
}(this));

}).call(this,require('_process'))
},{"_process":309}],343:[function(require,module,exports){
(function (setImmediate){
'use strict';
module.exports = typeof setImmediate === 'function' ? setImmediate :
	function setImmediate() {
		var args = [].slice.apply(arguments);
		args.splice(1, 0, 0);
		setTimeout.apply(null, args);
	};

}).call(this,require("timers").setImmediate)
},{"timers":354}],344:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":333}],345:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":346,"./sha1":347,"./sha224":348,"./sha256":349,"./sha384":350,"./sha512":351}],346:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":344,"inherits":255,"safe-buffer":333}],347:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":344,"inherits":255,"safe-buffer":333}],348:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":344,"./sha256":349,"inherits":255,"safe-buffer":333}],349:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":344,"inherits":255,"safe-buffer":333}],350:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":344,"./sha512":351,"inherits":255,"safe-buffer":333}],351:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":344,"inherits":255,"safe-buffer":333}],352:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":237,"inherits":255,"readable-stream/duplex.js":315,"readable-stream/passthrough.js":327,"readable-stream/readable.js":328,"readable-stream/transform.js":329,"readable-stream/writable.js":330}],353:[function(require,module,exports){
var isHexPrefixed = require('is-hex-prefixed');

/**
 * Removes '0x' from a given `String` is present
 * @param {String} str the string value
 * @return {String|Optional} a string by pass if necessary
 */
module.exports = function stripHexPrefix(str) {
  if (typeof str !== 'string') {
    return str;
  }

  return isHexPrefixed(str) ? str.slice(2) : str;
}

},{"is-hex-prefixed":258}],354:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":309,"timers":354}],355:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"./util":356,"punycode":162,"querystring":313}],356:[function(require,module,exports){
'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

},{}],357:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],358:[function(require,module,exports){
arguments[4][122][0].apply(exports,arguments)
},{"dup":122}],359:[function(require,module,exports){
arguments[4][123][0].apply(exports,arguments)
},{"dup":123}],360:[function(require,module,exports){
arguments[4][124][0].apply(exports,arguments)
},{"./support/isBuffer":359,"_process":309,"dup":124,"inherits":358}],361:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],362:[function(require,module,exports){
module.exports={
  "name": "@trufflesuite/web3-provider-engine",
  "version": "15.0.14",
  "description": "Fork of https://github.com/MetaMask/web3-provider-engine",
  "repository": "https://github.com/trufflesuite/provider-engine",
  "main": "index.js",
  "scripts": {
    "test": "node test/index.js && yarn lint",
    "prepublishOnly": "yarn build && yarn bundle",
    "build": "babel zero.js index.js -d dist/es5 && babel subproviders -d dist/es5/subproviders && babel util -d dist/es5/util",
    "bundle": "mkdir -p ./dist && yarn bundle-engine && yarn bundle-zero",
    "bundle-zero": "browserify -s ZeroClientProvider -e zero.js -t [ babelify --presets [ @babel/preset-env ] ] > dist/ZeroClientProvider.js",
    "bundle-engine": "browserify -s ProviderEngine -e index.js -t [ babelify --presets [ @babel/preset-env ] ] > dist/ProviderEngine.js",
    "lint": "eslint --quiet --ignore-path .gitignore ."
  },
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@trufflesuite/eth-json-rpc-filters": "^4.1.2-1",
    "@trufflesuite/eth-json-rpc-infura": "^4.0.3-0",
    "@trufflesuite/eth-json-rpc-middleware": "^4.4.2-1",
    "@trufflesuite/eth-sig-util": "^1.4.2",
    "async": "^2.5.0",
    "backoff": "^2.5.0",
    "clone": "^2.0.0",
    "cross-fetch": "^2.1.0",
    "eth-block-tracker": "^4.4.2",
    "eth-json-rpc-errors": "^2.0.2",
    "ethereumjs-block": "^1.2.2",
    "@ethereumjs/tx": "^3.3.0",
    "ethereumjs-util": "^5.1.5",
    "ethereumjs-vm": "^2.3.4",
    "json-stable-stringify": "^1.0.1",
    "promise-to-callback": "^1.0.0",
    "readable-stream": "^2.2.9",
    "request": "^2.85.0",
    "semaphore": "^1.0.3",
    "ws": "^5.1.1",
    "xhr": "^2.2.0",
    "xtend": "^4.0.1"
  },
  "devDependencies": {
    "@babel/cli": "^7.5.5",
    "@babel/core": "^7.5.5",
    "@babel/preset-env": "^7.5.5",
    "babelify": "^10.0.0",
    "browserify": "^16.5.0",
    "eslint": "^6.2.0",
    "ethjs": "^0.3.6",
    "ganache-core": "^2.7.0",
    "tape": "^4.4.0"
  },
  "browser": {
    "request": false,
    "ws": false
  },
  "publishConfig": {
    "access": "public"
  }
}

},{}],363:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ProviderSubprovider = require('./json-rpc-engine-middleware');

var createBlockCacheMiddleware = require('@trufflesuite/eth-json-rpc-middleware/block-cache');

var BlockCacheSubprovider = /*#__PURE__*/function (_ProviderSubprovider) {
  _inherits(BlockCacheSubprovider, _ProviderSubprovider);

  var _super = _createSuper(BlockCacheSubprovider);

  function BlockCacheSubprovider(opts) {
    _classCallCheck(this, BlockCacheSubprovider);

    return _super.call(this, function (_ref) {
      var blockTracker = _ref.blockTracker;
      return createBlockCacheMiddleware(Object.assign({
        blockTracker: blockTracker
      }, opts));
    });
  }

  return BlockCacheSubprovider;
}(ProviderSubprovider);

module.exports = BlockCacheSubprovider;

},{"./json-rpc-engine-middleware":371,"@trufflesuite/eth-json-rpc-middleware/block-cache":106}],364:[function(require,module,exports){
"use strict";

var inherits = require('util').inherits;

var extend = require('xtend');

var FixtureProvider = require('./fixture.js');

var version = require('../package.json').version;

module.exports = DefaultFixtures;
inherits(DefaultFixtures, FixtureProvider);

function DefaultFixtures(opts) {
  var self = this;
  opts = opts || {};
  var responses = extend({
    web3_clientVersion: 'ProviderEngine/v' + version + '/javascript',
    net_listening: true,
    eth_hashrate: '0x00',
    eth_mining: false
  }, opts);
  FixtureProvider.call(self, responses);
}

},{"../package.json":362,"./fixture.js":367,"util":360,"xtend":361}],365:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ProviderSubprovider = require('./json-rpc-engine-middleware');

var createFetchMiddleware = require('@trufflesuite/eth-json-rpc-middleware/fetch');

var FetchSubprovider = /*#__PURE__*/function (_ProviderSubprovider) {
  _inherits(FetchSubprovider, _ProviderSubprovider);

  var _super = _createSuper(FetchSubprovider);

  function FetchSubprovider(opts) {
    _classCallCheck(this, FetchSubprovider);

    return _super.call(this, function (_ref) {
      var blockTracker = _ref.blockTracker,
          provider = _ref.provider,
          engine = _ref.engine;
      return createFetchMiddleware(opts);
    });
  }

  return FetchSubprovider;
}(ProviderSubprovider);

module.exports = FetchSubprovider;

},{"./json-rpc-engine-middleware":371,"@trufflesuite/eth-json-rpc-middleware/fetch":108}],366:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ProviderSubprovider = require('./json-rpc-engine-middleware');

var createFilterMiddleware = require('@trufflesuite/eth-json-rpc-filters');

var SubscriptionsSubprovider = /*#__PURE__*/function (_ProviderSubprovider) {
  _inherits(SubscriptionsSubprovider, _ProviderSubprovider);

  var _super = _createSuper(SubscriptionsSubprovider);

  function SubscriptionsSubprovider() {
    _classCallCheck(this, SubscriptionsSubprovider);

    return _super.call(this, function (_ref) {
      var blockTracker = _ref.blockTracker,
          provider = _ref.provider,
          engine = _ref.engine;
      return createFilterMiddleware({
        blockTracker: blockTracker,
        provider: provider
      });
    });
  }

  return SubscriptionsSubprovider;
}(ProviderSubprovider);

module.exports = SubscriptionsSubprovider;

},{"./json-rpc-engine-middleware":371,"@trufflesuite/eth-json-rpc-filters":85}],367:[function(require,module,exports){
"use strict";

var inherits = require('util').inherits;

var Subprovider = require('./subprovider.js');

module.exports = FixtureProvider;
inherits(FixtureProvider, Subprovider);

function FixtureProvider(staticResponses) {
  var self = this;
  staticResponses = staticResponses || {};
  self.staticResponses = staticResponses;
}

FixtureProvider.prototype.handleRequest = function (payload, next, end) {
  var self = this;
  var staticResponse = self.staticResponses[payload.method]; // async function

  if ('function' === typeof staticResponse) {
    staticResponse(payload, next, end); // static response - null is valid response
  } else if (staticResponse !== undefined) {
    // return result asynchronously
    setTimeout(function () {
      return end(null, staticResponse);
    }); // no prepared response - skip
  } else {
    next();
  }
};

},{"./subprovider.js":375,"util":360}],368:[function(require,module,exports){
"use strict";

/*
 * Emulate 'eth_accounts' / 'eth_sendTransaction' using 'eth_sendRawTransaction'
 *
 * The two callbacks a user needs to implement are:
 * - getAccounts() -- array of addresses supported
 * - signTransaction(tx) -- sign a raw transaction object
 */
var waterfall = require('async/waterfall');

var parallel = require('async/parallel');

var inherits = require('util').inherits;

var ethUtil = require('ethereumjs-util');

var sigUtil = require('@trufflesuite/eth-sig-util');

var extend = require('xtend');

var Semaphore = require('semaphore');

var Subprovider = require('./subprovider.js');

var estimateGas = require('../util/estimate-gas.js');

var hexRegex = /^[0-9A-Fa-f]+$/g;
module.exports = HookedWalletSubprovider; // handles the following RPC methods:
//   eth_coinbase
//   eth_accounts
//   eth_sendTransaction
//   eth_sign
//   eth_signTypedData
//   eth_signTypedData_v3
//   eth_signTypedData_v4
//   personal_sign
//   eth_decryptMessage
//   encryption_public_key
//   personal_ecRecover
//   parity_postTransaction
//   parity_checkRequest
//   parity_defaultAccount
//
// Tx Signature Flow
//
// handleRequest: eth_sendTransaction
//   validateTransaction (basic validity check)
//     validateSender (checks that sender is in accounts)
//   processTransaction (sign tx and submit to network)
//     approveTransaction (UI approval hook)
//     checkApproval
//     finalizeAndSubmitTx (tx signing)
//       nonceLock.take (bottle neck to ensure atomic nonce)
//         fillInTxExtras (set fallback gasPrice, nonce, etc)
//         signTransaction (perform the signature)
//         publishTransaction (publish signed tx to network)
//

inherits(HookedWalletSubprovider, Subprovider);

function HookedWalletSubprovider(opts) {
  var self = this; // control flow

  self.nonceLock = Semaphore(1); // data lookup

  if (opts.getAccounts) self.getAccounts = opts.getAccounts; // high level override

  if (opts.processTransaction) self.processTransaction = opts.processTransaction;
  if (opts.processMessage) self.processMessage = opts.processMessage;
  if (opts.processPersonalMessage) self.processPersonalMessage = opts.processPersonalMessage;
  if (opts.processTypedMessage) self.processTypedMessage = opts.processTypedMessage; // approval hooks

  self.approveTransaction = opts.approveTransaction || self.autoApprove;
  self.approveMessage = opts.approveMessage || self.autoApprove;
  self.approvePersonalMessage = opts.approvePersonalMessage || self.autoApprove;
  self.approveDecryptMessage = opts.approveDecryptMessage || self.autoApprove;
  self.approveEncryptionPublicKey = opts.approveEncryptionPublicKey || self.autoApprove;
  self.approveTypedMessage = opts.approveTypedMessage || self.autoApprove; // actually perform the signature

  if (opts.signTransaction) self.signTransaction = opts.signTransaction || mustProvideInConstructor('signTransaction');
  if (opts.signMessage) self.signMessage = opts.signMessage || mustProvideInConstructor('signMessage');
  if (opts.signPersonalMessage) self.signPersonalMessage = opts.signPersonalMessage || mustProvideInConstructor('signPersonalMessage');
  if (opts.decryptMessage) self.decryptMessage = opts.decryptMessage || mustProvideInConstructor('decryptMessage');
  if (opts.encryptionPublicKey) self.encryptionPublicKey = opts.encryptionPublicKey || mustProvideInConstructor('encryptionPublicKey');
  if (opts.signTypedMessage) self.signTypedMessage = opts.signTypedMessage || mustProvideInConstructor('signTypedMessage');
  if (opts.recoverPersonalSignature) self.recoverPersonalSignature = opts.recoverPersonalSignature; // publish to network

  if (opts.publishTransaction) self.publishTransaction = opts.publishTransaction; // gas options

  self.estimateGas = opts.estimateGas || self.estimateGas;
  self.getGasPrice = opts.getGasPrice || self.getGasPrice;
}

HookedWalletSubprovider.prototype.handleRequest = function (payload, next, end) {
  var self = this;
  self._parityRequests = {};
  self._parityRequestCount = 0; // switch statement is not block scoped
  // sp we cant repeat var declarations

  var txParams, msgParams, extraParams;
  var message, address;

  switch (payload.method) {
    case 'eth_coinbase':
      // process normally
      self.getAccounts(function (err, accounts) {
        if (err) return end(err);
        var result = accounts[0] || null;
        end(null, result);
      });
      return;

    case 'eth_accounts':
      // process normally
      self.getAccounts(function (err, accounts) {
        if (err) return end(err);
        end(null, accounts);
      });
      return;

    case 'eth_sendTransaction':
      txParams = payload.params[0];
      waterfall([function (cb) {
        return self.validateTransaction(txParams, cb);
      }, function (cb) {
        return self.processTransaction(txParams, cb);
      }], end);
      return;

    case 'eth_signTransaction':
      txParams = payload.params[0];
      waterfall([function (cb) {
        return self.validateTransaction(txParams, cb);
      }, function (cb) {
        return self.processSignTransaction(txParams, cb);
      }], end);
      return;

    case 'eth_sign':
      // process normally
      address = payload.params[0];
      message = payload.params[1]; // non-standard "extraParams" to be appended to our "msgParams" obj
      // good place for metadata

      extraParams = payload.params[2] || {};
      msgParams = extend(extraParams, {
        from: address,
        data: message
      });
      waterfall([function (cb) {
        return self.validateMessage(msgParams, cb);
      }, function (cb) {
        return self.processMessage(msgParams, cb);
      }], end);
      return;

    case 'personal_sign':
      return function () {
        // process normally
        var first = payload.params[0];
        var second = payload.params[1]; // We initially incorrectly ordered these parameters.
        // To gracefully respect users who adopted this API early,
        // we are currently gracefully recovering from the wrong param order
        // when it is clearly identifiable.
        //
        // That means when the first param is definitely an address,
        // and the second param is definitely not, but is hex.

        if (resemblesData(second) && resemblesAddress(first)) {
          var warning = "The eth_personalSign method requires params ordered ";
          warning += "[message, address]. This was previously handled incorrectly, ";
          warning += "and has been corrected automatically. ";
          warning += "Please switch this param order for smooth behavior in the future.";
          console.warn(warning);
          address = payload.params[0];
          message = payload.params[1];
        } else {
          message = payload.params[0];
          address = payload.params[1];
        } // non-standard "extraParams" to be appended to our "msgParams" obj
        // good place for metadata


        extraParams = payload.params[2] || {};
        msgParams = extend(extraParams, {
          from: address,
          data: message
        });
        waterfall([function (cb) {
          return self.validatePersonalMessage(msgParams, cb);
        }, function (cb) {
          return self.processPersonalMessage(msgParams, cb);
        }], end);
      }();

    case 'eth_decryptMessage':
      return function () {
        // process normally
        var first = payload.params[0];
        var second = payload.params[1]; // We initially incorrectly ordered these parameters.
        // To gracefully respect users who adopted this API early,
        // we are currently gracefully recovering from the wrong param order
        // when it is clearly identifiable.
        //
        // That means when the first param is definitely an address,
        // and the second param is definitely not, but is hex.

        if (resemblesData(second) && resemblesAddress(first)) {
          var warning = "The eth_decryptMessage method requires params ordered ";
          warning += "[message, address]. This was previously handled incorrectly, ";
          warning += "and has been corrected automatically. ";
          warning += "Please switch this param order for smooth behavior in the future.";
          console.warn(warning);
          address = payload.params[0];
          message = payload.params[1];
        } else {
          message = payload.params[0];
          address = payload.params[1];
        } // non-standard "extraParams" to be appended to our "msgParams" obj
        // good place for metadata


        extraParams = payload.params[2] || {};
        msgParams = extend(extraParams, {
          from: address,
          data: message
        });
        waterfall([function (cb) {
          return self.validateDecryptMessage(msgParams, cb);
        }, function (cb) {
          return self.processDecryptMessage(msgParams, cb);
        }], end);
      }();

    case 'encryption_public_key':
      return function () {
        var address = payload.params[0];
        waterfall([function (cb) {
          return self.validateEncryptionPublicKey(address, cb);
        }, function (cb) {
          return self.processEncryptionPublicKey(address, cb);
        }], end);
      }();

    case 'personal_ecRecover':
      return function () {
        message = payload.params[0];
        var signature = payload.params[1]; // non-standard "extraParams" to be appended to our "msgParams" obj
        // good place for metadata

        extraParams = payload.params[2] || {};
        msgParams = extend(extraParams, {
          sig: signature,
          data: message
        });
        self.recoverPersonalSignature(msgParams, end);
      }();

    case 'eth_signTypedData':
    case 'eth_signTypedData_v3':
    case 'eth_signTypedData_v4':
      return function () {
        // process normally
        var first = payload.params[0];
        var second = payload.params[1];

        if (resemblesAddress(first)) {
          address = first;
          message = second;
        } else {
          message = first;
          address = second;
        }

        extraParams = payload.params[2] || {};
        msgParams = extend(extraParams, {
          from: address,
          data: message
        });
        waterfall([function (cb) {
          return self.validateTypedMessage(msgParams, cb);
        }, function (cb) {
          return self.processTypedMessage(msgParams, cb);
        }], end);
      }();

    case 'parity_postTransaction':
      txParams = payload.params[0];
      self.parityPostTransaction(txParams, end);
      return;

    case 'parity_postSign':
      address = payload.params[0];
      message = payload.params[1];
      self.parityPostSign(address, message, end);
      return;

    case 'parity_checkRequest':
      return function () {
        var requestId = payload.params[0];
        self.parityCheckRequest(requestId, end);
      }();

    case 'parity_defaultAccount':
      self.getAccounts(function (err, accounts) {
        if (err) return end(err);
        var account = accounts[0] || null;
        end(null, account);
      });
      return;

    default:
      next();
      return;
  }
}; //
// data lookup
//


HookedWalletSubprovider.prototype.getAccounts = function (cb) {
  cb(null, []);
}; //
// "process" high level flow
//


HookedWalletSubprovider.prototype.processTransaction = function (txParams, cb) {
  var self = this;
  waterfall([function (cb) {
    return self.approveTransaction(txParams, cb);
  }, function (didApprove, cb) {
    return self.checkApproval('transaction', didApprove, cb);
  }, function (cb) {
    return self.finalizeAndSubmitTx(txParams, cb);
  }], cb);
};

HookedWalletSubprovider.prototype.processSignTransaction = function (txParams, cb) {
  var self = this;
  waterfall([function (cb) {
    return self.approveTransaction(txParams, cb);
  }, function (didApprove, cb) {
    return self.checkApproval('transaction', didApprove, cb);
  }, function (cb) {
    return self.finalizeTx(txParams, cb);
  }], cb);
};

HookedWalletSubprovider.prototype.processMessage = function (msgParams, cb) {
  var self = this;
  waterfall([function (cb) {
    return self.approveMessage(msgParams, cb);
  }, function (didApprove, cb) {
    return self.checkApproval('message', didApprove, cb);
  }, function (cb) {
    return self.signMessage(msgParams, cb);
  }], cb);
};

HookedWalletSubprovider.prototype.processPersonalMessage = function (msgParams, cb) {
  var self = this;
  waterfall([function (cb) {
    return self.approvePersonalMessage(msgParams, cb);
  }, function (didApprove, cb) {
    return self.checkApproval('message', didApprove, cb);
  }, function (cb) {
    return self.signPersonalMessage(msgParams, cb);
  }], cb);
};

HookedWalletSubprovider.prototype.processDecryptMessage = function (msgParams, cb) {
  var self = this;
  waterfall([function (cb) {
    return self.approveDecryptMessage(msgParams, cb);
  }, function (didApprove, cb) {
    return self.checkApproval('decryptMessage', didApprove, cb);
  }, function (cb) {
    return self.decryptMessage(msgParams, cb);
  }], cb);
};

HookedWalletSubprovider.prototype.processEncryptionPublicKey = function (msgParams, cb) {
  var self = this;
  waterfall([function (cb) {
    return self.approveEncryptionPublicKey(msgParams, cb);
  }, function (didApprove, cb) {
    return self.checkApproval('encryptionPublicKey', didApprove, cb);
  }, function (cb) {
    return self.encryptionPublicKey(msgParams, cb);
  }], cb);
};

HookedWalletSubprovider.prototype.processTypedMessage = function (msgParams, cb) {
  var self = this;
  waterfall([function (cb) {
    return self.approveTypedMessage(msgParams, cb);
  }, function (didApprove, cb) {
    return self.checkApproval('message', didApprove, cb);
  }, function (cb) {
    return self.signTypedMessage(msgParams, cb);
  }], cb);
}; //
// approval
//


HookedWalletSubprovider.prototype.autoApprove = function (txParams, cb) {
  cb(null, true);
};

HookedWalletSubprovider.prototype.checkApproval = function (type, didApprove, cb) {
  cb(didApprove ? null : new Error('User denied ' + type + ' signature.'));
}; //
// parity
//


HookedWalletSubprovider.prototype.parityPostTransaction = function (txParams, cb) {
  var self = this; // get next id

  var count = self._parityRequestCount;
  var reqId = "0x".concat(count.toString(16));
  self._parityRequestCount++;
  self.emitPayload({
    method: 'eth_sendTransaction',
    params: [txParams]
  }, function (error, res) {
    if (error) {
      self._parityRequests[reqId] = {
        error: error
      };
      return;
    }

    var txHash = res.result;
    self._parityRequests[reqId] = txHash;
  });
  cb(null, reqId);
};

HookedWalletSubprovider.prototype.parityPostSign = function (address, message, cb) {
  var self = this; // get next id

  var count = self._parityRequestCount;
  var reqId = "0x".concat(count.toString(16));
  self._parityRequestCount++;
  self.emitPayload({
    method: 'eth_sign',
    params: [address, message]
  }, function (error, res) {
    if (error) {
      self._parityRequests[reqId] = {
        error: error
      };
      return;
    }

    var result = res.result;
    self._parityRequests[reqId] = result;
  });
  cb(null, reqId);
};

HookedWalletSubprovider.prototype.parityCheckRequest = function (reqId, cb) {
  var self = this;
  var result = self._parityRequests[reqId] || null; // tx not handled yet

  if (!result) return cb(null, null); // tx was rejected (or other error)

  if (result.error) return cb(result.error); // tx sent

  cb(null, result);
}; //
// signature and recovery
//


HookedWalletSubprovider.prototype.recoverPersonalSignature = function (msgParams, cb) {
  var senderHex;

  try {
    senderHex = sigUtil.recoverPersonalSignature(msgParams);
  } catch (err) {
    return cb(err);
  }

  cb(null, senderHex);
}; //
// validation
//


HookedWalletSubprovider.prototype.validateTransaction = function (txParams, cb) {
  var self = this; // shortcut: undefined sender is invalid

  if (txParams.from === undefined) return cb(new Error("Undefined address - from address required to sign transaction."));
  self.validateSender(txParams.from, function (err, senderIsValid) {
    if (err) return cb(err);
    if (!senderIsValid) return cb(new Error("Unknown address - unable to sign transaction for this address: \"".concat(txParams.from, "\"")));
    cb();
  });
};

HookedWalletSubprovider.prototype.validateMessage = function (msgParams, cb) {
  var self = this;
  if (msgParams.from === undefined) return cb(new Error("Undefined address - from address required to sign message."));
  self.validateSender(msgParams.from, function (err, senderIsValid) {
    if (err) return cb(err);
    if (!senderIsValid) return cb(new Error("Unknown address - unable to sign message for this address: \"".concat(msgParams.from, "\"")));
    cb();
  });
};

HookedWalletSubprovider.prototype.validatePersonalMessage = function (msgParams, cb) {
  var self = this;
  if (msgParams.from === undefined) return cb(new Error("Undefined address - from address required to sign personal message."));
  if (msgParams.data === undefined) return cb(new Error("Undefined message - message required to sign personal message."));
  if (!isValidHex(msgParams.data)) return cb(new Error("HookedWalletSubprovider - validateMessage - message was not encoded as hex."));
  self.validateSender(msgParams.from, function (err, senderIsValid) {
    if (err) return cb(err);
    if (!senderIsValid) return cb(new Error("Unknown address - unable to sign message for this address: \"".concat(msgParams.from, "\"")));
    cb();
  });
};

HookedWalletSubprovider.prototype.validateDecryptMessage = function (msgParams, cb) {
  var self = this;
  if (msgParams.from === undefined) return cb(new Error("Undefined address - from address required to decrypt message."));
  if (msgParams.data === undefined) return cb(new Error("Undefined message - message required to decrypt message."));
  if (!isValidHex(msgParams.data)) return cb(new Error("HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex."));
  self.validateSender(msgParams.from, function (err, senderIsValid) {
    if (err) return cb(err);
    if (!senderIsValid) return cb(new Error("Unknown address - unable to decrypt message for this address: \"".concat(msgParams.from, "\"")));
    cb();
  });
};

HookedWalletSubprovider.prototype.validateEncryptionPublicKey = function (address, cb) {
  var self = this;
  self.validateSender(address, function (err, senderIsValid) {
    if (err) return cb(err);
    if (!senderIsValid) return cb(new Error("Unknown address - unable to obtain encryption public key for this address: \"".concat(address, "\"")));
    cb();
  });
};

HookedWalletSubprovider.prototype.validateTypedMessage = function (msgParams, cb) {
  if (msgParams.from === undefined) return cb(new Error("Undefined address - from address required to sign typed data."));
  if (msgParams.data === undefined) return cb(new Error("Undefined data - message required to sign typed data."));
  this.validateSender(msgParams.from, function (err, senderIsValid) {
    if (err) return cb(err);
    if (!senderIsValid) return cb(new Error("Unknown address - unable to sign message for this address: \"".concat(msgParams.from, "\"")));
    cb();
  });
};

HookedWalletSubprovider.prototype.validateSender = function (senderAddress, cb) {
  var self = this; // shortcut: undefined sender is invalid

  if (!senderAddress) return cb(null, false);
  self.getAccounts(function (err, accounts) {
    if (err) return cb(err);
    var senderIsValid = accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1;
    cb(null, senderIsValid);
  });
}; //
// tx helpers
//


HookedWalletSubprovider.prototype.finalizeAndSubmitTx = function (txParams, cb) {
  var self = this; // can only allow one tx to pass through this flow at a time
  // so we can atomically consume a nonce

  self.nonceLock.take(function () {
    waterfall([self.fillInTxExtras.bind(self, txParams), self.signTransaction.bind(self), self.publishTransaction.bind(self)], function (err, txHash) {
      self.nonceLock.leave();
      if (err) return cb(err);
      cb(null, txHash);
    });
  });
};

HookedWalletSubprovider.prototype.finalizeTx = function (txParams, cb) {
  var self = this; // can only allow one tx to pass through this flow at a time
  // so we can atomically consume a nonce

  self.nonceLock.take(function () {
    waterfall([self.fillInTxExtras.bind(self, txParams), self.signTransaction.bind(self)], function (err, signedTx) {
      self.nonceLock.leave();
      if (err) return cb(err);
      cb(null, {
        raw: signedTx,
        tx: txParams
      });
    });
  });
};

HookedWalletSubprovider.prototype.publishTransaction = function (rawTx, cb) {
  var self = this;
  self.emitPayload({
    method: 'eth_sendRawTransaction',
    params: [rawTx]
  }, function (err, res) {
    if (err) return cb(err);
    cb(null, res.result);
  });
};

HookedWalletSubprovider.prototype.estimateGas = function (txParams, cb) {
  var self = this;
  estimateGas(self.engine, txParams, cb);
};

HookedWalletSubprovider.prototype.getGasPrice = function (cb) {
  var self = this;
  self.emitPayload({
    method: 'eth_gasPrice',
    params: []
  }, function (err, res) {
    if (err) return cb(err);
    cb(null, res.result);
  });
};

HookedWalletSubprovider.prototype.fillInTxExtras = function (txParams, cb) {
  var self = this;
  var address = txParams.from; // console.log('fillInTxExtras - address:', address)

  var tasks = {};

  if (txParams.gasPrice === undefined) {
    // console.log("need to get gasprice")
    tasks.gasPrice = self.getGasPrice.bind(self);
  }

  if (txParams.nonce === undefined) {
    // console.log("need to get nonce")
    tasks.nonce = self.emitPayload.bind(self, {
      method: 'eth_getTransactionCount',
      params: [address, 'pending']
    });
  }

  if (txParams.gas === undefined) {
    // console.log("need to get gas")
    tasks.gas = self.estimateGas.bind(self, cloneTxParams(txParams));
  }

  parallel(tasks, function (err, taskResults) {
    if (err) return cb(err);
    var result = {};
    if (taskResults.gasPrice) result.gasPrice = taskResults.gasPrice;
    if (taskResults.nonce) result.nonce = taskResults.nonce.result;
    if (taskResults.gas) result.gas = taskResults.gas;
    cb(null, extend(txParams, result));
  });
}; // util
// we use this to clean any custom params from the txParams


function cloneTxParams(txParams) {
  return {
    from: txParams.from,
    to: txParams.to,
    value: txParams.value,
    data: txParams.data,
    gas: txParams.gas,
    gasPrice: txParams.gasPrice,
    nonce: txParams.nonce
  };
}

function toLowerCase(string) {
  return string.toLowerCase();
}

function resemblesAddress(string) {
  var fixed = ethUtil.addHexPrefix(string);
  var isValid = ethUtil.isValidAddress(fixed);
  return isValid;
} // Returns true if resembles hex data
// but definitely not a valid address.


function resemblesData(string) {
  var fixed = ethUtil.addHexPrefix(string);
  var isValidAddress = ethUtil.isValidAddress(fixed);
  return !isValidAddress && isValidHex(string);
}

function isValidHex(data) {
  var isString = typeof data === 'string';
  if (!isString) return false;
  var isHexPrefixed = data.slice(0, 2) === '0x';
  if (!isHexPrefixed) return false;
  var nonPrefixed = data.slice(2);
  var isValid = nonPrefixed.match(hexRegex);
  return isValid;
}

function mustProvideInConstructor(methodName) {
  return function (params, cb) {
    cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "' + methodName + '" fn in constructor options'));
  };
}

},{"../util/estimate-gas.js":379,"./subprovider.js":375,"@trufflesuite/eth-sig-util":120,"async/parallel":147,"async/waterfall":148,"ethereumjs-util":235,"semaphore":342,"util":360,"xtend":361}],369:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ProviderSubprovider = require('./json-rpc-engine-middleware');

var createInflightCacheMiddleware = require('@trufflesuite/eth-json-rpc-middleware/inflight-cache');

var InflightCacheSubprovider = /*#__PURE__*/function (_ProviderSubprovider) {
  _inherits(InflightCacheSubprovider, _ProviderSubprovider);

  var _super = _createSuper(InflightCacheSubprovider);

  function InflightCacheSubprovider(opts) {
    _classCallCheck(this, InflightCacheSubprovider);

    return _super.call(this, function () {
      return createInflightCacheMiddleware(opts);
    });
  }

  return InflightCacheSubprovider;
}(ProviderSubprovider);

module.exports = InflightCacheSubprovider;

},{"./json-rpc-engine-middleware":371,"@trufflesuite/eth-json-rpc-middleware/inflight-cache":109}],370:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var createInfuraProvider = require('@trufflesuite/eth-json-rpc-infura/src/createProvider');

var ProviderSubprovider = require('./provider.js');

var InfuraSubprovider = /*#__PURE__*/function (_ProviderSubprovider) {
  _inherits(InfuraSubprovider, _ProviderSubprovider);

  var _super = _createSuper(InfuraSubprovider);

  function InfuraSubprovider() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, InfuraSubprovider);

    var provider = createInfuraProvider(opts);
    return _super.call(this, provider);
  }

  return InfuraSubprovider;
}(ProviderSubprovider);

module.exports = InfuraSubprovider;

},{"./provider.js":373,"@trufflesuite/eth-json-rpc-infura/src/createProvider":104}],371:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Subprovider = require('./subprovider.js'); // wraps a json-rpc-engine middleware in a subprovider interface


var JsonRpcEngineMiddlewareSubprovider = /*#__PURE__*/function (_Subprovider) {
  _inherits(JsonRpcEngineMiddlewareSubprovider, _Subprovider);

  var _super = _createSuper(JsonRpcEngineMiddlewareSubprovider);

  // take a constructorFn to call once we have a reference to the engine
  function JsonRpcEngineMiddlewareSubprovider(constructorFn) {
    var _this;

    _classCallCheck(this, JsonRpcEngineMiddlewareSubprovider);

    _this = _super.call(this);
    if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified');
    _this._constructorFn = constructorFn;
    return _this;
  } // this is called once the subprovider has been added to the provider engine


  _createClass(JsonRpcEngineMiddlewareSubprovider, [{
    key: "setEngine",
    value: function setEngine(engine) {
      if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');
      var blockTracker = engine._blockTracker;

      var middleware = this._constructorFn({
        engine: engine,
        provider: engine,
        blockTracker: blockTracker
      });

      if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');
      if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');
      this.middleware = middleware;
    }
  }, {
    key: "handleRequest",
    value: function handleRequest(req, provEngNext, provEngEnd) {
      var res = {
        id: req.id
      };
      this.middleware(req, res, middlewareNext, middlewareEnd);

      function middlewareNext(handler) {
        provEngNext(function (err, result, cb) {
          // update response object with result or error
          if (err) {
            delete res.result;
            res.error = {
              message: err.message || err
            };
          } else {
            res.result = result;
          } // call middleware's next handler (even if error)


          if (handler) {
            handler(cb);
          } else {
            cb();
          }
        });
      }

      function middlewareEnd(err) {
        if (err) return provEngEnd(err);
        provEngEnd(null, res.result);
      }
    }
  }]);

  return JsonRpcEngineMiddlewareSubprovider;
}(Subprovider);

module.exports = JsonRpcEngineMiddlewareSubprovider;

},{"./subprovider.js":375}],372:[function(require,module,exports){
(function (Buffer){
"use strict";

var inherits = require('util').inherits;

var _require = require('@ethereumjs/tx'),
    TransactionFactory = _require.TransactionFactory;

var ethUtil = require('ethereumjs-util');

var Subprovider = require('./subprovider.js');

var blockTagForPayload = require('../util/rpc-cache-utils').blockTagForPayload;

module.exports = NonceTrackerSubprovider; // handles the following RPC methods:
//   eth_getTransactionCount (pending only)
//
// observes the following RPC methods:
//   eth_sendRawTransaction
//   evm_revert (to clear the nonce cache)

inherits(NonceTrackerSubprovider, Subprovider);

function NonceTrackerSubprovider(opts) {
  var self = this;
  self.nonceCache = {};
}

NonceTrackerSubprovider.prototype.handleRequest = function (payload, next, end) {
  var self = this;

  switch (payload.method) {
    case 'eth_getTransactionCount':
      var blockTag = blockTagForPayload(payload);
      var address = payload.params[0].toLowerCase();
      var cachedResult = self.nonceCache[address]; // only handle requests against the 'pending' blockTag

      if (blockTag === 'pending') {
        // has a result
        if (cachedResult) {
          end(null, cachedResult); // fallthrough then populate cache
        } else {
          next(function (err, result, cb) {
            if (err) return cb();

            if (self.nonceCache[address] === undefined) {
              self.nonceCache[address] = result;
            }

            cb();
          });
        }
      } else {
        next();
      }

      return;

    case 'eth_sendRawTransaction':
      // allow the request to continue normally
      next(function (err, result, cb) {
        // only update local nonce if tx was submitted correctly
        if (err) return cb(); // parse raw tx

        var rawTx = payload.params[0];
        var stripped = ethUtil.stripHexPrefix(rawTx);
        var rawData = Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex');
        var tx = TransactionFactory.fromSerializedData(Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex')); // extract address

        var address = tx.getSenderAddress().toString('hex').toLowerCase(); // extract nonce and increment

        var nonce = ethUtil.bufferToInt(tx.nonce);
        nonce++; // hexify and normalize

        var hexNonce = nonce.toString(16);
        if (hexNonce.length % 2) hexNonce = '0' + hexNonce;
        hexNonce = '0x' + hexNonce; // dont update our record on the nonce until the submit was successful
        // update cache

        self.nonceCache[address] = hexNonce;
        cb();
      });
      return;
    // Clear cache on a testrpc revert

    case 'evm_revert':
      self.nonceCache = {};
      next();
      return;

    default:
      next();
      return;
  }
};

}).call(this,require("buffer").Buffer)
},{"../util/rpc-cache-utils":381,"./subprovider.js":375,"@ethereumjs/tx":60,"buffer":161,"ethereumjs-util":235,"util":360}],373:[function(require,module,exports){
"use strict";

var inherits = require('util').inherits;

var Subprovider = require('./subprovider.js'); // wraps a provider in a subprovider interface


module.exports = ProviderSubprovider;
inherits(ProviderSubprovider, Subprovider);

function ProviderSubprovider(provider) {
  if (!provider) throw new Error('ProviderSubprovider - no provider specified');
  this.provider = provider;
}

ProviderSubprovider.prototype.handleRequest = function (payload, next, end) {
  this.provider.send(payload, function (err, response) {
    if (err) return end(err);
    if (response.error) return end(new Error(response.error.message));
    end(null, response.result);
  });
};

},{"./subprovider.js":375,"util":360}],374:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* Sanitization Subprovider
 * For Parity compatibility
 * removes irregular keys
 */
var inherits = require('util').inherits;

var Subprovider = require('./subprovider.js');

var extend = require('xtend');

var ethUtil = require('ethereumjs-util');

module.exports = SanitizerSubprovider;
inherits(SanitizerSubprovider, Subprovider);

function SanitizerSubprovider(opts) {
  var self = this;
}

SanitizerSubprovider.prototype.handleRequest = function (payload, next, end) {
  var txParams = payload.params[0];

  if (_typeof(txParams) === 'object' && !Array.isArray(txParams)) {
    var sanitized = cloneTxParams(txParams);
    payload.params[0] = sanitized;
  }

  next();
}; // we use this to clean any custom params from the txParams


var permitted = ['from', 'to', 'value', 'data', 'gas', 'gasPrice', 'nonce', 'fromBlock', 'toBlock', 'address', 'topics'];

function cloneTxParams(txParams) {
  var sanitized = permitted.reduce(function (copy, permitted) {
    if (permitted in txParams) {
      if (Array.isArray(txParams[permitted])) {
        copy[permitted] = txParams[permitted].map(function (item) {
          return sanitize(item);
        });
      } else {
        copy[permitted] = sanitize(txParams[permitted]);
      }
    }

    return copy;
  }, {});
  return sanitized;
}

function sanitize(value) {
  switch (value) {
    case 'latest':
      return value;

    case 'pending':
      return value;

    case 'earliest':
      return value;

    default:
      if (typeof value === 'string') {
        return ethUtil.addHexPrefix(value.toLowerCase());
      } else {
        return value;
      }

  }
}

},{"./subprovider.js":375,"ethereumjs-util":235,"util":360,"xtend":361}],375:[function(require,module,exports){
"use strict";

var createPayload = require('../util/create-payload.js');

module.exports = SubProvider; // this is the base class for a subprovider -- mostly helpers

function SubProvider() {}

SubProvider.prototype.setEngine = function (engine) {
  var self = this;
  if (self.engine) return;
  self.engine = engine;
  engine.on('block', function (block) {
    self.currentBlock = block;
  });
  engine.on('start', function () {
    self.start();
  });
  engine.on('stop', function () {
    self.stop();
  });
};

SubProvider.prototype.handleRequest = function (payload, next, end) {
  throw new Error('Subproviders should override `handleRequest`.');
};

SubProvider.prototype.emitPayload = function (payload, cb) {
  var self = this;
  self.engine.sendAsync(createPayload(payload), cb);
}; // dummies for overriding


SubProvider.prototype.stop = function () {};

SubProvider.prototype.start = function () {};

},{"../util/create-payload.js":378}],376:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ProviderSubprovider = require('./json-rpc-engine-middleware');

var createSubscriptionManager = require('@trufflesuite/eth-json-rpc-filters/subscriptionManager');

var SubscriptionsSubprovider = /*#__PURE__*/function (_ProviderSubprovider) {
  _inherits(SubscriptionsSubprovider, _ProviderSubprovider);

  var _super = _createSuper(SubscriptionsSubprovider);

  function SubscriptionsSubprovider() {
    _classCallCheck(this, SubscriptionsSubprovider);

    return _super.call(this, function (_ref) {
      var blockTracker = _ref.blockTracker,
          provider = _ref.provider,
          engine = _ref.engine;

      var _createSubscriptionMa = createSubscriptionManager({
        blockTracker: blockTracker,
        provider: provider
      }),
          events = _createSubscriptionMa.events,
          middleware = _createSubscriptionMa.middleware; // forward subscription events on the engine


      events.on('notification', function (data) {
        return engine.emit('data', null, data);
      }); // return the subscription install/remove middleware

      return middleware;
    });
  }

  return SubscriptionsSubprovider;
}(ProviderSubprovider);

module.exports = SubscriptionsSubprovider;

},{"./json-rpc-engine-middleware":371,"@trufflesuite/eth-json-rpc-filters/subscriptionManager":88}],377:[function(require,module,exports){
(function (global){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Backoff = require('backoff');

var EventEmitter = require('events');

var inherits = require('util').inherits;

var WebSocket = global.WebSocket || require('ws');

var Subprovider = require('./subprovider');

var createPayload = require('../util/create-payload');

var WebsocketSubprovider = /*#__PURE__*/function (_Subprovider) {
  _inherits(WebsocketSubprovider, _Subprovider);

  var _super = _createSuper(WebsocketSubprovider);

  function WebsocketSubprovider(_ref) {
    var _this;

    var rpcUrl = _ref.rpcUrl,
        debug = _ref.debug,
        origin = _ref.origin;

    _classCallCheck(this, WebsocketSubprovider);

    _this = _super.call(this); // inherit from EventEmitter

    EventEmitter.call(_assertThisInitialized(_this));
    Object.defineProperties(_assertThisInitialized(_this), {
      _backoff: {
        value: Backoff.exponential({
          randomisationFactor: 0.2,
          maxDelay: 5000
        })
      },
      _connectTime: {
        value: null,
        writable: true
      },
      _log: {
        value: debug ? function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return console.info.apply(console, ['[WSProvider]'].concat(args));
        } : function () {}
      },
      _origin: {
        value: origin
      },
      _pendingRequests: {
        value: new Map()
      },
      _socket: {
        value: null,
        writable: true
      },
      _unhandledRequests: {
        value: []
      },
      _url: {
        value: rpcUrl
      }
    });
    _this._handleSocketClose = _this._handleSocketClose.bind(_assertThisInitialized(_this));
    _this._handleSocketMessage = _this._handleSocketMessage.bind(_assertThisInitialized(_this));
    _this._handleSocketOpen = _this._handleSocketOpen.bind(_assertThisInitialized(_this)); // Called when a backoff timeout has finished. Time to try reconnecting.

    _this._backoff.on('ready', function () {
      _this._openSocket();
    });

    _this._openSocket();

    return _this;
  }

  _createClass(WebsocketSubprovider, [{
    key: "handleRequest",
    value: function handleRequest(payload, next, end) {
      if (!this._socket || this._socket.readyState !== WebSocket.OPEN) {
        this._unhandledRequests.push(Array.from(arguments));

        this._log('Socket not open. Request queued.');

        return;
      }

      this._pendingRequests.set(payload.id, [payload, end]);

      var newPayload = createPayload(payload);
      delete newPayload.origin;

      this._socket.send(JSON.stringify(newPayload));

      this._log("Sent: ".concat(newPayload.method, " #").concat(newPayload.id));
    }
  }, {
    key: "_handleSocketClose",
    value: function _handleSocketClose(_ref2) {
      var reason = _ref2.reason,
          code = _ref2.code;

      this._log("Socket closed, code ".concat(code, " (").concat(reason || 'no reason', ")")); // If the socket has been open for longer than 5 seconds, reset the backoff


      if (this._connectTime && Date.now() - this._connectTime > 5000) {
        this._backoff.reset();
      }

      this._socket.removeEventListener('close', this._handleSocketClose);

      this._socket.removeEventListener('message', this._handleSocketMessage);

      this._socket.removeEventListener('open', this._handleSocketOpen);

      this._socket = null;

      this._backoff.backoff();
    }
  }, {
    key: "_handleSocketMessage",
    value: function _handleSocketMessage(message) {
      var payload;

      try {
        payload = JSON.parse(message.data);
      } catch (e) {
        this._log('Received a message that is not valid JSON:', payload);

        return;
      } // check if server-sent notification


      if (payload.id === undefined) {
        return this.engine.emit('data', null, payload);
      } // ignore if missing


      if (!this._pendingRequests.has(payload.id)) {
        return;
      } // retrieve payload + arguments


      var _this$_pendingRequest = this._pendingRequests.get(payload.id),
          _this$_pendingRequest2 = _slicedToArray(_this$_pendingRequest, 2),
          originalReq = _this$_pendingRequest2[0],
          end = _this$_pendingRequest2[1];

      this._pendingRequests["delete"](payload.id);

      this._log("Received: ".concat(originalReq.method, " #").concat(payload.id)); // forward response


      if (payload.error) {
        return end(new Error(payload.error.message));
      }

      end(null, payload.result);
    }
  }, {
    key: "_handleSocketOpen",
    value: function _handleSocketOpen() {
      var _this2 = this;

      this._log('Socket open.');

      this._connectTime = Date.now(); // Any pending requests need to be resent because our session was lost
      // and will not get responses for them in our new session.

      this._pendingRequests.forEach(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            payload = _ref4[0],
            end = _ref4[1];

        _this2._unhandledRequests.push([payload, null, end]);
      });

      this._pendingRequests.clear();

      var unhandledRequests = this._unhandledRequests.splice(0, this._unhandledRequests.length);

      unhandledRequests.forEach(function (request) {
        _this2.handleRequest.apply(_this2, request);
      });
    }
  }, {
    key: "_openSocket",
    value: function _openSocket() {
      this._log('Opening socket...');

      this._socket = new WebSocket(this._url, [], this._origin ? {
        headers: {
          origin: this._origin
        }
      } : {});

      this._socket.addEventListener('close', this._handleSocketClose);

      this._socket.addEventListener('message', this._handleSocketMessage);

      this._socket.addEventListener('open', this._handleSocketOpen);
    }
  }]);

  return WebsocketSubprovider;
}(Subprovider); // multiple inheritance


Object.assign(WebsocketSubprovider.prototype, EventEmitter.prototype);
module.exports = WebsocketSubprovider;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../util/create-payload":378,"./subprovider":375,"backoff":150,"events":237,"util":360,"ws":160}],378:[function(require,module,exports){
"use strict";

var getRandomId = require('./random-id.js');

var extend = require('xtend');

module.exports = createPayload;

function createPayload(data) {
  return extend({
    // defaults
    id: getRandomId(),
    jsonrpc: '2.0',
    params: [] // user-specified

  }, data);
}

},{"./random-id.js":380,"xtend":361}],379:[function(require,module,exports){
"use strict";

var createPayload = require('./create-payload.js');

module.exports = estimateGas;
/*

This is a work around for https://github.com/ethereum/go-ethereum/issues/2577

*/

function estimateGas(provider, txParams, cb) {
  provider.sendAsync(createPayload({
    method: 'eth_estimateGas',
    params: [txParams]
  }), function (err, res) {
    if (err) {
      // handle simple value transfer case
      if (err.message === 'no contract code at given address') {
        return cb(null, '0xcf08');
      } else {
        return cb(err);
      }
    }

    cb(null, res.result);
  });
}

},{"./create-payload.js":378}],380:[function(require,module,exports){
"use strict";

module.exports = createRandomId;

function createRandomId() {
  // random id
  return Math.floor(Number.MAX_SAFE_INTEGER * Math.random());
}

},{}],381:[function(require,module,exports){
"use strict";

var stringify = require('json-stable-stringify');

module.exports = {
  cacheIdentifierForPayload: cacheIdentifierForPayload,
  canCache: canCache,
  blockTagForPayload: blockTagForPayload,
  paramsWithoutBlockTag: paramsWithoutBlockTag,
  blockTagParamIndex: blockTagParamIndex,
  cacheTypeForPayload: cacheTypeForPayload
};

function cacheIdentifierForPayload(payload) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (!canCache(payload)) return null;
  var includeBlockRef = opts.includeBlockRef;
  var params = includeBlockRef ? payload.params : paramsWithoutBlockTag(payload);
  return payload.method + ':' + stringify(params);
}

function canCache(payload) {
  return cacheTypeForPayload(payload) !== 'never';
}

function blockTagForPayload(payload) {
  var index = blockTagParamIndex(payload); // Block tag param not passed.

  if (index >= payload.params.length) {
    return null;
  }

  return payload.params[index];
}

function paramsWithoutBlockTag(payload) {
  var index = blockTagParamIndex(payload); // Block tag param not passed.

  if (index >= payload.params.length) {
    return payload.params;
  } // eth_getBlockByNumber has the block tag first, then the optional includeTx? param


  if (payload.method === 'eth_getBlockByNumber') {
    return payload.params.slice(1);
  }

  return payload.params.slice(0, index);
}

function blockTagParamIndex(payload) {
  switch (payload.method) {
    // blockTag is third param
    case 'eth_getStorageAt':
      return 2;
    // blockTag is second param

    case 'eth_getBalance':
    case 'eth_getCode':
    case 'eth_getTransactionCount':
    case 'eth_call':
    case 'eth_estimateGas':
      return 1;
    // blockTag is first param

    case 'eth_getBlockByNumber':
      return 0;
    // there is no blockTag

    default:
      return undefined;
  }
}

function cacheTypeForPayload(payload) {
  switch (payload.method) {
    // cache permanently
    case 'web3_clientVersion':
    case 'web3_sha3':
    case 'eth_protocolVersion':
    case 'eth_getBlockTransactionCountByHash':
    case 'eth_getUncleCountByBlockHash':
    case 'eth_getCode':
    case 'eth_getBlockByHash':
    case 'eth_getTransactionByHash':
    case 'eth_getTransactionByBlockHashAndIndex':
    case 'eth_getTransactionReceipt':
    case 'eth_getUncleByBlockHashAndIndex':
    case 'eth_getCompilers':
    case 'eth_compileLLL':
    case 'eth_compileSolidity':
    case 'eth_compileSerpent':
    case 'shh_version':
      return 'perma';
    // cache until fork

    case 'eth_getBlockByNumber':
    case 'eth_getBlockTransactionCountByNumber':
    case 'eth_getUncleCountByBlockNumber':
    case 'eth_getTransactionByBlockNumberAndIndex':
    case 'eth_getUncleByBlockNumberAndIndex':
      return 'fork';
    // cache for block

    case 'eth_gasPrice':
    case 'eth_getBalance':
    case 'eth_getStorageAt':
    case 'eth_getTransactionCount':
    case 'eth_call':
    case 'eth_estimateGas':
    case 'eth_getFilterLogs':
    case 'eth_getLogs':
    case 'eth_blockNumber':
      return 'block';
    // never cache

    case 'net_version':
    case 'net_peerCount':
    case 'net_listening':
    case 'eth_syncing':
    case 'eth_sign':
    case 'eth_coinbase':
    case 'eth_mining':
    case 'eth_hashrate':
    case 'eth_accounts':
    case 'eth_sendTransaction':
    case 'eth_sendRawTransaction':
    case 'eth_newFilter':
    case 'eth_newBlockFilter':
    case 'eth_newPendingTransactionFilter':
    case 'eth_uninstallFilter':
    case 'eth_getFilterChanges':
    case 'eth_getWork':
    case 'eth_submitWork':
    case 'eth_submitHashrate':
    case 'db_putString':
    case 'db_getString':
    case 'db_putHex':
    case 'db_getHex':
    case 'shh_post':
    case 'shh_newIdentity':
    case 'shh_hasIdentity':
    case 'shh_newGroup':
    case 'shh_addToGroup':
    case 'shh_newFilter':
    case 'shh_uninstallFilter':
    case 'shh_getFilterChanges':
    case 'shh_getMessages':
      return 'never';
  }
}

},{"json-stable-stringify":260}],382:[function(require,module,exports){
"use strict";

var EventEmitter = require('events').EventEmitter;

var inherits = require('util').inherits;

module.exports = Stoplight;
inherits(Stoplight, EventEmitter);

function Stoplight() {
  var self = this;
  EventEmitter.call(self);
  self.isLocked = true;
}

Stoplight.prototype.go = function () {
  var self = this;
  self.isLocked = false;
  self.emit('unlock');
};

Stoplight.prototype.stop = function () {
  var self = this;
  self.isLocked = true;
  self.emit('lock');
};

Stoplight.prototype["await"] = function (fn) {
  var self = this;

  if (self.isLocked) {
    self.once('unlock', fn);
  } else {
    setTimeout(fn);
  }
};

},{"events":237,"util":360}],383:[function(require,module,exports){
"use strict";

var ProviderEngine = require('./index.js');

var DefaultFixture = require('./subproviders/default-fixture.js');

var NonceTrackerSubprovider = require('./subproviders/nonce-tracker.js');

var CacheSubprovider = require('./subproviders/cache.js');

var FilterSubprovider = require('./subproviders/filters');

var SubscriptionSubprovider = require('./subproviders/subscriptions');

var InflightCacheSubprovider = require('./subproviders/inflight-cache');

var HookedWalletSubprovider = require('./subproviders/hooked-wallet.js');

var SanitizingSubprovider = require('./subproviders/sanitizer.js');

var InfuraSubprovider = require('./subproviders/infura.js');

var FetchSubprovider = require('./subproviders/fetch.js');

var WebSocketSubprovider = require('./subproviders/websocket.js');

module.exports = ZeroClientProvider;

function ZeroClientProvider() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var connectionType = getConnectionType(opts);
  var engine = new ProviderEngine(opts.engineParams); // static

  var staticSubprovider = new DefaultFixture(opts["static"]);
  engine.addProvider(staticSubprovider); // nonce tracker

  engine.addProvider(new NonceTrackerSubprovider()); // sanitization

  var sanitizer = new SanitizingSubprovider();
  engine.addProvider(sanitizer); // cache layer

  var cacheSubprovider = new CacheSubprovider();
  engine.addProvider(cacheSubprovider); // filters + subscriptions
  // only polyfill if not websockets

  if (connectionType !== 'ws') {
    engine.addProvider(new SubscriptionSubprovider());
    engine.addProvider(new FilterSubprovider());
  } // inflight cache


  var inflightCache = new InflightCacheSubprovider();
  engine.addProvider(inflightCache); // id mgmt

  var idmgmtSubprovider = new HookedWalletSubprovider({
    // accounts
    getAccounts: opts.getAccounts,
    // transactions
    processTransaction: opts.processTransaction,
    approveTransaction: opts.approveTransaction,
    signTransaction: opts.signTransaction,
    publishTransaction: opts.publishTransaction,
    // messages
    // old eth_sign
    processMessage: opts.processMessage,
    approveMessage: opts.approveMessage,
    signMessage: opts.signMessage,
    // new personal_sign
    processPersonalMessage: opts.processPersonalMessage,
    processTypedMessage: opts.processTypedMessage,
    approvePersonalMessage: opts.approvePersonalMessage,
    approveTypedMessage: opts.approveTypedMessage,
    signPersonalMessage: opts.signPersonalMessage,
    signTypedMessage: opts.signTypedMessage,
    personalRecoverSigner: opts.personalRecoverSigner
  });
  engine.addProvider(idmgmtSubprovider); // data source

  var dataSubprovider = opts.dataSubprovider || createDataSubprovider(connectionType, opts);
  engine.addProvider(dataSubprovider); // start polling

  if (!opts.stopped) {
    engine.start();
  }

  return engine;
}

function createDataSubprovider(connectionType, opts) {
  var rpcUrl = opts.rpcUrl,
      debug = opts.debug; // default to infura

  if (!connectionType) {
    return new InfuraSubprovider();
  }

  if (connectionType === 'http') {
    return new FetchSubprovider({
      rpcUrl: rpcUrl,
      debug: debug
    });
  }

  if (connectionType === 'ws') {
    return new WebSocketSubprovider({
      rpcUrl: rpcUrl,
      debug: debug
    });
  }

  throw new Error("ProviderEngine - unrecognized connectionType \"".concat(connectionType, "\""));
}

function getConnectionType(_ref) {
  var rpcUrl = _ref.rpcUrl;
  if (!rpcUrl) return undefined;
  var protocol = rpcUrl.split(':')[0].toLowerCase();

  switch (protocol) {
    case 'http':
    case 'https':
      return 'http';

    case 'ws':
    case 'wss':
      return 'ws';

    default:
      throw new Error("ProviderEngine - unrecognized protocol in \"".concat(rpcUrl, "\""));
  }
}

},{"./index.js":1,"./subproviders/cache.js":363,"./subproviders/default-fixture.js":364,"./subproviders/fetch.js":365,"./subproviders/filters":366,"./subproviders/hooked-wallet.js":368,"./subproviders/inflight-cache":369,"./subproviders/infura.js":370,"./subproviders/nonce-tracker.js":372,"./subproviders/sanitizer.js":374,"./subproviders/subscriptions":376,"./subproviders/websocket.js":377}]},{},[383])(383)
});
